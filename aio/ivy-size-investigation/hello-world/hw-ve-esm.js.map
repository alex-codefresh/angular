{"version":3,"sources":["webpack:///./node_modules/@angular/core/esm5/src/util/is_dev_mode.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/property.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/stringify.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/forward_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/interface/defs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injection_token.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/interface/injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/decorators.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/metadata.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injector_compatibility.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/ng_module_factory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/metadata/view.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/global.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/misc_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/debug/debug_node.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/errors.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/errors.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/error_handler.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/noop.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render/api.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/security.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/ng_reflect.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/errors.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/change_detector_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/symbol.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/comparison.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/change_detection_util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/interface/simple_change.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/element_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/template_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/view_container_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/lang.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/component_factory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/component_factory_resolver.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/version.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/scope.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/types.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/ng_module.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/view_attach.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/refs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/provider.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isFunction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/errorObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/tryCatch.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/config.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/hostReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observer.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/toSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/canReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/pipe.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/noop.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/SubjectSubscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subject.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/event_emitter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/query_list.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/array_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/query.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/element.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/ng_content.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/text.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/view.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/pure_expression.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/services.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/entrypoint.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/i18n/tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_init.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/InnerSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/iterator.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArrayLike.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeTo.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/OuterSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/map.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeMap.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/identity.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/refCount.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/share.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/component_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/compiler.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/profile/wtf_impl.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/profile/profile.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/microtask.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/zone/ng_zone.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/testability/testability.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/merge.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeAll.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/from.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/multicast.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/default_iterable_differ.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/default_keyvalue_differ.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/iterable_differs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/keyvalue_differs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/change_detection.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/console.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_module.js.pre-build-optimizer.js","webpack:///./src/app.module.ts","webpack:///./node_modules/@angular/common/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_en.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_data.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_data_api.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/localization.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/dom_tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/common_module.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/inert_body.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/url_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/html_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/style_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/security/dom_sanitization_service.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/dom_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/dom_events.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/event_manager.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/hammer_gestures.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/platform_id.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/key_events.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/shared_styles_host.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/dom_renderer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/browser_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/location/platform_location.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/platform_core_providers.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/cookie.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/generic_browser_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/location/history.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/location/browser_platform_location.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/server-transition.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/testability.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/debug/ng_probe.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser.js.pre-build-optimizer.js","webpack:///./src/app.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app.module.ts.AppComponent.html","webpack:///./src/main.cli.ts"],"names":["_devMode","_runModeLocked","isDevMode","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","getClosureSafeProperty","objWithPropertyToExtract","key","Error","stringify","token","map","join","overriddenName","name","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","fn","defineInjectable","opts","providedIn","factory","undefined","getInjectableDef","NG_INJECTABLE_DEF","ngInjectableDef","injection_token_InjectionToken","InjectionToken","_desc","options","ngMetadataName","__NG_ELEMENT_ID__","InjectFlags","PARAMETERS","makeParamDecorator","props","parentClass","metaCtor","args","_i","values","propName","makeMetadataCtor","ParamDecoratorFactory","_a","annotationInstance","bind","ParamDecorator","annotation","cls","unusedKey","index","parameters","defineProperty","annotationCls","_injectImplementation","Inject","Optional","Self","SkipSelf","_currentInjector","setCurrentInjector","injector","former","SOURCE","_THROW_IF_NOT_FOUND","INJECTOR","injector_NullInjector","NullInjector","get","notFoundValue","injector_Injector","Injector","parent","isArray","injector_StaticInjector","providers","THROW_IF_NOT_FOUND","NULL","flags","Default","injectableDef","injectRootLimpMode","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","slice","USE_VALUE","provide","String","useValue","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","StaticInjector","source","records","_records","Map","set","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","providerDeps","j","annotations","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","tryResolveToken","depRecords","depRecord","childRecord","resolveToken","unshift","injectorErrorName","tokenPath","message","formatError","catchInjectorError","tokens","forEach","v","text","obj","charAt","substr","context","parts","JSON","replace","ng_module_factory_NgModuleRef","ng_module_factory_NgModuleFactory","ViewEncapsulation","getGlobal","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","defaultScheduler","requestAnimationFrame","setTimeout","EventListener","callback","DebugNode__PRE_R3__","nativeNode","_debugContext","listeners","debug_node_DebugElement_PRE_R3_","addChild","enumerable","configurable","component","references","providerTokens","_super","DebugElement__PRE_R3__","_this","properties","attributes","classes","styles","childNodes","nativeElement","child","removeChild","childIndex","splice","insertChildrenAfter","newChildren","siblingIndex","c","insertBefore","refChild","newChild","refIndex","query","predicate","queryAll","matches","_queryElementChildren","element","node","queryAllNodes","_queryNodeChildren","parentNode","filter","triggerEventHandler","eventName","eventObj","listener","_nativeNodeToDebugNode","getDebugNode","indexDebugNode","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","getOriginalError","defaultErrorLogger","console","error_handler_ErrorHandler","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","noop","Renderer","RendererFactory2","RendererStyleFlags2","Renderer2","SWITCH_RENDERER2_FACTORY","SecurityContext","Sanitizer","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","expressionChangedAfterItHasBeenCheckedError","oldValue","currValue","isFirstCheck","msg","err","_addDebugContext","viewDebugError","logError","viewDestroyedError","action","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","_symbolIterator","getSymbolIterator","Symbol_1","keys","getOwnPropertyNames","looseIdentical","a","isNaN","change_detection_util_devModeEqual","isListLikeIterableA","change_detection_util_isListLikeIterable","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","change_detection_util_areIterablesEqual","WrappedValue","wrapped","wrap","unwrap","isWrapped","change_detection_util_isJsObject","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ElementRef","SWITCH_ELEMENT_REF_FACTORY","template_ref_TemplateRef","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","view_container_ref_ViewContainerRef","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","isPromise","then","component_factory_ComponentRef","component_factory_ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","_NullComponentFactoryResolver","resolveComponentFactory","component_factory_resolver_ComponentFactoryResolver","ComponentFactoryResolver","CodegenComponentFactoryResolver","factories","_parent","_ngModule","_factories","componentType","component_factory_resolver_ComponentFactoryBoundToModule","ComponentFactoryBoundToModule","ngModule","selector","ngContentSelectors","inputs","outputs","projectableNodes","rootSelectorOrNode","VERSION","full","major","split","minor","patch","APP_ROOT","shiftInitState","view","priorInitState","newInitState","state","initState","initIndex","shouldCallLifecycleInitHook","asTextData","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","util_tokenKey","size","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","createRendererType2","id","encapsulation","data","util_renderCompCount","checkBinding","def","bindingIdx","oldValues","bindingIndex","checkAndUpdateBinding","checkBindingNoChanges","bindingName","bindings","nodeIndex","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","componentView","root","errorHandler","declaredViewContainer","parentNodeDef","viewParentEl","util_renderNode","renderElement","renderText","isComponentView","isEmbeddedView","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","_b","queryId","valueType","filterQueryId","splitDepsDsl","sourceName","tokenKey","getParentRenderElement","renderHost","renderParent","componentRendererType","Native","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","nextSibling","target","renderer","lastRenderRootNode","visitSiblingRenderNodes","startIndex","endIndex","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","k","renderNode","appendChild","NS_PREFIX_RE","splitNamespace","match","calcBindingFlags","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","moduleProvideDef","resolveNgModuleDep","depDef","tokenKey_1","providerDef","_def","providersByKey","providerInstance","_providers","_createProviderInstance","scope","modules","moduleTransitivelyPresent","isRoot","injectable","ctor","len","depValues","_createClass","_callFactory","ngOnDestroy","detachEmbeddedView","elementData","viewIndex","removeFromArray","view_attach_renderDetachView","renderAttachEmbeddedView","prevView","prevRenderNode","addToArray","arr","pop","EMPTY_CONTEXT","createComponentFactory","viewDefFactory","refs_ComponentFactory_","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","viewDef","componentNodeIndex","componentProvider","instance","setAttribute","refs_ComponentRef_","refs_ViewRef_","ComponentRef_","_view","_viewRef","_component","_elDef","changeDetectorRef","refs_Injector_","destroy","onDestroy","createViewContainerData","elDef","elData","refs_ViewContainerRef_","ViewContainerRef_","_data","clear","ref","attachToViewContainerRef","templateRef","viewRef","insert","createComponent","componentFactory","ngModuleRef","contextInjector","parentInjector","componentRef","destroyed","viewRef_","vcElementData","dvcElementData","projectedViews","template","_projectedViews","nodeFlags","childFlags","markNodeAsProjectedTemplate","attachProjectedView","move","currentIndex","oldViewIndex","newViewIndex","previousIndex","remove","viewData","detach","createChangeDetectorRef","ViewRef_","_viewContainerRef","_appRef","renderNodes","markForCheck","detectChanges","fs","rendererFactory","begin","end","checkNoChanges","reattach","disposables","detachView","detachFromAppRef","attachToAppRef","appRef","vcRef","createTemplateData","refs_TemplateRef_","TemplateRef_","_parentView","createInjector","Injector_","createRendererV1","refs_RendererAdapter","RendererAdapter","delegate","selectRootElement","selectorOrNode","createElement","namespaceAndName","el","createViewRoot","hostElement","createTemplateAnchor","parentElement","comment","createComment","createText","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","destroyNode","listen","listenGlobal","setElementProperty","propertyName","propertyValue","setProperty","setElementAttribute","attributeValue","ns","removeAttribute","setBindingDebugInfo","setElementClass","className","isAdd","addClass","removeClass","setElementStyle","styleName","styleValue","setStyle","removeStyle","invokeElementMethod","methodName","setText","setValue","animate","moduleType","bootstrapComponents","refs_NgModuleRef_","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","_destroyed","provDef","initNgModule","injectFlags","lifecycles","Set","has","add","callNgModuleLifecycle","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","provider_InjectorRefTokenKey","provider_INJECTORRefTokenKey","provider_directiveDef","checkIndex","prop","nonMinifiedName","securityContext","suffix","outputDefs","depDefs","outputIndex","directChildFlags","childMatchedQueries","provider_def","createProviderInstance","provider_createProviderInstance","createPipeInstance","createClass","createDirectiveInstance","output","outputObservable","subscribe","subscription","eventHandlerClosure","unsubscribe","allowPrivateServices","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","startView","searchView","findCompView","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","callLifecycleHooksChildrenFirst","parent_1","callProviderLifecycles","callElementProvidersLifecycles","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","x","isObject","isFunction","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","UnsubscriptionError","Subscription_Subscription","Subscription","closed","_parents","_subscriptions","_unsubscribe","empty","hasErrors","flattenUnsubscriptionErrors","sub","teardown","_addParent","tmp","subscriptions","subscriptionIndex","reduce","errs","tslib_es6_extendStatics","tslib_es6_extends","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","useDeprecatedSynchronousErrorHandling","hostReportError","complete","rxSubscriber","Math","random","Subscriber_Subscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","Subscriber_SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable_observable","observable","Observable_Observable","Observable","_isScalar","_subscribe","lift","operator","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","warn","promiseCtor","getPromiseCtor","resolve","reject","pipe","operations","fns","input","prev","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription_SubjectSubscription","SubjectSubscription","subject","observers","subscriberIndex","Subject_SubjectSubscriber","SubjectSubscriber","Subject_Subject","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","asObservable","AnonymousSubject","event_emitter_EventEmitter","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","query_list_QueryList","QueryList","dirty","_results","find","init","some","toArray","reset","resultsTree","list","result","item","flatten","last","first","notifyOnChanges","setDirty","queryIds","nodeMatchedQueries","tplDef","filterId","checkAndUpdateQuery","queryList","directiveInstance","newValues","elementDef","calcQueryValues","notify","binding","boundValue","bindingType","queryDef","getQueryValue","embeddedView","dvc","projectedView","queryValueType","element_elementDef","fixedAttrs","bindingDefs","_c","suffixOrSecurityContext","_d","ns_1","name_1","_e","attrs","isFilled","None","resolveRendererType2","parentEl","ShadowDom","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","renderValue","sanitizer","sanitize","STYLE","unit","appendNgContent","textDef","staticText","prefix","_addInterpolationPart","view_viewDef","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","validateNode","isComponent","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","anchorDef","createView","initView","createViewNodes","parentView","compRenderer","rendererType","createRenderer","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","changed","checkAndUpdateElementInline","checkAndUpdateTextInline","directive","ngOnChanges","ngOnInit","ngDoCheck","checkAndUpdateDirectiveInline","transform","checkAndUpdatePureExpressionInline","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","params","checkAndUpdatePureExpressionDynamic","checkAndUpdateNodeDynamic","i_1","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","initialized","createProdRootView","elInjector","createRootData","debugCreateRootView","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","debugCreateEmbeddedView","debugCreateComponentView","viewDefOverrides","debugCreateNgModuleRef","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","module","providerOverridesWithScope","calcHasOverrides","moduleSet_1","applyProviderOverrides","applyProviderOverridesToNgModule","debugOverrideProvider","debugOverrideComponentView","comp","compFactory","hostViewDef","debugClearOverrides","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","findElementIndicesWithOverwrittenProviders","applyProviderOverridesToElement","elIndex","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","_currentAction","_currentView","_currentNodeIndex","debugSetCurrentNode","debugHandleEvent","debugUpdateDirectives","nextDirectiveWithBinding","debugCheckAndUpdateNode","debugCheckNoChangesNode","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","toLowerCase","attr","services_DebugContext_","DebugContext_","elView","elOrCompView","childDef","collectReferences","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldView","oldNodeIndex","viewWrappedDebugError","getCurrentDebugContext","renderData","services_DebugRenderer2","whenRenderingDone","DebugRenderer2","debugContextFactory","delete","removeDebugNodeFromIndex","namespace","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","preserveContent","style","createNgModuleFactory","ngModuleType","defFactory","entrypoint_NgModuleFactory_","NgModuleFactory_","_ngModuleDefFactory","services","initServicesIfNeeded","from","cloneNgModuleDefinition","LOCALE_ID","APP_INITIALIZER","application_init_ApplicationInitStatus","ApplicationInitStatus","appInits","donePromise","rej","runInitializers","asyncInitPromises","initResult","all","catch","InnerSubscriber_InnerSubscriber","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToArray","array","subscribeToPromise","promise","iterator_getSymbolIterator","iterator_iterator","subscribeToIterable","iterable","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise_isPromise","subscribeTo","OuterSubscriber_OuterSubscriber","OuterSubscriber","innerValue","innerIndex","innerSub","MapOperator","project","thisArg","map_MapSubscriber","MapSubscriber","count","fromArray","scheduler","schedule","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","shift","identity","refCount","RefCountOperator","connectable","_refCount","refCounter","refCount_RefCountSubscriber","connection","connect","RefCountSubscriber","sharedConnection","_connection","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableObservable_ConnectableSubscriber","connectableObservableDescriptor","writable","ConnectableSubscriber","shareSubjectFactory","APP_ID","_appIdRandomProviderFactory","_randomChar","fromCharCode","floor","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","SCHEDULER","_throwError","trace","events","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","CompilerFactory","detectWTF","wtf","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","signature","createScope","wtfLeave","returnValue","leaveScope","microtask_promise","scheduleMicroTask","Zone","current","ng_zone_NgZone","NgZone","zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","ng_zone_noop","cancelTask","runGuarded","_platform","ng_zone_NoopNgZone","NoopNgZone","testability_Testability","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","testability_TestabilityRegistry","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","decorators","desc","getOwnPropertyDescriptor","decorate","__decorate","_NoopGetTestability","registry","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatformFactory","parentPlatformFactory","marker","extraProviders","platform","getPlatform","injectedProviders","application_ref_PlatformRef","inits","createPlatform","requiredToken","assertPlatform","PlatformRef","_injector","_modules","bootstrapModuleFactory","moduleFactory","ngZoneOption","ngZone","ngZoneInjector","moduleRef","exceptionHandler","initStatus","_moduleDoBootstrap","_callAndReportToErrorHandler","bootstrapModule","compilerOptions","optionsReducer","createCompiler","compileNgModuleFactory","application_ref_ApplicationRef","f","bootstrap","ngDoBootstrap","dst","objs","ApplicationRef","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","components","tick","isCurrentlyStable","stableSub","unstableSub","observables","mergeMap","resultSelector","map_map","ii","mergeAll","merge","subjectOrSubjectFactory","ApplicationRef_1","componentOrFactory","compRef","_unloadComponent","location","_loadComponent","log","e_1","e_2","_tickScope","e_1_1","_f","e_2_1","attachView","default_iterable_differ_DefaultIterableDifferFactory","DefaultIterableDifferFactory","supports","trackByFn","default_iterable_differ_DefaultIterableDiffer","trackByIdentity","DefaultIterableDiffer","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","getPreviousIndex","adjPreviousIndex","_nextRemoved","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","change_detection_util_iterateListLike","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","default_iterable_differ_DuplicateItemRecordList","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","default_keyvalue_differ_DefaultKeyValueDifferFactory","DefaultKeyValueDifferFactory","default_keyvalue_differ_DefaultKeyValueDiffer","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","newValue","_addToChanges","iterable_differs_IterableDiffers","IterableDiffers","copied","extend","keyvalue_differs_KeyValueDiffers","KeyValueDiffers","kv","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","Console","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","locale","zoneSchedulerFactory","queue","ApplicationModule","AppComponent","AppModule","tslib_tslib_es6_extendStatics","tslib_tslib_es6_read","u","locale_en","abs","LOCALE_DATA","Plural","DEPRECATED_PLURAL_FN","NgLocalization","localization_NgLocaleLocalization","NgLocaleLocalization","deprecatedPluralFn","tslib_tslib_es6_extends","getPluralCategory","normalizedLocale","parentLocale","findLocaleData","getLocalePluralCase","Zero","One","Two","Few","Many","DOCUMENT","CommonModule","node_modules_tslib_tslib_es6_extendStatics","node_modules_tslib_tslib_es6_extends","node_modules_tslib_tslib_es6_assign","node_modules_tslib_tslib_es6_metadata","node_modules_tslib_tslib_es6_read","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","querySelector","getInertBodyElement","DOMParser","isDOMParserAvailable","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","firstChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","elAttrs","attrName","childNode","nodeType","Node","ELEMENT_NODE","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","tagSet","tags","html_sanitizer_merge","sets","sets_1","sets_1_1","inertBodyHelper","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","html_sanitizer_SanitizingHtmlSerializer","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","tagName","nodeName","srcset","elAttr","lower","trim","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","charCodeAt","getTemplateContent","isTemplateElement","content","SAFE_STYLE_VALUE","RegExp","URL_RE","DomSanitizer","dom_sanitization_service_DomSanitizerImpl","DomSanitizerImpl","_doc","ctx","NONE","HTML","dom_sanitization_service_SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","_sanitizeHtml","dom_sanitization_service_SafeStyleImpl","urlMatch","outsideSingle","outsideDouble","hasBalancedQuotes","_sanitizeStyle","SCRIPT","dom_sanitization_service_SafeScriptImpl","URL","dom_sanitization_service_SafeResourceUrlImpl","dom_sanitization_service_SafeUrlImpl","RESOURCE_URL","expectedType","SafeValueImpl","getTypeName","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","SafeHtmlImpl","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","_DOM","getDOM","blackListedMap","DomAdapter","resourceLoaderType","_attrToPropMap","EVENT_MANAGER_PLUGINS","EventManager","plugins","_eventNameToPlugin","manager","_plugins","reverse","addEventListener","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","event_manager_EventManagerPlugin","EventManagerPlugin","getGlobalEventTarget","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","overrides","buildHammer","mc","Hammer","enable","hammer_gestures_HammerGesturesPlugin","HammerGesturesPlugin","doc","_config","loader","isCustomEvent","cancelRegistration_1","deregister_1","on","off","PLATFORM_SERVER_ID","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","stopSymbol","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","dom_events_DomEventsPlugin","DomEventsPlugin","platformId","isPlatformServer","patchEvent","Event","stopImmediatePropagation","globalListenerRegistered","callbackRegistered","removeEventListener","underlyingRemove","found","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","meta","metaKey","shiftKey","key_events_KeyEventsPlugin","KeyEventsPlugin","KeyEventsPlugin_1","parseEventName","parsedEvent","outsideHandler","eventCallback","onAndCancel","domEventName","_normalizeKey","fullKey","modifierName","getEventFullKey","getEventKey","modifierGetter","keyName","SharedStylesHost","_stylesSet","addStyles","additions","onStylesAdded","getAllStyles","shared_styles_host_DomSharedStylesHost","DomSharedStylesHost","_hostNodes","_styleNodes","head","_addStylesToHost","host","styleEl","textContent","addHost","hostNode","removeHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","preventDefault","dom_renderer_DomRendererFactory2","DomRendererFactory2","eventManager","sharedStylesHost","rendererByCompId","defaultRenderer","dom_renderer_DefaultDomRenderer2","Emulated","dom_renderer_EmulatedEncapsulationDomRenderer2","applyToHost","dom_renderer_ShadowDomRenderer","DefaultDomRenderer2","document","createElementNS","createTextNode","namespaceUri","setAttributeNS","removeAttributeNS","classList","DashCase","Important","removeProperty","checkNoSyntheticProp","AT_CHARCODE","nameKind","nodeContains","EmulatedEncapsulationDomRenderer2","contentAttr","hostAttr","ShadowDomRenderer","hostEl","shadowRoot","attachShadow","mode","createShadowRoot","nodeOrShadowRoot","PlatformLocation","platformCore","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","","contains","urlParsingNode","browser_adapter_BrowserDomAdapter","BrowserDomAdapter","parse","templateHtml","makeCurrent","adapter","hasProperty","getProperty","node_modules_tslib_tslib_es6_spread","logGroup","group","logGroupEnd","groupEnd","nodeA","nodeB","querySelectorAll","evt","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","isPrevented","defaultPrevented","getInnerHTML","getOuterHTML","childNodesAsList","clearNodes","replaceChild","insertAllBefore","insertAfter","setInnerHTML","getText","getValue","getChecked","checked","setChecked","createTemplate","createScriptTag","attrValue","createStyleElement","css","getShadowRoot","getHost","clone","cloneNode","getElementsByClassName","getElementsByTagName","hasClass","stylename","getStyle","hasStyle","attributeMap","attrib","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","templateAwareRoot","createHtmlDocument","getBoundingClientRect","top","bottom","left","right","width","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","msMatchesSelector","webkitMatchesSelector","isTextNode","isCommentNode","COMMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","keyIdentifier","startsWith","parseInt","getHistory","history","getLocation","getBaseHref","href","baseElement","pathname","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","Date","getTime","supportsCookies","getCookie","cookieStr","encodeURIComponent","tslib_tslib_es6_values","cookie","eqIndex","cookieValue","decodeURIComponent","parseCookieValue","setCookie","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","resolveAndSetHref","baseUrl","supportsDOMEvents","supportsNativeShadowDOM","getAnimationPrefix","getTransitionEnd","supportsAnimation","supportsState","pushState","browser_platform_location_BrowserPlatformLocation","BrowserPlatformLocation","_init","decorator","_history","getBaseHrefFromDOM","onPopState","onHashChange","newPath","search","hash","replaceState","forward","back","node_modules_tslib_tslib_es6_decorate","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","testability_BrowserGetTestability","BrowserGetTestability","getter","testabilities","didWork","decrement","didWork_","exportNgVar","COMPILED","CORE_TOKENS","inspectNativeElement","platformBrowser","browser_errorHandler","browser_BrowserModule","BrowserModule","parentModule","BrowserModule_1","withServerTransition","appId","AppModuleNgFactory","_l","ng_module_moduleDef","AppComponentNgFactory","p0_0","p0_1","p0_2","p1_0","p2_0","p2_1","p2_2","p2_3","coreTokens","RenderType_AppComponent","View_AppComponent_0","View_AppComponent_Host_0","enableProdMode"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nvar _devMode = true;\nvar _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNfZGV2X21vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL2lzX2Rldl9tb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7OztHQUtHO0FBRUgsSUFBSSxRQUFRLEdBQVksSUFBSSxDQUFDO0FBQzdCLElBQUksY0FBYyxHQUFZLEtBQUssQ0FBQztBQUdwQzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVM7SUFDdkIsY0FBYyxHQUFHLElBQUksQ0FBQztJQUN0QixPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGNBQWM7SUFDNUIsSUFBSSxjQUFjLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIHRvIGNvbnRyb2wgaWYgdGhlIGRlZmF1bHQgcmVuZGVyaW5nIHBpcGVsaW5lIHNob3VsZCBiZSBgVmlld0VuZ2luZWAgb3IgYEl2eWAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIHJ1biBhbmQgZGVidWcgdGVzdHMgd2l0aCBlaXRoZXIgSXZ5IG9yIFZpZXcgRW5naW5lIChsZWdhY3kpLFxuICogcGxlYXNlIHNlZSBbQkFaRUwubWRdKC4vZG9jcy9CQVpFTC5tZCkuXG4gKi9cblxubGV0IF9kZXZNb2RlOiBib29sZWFuID0gdHJ1ZTtcbmxldCBfcnVuTW9kZUxvY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIEFuZ3VsYXIgaXMgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gQWZ0ZXIgY2FsbGVkIG9uY2UsXG4gKiB0aGUgdmFsdWUgaXMgbG9ja2VkIGFuZCB3b24ndCBjaGFuZ2UgYW55IG1vcmUuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyBpcyB0cnVlLCB1bmxlc3MgYSB1c2VyIGNhbGxzIGBlbmFibGVQcm9kTW9kZWAgYmVmb3JlIGNhbGxpbmcgdGhpcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rldk1vZGUoKTogYm9vbGVhbiB7XG4gIF9ydW5Nb2RlTG9ja2VkID0gdHJ1ZTtcbiAgcmV0dXJuIF9kZXZNb2RlO1xufVxuXG4vKipcbiAqIERpc2FibGUgQW5ndWxhcidzIGRldmVsb3BtZW50IG1vZGUsIHdoaWNoIHR1cm5zIG9mZiBhc3NlcnRpb25zIGFuZCBvdGhlclxuICogY2hlY2tzIHdpdGhpbiB0aGUgZnJhbWV3b3JrLlxuICpcbiAqIE9uZSBpbXBvcnRhbnQgYXNzZXJ0aW9uIHRoaXMgZGlzYWJsZXMgdmVyaWZpZXMgdGhhdCBhIGNoYW5nZSBkZXRlY3Rpb24gcGFzc1xuICogZG9lcyBub3QgcmVzdWx0IGluIGFkZGl0aW9uYWwgY2hhbmdlcyB0byBhbnkgYmluZGluZ3MgKGFsc28ga25vd24gYXNcbiAqIHVuaWRpcmVjdGlvbmFsIGRhdGEgZmxvdykuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUHJvZE1vZGUoKTogdm9pZCB7XG4gIGlmIChfcnVuTW9kZUxvY2tlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuYWJsZSBwcm9kIG1vZGUgYWZ0ZXIgcGxhdGZvcm0gc2V0dXAuJyk7XG4gIH1cbiAgX2Rldk1vZGUgPSBmYWxzZTtcbn0iXX0=","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL3Byb3BlcnR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sVUFBVSxzQkFBc0IsQ0FBSSx3QkFBMkI7SUFDbkUsS0FBSyxJQUFJLEdBQUcsSUFBSSx3QkFBd0IsRUFBRTtRQUN4QyxJQUFJLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxLQUFLLHNCQUE2QixFQUFFO1lBQ25FLE9BQU8sR0FBRyxDQUFDO1NBQ1o7S0FDRjtJQUNELE1BQU0sS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUErQixFQUFFLE1BQStCO0lBQzdGLEtBQUssSUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3N1cmVTYWZlUHJvcGVydHk8VD4ob2JqV2l0aFByb3BlcnR5VG9FeHRyYWN0OiBUKTogc3RyaW5nIHtcbiAgZm9yIChsZXQga2V5IGluIG9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdCkge1xuICAgIGlmIChvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3Rba2V5XSA9PT0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSBhcyBhbnkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHRocm93IEVycm9yKCdDb3VsZCBub3QgZmluZCByZW5hbWVkIHByb3BlcnR5IG9uIHRhcmdldCBvYmplY3QuJyk7XG59XG5cbi8qKlxuICogU2V0cyBwcm9wZXJ0aWVzIG9uIGEgdGFyZ2V0IG9iamVjdCBmcm9tIGEgc291cmNlIG9iamVjdCwgYnV0IG9ubHkgaWZcbiAqIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gc2V0IHByb3BlcnRpZXMgb25cbiAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvZiB0aGUgcHJvcGVydHkga2V5cyBhbmQgdmFsdWVzIHRvIHNldFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbFByb3BlcnRpZXModGFyZ2V0OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSwgc291cmNlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkge1xuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkgJiYgIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5naWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zdHJpbmdpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7UUFDMUIsT0FBTyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztLQUNuQjtJQUVELElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtRQUN4QixPQUFPLEtBQUcsS0FBSyxDQUFDLGNBQWdCLENBQUM7S0FDbEM7SUFFRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDZCxPQUFPLEtBQUcsS0FBSyxDQUFDLElBQU0sQ0FBQztLQUN4QjtJQUVELElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUU3QixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUM7S0FDakI7SUFFRCxJQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkodG9rZW46IGFueSk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgaWYgKHRva2VuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gJ1snICsgdG9rZW4ubWFwKHN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgfVxuXG4gIGlmICh0b2tlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgdG9rZW47XG4gIH1cblxuICBpZiAodG9rZW4ub3ZlcnJpZGRlbk5hbWUpIHtcbiAgICByZXR1cm4gYCR7dG9rZW4ub3ZlcnJpZGRlbk5hbWV9YDtcbiAgfVxuXG4gIGlmICh0b2tlbi5uYW1lKSB7XG4gICAgcmV0dXJuIGAke3Rva2VuLm5hbWV9YDtcbiAgfVxuXG4gIGNvbnN0IHJlcyA9IHRva2VuLnRvU3RyaW5nKCk7XG5cbiAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgcmVzO1xuICB9XG5cbiAgY29uc3QgbmV3TGluZUluZGV4ID0gcmVzLmluZGV4T2YoJ1xcbicpO1xuICByZXR1cm4gbmV3TGluZUluZGV4ID09PSAtMSA/IHJlcyA6IHJlcy5zdWJzdHJpbmcoMCwgbmV3TGluZUluZGV4KTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\nvar __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () { return stringify(this()); };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef(type) {\n    var fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZF9yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9mb3J3YXJkX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFlNUMsSUFBTSxlQUFlLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxlQUFlLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDO0FBRTFGOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxZQUEwQjtJQUM3QyxZQUFhLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQztJQUMzQyxZQUFhLENBQUMsUUFBUSxHQUFHLGNBQWEsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxPQUF3QixZQUFhLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBSSxJQUFPO0lBQzFDLElBQU0sRUFBRSxHQUFRLElBQUksQ0FBQztJQUNyQixJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUM5RCxFQUFFLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtRQUNyQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7Z2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0gZnJvbSAnLi4vdXRpbC9wcm9wZXJ0eSc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuXG5cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCBhIGZ1bmN0aW9uIHBhc3NlZCBpbnRvIHtAbGluayBmb3J3YXJkUmVmfSBoYXMgdG8gaW1wbGVtZW50LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2ZvcndhcmRfcmVmL2ZvcndhcmRfcmVmX3NwZWMudHMgcmVnaW9uPSdmb3J3YXJkX3JlZl9mbid9XG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9yd2FyZFJlZkZuIHsgKCk6IGFueTsgfVxuXG5jb25zdCBfX2ZvcndhcmRfcmVmX18gPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtfX2ZvcndhcmRfcmVmX186IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcblxuLyoqXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYGZvcndhcmRSZWZgIGlzIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSBuZWVkIHRvIHJlZmVyIHRvIGZvciB0aGUgcHVycG9zZXMgb2ZcbiAqIERJIGlzIGRlY2xhcmVkLCBidXQgbm90IHlldCBkZWZpbmVkLiBJdCBpcyBhbHNvIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSB1c2Ugd2hlbiBjcmVhdGluZ1xuICogYSBxdWVyeSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9mb3J3YXJkX3JlZi9mb3J3YXJkX3JlZl9zcGVjLnRzIHJlZ2lvbj0nZm9yd2FyZF9yZWYnfVxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihmb3J3YXJkUmVmRm46IEZvcndhcmRSZWZGbik6IFR5cGU8YW55PiB7XG4gICg8YW55PmZvcndhcmRSZWZGbikuX19mb3J3YXJkX3JlZl9fID0gZm9yd2FyZFJlZjtcbiAgKDxhbnk+Zm9yd2FyZFJlZkZuKS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5naWZ5KHRoaXMoKSk7IH07XG4gIHJldHVybiAoPFR5cGU8YW55Pj48YW55PmZvcndhcmRSZWZGbik7XG59XG5cbi8qKlxuICogTGF6aWx5IHJldHJpZXZlcyB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYSBmb3J3YXJkUmVmLlxuICpcbiAqIEFjdHMgYXMgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIHdoZW4gZ2l2ZW4gYSBub24tZm9yd2FyZC1yZWYgdmFsdWUuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvZm9yd2FyZF9yZWYvZm9yd2FyZF9yZWZfc3BlYy50cyByZWdpb249J3Jlc29sdmVfZm9yd2FyZF9yZWYnfVxuICpcbiAqIEBzZWUgYGZvcndhcmRSZWZgXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRm9yd2FyZFJlZjxUPih0eXBlOiBUKTogVCB7XG4gIGNvbnN0IGZuOiBhbnkgPSB0eXBlO1xuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuLmhhc093blByb3BlcnR5KF9fZm9yd2FyZF9yZWZfXykgJiZcbiAgICAgIGZuLl9fZm9yd2FyZF9yZWZfXyA9PT0gZm9yd2FyZFJlZikge1xuICAgIHJldHVybiBmbigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../../util/property';\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport function defineInjectable(opts) {\n    return {\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\n    };\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport function defineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport function getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport function getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nexport var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nexport var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './interface/defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nvar InjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\nexport { InjectionToken };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uX3Rva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZGkvaW5qZWN0aW9uX3Rva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUlILE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFDSDtJQU1FLHdCQUFzQixLQUFhLEVBQUUsT0FHcEM7UUFIcUIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUxuQyxnQkFBZ0I7UUFDUCxtQkFBYyxHQUFHLGdCQUFnQixDQUFDO1FBUXpDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksT0FBTyxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzlCLHVFQUF1RTtZQUN2RSxpRUFBaUU7WUFDakUsdUVBQXVFO1lBQ3RFLElBQVksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUM7U0FDM0M7YUFBTSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztnQkFDdEMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksTUFBTTtnQkFDeEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQ3pCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELGlDQUFRLEdBQVIsY0FBcUIsT0FBTyxvQkFBa0IsSUFBSSxDQUFDLEtBQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0QscUJBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcblxuaW1wb3J0IHtkZWZpbmVJbmplY3RhYmxlfSBmcm9tICcuL2ludGVyZmFjZS9kZWZzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBpbiBhIERJIFByb3ZpZGVyLlxuICpcbiAqIFVzZSBhbiBgSW5qZWN0aW9uVG9rZW5gIHdoZW5ldmVyIHRoZSB0eXBlIHlvdSBhcmUgaW5qZWN0aW5nIGlzIG5vdCByZWlmaWVkIChkb2VzIG5vdCBoYXZlIGFcbiAqIHJ1bnRpbWUgcmVwcmVzZW50YXRpb24pIHN1Y2ggYXMgd2hlbiBpbmplY3RpbmcgYW4gaW50ZXJmYWNlLCBjYWxsYWJsZSB0eXBlLCBhcnJheSBvclxuICogcGFyYW1ldGVyaXplZCB0eXBlLlxuICpcbiAqIGBJbmplY3Rpb25Ub2tlbmAgaXMgcGFyYW1ldGVyaXplZCBvbiBgVGAgd2hpY2ggaXMgdGhlIHR5cGUgb2Ygb2JqZWN0IHdoaWNoIHdpbGwgYmUgcmV0dXJuZWQgYnlcbiAqIHRoZSBgSW5qZWN0b3JgLiBUaGlzIHByb3ZpZGVzIGFkZGl0aW9uYWwgbGV2ZWwgb2YgdHlwZSBzYWZldHkuXG4gKlxuICogYGBgXG4gKiBpbnRlcmZhY2UgTXlJbnRlcmZhY2Ugey4uLn1cbiAqIHZhciBteUludGVyZmFjZSA9IGluamVjdG9yLmdldChuZXcgSW5qZWN0aW9uVG9rZW48TXlJbnRlcmZhY2U+KCdTb21lVG9rZW4nKSk7XG4gKiAvLyBteUludGVyZmFjZSBpcyBpbmZlcnJlZCB0byBiZSBNeUludGVyZmFjZS5cbiAqIGBgYFxuICpcbiAqIFdoZW4gY3JlYXRpbmcgYW4gYEluamVjdGlvblRva2VuYCwgeW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIHJldHVybnNcbiAqIChwb3NzaWJseSBieSBjcmVhdGluZykgYSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXJpemVkIHR5cGUgYFRgLiBUaGlzIHNldHMgdXAgdGhlXG4gKiBgSW5qZWN0aW9uVG9rZW5gIHVzaW5nIHRoaXMgZmFjdG9yeSBhcyBhIHByb3ZpZGVyIGFzIGlmIGl0IHdhcyBkZWZpbmVkIGV4cGxpY2l0bHkgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbidzIHJvb3QgaW5qZWN0b3IuIElmIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLCB3aGljaCB0YWtlcyB6ZXJvIGFyZ3VtZW50cywgbmVlZHMgdG8gaW5qZWN0XG4gKiBkZXBlbmRlbmNpZXMsIGl0IGNhbiBkbyBzbyB1c2luZyB0aGUgYGluamVjdGAgZnVuY3Rpb24uIFNlZSBiZWxvdyBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGlmIGEgYGZhY3RvcnlgIGlzIHNwZWNpZmllZCB5b3UgY2FuIGFsc28gc3BlY2lmeSB0aGUgYHByb3ZpZGVkSW5gIG9wdGlvbiwgd2hpY2hcbiAqIG92ZXJyaWRlcyB0aGUgYWJvdmUgYmVoYXZpb3IgYW5kIG1hcmtzIHRoZSB0b2tlbiBhcyBiZWxvbmdpbmcgdG8gYSBwYXJ0aWN1bGFyIGBATmdNb2R1bGVgLiBBc1xuICogbWVudGlvbmVkIGFib3ZlLCBgJ3Jvb3QnYCBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgYHByb3ZpZGVkSW5gLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgQmFzaWMgRXhhbXBsZVxuICpcbiAqICMjIyBQbGFpbiBJbmplY3Rpb25Ub2tlblxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdJbmplY3Rpb25Ub2tlbid9XG4gKlxuICogIyMjIFRyZWUtc2hha2FibGUgSW5qZWN0aW9uVG9rZW5cbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nU2hha2FibGVJbmplY3Rpb25Ub2tlbid9XG4gKlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIEluamVjdGlvblRva2VuPFQ+IHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICByZWFkb25seSBuZ01ldGFkYXRhTmFtZSA9ICdJbmplY3Rpb25Ub2tlbic7XG5cbiAgcmVhZG9ubHkgbmdJbmplY3RhYmxlRGVmOiBuZXZlcnx1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9kZXNjOiBzdHJpbmcsIG9wdGlvbnM/OiB7XG4gICAgcHJvdmlkZWRJbj86IFR5cGU8YW55PnwgJ3Jvb3QnIHwgbnVsbCxcbiAgICBmYWN0b3J5OiAoKSA9PiBUXG4gIH0pIHtcbiAgICB0aGlzLm5nSW5qZWN0YWJsZURlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGhhY2sgdG8gYXNzaWduIF9fTkdfRUxFTUVOVF9JRF9fIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICAvLyBfX05HX0VMRU1FTlRfSURfXyBpcyBVc2VkIGJ5IEl2eSB0byBkZXRlcm1pbmUgYmxvb20gZmlsdGVyIGlkLlxuICAgICAgLy8gV2UgYXJlIHVzaW5nIGl0IHRvIGFzc2lnbiBgLTFgIHdoaWNoIGlzIHVzZWQgdG8gaWRlbnRpZnkgYEluamVjdG9yYC5cbiAgICAgICh0aGlzIGFzIGFueSkuX19OR19FTEVNRU5UX0lEX18gPSBvcHRpb25zO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm5nSW5qZWN0YWJsZURlZiA9IGRlZmluZUluamVjdGFibGUoe1xuICAgICAgICBwcm92aWRlZEluOiBvcHRpb25zLnByb3ZpZGVkSW4gfHwgJ3Jvb3QnLFxuICAgICAgICBmYWN0b3J5OiBvcHRpb25zLmZhY3RvcnksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gYEluamVjdGlvblRva2VuICR7dGhpcy5fZGVzY31gOyB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0YWJsZURlZlRva2VuPFQ+IGV4dGVuZHMgSW5qZWN0aW9uVG9rZW48VD4geyBuZ0luamVjdGFibGVEZWY6IG5ldmVyOyB9XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport var InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9pbnRlcmZhY2UvaW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0g7Ozs7R0FJRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBZ0JYO0FBaEJELFdBQVksV0FBVztJQUNyQixnR0FBZ0c7SUFFaEcscURBQXFEO0lBQ3JELG1EQUFnQixDQUFBO0lBQ2hCOzs7T0FHRztJQUNILDZDQUFhLENBQUE7SUFDYixrRUFBa0U7SUFDbEUsNkNBQWEsQ0FBQTtJQUNiLGtEQUFrRDtJQUNsRCxxREFBaUIsQ0FBQTtJQUNqQix3REFBd0Q7SUFDeEQscURBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQWhCVyxXQUFXLEtBQVgsV0FBVyxRQWdCdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuLyoqXG4gKiBJbmplY3Rpb24gZmxhZ3MgZm9yIERJLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGVudW0gSW5qZWN0RmxhZ3Mge1xuICAvLyBUT0RPKGFseGh1Yik6IG1ha2UgdGhpcyAnY29uc3QnIHdoZW4gbmdjIG5vIGxvbmdlciB3cml0ZXMgZXhwb3J0cyBvZiBpdCBpbnRvIG5nZmFjdG9yeSBmaWxlcy5cblxuICAvKiogQ2hlY2sgc2VsZiBhbmQgY2hlY2sgcGFyZW50IGluamVjdG9yIGlmIG5lZWRlZCAqL1xuICBEZWZhdWx0ID0gMGIwMDAwLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoYXQgYW4gaW5qZWN0b3Igc2hvdWxkIHJldHJpZXZlIGEgZGVwZW5kZW5jeSBmcm9tIGFueSBpbmplY3RvciB1bnRpbCByZWFjaGluZyB0aGVcbiAgICogaG9zdCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gKE9ubHkgdXNlZCB3aXRoIEVsZW1lbnQgSW5qZWN0b3IpXG4gICAqL1xuICBIb3N0ID0gMGIwMDAxLFxuICAvKiogRG9uJ3QgYXNjZW5kIHRvIGFuY2VzdG9ycyBvZiB0aGUgbm9kZSByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2VsZiA9IDBiMDAxMCxcbiAgLyoqIFNraXAgdGhlIG5vZGUgdGhhdCBpcyByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2tpcFNlbGYgPSAwYjAxMDAsXG4gIC8qKiBJbmplY3QgYGRlZmF1bHRWYWx1ZWAgaW5zdGVhZCBpZiB0b2tlbiBub3QgZm91bmQuICovXG4gIE9wdGlvbmFsID0gMGIxMDAwLFxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nexport var ANNOTATIONS = '__annotations__';\nexport var PARAMETERS = '__parameters__';\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    var metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, tslib_1.__spread([this], args));\n            return this;\n        }\n        var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, tslib_1.__spread([cls], args));\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            var values = props.apply(void 0, tslib_1.__spread(args));\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nexport function makeParamDecorator(name, props, parentClass) {\n    var metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    var metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        function PropDecorator(target, name) {\n            var constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, tslib_1.__spread([target, name], args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { makeParamDecorator } from '../util/decorators';\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Optional = makeParamDecorator('Optional');\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Self = makeParamDecorator('Self');\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var SkipSelf = makeParamDecorator('SkipSelf');\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Host = makeParamDecorator('Host');\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util/stringify';\nimport { getInjectableDef } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nvar _currentInjector = undefined;\nexport function setCurrentInjector(injector) {\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nvar _injectImplementation;\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(impl) {\n    var previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\nexport function injectInjectorOnly(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport function injectRootLimpMode(token, notFoundValue, flags) {\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n}\nexport function injectArgs(types) {\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            var type = undefined;\n            var flags = InjectFlags.Default;\n            for (var j = 0; j < arg.length; j++) {\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(type, flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { inject } from './injector_compatibility';\nimport { defineInjectable } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nexport var SOURCE = '__source';\nvar _THROW_IF_NOT_FOUND = new Object();\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n);\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    NullInjector.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    Injector.create = function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */\n    Injector.ngInjectableDef = defineInjectable({\n        providedIn: 'any',\n        factory: function () { return inject(INJECTOR); },\n    });\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Injector.__NG_ELEMENT_ID__ = -1;\n    return Injector;\n}());\nexport { Injector };\nvar IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\nvar EMPTY = [];\nvar CIRCULAR = IDENT;\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nvar NG_TOKEN_PATH = 'ngTokenPath';\nexport var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nvar NULL_INJECTOR = Injector.NULL;\nvar NEW_LINE = /\\n/gm;\nvar NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        var records = this._records = new Map();\n        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        recursivelyProcessProviders(records, providers);\n    }\n    StaticInjector.prototype.get = function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    };\n    StaticInjector.prototype.toString = function () {\n        var tokens = [], records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nfunction resolveProvider(provider) {\n    var deps = computeDeps(provider);\n    var fn = IDENT;\n    var value = EMPTY;\n    var useNew = false;\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = provider.useValue;\n    }\n    else if (provider.useFactory) {\n        fn = provider.useFactory;\n    }\n    else if (provider.useExisting) {\n        // Just use IDENT\n    }\n    else if (provider.useClass) {\n        useNew = true;\n        fn = resolveForwardRef(provider.useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            var token = resolveForwardRef(provider.provide);\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = {\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    var value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            var obj = undefined;\n            var useNew = record.useNew;\n            var fn = record.fn;\n            var depRecords = record.deps;\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    var depRecord = depRecords[i];\n                    var options = depRecord.options;\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, tslib_1.__spread([void 0], deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\nfunction computeDeps(provider) {\n    var deps = EMPTY;\n    var providerDeps = provider.deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            var options = 6 /* Default */;\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = annotation.token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if (provider.useExisting) {\n        var token = resolveForwardRef(provider.useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\nexport function catchInjectorError(e, token, injectorErrorName, source) {\n    var tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        var parts = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nvar NgModuleRef = /** @class */ (function () {\n    function NgModuleRef() {\n    }\n    return NgModuleRef;\n}());\nexport { NgModuleRef };\n/**\n * @publicApi\n */\nvar NgModuleFactory = /** @class */ (function () {\n    function NgModuleFactory() {\n    }\n    return NgModuleFactory;\n}());\nexport { NgModuleFactory };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfbW9kdWxlX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBUUg7Ozs7Ozs7R0FPRztBQUNIO0lBQUE7SUEwQkEsQ0FBQztJQUFELGtCQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQzs7QUFRRDs7R0FFRztBQUNIO0lBQUE7SUFHQSxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyfSBmcm9tICcuL2NvbXBvbmVudF9mYWN0b3J5X3Jlc29sdmVyJztcblxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW5zdGFuY2Ugb2YgYW4gTmdNb2R1bGUgY3JlYXRlZCB2aWEgYSB7QGxpbmsgTmdNb2R1bGVGYWN0b3J5fS5cbiAqXG4gKiBgTmdNb2R1bGVSZWZgIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgTmdNb2R1bGUgSW5zdGFuY2UgYXMgd2VsbCBvdGhlciBvYmplY3RzIHJlbGF0ZWQgdG8gdGhpc1xuICogTmdNb2R1bGUgSW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmdNb2R1bGVSZWY8VD4ge1xuICAvKipcbiAgICogVGhlIGluamVjdG9yIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBwcm92aWRlcnMgb2YgdGhlIE5nTW9kdWxlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGluamVjdG9yKCk6IEluamVjdG9yO1xuXG4gIC8qKlxuICAgKiBUaGUgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHRvIGdldCBob2xkIG9mIHRoZSBDb21wb25lbnRGYWN0b3JpZXNcbiAgICogZGVjbGFyZWQgaW4gdGhlIGBlbnRyeUNvbXBvbmVudHNgIHByb3BlcnR5IG9mIHRoZSBtb2R1bGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcblxuICAvKipcbiAgICogVGhlIE5nTW9kdWxlIGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGluc3RhbmNlKCk6IFQ7XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBtb2R1bGUgaW5zdGFuY2UgYW5kIGFsbCBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICovXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIHJlZ2lzdGVyIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBtb2R1bGUgaXMgZGVzdHJveWVkLlxuICAgKi9cbiAgYWJzdHJhY3Qgb25EZXN0cm95KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbE5nTW9kdWxlUmVmPFQ+IGV4dGVuZHMgTmdNb2R1bGVSZWY8VD4ge1xuICAvLyBOb3RlOiB3ZSBhcmUgdXNpbmcgdGhlIHByZWZpeCBfIGFzIE5nTW9kdWxlRGF0YSBpcyBhbiBOZ01vZHVsZVJlZiBhbmQgdGhlcmVmb3JlIGRpcmVjdGx5XG4gIC8vIGV4cG9zZWQgdG8gdGhlIHVzZXIuXG4gIF9ib290c3RyYXBDb21wb25lbnRzOiBUeXBlPGFueT5bXTtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ01vZHVsZUZhY3Rvcnk8VD4ge1xuICBhYnN0cmFjdCBnZXQgbW9kdWxlVHlwZSgpOiBUeXBlPFQ+O1xuICBhYnN0cmFjdCBjcmVhdGUocGFyZW50SW5qZWN0b3I6IEluamVjdG9yfG51bGwpOiBOZ01vZHVsZVJlZjxUPjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport var ViewEncapsulation;\n(function (ViewEncapsulation) {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL21ldGFkYXRhL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLENBQU4sSUFBWSxpQkFnQ1g7QUFoQ0QsV0FBWSxpQkFBaUI7SUFDM0I7Ozs7Ozs7T0FPRztJQUNILGlFQUFZLENBQUE7SUFDWjs7Ozs7OztPQU9HO0lBQ0gsNkRBQVUsQ0FBQTtJQUNWOztPQUVHO0lBQ0gseURBQVEsQ0FBQTtJQUVSOzs7Ozs7T0FNRztJQUNILG1FQUFhLENBQUE7QUFDZixDQUFDLEVBaENXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFnQzVCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIERlZmluZXMgdGVtcGxhdGUgYW5kIHN0eWxlIGVuY2Fwc3VsYXRpb24gb3B0aW9ucyBhdmFpbGFibGUgZm9yIENvbXBvbmVudCdzIHtAbGluayBDb21wb25lbnR9LlxuICpcbiAqIFNlZSB7QGxpbmsgQ29tcG9uZW50I2VuY2Fwc3VsYXRpb24gZW5jYXBzdWxhdGlvbn0uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvdHMvbWV0YWRhdGEvZW5jYXBzdWxhdGlvbi50cyByZWdpb249J2xvbmdmb3JtJ31cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBlbnVtIFZpZXdFbmNhcHN1bGF0aW9uIHtcbiAgLyoqXG4gICAqIEVtdWxhdGUgYE5hdGl2ZWAgc2NvcGluZyBvZiBzdHlsZXMgYnkgYWRkaW5nIGFuIGF0dHJpYnV0ZSBjb250YWluaW5nIHN1cnJvZ2F0ZSBpZCB0byB0aGUgSG9zdFxuICAgKiBFbGVtZW50IGFuZCBwcmUtcHJvY2Vzc2luZyB0aGUgc3R5bGUgcnVsZXMgcHJvdmlkZWQgdmlhIHtAbGluayBDb21wb25lbnQjc3R5bGVzIHN0eWxlc30gb3JcbiAgICoge0BsaW5rIENvbXBvbmVudCNzdHlsZVVybHMgc3R5bGVVcmxzfSwgYW5kIGFkZGluZyB0aGUgbmV3IEhvc3QgRWxlbWVudCBhdHRyaWJ1dGUgdG8gYWxsXG4gICAqIHNlbGVjdG9ycy5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBvcHRpb24uXG4gICAqL1xuICBFbXVsYXRlZCA9IDAsXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB2Ni4xLjAgLSB1c2Uge1ZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbX0gaW5zdGVhZC5cbiAgICogVXNlIHRoZSBuYXRpdmUgZW5jYXBzdWxhdGlvbiBtZWNoYW5pc20gb2YgdGhlIHJlbmRlcmVyLlxuICAgKlxuICAgKiBGb3IgdGhlIERPTSB0aGlzIG1lYW5zIHVzaW5nIHRoZSBkZXByZWNhdGVkIFtTaGFkb3cgRE9NXG4gICAqIHYwXShodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL3NoYWRvdy8pIGFuZFxuICAgKiBjcmVhdGluZyBhIFNoYWRvd1Jvb3QgZm9yIENvbXBvbmVudCdzIEhvc3QgRWxlbWVudC5cbiAgICovXG4gIE5hdGl2ZSA9IDEsXG4gIC8qKlxuICAgKiBEb24ndCBwcm92aWRlIGFueSB0ZW1wbGF0ZSBvciBzdHlsZSBlbmNhcHN1bGF0aW9uLlxuICAgKi9cbiAgTm9uZSA9IDIsXG5cbiAgLyoqXG4gICAqIFVzZSBTaGFkb3cgRE9NIHRvIGVuY2Fwc3VsYXRlIHN0eWxlcy5cbiAgICpcbiAgICogRm9yIHRoZSBET00gdGhpcyBtZWFucyB1c2luZyBtb2Rlcm4gW1NoYWRvd1xuICAgKiBET01dKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvc2hhZG93LykgYW5kXG4gICAqIGNyZWF0aW5nIGEgU2hhZG93Um9vdCBmb3IgQ29tcG9uZW50J3MgSG9zdCBFbGVtZW50LlxuICAgKi9cbiAgU2hhZG93RG9tID0gM1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getGlobal() {\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    return __globalThis || __global || __window || __self;\n}\nvar _global = getGlobal();\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport { _global as global };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9nbG9iYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBV0gsU0FBUyxTQUFTO0lBQ2hCLElBQU0sWUFBWSxHQUFHLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVLENBQUM7SUFDckUsSUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUN6RCxJQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksT0FBTyxpQkFBaUIsS0FBSyxXQUFXO1FBQ2xGLElBQUksWUFBWSxpQkFBaUIsSUFBSSxJQUFJLENBQUM7SUFDOUMsSUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUV6RCw2RkFBNkY7SUFDN0YseUZBQXlGO0lBQ3pGLHVFQUF1RTtJQUN2RSxPQUFPLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUN4RCxDQUFDO0FBRUQsSUFBTSxPQUFPLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFFNUI7Ozs7R0FJRztBQUNILE9BQU8sRUFBQyxPQUFPLElBQUksTUFBTSxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIFRPRE8oanRlcGxpdHo2MDIpOiBMb2FkIFdvcmtlckdsb2JhbFNjb3BlIGZyb20gbGliLndlYndvcmtlci5kLnRzIGZpbGUgIzM0OTJcbmRlY2xhcmUgdmFyIFdvcmtlckdsb2JhbFNjb3BlOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi87XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55IC8qKiBUT0RPICM5MTAwICovO1xuLy8gTm90IHlldCBhdmFpbGFibGUgaW4gVHlwZVNjcmlwdDogaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMjkzMzJcbmRlY2xhcmUgdmFyIGdsb2JhbFRoaXM6IGFueSAvKiogVE9ETyAjOTEwMCAqLztcblxuZnVuY3Rpb24gZ2V0R2xvYmFsKCk6IGFueSB7XG4gIGNvbnN0IF9fZ2xvYmFsVGhpcyA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzO1xuICBjb25zdCBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbiAgY29uc3QgX19zZWxmID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xuICBjb25zdCBfX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbDtcblxuICAvLyBBbHdheXMgdXNlIF9fZ2xvYmFsVGhpcyBpZiBhdmFpbGFibGUsIHdoaWNoIGlzIHRoZSBzcGVjLWRlZmluZWQgZ2xvYmFsIHZhcmlhYmxlIGFjcm9zcyBhbGxcbiAgLy8gZW52aXJvbm1lbnRzLCB0aGVuIGZhbGxiYWNrIHRvIF9fZ2xvYmFsIGZpcnN0LCBiZWNhdXNlIGluIE5vZGUgdGVzdHMgYm90aCBfX2dsb2JhbCBhbmRcbiAgLy8gX193aW5kb3cgbWF5IGJlIGRlZmluZWQgYW5kIF9nbG9iYWwgc2hvdWxkIGJlIF9fZ2xvYmFsIGluIHRoYXQgY2FzZS5cbiAgcmV0dXJuIF9fZ2xvYmFsVGhpcyB8fCBfX2dsb2JhbCB8fCBfX3dpbmRvdyB8fCBfX3NlbGY7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxuLyoqXG4gKiBBdHRlbnRpb246IHdoZW5ldmVyIHByb3ZpZGluZyBhIG5ldyB2YWx1ZSwgYmUgc3VyZSB0byBhZGQgYW5cbiAqIGVudHJ5IGludG8gdGhlIGNvcnJlc3BvbmRpbmcgYC4uLi5leHRlcm5zLmpzYCBmaWxlLFxuICogc28gdGhhdCBjbG9zdXJlIHdvbid0IHVzZSB0aGF0IGdsb2JhbCBmb3IgaXRzIHB1cnBvc2VzLlxuICovXG5leHBvcnQge19nbG9iYWwgYXMgZ2xvYmFsfTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../../util/global';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n */\nexport function renderStringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\nexport var defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(global);\nexport function resolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\nexport function resolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\nexport function resolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport var INTERPOLATION_DELIMITER = \"\\uFFFD\";\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n */\nexport function isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzY191dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvdXRpbC9taXNjX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUt6Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUN4QyxpRUFBaUU7SUFDakUsMENBQTBDO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFVO0lBQ3hDLElBQUksT0FBTyxLQUFLLElBQUksVUFBVTtRQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUM7SUFDM0QsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDM0MsSUFBSSxLQUFLLElBQUksSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzdCLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxVQUFVO1FBQzdELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztJQUN2QyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDcEIsQ0FBQztBQUdELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUN6QixDQUFDLE9BQU8scUJBQXFCLEtBQUssV0FBVyxJQUFJLHFCQUFxQixJQUFLLGVBQWU7SUFDekYsVUFBVSxDQUFnRSxrQkFBa0I7Q0FDM0YsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFcEIsTUFBTSxVQUFVLGFBQWEsQ0FBQyxPQUE2QztJQUN6RSxPQUFPLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUE2QztJQUMzRSxPQUFPLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsRUFBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQTZDO0lBQ3ZFLE9BQU8sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksRUFBQyxDQUFDO0FBQzVELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsUUFBRyxDQUFDO0FBRTNDOzs7R0FHRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxHQUFXO0lBQzlDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFJLEtBQW9CO0lBQ25ELElBQUksS0FBSyxZQUFZLFFBQVEsRUFBRTtRQUM3QixPQUFPLEtBQUssRUFBRSxDQUFDO0tBQ2hCO1NBQU07UUFDTCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi8uLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge2dsb2JhbH0gZnJvbSAnLi4vLi4vdXRpbC9nbG9iYWwnO1xuaW1wb3J0IHtSRWxlbWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9yZW5kZXJlcic7XG5pbXBvcnQge0NPTlRFWFQsIExWaWV3LCBSb290Q29udGV4dH0gZnJvbSAnLi4vaW50ZXJmYWNlcy92aWV3JztcbmltcG9ydCB7Z2V0Um9vdFZpZXd9IGZyb20gJy4vdmlld190cmF2ZXJzYWxfdXRpbHMnO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdmFsdWVzIGFyZSBkaWZmZXJlbnQgZnJvbSBhIGNoYW5nZSBkZXRlY3Rpb24gc3RhbmQgcG9pbnQuXG4gKlxuICogQ29uc3RyYWludHMgYXJlIHJlbGF4ZWQgaW4gY2hlY2tOb0NoYW5nZXMgbW9kZS4gU2VlIGBkZXZNb2RlRXF1YWxgIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEaWZmZXJlbnQoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgLy8gTmFOIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZiBzbyB0aGUgZmlyc3RcbiAgLy8gdGVzdCBjaGVja3MgaWYgYm90aCBhIGFuZCBiIGFyZSBub3QgTmFOXG4gIHJldHVybiAhKGEgIT09IGEgJiYgYiAhPT0gYikgJiYgYSAhPT0gYjtcbn1cblxuLyoqXG4gKiBVc2VkIGZvciBzdHJpbmdpZnkgcmVuZGVyIG91dHB1dCBpbiBJdnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdHJpbmdpZnkodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlLm5hbWUgfHwgdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiAnJztcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudHlwZSA9PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB2YWx1ZS50eXBlLm5hbWUgfHwgdmFsdWUudHlwZTtcbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTY2hlZHVsZXIgPVxuICAgICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIC8vIGJyb3dzZXIgb25seVxuICAgICBzZXRUaW1lb3V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICApLmJpbmQoZ2xvYmFsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVXaW5kb3coZWxlbWVudDogUkVsZW1lbnQgJiB7b3duZXJEb2N1bWVudDogRG9jdW1lbnR9KSB7XG4gIHJldHVybiB7bmFtZTogJ3dpbmRvdycsIHRhcmdldDogZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudChlbGVtZW50OiBSRWxlbWVudCAmIHtvd25lckRvY3VtZW50OiBEb2N1bWVudH0pIHtcbiAgcmV0dXJuIHtuYW1lOiAnZG9jdW1lbnQnLCB0YXJnZXQ6IGVsZW1lbnQub3duZXJEb2N1bWVudH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQm9keShlbGVtZW50OiBSRWxlbWVudCAmIHtvd25lckRvY3VtZW50OiBEb2N1bWVudH0pIHtcbiAgcmV0dXJuIHtuYW1lOiAnYm9keScsIHRhcmdldDogZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHl9O1xufVxuXG4vKipcbiAqIFRoZSBzcGVjaWFsIGRlbGltaXRlciB3ZSB1c2UgdG8gc2VwYXJhdGUgcHJvcGVydHkgbmFtZXMsIHByZWZpeGVzLCBhbmQgc3VmZml4ZXNcbiAqIGluIHByb3BlcnR5IGJpbmRpbmcgbWV0YWRhdGEuIFNlZSBzdG9yZUJpbmRpbmdNZXRhZGF0YSgpLlxuICpcbiAqIFdlIGludGVudGlvbmFsbHkgdXNlIHRoZSBVbmljb2RlIFwiUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXCIgKFUrRkZGRCkgYXMgYSBkZWxpbWl0ZXJcbiAqIGJlY2F1c2UgaXQgaXMgYSB2ZXJ5IHVuY29tbW9uIGNoYXJhY3RlciB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHBhcnQgb2YgYSB1c2VyJ3NcbiAqIHByb3BlcnR5IG5hbWVzIG9yIGludGVycG9sYXRpb24gc3RyaW5ncy4gSWYgaXQgaXMgaW4gZmFjdCB1c2VkIGluIGEgcHJvcGVydHlcbiAqIGJpbmRpbmcsIERlYnVnRWxlbWVudC5wcm9wZXJ0aWVzIHdpbGwgbm90IHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZSBmb3IgdGhhdFxuICogYmluZGluZy4gSG93ZXZlciwgdGhlcmUgc2hvdWxkIGJlIG5vIHJ1bnRpbWUgZWZmZWN0IGZvciByZWFsIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIGNoYXJhY3RlciBpcyB0eXBpY2FsbHkgcmVuZGVyZWQgYXMgYSBxdWVzdGlvbiBtYXJrIGluc2lkZSBvZiBhIGRpYW1vbmQuXG4gKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbHNfKFVuaWNvZGVfYmxvY2spXG4gKlxuICovXG5leHBvcnQgY29uc3QgSU5URVJQT0xBVElPTl9ERUxJTUlURVIgPSBg77+9YDtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBwcm9wZXJ0eSBtZXRhZGF0YSBzdHJpbmcuXG4gKiBTZWUgc3RvcmVCaW5kaW5nTWV0YWRhdGEoKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcE1ldGFkYXRhU3RyaW5nKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdHIuaW5kZXhPZihJTlRFUlBPTEFUSU9OX0RFTElNSVRFUikgPj0gMDtcbn1cblxuLyoqXG4gKiBVbndyYXAgYSB2YWx1ZSB3aGljaCBtaWdodCBiZSBiZWhpbmQgYSBjbG9zdXJlIChmb3IgZm9yd2FyZCBkZWNsYXJhdGlvbiByZWFzb25zKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlVW53cmFwRm48VD4odmFsdWU6IFQgfCAoKCkgPT4gVCkpOiBUIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gdmFsdWUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getViewComponent } from '../render3/global_utils_api';\nimport { NATIVE, VIEWS } from '../render3/interfaces/container';\nimport { PARENT, TVIEW, T_HOST } from '../render3/interfaces/view';\nimport { getProp, getValue, isClassBasedValue } from '../render3/styling/class_and_style_bindings';\nimport { getStylingContext } from '../render3/styling/util';\nimport { getComponent, getContext, getInjectionTokens, getInjector, getListeners, getLocalRefs, isBrowserEvents, loadLContext, loadLContextFromNode } from '../render3/util/discovery_utils';\nimport { INTERPOLATION_DELIMITER, isPropMetadataString, renderStringify } from '../render3/util/misc_utils';\nimport { findComponentView } from '../render3/util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByTNode, isComponent, isLContainer } from '../render3/util/view_utils';\nimport { assertDomNode } from '../util/assert';\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nvar DebugNode__PRE_R3__ = /** @class */ (function () {\n    function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n        get: function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n        get: function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n        get: function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n        get: function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n        get: function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__PRE_R3__;\n}());\nexport { DebugNode__PRE_R3__ };\nvar DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__PRE_R3__, _super);\n    function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    DebugElement__PRE_R3__.prototype.addChild = function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n        var _this = this;\n        var _a;\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, tslib_1.__spread([siblingIndex + 1, 0], newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                child.parent = _this;\n            });\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n        get: function () {\n            return this\n                .childNodes //\n                .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__PRE_R3__;\n}(DebugNode__PRE_R3__));\nexport { DebugElement__PRE_R3__ };\n/**\n * @publicApi\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\nvar DebugNode__POST_R3__ = /** @class */ (function () {\n    function DebugNode__POST_R3__(nativeNode) {\n        this.nativeNode = nativeNode;\n    }\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n        get: function () {\n            var parent = this.nativeNode.parentNode;\n            return parent ? new DebugElement__POST_R3__(parent) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n        get: function () { return getInjector(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n        get: function () {\n            var nativeElement = this.nativeNode;\n            return nativeElement &&\n                (getComponent(nativeElement) || getViewComponent(nativeElement));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n        get: function () { return getContext(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n        get: function () {\n            return getListeners(this.nativeNode).filter(isBrowserEvents);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n        get: function () { return getLocalRefs(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n        get: function () { return getInjectionTokens(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__POST_R3__;\n}());\nvar DebugElement__POST_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__POST_R3__, _super);\n    function DebugElement__POST_R3__(nativeNode) {\n        var _this = this;\n        ngDevMode && assertDomNode(nativeNode);\n        _this = _super.call(this, nativeNode) || this;\n        return _this;\n    }\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n        get: function () {\n            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n        get: function () { return this.nativeElement.nodeName; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n        /**\n         *  Gets a map of property names to property values for an element.\n         *\n         *  This map includes:\n         *  - Regular property bindings (e.g. `[id]=\"id\"`)\n         *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n         *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n         *\n         *  It does not include:\n         *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n         *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n         */\n        get: function () {\n            var context = loadLContext(this.nativeNode);\n            var lView = context.lView;\n            var tData = lView[TVIEW].data;\n            var tNode = tData[context.nodeIndex];\n            var properties = collectPropertyBindings(tNode, lView, tData);\n            var hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n            var className = collectClassNames(this);\n            var output = tslib_1.__assign({}, properties, hostProperties);\n            if (className) {\n                output['className'] = output['className'] ? output['className'] + (\" \" + className) : className;\n            }\n            return output;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n        get: function () {\n            var attributes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    attributes[attr.name] = attr.value;\n                }\n            }\n            return attributes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n        get: function () {\n            var classes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (isClassBasedValue(stylingContext, i)) {\n                            var className = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (typeof value == 'boolean') {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                classes[className] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eClasses = element.classList;\n                    for (var i = 0; i < eClasses.length; i++) {\n                        classes[eClasses[i]] = true;\n                    }\n                }\n            }\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n        get: function () {\n            var styles = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (!isClassBasedValue(stylingContext, i)) {\n                            var styleName = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (value !== null) {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                styles[styleName] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eStyles = element.style;\n                    for (var i = 0; i < eStyles.length; i++) {\n                        var name_1 = eStyles.item(i);\n                        styles[name_1] = eStyles.getPropertyValue(name_1);\n                    }\n                }\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n        get: function () {\n            var childNodes = this.nativeNode.childNodes;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n        get: function () {\n            var nativeElement = this.nativeElement;\n            if (!nativeElement)\n                return [];\n            var childNodes = nativeElement.children;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__POST_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, true);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, false);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__POST_R3__;\n}(DebugNode__POST_R3__));\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param parentElement the element from which the walk is started\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n    var context = loadLContext(parentElement.nativeNode);\n    var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    var e_1, _a;\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatchR3(getNativeByTNode(tNode, lView), predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponent(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            var componentView = getComponentViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild)\n                _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else {\n            // Otherwise, its children have to be processed.\n            if (tNode.child)\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        var nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        var lContainer = lView[tNode.index];\n        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type === 1 /* Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        var componentView = findComponentView(lView);\n        var componentHost = componentView[T_HOST];\n        var head = componentHost.projection[tNode.projection];\n        if (Array.isArray(head)) {\n            try {\n                for (var head_1 = tslib_1.__values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                    var nativeNode = head_1_1.value;\n                    _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode_1 = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode_1, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    else {\n        // Case 4: the TNode is a view.\n        if (tNode.child) {\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    // To determine the next node to be processed, we need to use the next or the projectionNext link,\n    // depending on whether the current node has been projected.\n    var nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n        _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (var i = 0; i < lContainer[VIEWS].length; i++) {\n        var childView = lContainer[VIEWS][i];\n        _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        var debugNode = getDebugNode(nativeNode);\n        if (debugNode && (elementsOnly ? debugNode instanceof DebugElement__POST_R3__ : true) &&\n            predicate(debugNode)) {\n            matches.push(debugNode);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    var bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n    while (bindingIndex < tNode.propertyMetadataEndIndex) {\n        var value = '';\n        var propMetadata = tData[bindingIndex];\n        while (!isPropMetadataString(propMetadata)) {\n            // This is the first value for an interpolation. We need to build up\n            // the full interpolation by combining runtime values in LView with\n            // the static interstitial values stored in TData.\n            value += renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n            propMetadata = tData[++bindingIndex];\n        }\n        value += lView[bindingIndex];\n        // Property metadata string has 3 parts: property name, prefix, and suffix\n        var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n        var propertyName = metadataParts[0];\n        // Attr bindings don't have property names and should be skipped\n        if (propertyName) {\n            // Wrap value with prefix and suffix (will be '' for normal bindings)\n            properties[propertyName] = metadataParts[1] + value + metadataParts[2];\n        }\n        bindingIndex++;\n    }\n    return properties;\n}\n/**\n * Retrieves the first binding index that holds values for this property\n * binding.\n *\n * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n * there can be multiple binding values, so we might have to loop backwards\n * from the metadata index until we find the first one.\n *\n * @param metadataIndex The index of the first property metadata string for\n * this node.\n * @param tData The data array for the current TView\n * @returns The first binding index for this binding\n */\nfunction getFirstBindingIndex(metadataIndex, tData) {\n    var currentBindingIndex = metadataIndex - 1;\n    // If the slot before the metadata holds a string, we know that this\n    // metadata applies to an interpolation with at least 2 bindings, and\n    // we need to search further to access the first binding value.\n    var currentValue = tData[currentBindingIndex];\n    // We need to iterate until we hit either a:\n    // - TNode (it is an element slot marking the end of `consts` section), OR a\n    // - metadata string (slot is attribute metadata or a previous node's property metadata)\n    while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n        currentValue = tData[--currentBindingIndex];\n    }\n    return currentBindingIndex + 1;\n}\nfunction collectHostPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    // Host binding values for a node are stored after directives on that node\n    var hostPropIndex = tNode.directiveEnd;\n    var propMetadata = tData[hostPropIndex];\n    // When we reach a value in TView.data that is not a string, we know we've\n    // hit the next node's providers and directives and should stop copying data.\n    while (typeof propMetadata === 'string') {\n        var propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n        properties[propertyName] = lView[hostPropIndex];\n        propMetadata = tData[++hostPropIndex];\n    }\n    return properties;\n}\nfunction collectClassNames(debugElement) {\n    var e_2, _a;\n    var classes = debugElement.classes;\n    var output = '';\n    try {\n        for (var _b = tslib_1.__values(Object.keys(classes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var className = _c.value;\n            if (classes[className]) {\n                output = output ? output + (\" \" + className) : className;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return output;\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nvar _nativeNodeToDebugNode = new Map();\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\nexport function getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__(nativeNode) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * @publicApi\n */\nexport var getDebugNode = getDebugNode__PRE_R3__;\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * @publicApi\n */\nexport var DebugNode = DebugNode__PRE_R3__;\n/**\n * @publicApi\n */\nexport var DebugElement = DebugElement__PRE_R3__;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var ERROR_TYPE = 'ngType';\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport var ERROR_LOGGER = 'ngErrorLogger';\nexport function wrappedError(message, originalError) {\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    var error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUNwRCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN0RCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDO0FBRzVDLE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBZSxFQUFFLGFBQWtCO0lBQzlELElBQU0sR0FBRyxHQUNGLE9BQU8scUJBQWUsYUFBYSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFHLENBQUM7SUFDdEcsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLEtBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUNyRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBjb25zdCBFUlJPUl9UWVBFID0gJ25nVHlwZSc7XG5leHBvcnQgY29uc3QgRVJST1JfREVCVUdfQ09OVEVYVCA9ICduZ0RlYnVnQ29udGV4dCc7XG5leHBvcnQgY29uc3QgRVJST1JfT1JJR0lOQUxfRVJST1IgPSAnbmdPcmlnaW5hbEVycm9yJztcbmV4cG9ydCBjb25zdCBFUlJPUl9MT0dHRVIgPSAnbmdFcnJvckxvZ2dlcic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZWRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIG9yaWdpbmFsRXJyb3I6IGFueSk6IEVycm9yIHtcbiAgY29uc3QgbXNnID1cbiAgICAgIGAke21lc3NhZ2V9IGNhdXNlZCBieTogJHtvcmlnaW5hbEVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBvcmlnaW5hbEVycm9yLm1lc3NhZ2U6IG9yaWdpbmFsRXJyb3IgfWA7XG4gIGNvbnN0IGVycm9yID0gRXJyb3IobXNnKTtcbiAgKGVycm9yIGFzIGFueSlbRVJST1JfT1JJR0lOQUxfRVJST1JdID0gb3JpZ2luYWxFcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, ERROR_ORIGINAL_ERROR, ERROR_TYPE } from './util/errors';\nexport function getType(error) {\n    return error[ERROR_TYPE];\n}\nexport function getDebugContext(error) {\n    return error[ERROR_DEBUG_CONTEXT];\n}\nexport function getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\nexport function getErrorLogger(error) {\n    return error[ERROR_LOGGER] || defaultErrorLogger;\n}\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, tslib_1.__spread(values));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUdsRyxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQVk7SUFDbEMsT0FBUSxLQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBWTtJQUMxQyxPQUFRLEtBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsS0FBWTtJQUMzQyxPQUFRLEtBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQVk7SUFDekMsT0FBUSxLQUFhLENBQUMsWUFBWSxDQUFDLElBQUksa0JBQWtCLENBQUM7QUFDNUQsQ0FBQztBQUdELFNBQVMsa0JBQWtCLENBQUMsT0FBZ0I7SUFBRSxnQkFBZ0I7U0FBaEIsVUFBZ0IsRUFBaEIscUJBQWdCLEVBQWhCLElBQWdCO1FBQWhCLCtCQUFnQjs7SUFDdEQsT0FBTyxDQUFDLEtBQUssT0FBYixPQUFPLG1CQUFXLE1BQU0sR0FBRTtBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0VSUk9SX0RFQlVHX0NPTlRFWFQsIEVSUk9SX0xPR0dFUiwgRVJST1JfT1JJR0lOQUxfRVJST1IsIEVSUk9SX1RZUEV9IGZyb20gJy4vdXRpbC9lcnJvcnMnO1xuaW1wb3J0IHtEZWJ1Z0NvbnRleHR9IGZyb20gJy4vdmlldyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKGVycm9yOiBFcnJvcik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIChlcnJvciBhcyBhbnkpW0VSUk9SX1RZUEVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdDb250ZXh0KGVycm9yOiBFcnJvcik6IERlYnVnQ29udGV4dCB7XG4gIHJldHVybiAoZXJyb3IgYXMgYW55KVtFUlJPUl9ERUJVR19DT05URVhUXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yaWdpbmFsRXJyb3IoZXJyb3I6IEVycm9yKTogRXJyb3Ige1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfT1JJR0lOQUxfRVJST1JdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JMb2dnZXIoZXJyb3I6IEVycm9yKTogKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pID0+IHZvaWQge1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfTE9HR0VSXSB8fCBkZWZhdWx0RXJyb3JMb2dnZXI7XG59XG5cblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yTG9nZ2VyKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pIHtcbiAgKDxhbnk+Y29uc29sZS5lcnJvcikoLi4udmFsdWVzKTtcbn0iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    ErrorHandler.prototype.handleError = function (error) {\n        var originalError = this._findOriginalError(error);\n        var context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    ErrorHandler.prototype._findContext = function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    ErrorHandler.prototype._findOriginalError = function (error) {\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\nexport { ErrorHandler };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Vycm9yX2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFJM0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUNIO0lBQUE7UUFDRTs7V0FFRztRQUNILGFBQVEsR0FBWSxPQUFPLENBQUM7SUFxQzlCLENBQUM7SUFuQ0Msa0NBQVcsR0FBWCxVQUFZLEtBQVU7UUFDcEIsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsNkVBQTZFO1FBQzdFLHdFQUF3RTtRQUN4RSxJQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksYUFBYSxFQUFFO1lBQ2pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLG1DQUFZLEdBQVosVUFBYSxLQUFVO1FBQ3JCLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIseUNBQWtCLEdBQWxCLFVBQW1CLEtBQVk7UUFDN0IsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDL0IsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2dldERlYnVnQ29udGV4dCwgZ2V0RXJyb3JMb2dnZXIsIGdldE9yaWdpbmFsRXJyb3J9IGZyb20gJy4vZXJyb3JzJztcblxuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBob29rIGZvciBjZW50cmFsaXplZCBleGNlcHRpb24gaGFuZGxpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEVycm9ySGFuZGxlcmAgcHJpbnRzIGVycm9yIG1lc3NhZ2VzIHRvIHRoZSBgY29uc29sZWAuIFRvXG4gKiBpbnRlcmNlcHQgZXJyb3IgaGFuZGxpbmcsIHdyaXRlIGEgY3VzdG9tIGV4Y2VwdGlvbiBoYW5kbGVyIHRoYXQgcmVwbGFjZXMgdGhpcyBkZWZhdWx0IGFzXG4gKiBhcHByb3ByaWF0ZSBmb3IgeW91ciBhcHAuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBjbGFzcyBNeUVycm9ySGFuZGxlciBpbXBsZW1lbnRzIEVycm9ySGFuZGxlciB7XG4gKiAgIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIGV4Y2VwdGlvblxuICogICB9XG4gKiB9XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEVycm9ySGFuZGxlciwgdXNlQ2xhc3M6IE15RXJyb3JIYW5kbGVyfV1cbiAqIH0pXG4gKiBjbGFzcyBNeU1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX2NvbnNvbGU6IENvbnNvbGUgPSBjb25zb2xlO1xuXG4gIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gdGhpcy5fZmluZE9yaWdpbmFsRXJyb3IoZXJyb3IpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9maW5kQ29udGV4dChlcnJvcik7XG4gICAgLy8gTm90ZTogQnJvd3NlciBjb25zb2xlcyBzaG93IHRoZSBwbGFjZSBmcm9tIHdoZXJlIGNvbnNvbGUuZXJyb3Igd2FzIGNhbGxlZC5cbiAgICAvLyBXZSBjYW4gdXNlIHRoaXMgdG8gZ2l2ZSB1c2VycyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci5cbiAgICBjb25zdCBlcnJvckxvZ2dlciA9IGdldEVycm9yTG9nZ2VyKGVycm9yKTtcblxuICAgIGVycm9yTG9nZ2VyKHRoaXMuX2NvbnNvbGUsIGBFUlJPUmAsIGVycm9yKTtcbiAgICBpZiAob3JpZ2luYWxFcnJvcikge1xuICAgICAgZXJyb3JMb2dnZXIodGhpcy5fY29uc29sZSwgYE9SSUdJTkFMIEVSUk9SYCwgb3JpZ2luYWxFcnJvcik7XG4gICAgfVxuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBlcnJvckxvZ2dlcih0aGlzLl9jb25zb2xlLCAnRVJST1IgQ09OVEVYVCcsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2ZpbmRDb250ZXh0KGVycm9yOiBhbnkpOiBhbnkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldERlYnVnQ29udGV4dChlcnJvcikgPyBnZXREZWJ1Z0NvbnRleHQoZXJyb3IpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmluZENvbnRleHQoZ2V0T3JpZ2luYWxFcnJvcihlcnJvcikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluZE9yaWdpbmFsRXJyb3IoZXJyb3I6IEVycm9yKTogYW55IHtcbiAgICBsZXQgZSA9IGdldE9yaWdpbmFsRXJyb3IoZXJyb3IpO1xuICAgIHdoaWxlIChlICYmIGdldE9yaWdpbmFsRXJyb3IoZSkpIHtcbiAgICAgIGUgPSBnZXRPcmlnaW5hbEVycm9yKGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // Do nothing.\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9vcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvbm9vcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxNQUFNLFVBQVUsSUFBSTtJQUFDLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQseUJBQWM7O0lBQ2pDLGNBQWM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoLi4uYXJnczogYW55W10pOiBhbnkge1xuICAvLyBEbyBub3RoaW5nLlxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * @publicApi\n */\nvar RenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\nexport { RenderComponentType };\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nvar RenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\nexport { RenderDebugInfo };\n/**\n * @deprecated Use the `Renderer2` instead.\n * @publicApi\n */\nvar Renderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\nexport { Renderer };\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @publicApi\n */\nvar RootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\nexport { RootRenderer };\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nvar RendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\nexport { RendererFactory2 };\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport var RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nexport { Renderer2 };\nexport var SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\nvar SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\nvar SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport var SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nvar Sanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\nexport { Sanitizer };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vc2VjdXJpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxlQU9YO0FBUEQsV0FBWSxlQUFlO0lBQ3pCLHFEQUFRLENBQUE7SUFDUixxREFBUSxDQUFBO0lBQ1IsdURBQVMsQ0FBQTtJQUNULHlEQUFVLENBQUE7SUFDVixtREFBTyxDQUFBO0lBQ1AscUVBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQVBXLGVBQWUsS0FBZixlQUFlLFFBTzFCO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQUE7SUFFQSxDQUFDO0lBQUQsZ0JBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBBIFNlY3VyaXR5Q29udGV4dCBtYXJrcyBhIGxvY2F0aW9uIHRoYXQgaGFzIGRhbmdlcm91cyBzZWN1cml0eSBpbXBsaWNhdGlvbnMsIGUuZy4gYSBET00gcHJvcGVydHlcbiAqIGxpa2UgYGlubmVySFRNTGAgdGhhdCBjb3VsZCBjYXVzZSBDcm9zcyBTaXRlIFNjcmlwdGluZyAoWFNTKSBzZWN1cml0eSBidWdzIHdoZW4gaW1wcm9wZXJseVxuICogaGFuZGxlZC5cbiAqXG4gKiBTZWUgRG9tU2FuaXRpemVyIGZvciBtb3JlIGRldGFpbHMgb24gc2VjdXJpdHkgaW4gQW5ndWxhciBhcHBsaWNhdGlvbnMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBTZWN1cml0eUNvbnRleHQge1xuICBOT05FID0gMCxcbiAgSFRNTCA9IDEsXG4gIFNUWUxFID0gMixcbiAgU0NSSVBUID0gMyxcbiAgVVJMID0gNCxcbiAgUkVTT1VSQ0VfVVJMID0gNSxcbn1cblxuLyoqXG4gKiBTYW5pdGl6ZXIgaXMgdXNlZCBieSB0aGUgdmlld3MgdG8gc2FuaXRpemUgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIHZhbHVlcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTYW5pdGl6ZXIge1xuICBhYnN0cmFjdCBzYW5pdGl6ZShjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIHZhbHVlOiB7fXxzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\nexport function normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfcmVmbGVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvbmdfcmVmbGVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxNQUFNLFVBQVUseUJBQXlCLENBQUMsSUFBWTtJQUNwRCw0RkFBNEY7SUFDNUYsSUFBSSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsT0FBTyxnQkFBYyxJQUFNLENBQUM7QUFDOUIsQ0FBQztBQUVELElBQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDO0FBRXJDLFNBQVMsbUJBQW1CLENBQUMsS0FBYTtJQUN4QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUU7UUFBQyxXQUFXO2FBQVgsVUFBVyxFQUFYLHFCQUFXLEVBQVgsSUFBVztZQUFYLHNCQUFXOztRQUFLLE9BQUEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7SUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsS0FBVTtJQUNuRCxJQUFJO1FBQ0YsdUVBQXVFO1FBQ3ZFLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUM5RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyx1REFBdUQsQ0FBQztLQUNoRTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVEZWJ1Z0JpbmRpbmdOYW1lKG5hbWU6IHN0cmluZykge1xuICAvLyBBdHRyaWJ1dGUgbmFtZXMgd2l0aCBgJGAgKGVnIGB4LXkkYCkgYXJlIHZhbGlkIHBlciBzcGVjLCBidXQgdW5zdXBwb3J0ZWQgYnkgc29tZSBicm93c2Vyc1xuICBuYW1lID0gY2FtZWxDYXNlVG9EYXNoQ2FzZShuYW1lLnJlcGxhY2UoL1skQF0vZywgJ18nKSk7XG4gIHJldHVybiBgbmctcmVmbGVjdC0ke25hbWV9YDtcbn1cblxuY29uc3QgQ0FNRUxfQ0FTRV9SRUdFWFAgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBjYW1lbENhc2VUb0Rhc2hDYXNlKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShDQU1FTF9DQVNFX1JFR0VYUCwgKC4uLm06IGFueVtdKSA9PiAnLScgKyBtWzFdLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRGVidWdCaW5kaW5nVmFsdWUodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgLy8gTGltaXQgdGhlIHNpemUgb2YgdGhlIHZhbHVlIGFzIG90aGVyd2lzZSB0aGUgRE9NIGp1c3QgZ2V0cyBwb2xsdXRlZC5cbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkuc2xpY2UoMCwgMzApIDogdmFsdWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gJ1tFUlJPUl0gRXhjZXB0aW9uIHdoaWxlIHRyeWluZyB0byBzZXJpYWxpemUgdGhlIHZhbHVlJztcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getDebugContext } from '../errors';\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER } from '../util/errors';\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\nexport function viewDebugError(msg, context) {\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\nfunction _addDebugContext(err, context) {\n    err[ERROR_DEBUG_CONTEXT] = context;\n    err[ERROR_LOGGER] = context.logError.bind(context);\n}\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdmlldy9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsWUFBWSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFJakUsTUFBTSxVQUFVLDJDQUEyQyxDQUN2RCxPQUFxQixFQUFFLFFBQWEsRUFBRSxTQUFjLEVBQUUsWUFBcUI7SUFDN0UsSUFBSSxHQUFHLEdBQ0gsZ0hBQThHLFFBQVEsMkJBQXNCLFNBQVMsT0FBSSxDQUFDO0lBQzlKLElBQUksWUFBWSxFQUFFO1FBQ2hCLEdBQUc7WUFDQyxxR0FBcUc7Z0JBQ3JHLG1EQUFtRCxDQUFDO0tBQ3pEO0lBQ0QsT0FBTyxjQUFjLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsR0FBUSxFQUFFLE9BQXFCO0lBQ25FLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxLQUFLLENBQUMsRUFBRTtRQUMzQiwwREFBMEQ7UUFDMUQsc0RBQXNEO1FBQ3RELEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUNqQztJQUNELGdCQUFnQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEdBQVcsRUFBRSxPQUFxQjtJQUMvRCxJQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0IsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFVLEVBQUUsT0FBcUI7SUFDeEQsR0FBVyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzNDLEdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEdBQVU7SUFDekMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsTUFBYztJQUMvQyxPQUFPLElBQUksS0FBSyxDQUFDLDBEQUF3RCxNQUFRLENBQUMsQ0FBQztBQUNyRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2dldERlYnVnQ29udGV4dH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7RVJST1JfREVCVUdfQ09OVEVYVCwgRVJST1JfTE9HR0VSfSBmcm9tICcuLi91dGlsL2Vycm9ycyc7XG5cbmltcG9ydCB7RGVidWdDb250ZXh0fSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3IoXG4gICAgY29udGV4dDogRGVidWdDb250ZXh0LCBvbGRWYWx1ZTogYW55LCBjdXJyVmFsdWU6IGFueSwgaXNGaXJzdENoZWNrOiBib29sZWFuKTogRXJyb3Ige1xuICBsZXQgbXNnID1cbiAgICAgIGBFeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9yOiBFeHByZXNzaW9uIGhhcyBjaGFuZ2VkIGFmdGVyIGl0IHdhcyBjaGVja2VkLiBQcmV2aW91cyB2YWx1ZTogJyR7b2xkVmFsdWV9Jy4gQ3VycmVudCB2YWx1ZTogJyR7Y3VyclZhbHVlfScuYDtcbiAgaWYgKGlzRmlyc3RDaGVjaykge1xuICAgIG1zZyArPVxuICAgICAgICBgIEl0IHNlZW1zIGxpa2UgdGhlIHZpZXcgaGFzIGJlZW4gY3JlYXRlZCBhZnRlciBpdHMgcGFyZW50IGFuZCBpdHMgY2hpbGRyZW4gaGF2ZSBiZWVuIGRpcnR5IGNoZWNrZWQuYCArXG4gICAgICAgIGAgSGFzIGl0IGJlZW4gY3JlYXRlZCBpbiBhIGNoYW5nZSBkZXRlY3Rpb24gaG9vayA/YDtcbiAgfVxuICByZXR1cm4gdmlld0RlYnVnRXJyb3IobXNnLCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpZXdXcmFwcGVkRGVidWdFcnJvcihlcnI6IGFueSwgY29udGV4dDogRGVidWdDb250ZXh0KTogRXJyb3Ige1xuICBpZiAoIShlcnIgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAvLyBlcnJvcnMgdGhhdCBhcmUgbm90IEVycm9yIGluc3RhbmNlcyBkb24ndCBoYXZlIGEgc3RhY2ssXG4gICAgLy8gc28gaXQgaXMgb2sgdG8gd3JhcCB0aGVtIGludG8gYSBuZXcgRXJyb3Igb2JqZWN0Li4uXG4gICAgZXJyID0gbmV3IEVycm9yKGVyci50b1N0cmluZygpKTtcbiAgfVxuICBfYWRkRGVidWdDb250ZXh0KGVyciwgY29udGV4dCk7XG4gIHJldHVybiBlcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2aWV3RGVidWdFcnJvcihtc2c6IHN0cmluZywgY29udGV4dDogRGVidWdDb250ZXh0KTogRXJyb3Ige1xuICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgX2FkZERlYnVnQ29udGV4dChlcnIsIGNvbnRleHQpO1xuICByZXR1cm4gZXJyO1xufVxuXG5mdW5jdGlvbiBfYWRkRGVidWdDb250ZXh0KGVycjogRXJyb3IsIGNvbnRleHQ6IERlYnVnQ29udGV4dCkge1xuICAoZXJyIGFzIGFueSlbRVJST1JfREVCVUdfQ09OVEVYVF0gPSBjb250ZXh0O1xuICAoZXJyIGFzIGFueSlbRVJST1JfTE9HR0VSXSA9IGNvbnRleHQubG9nRXJyb3IuYmluZChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmlld0RlYnVnRXJyb3IoZXJyOiBFcnJvcik6IGJvb2xlYW4ge1xuICByZXR1cm4gISFnZXREZWJ1Z0NvbnRleHQoZXJyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpZXdEZXN0cm95ZWRFcnJvcihhY3Rpb246IHN0cmluZyk6IEVycm9yIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihgVmlld0Rlc3Ryb3llZEVycm9yOiBBdHRlbXB0IHRvIHVzZSBhIGRlc3Ryb3llZCB2aWV3OiAke2FjdGlvbn1gKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '../render3/view_engine_compatibility';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nvar ChangeDetectorRef = /** @class */ (function () {\n    function ChangeDetectorRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n    return ChangeDetectorRef;\n}());\nexport { ChangeDetectorRef };\nexport var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = render3InjectChangeDetectorRef;\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n};\nvar ɵ0 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\nexport { ɵ0 };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlX2RldGVjdG9yX3JlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdG9yX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsdUJBQXVCLElBQUksOEJBQThCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUUvRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Q0c7QUFDSDtJQUFBO0lBOERBLENBQUM7SUFMQzs7O09BR0c7SUFDSSxtQ0FBaUIsR0FBNEIsY0FBTSxPQUFBLGtDQUFrQyxFQUFFLEVBQXBDLENBQW9DLENBQUM7SUFDakcsd0JBQUM7Q0FBQSxBQTlERCxJQThEQztTQTlEcUIsaUJBQWlCO0FBa0V2QyxNQUFNLENBQUMsSUFBTSw2Q0FBNkMsR0FBRyw4QkFBOEIsQ0FBQztBQUM1RixJQUFNLDRDQUE0QyxHQUFHO0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7QUFBVyxDQUFDLENBQUM7O0FBQ2pGLElBQU0sa0NBQWtDLEdBQ3BDLDRDQUE0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2luamVjdENoYW5nZURldGVjdG9yUmVmIGFzIHJlbmRlcjNJbmplY3RDaGFuZ2VEZXRlY3RvclJlZn0gZnJvbSAnLi4vcmVuZGVyMy92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5JztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBBbmd1bGFyIFZpZXdzLCBwcm92aWRlcyBjaGFuZ2UgZGV0ZWN0aW9uIGZ1bmN0aW9uYWxpdHkuXG4gKiBBIGNoYW5nZS1kZXRlY3Rpb24gdHJlZSBjb2xsZWN0cyBhbGwgdmlld3MgdGhhdCBhcmUgdG8gYmUgY2hlY2tlZCBmb3IgY2hhbmdlcy5cbiAqIFVzZSB0aGUgbWV0aG9kcyB0byBhZGQgYW5kIHJlbW92ZSB2aWV3cyBmcm9tIHRoZSB0cmVlLCBpbml0aWF0ZSBjaGFuZ2UtZGV0ZWN0aW9uLFxuICogYW5kIGV4cGxpY2l0bHkgbWFyayB2aWV3cyBhcyBfZGlydHlfLCBtZWFuaW5nIHRoYXQgdGhleSBoYXZlIGNoYW5nZWQgYW5kIG5lZWQgdG8gYmUgcmVyZW5kZXJlZC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgZGVtb25zdHJhdGUgaG93IHRvIG1vZGlmeSBkZWZhdWx0IGNoYW5nZS1kZXRlY3Rpb24gYmVoYXZpb3JcbiAqIHRvIHBlcmZvcm0gZXhwbGljaXQgZGV0ZWN0aW9uIHdoZW4gbmVlZGVkLlxuICpcbiAqICMjIyBVc2UgYG1hcmtGb3JDaGVjaygpYCB3aXRoIGBDaGVja09uY2VgIHN0cmF0ZWd5XG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNldHMgdGhlIGBPblB1c2hgIGNoYW5nZS1kZXRlY3Rpb24gc3RyYXRlZ3kgZm9yIGEgY29tcG9uZW50XG4gKiAoYENoZWNrT25jZWAsIHJhdGhlciB0aGFuIHRoZSBkZWZhdWx0IGBDaGVja0Fsd2F5c2ApLCB0aGVuIGZvcmNlcyBhIHNlY29uZCBjaGVja1xuICogYWZ0ZXIgYW4gaW50ZXJ2YWwuIFNlZSBbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9HQzUxMmI/cD1wcmV2aWV3KS5cbiAqXG4gKiA8Y29kZS1leGFtcGxlIHBhdGg9XCJjb3JlL3RzL2NoYW5nZV9kZXRlY3QvY2hhbmdlLWRldGVjdGlvbi50c1wiXG4gKiByZWdpb249XCJtYXJrLWZvci1jaGVja1wiPjwvY29kZS1leGFtcGxlPlxuICpcbiAqICMjIyBEZXRhY2ggY2hhbmdlIGRldGVjdG9yIHRvIGxpbWl0IGhvdyBvZnRlbiBjaGVjayBvY2N1cnNcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhIGNvbXBvbmVudCB3aXRoIGEgbGFyZ2UgbGlzdCBvZiByZWFkLW9ubHkgZGF0YVxuICogdGhhdCBpcyBleHBlY3RlZCB0byBjaGFuZ2UgY29uc3RhbnRseSwgbWFueSB0aW1lcyBwZXIgc2Vjb25kLlxuICogVG8gaW1wcm92ZSBwZXJmb3JtYW5jZSwgd2Ugd2FudCB0byBjaGVjayBhbmQgdXBkYXRlIHRoZSBsaXN0XG4gKiBsZXNzIG9mdGVuIHRoYW4gdGhlIGNoYW5nZXMgYWN0dWFsbHkgb2NjdXIuIFRvIGRvIHRoYXQsIHdlIGRldGFjaFxuICogdGhlIGNvbXBvbmVudCdzIGNoYW5nZSBkZXRlY3RvciBhbmQgcGVyZm9ybSBhbiBleHBsaWNpdCBsb2NhbCBjaGVjayBldmVyeSBmaXZlIHNlY29uZHMuXG4gKlxuICogPGNvZGUtZXhhbXBsZSBwYXRoPVwiY29yZS90cy9jaGFuZ2VfZGV0ZWN0L2NoYW5nZS1kZXRlY3Rpb24udHNcIiByZWdpb249XCJkZXRhY2hcIj48L2NvZGUtZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIFJlYXR0YWNoaW5nIGEgZGV0YWNoZWQgY29tcG9uZW50XG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGNyZWF0ZXMgYSBjb21wb25lbnQgZGlzcGxheWluZyBsaXZlIGRhdGEuXG4gKiBUaGUgY29tcG9uZW50IGRldGFjaGVzIGl0cyBjaGFuZ2UgZGV0ZWN0b3IgZnJvbSB0aGUgbWFpbiBjaGFuZ2UgZGV0ZWN0b3IgdHJlZVxuICogd2hlbiB0aGUgYGxpdmVgIHByb3BlcnR5IGlzIHNldCB0byBmYWxzZSwgYW5kIHJlYXR0YWNoZXMgaXQgd2hlbiB0aGUgcHJvcGVydHlcbiAqIGJlY29tZXMgdHJ1ZS5cbiAqXG4gKiA8Y29kZS1leGFtcGxlIHBhdGg9XCJjb3JlL3RzL2NoYW5nZV9kZXRlY3QvY2hhbmdlLWRldGVjdGlvbi50c1wiIHJlZ2lvbj1cInJlYXR0YWNoXCI+PC9jb2RlLWV4YW1wbGU+XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhbmdlRGV0ZWN0b3JSZWYge1xuICAvKipcbiAgICogV2hlbiBhIHZpZXcgdXNlcyB0aGUge0BsaW5rIENoYW5nZURldGVjdGlvblN0cmF0ZWd5I09uUHVzaCBPblB1c2h9IChjaGVja09uY2UpXG4gICAqIGNoYW5nZSBkZXRlY3Rpb24gc3RyYXRlZ3ksIGV4cGxpY2l0bHkgbWFya3MgdGhlIHZpZXcgYXMgY2hhbmdlZCBzbyB0aGF0XG4gICAqIGl0IGNhbiBiZSBjaGVja2VkIGFnYWluLlxuICAgKlxuICAgKiBDb21wb25lbnRzIGFyZSBub3JtYWxseSBtYXJrZWQgYXMgZGlydHkgKGluIG5lZWQgb2YgcmVyZW5kZXJpbmcpIHdoZW4gaW5wdXRzXG4gICAqIGhhdmUgY2hhbmdlZCBvciBldmVudHMgaGF2ZSBmaXJlZCBpbiB0aGUgdmlldy4gQ2FsbCB0aGlzIG1ldGhvZCB0byBlbnN1cmUgdGhhdFxuICAgKiBhIGNvbXBvbmVudCBpcyBjaGVja2VkIGV2ZW4gaWYgdGhlc2UgdHJpZ2dlcnMgaGF2ZSBub3Qgb2NjdXJlZC5cbiAgICpcbiAgICogPCEtLSBUT0RPOiBBZGQgYSBsaW5rIHRvIGEgY2hhcHRlciBvbiBPblB1c2ggY29tcG9uZW50cyAtLT5cbiAgICpcbiAgICovXG4gIGFic3RyYWN0IG1hcmtGb3JDaGVjaygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEZXRhY2hlcyB0aGlzIHZpZXcgZnJvbSB0aGUgY2hhbmdlLWRldGVjdGlvbiB0cmVlLlxuICAgKiBBIGRldGFjaGVkIHZpZXcgaXMgIG5vdCBjaGVja2VkIHVudGlsIGl0IGlzIHJlYXR0YWNoZWQuXG4gICAqIFVzZSBpbiBjb21iaW5hdGlvbiB3aXRoIGBkZXRlY3RDaGFuZ2VzKClgIHRvIGltcGxlbWVudCBsb2NhbCBjaGFuZ2UgZGV0ZWN0aW9uIGNoZWNrcy5cbiAgICpcbiAgICogRGV0YWNoZWQgdmlld3MgYXJlIG5vdCBjaGVja2VkIGR1cmluZyBjaGFuZ2UgZGV0ZWN0aW9uIHJ1bnMgdW50aWwgdGhleSBhcmVcbiAgICogcmUtYXR0YWNoZWQsIGV2ZW4gaWYgdGhleSBhcmUgbWFya2VkIGFzIGRpcnR5LlxuICAgKlxuICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpbmsgdG8gYSBjaGFwdGVyIG9uIGRldGFjaC9yZWF0dGFjaC9sb2NhbCBkaWdlc3QgLS0+XG4gICAqIDwhLS0gVE9ETzogQWRkIGEgbGl2ZSBkZW1vIG9uY2UgcmVmLmRldGVjdENoYW5nZXMgaXMgbWVyZ2VkIGludG8gbWFzdGVyIC0tPlxuICAgKlxuICAgKi9cbiAgYWJzdHJhY3QgZGV0YWNoKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGlzIHZpZXcgYW5kIGl0cyBjaGlsZHJlbi4gVXNlIGluIGNvbWJpbmF0aW9uIHdpdGgge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI2RldGFjaFxuICAgKiBkZXRhY2h9XG4gICAqIHRvIGltcGxlbWVudCBsb2NhbCBjaGFuZ2UgZGV0ZWN0aW9uIGNoZWNrcy5cbiAgICpcbiAgICogPCEtLSBUT0RPOiBBZGQgYSBsaW5rIHRvIGEgY2hhcHRlciBvbiBkZXRhY2gvcmVhdHRhY2gvbG9jYWwgZGlnZXN0IC0tPlxuICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpdmUgZGVtbyBvbmNlIHJlZi5kZXRlY3RDaGFuZ2VzIGlzIG1lcmdlZCBpbnRvIG1hc3RlciAtLT5cbiAgICpcbiAgICovXG4gIGFic3RyYWN0IGRldGVjdENoYW5nZXMoKTogdm9pZDtcblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjaGFuZ2UgZGV0ZWN0b3IgYW5kIGl0cyBjaGlsZHJlbiwgYW5kIHRocm93cyBpZiBhbnkgY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuXG4gICAqXG4gICAqIFVzZSBpbiBkZXZlbG9wbWVudCBtb2RlIHRvIHZlcmlmeSB0aGF0IHJ1bm5pbmcgY2hhbmdlIGRldGVjdGlvbiBkb2Vzbid0IGludHJvZHVjZVxuICAgKiBvdGhlciBjaGFuZ2VzLlxuICAgKi9cbiAgYWJzdHJhY3QgY2hlY2tOb0NoYW5nZXMoKTogdm9pZDtcblxuICAvKipcbiAgICogUmUtYXR0YWNoZXMgdGhlIHByZXZpb3VzbHkgZGV0YWNoZWQgdmlldyB0byB0aGUgY2hhbmdlIGRldGVjdGlvbiB0cmVlLlxuICAgKiBWaWV3cyBhcmUgYXR0YWNoZWQgdG8gdGhlIHRyZWUgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogPCEtLSBUT0RPOiBBZGQgYSBsaW5rIHRvIGEgY2hhcHRlciBvbiBkZXRhY2gvcmVhdHRhY2gvbG9jYWwgZGlnZXN0IC0tPlxuICAgKlxuICAgKi9cbiAgYWJzdHJhY3QgcmVhdHRhY2goKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBzdGF0aWMgX19OR19FTEVNRU5UX0lEX186ICgpID0+IENoYW5nZURldGVjdG9yUmVmID0gKCkgPT4gU1dJVENIX0NIQU5HRV9ERVRFQ1RPUl9SRUZfRkFDVE9SWSgpO1xufVxuXG5cblxuZXhwb3J0IGNvbnN0IFNXSVRDSF9DSEFOR0VfREVURUNUT1JfUkVGX0ZBQ1RPUllfX1BPU1RfUjNfXyA9IHJlbmRlcjNJbmplY3RDaGFuZ2VEZXRlY3RvclJlZjtcbmNvbnN0IFNXSVRDSF9DSEFOR0VfREVURUNUT1JfUkVGX0ZBQ1RPUllfX1BSRV9SM19fID0gKC4uLmFyZ3M6IGFueVtdKTogYW55ID0+IHt9O1xuY29uc3QgU1dJVENIX0NIQU5HRV9ERVRFQ1RPUl9SRUZfRkFDVE9SWTogdHlwZW9mIHJlbmRlcjNJbmplY3RDaGFuZ2VEZXRlY3RvclJlZiA9XG4gICAgU1dJVENIX0NIQU5HRV9ERVRFQ1RPUl9SRUZfRkFDVE9SWV9fUFJFX1IzX187XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global as _global } from './global';\nvar _symbolIterator = null;\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zeW1ib2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFJM0MsSUFBSSxlQUFlLEdBQVEsSUFBSSxDQUFDO0FBQ2hDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUNwQixJQUFNLFFBQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxRQUFNLElBQUksUUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM3QixlQUFlLEdBQUcsUUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNuQzthQUFNO1lBQ0wsMEJBQTBCO1lBQzFCLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3BDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxNQUFNO29CQUNsQyxHQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzVELGVBQWUsR0FBRyxHQUFHLENBQUM7aUJBQ3ZCO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtnbG9iYWwgYXMgX2dsb2JhbH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vLyBXaGVuIFN5bWJvbC5pdGVyYXRvciBkb2Vzbid0IGV4aXN0LCByZXRyaWV2ZXMgdGhlIGtleSB1c2VkIGluIGVzNi1zaGltXG5kZWNsYXJlIGNvbnN0IFN5bWJvbDogYW55O1xubGV0IF9zeW1ib2xJdGVyYXRvcjogYW55ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpOiBzdHJpbmd8c3ltYm9sIHtcbiAgaWYgKCFfc3ltYm9sSXRlcmF0b3IpIHtcbiAgICBjb25zdCBTeW1ib2wgPSBfZ2xvYmFsWydTeW1ib2wnXTtcbiAgICBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgX3N5bWJvbEl0ZXJhdG9yID0gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE1hcC5wcm90b3R5cGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJlxuICAgICAgICAgICAgKE1hcCBhcyBhbnkpLnByb3RvdHlwZVtrZXldID09PSBNYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICBfc3ltYm9sSXRlcmF0b3IgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zeW1ib2xJdGVyYXRvcjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { areIterablesEqual, isListLikeIterable } from './iterable';\n// JS has NaN !== NaN\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\nexport function devModeEqual(a, b) {\n    var isListLikeIterableA = isListLikeIterable(a);\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvY29tcGFyaXNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHakUscUJBQXFCO0FBQ3JCLE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBTSxFQUFFLENBQU07SUFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUN6QyxJQUFNLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsRUFBRTtRQUM5QyxPQUFPLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDOUM7U0FBTTtRQUNMLElBQU0sU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztRQUMxRSxJQUFNLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLFNBQVMsRUFBRTtZQUMxRSxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDN0I7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXJlSXRlcmFibGVzRXF1YWwsIGlzTGlzdExpa2VJdGVyYWJsZX0gZnJvbSAnLi9pdGVyYWJsZSc7XG5cblxuLy8gSlMgaGFzIE5hTiAhPT0gTmFOXG5leHBvcnQgZnVuY3Rpb24gbG9vc2VJZGVudGljYWwoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgdHlwZW9mIGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBiID09PSAnbnVtYmVyJyAmJiBpc05hTihhKSAmJiBpc05hTihiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldk1vZGVFcXVhbChhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICBjb25zdCBpc0xpc3RMaWtlSXRlcmFibGVBID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGEpO1xuICBjb25zdCBpc0xpc3RMaWtlSXRlcmFibGVCID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGIpO1xuICBpZiAoaXNMaXN0TGlrZUl0ZXJhYmxlQSAmJiBpc0xpc3RMaWtlSXRlcmFibGVCKSB7XG4gICAgcmV0dXJuIGFyZUl0ZXJhYmxlc0VxdWFsKGEsIGIsIGRldk1vZGVFcXVhbCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXNBT2JqZWN0ID0gYSAmJiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbiAgICBjb25zdCBpc0JPYmplY3QgPSBiICYmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpO1xuICAgIGlmICghaXNMaXN0TGlrZUl0ZXJhYmxlQSAmJiBpc0FPYmplY3QgJiYgIWlzTGlzdExpa2VJdGVyYWJsZUIgJiYgaXNCT2JqZWN0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvb3NlSWRlbnRpY2FsKGEsIGIpO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../util/comparison';\nimport { getSymbolIterator } from '../util/symbol';\nexport function devModeEqual(a, b) {\n    var isListLikeIterableA = isListLikeIterable(a);\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n */\nvar WrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\nexport { WrappedValue };\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nexport function areIterablesEqual(a, b, comparator) {\n    var iterator1 = a[getSymbolIterator()]();\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        var item1 = iterator1.next();\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var iterator = obj[getSymbolIterator()]();\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nvar SimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n    return SimpleChange;\n}());\nexport { SimpleChange };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlX2NoYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2ludGVyZmFjZS9zaW1wbGVfY2hhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7Ozs7OztHQVFHO0FBQ0g7SUFDRSxzQkFBbUIsYUFBa0IsRUFBUyxZQUFpQixFQUFTLFdBQW9CO1FBQXpFLGtCQUFhLEdBQWIsYUFBYSxDQUFLO1FBQVMsaUJBQVksR0FBWixZQUFZLENBQUs7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUFHLENBQUM7SUFDaEc7O09BRUc7SUFDSCxvQ0FBYSxHQUFiLGNBQTJCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsbUJBQUM7QUFBRCxDQUFDLEFBTkQsSUFNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzaWMgY2hhbmdlIGZyb20gYSBwcmV2aW91cyB0byBhIG5ldyB2YWx1ZSBmb3IgYSBzaW5nbGVcbiAqIHByb3BlcnR5IG9uIGEgZGlyZWN0aXZlIGluc3RhbmNlLiBQYXNzZWQgYXMgYSB2YWx1ZSBpbiBhXG4gKiB7QGxpbmsgU2ltcGxlQ2hhbmdlc30gb2JqZWN0IHRvIHRoZSBgbmdPbkNoYW5nZXNgIGhvb2suXG4gKlxuICogQHNlZSBgT25DaGFuZ2VzYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZUNoYW5nZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwcmV2aW91c1ZhbHVlOiBhbnksIHB1YmxpYyBjdXJyZW50VmFsdWU6IGFueSwgcHVibGljIGZpcnN0Q2hhbmdlOiBib29sZWFuKSB7fVxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgbmV3IHZhbHVlIGlzIHRoZSBmaXJzdCB2YWx1ZSBhc3NpZ25lZC5cbiAgICovXG4gIGlzRmlyc3RDaGFuZ2UoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmZpcnN0Q2hhbmdlOyB9XG59XG5cbi8qKlxuICogQSBoYXNodGFibGUgb2YgY2hhbmdlcyByZXByZXNlbnRlZCBieSB7QGxpbmsgU2ltcGxlQ2hhbmdlfSBvYmplY3RzIHN0b3JlZFxuICogYXQgdGhlIGRlY2xhcmVkIHByb3BlcnR5IG5hbWUgdGhleSBiZWxvbmcgdG8gb24gYSBEaXJlY3RpdmUgb3IgQ29tcG9uZW50LiBUaGlzIGlzXG4gKiB0aGUgdHlwZSBwYXNzZWQgdG8gdGhlIGBuZ09uQ2hhbmdlc2AgaG9vay5cbiAqXG4gKiBAc2VlIGBPbkNoYW5nZXNgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpbXBsZUNoYW5nZXMgeyBbcHJvcE5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTsgfVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nexport { ElementRef };\nexport var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\nvar SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudF9yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvZWxlbWVudF9yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGdCQUFnQixJQUFJLHVCQUF1QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDakcsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUVsQzs7Ozs7Ozs7Ozs7R0FXRztBQUNILDJFQUEyRTtBQUMzRSwyRkFBMkY7QUFDM0YsNkNBQTZDO0FBQzdDO0lBd0JFLG9CQUFZLGFBQWdCO1FBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFBQyxDQUFDO0lBRXJFOzs7T0FHRztJQUNJLDRCQUFpQixHQUFxQixjQUFNLE9BQUEsMEJBQTBCLENBQUMsVUFBVSxDQUFDLEVBQXRDLENBQXNDLENBQUM7SUFDNUYsaUJBQUM7Q0FBQSxBQS9CRCxJQStCQztTQS9CWSxVQUFVO0FBaUN2QixNQUFNLENBQUMsSUFBTSxxQ0FBcUMsR0FBRyx1QkFBdUIsQ0FBQztBQUM3RSxJQUFNLG9DQUFvQyxHQUFHLElBQUksQ0FBQztBQUNsRCxJQUFNLDBCQUEwQixHQUM1QixvQ0FBb0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtpbmplY3RFbGVtZW50UmVmIGFzIHJlbmRlcjNJbmplY3RFbGVtZW50UmVmfSBmcm9tICcuLi9yZW5kZXIzL3ZpZXdfZW5naW5lX2NvbXBhdGliaWxpdHknO1xuaW1wb3J0IHtub29wfSBmcm9tICcuLi91dGlsL25vb3AnO1xuXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgYSBuYXRpdmUgZWxlbWVudCBpbnNpZGUgb2YgYSBWaWV3LlxuICpcbiAqIEFuIGBFbGVtZW50UmVmYCBpcyBiYWNrZWQgYnkgYSByZW5kZXItc3BlY2lmaWMgZWxlbWVudC4gSW4gdGhlIGJyb3dzZXIsIHRoaXMgaXMgdXN1YWxseSBhIERPTVxuICogZWxlbWVudC5cbiAqXG4gKiBAc2VjdXJpdHkgUGVybWl0dGluZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBET00gY2FuIG1ha2UgeW91ciBhcHBsaWNhdGlvbiBtb3JlIHZ1bG5lcmFibGUgdG9cbiAqIFhTUyBhdHRhY2tzLiBDYXJlZnVsbHkgcmV2aWV3IGFueSB1c2Ugb2YgYEVsZW1lbnRSZWZgIGluIHlvdXIgY29kZS4gRm9yIG1vcmUgZGV0YWlsLCBzZWUgdGhlXG4gKiBbU2VjdXJpdHkgR3VpZGVdKGh0dHA6Ly9nLmNvL25nL3NlY3VyaXR5KS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbi8vIE5vdGU6IFdlIGRvbid0IGV4cG9zZSB0aGluZ3MgbGlrZSBgSW5qZWN0b3JgLCBgVmlld0NvbnRhaW5lcmAsIC4uLiBoZXJlLFxuLy8gaS5lLiB1c2VycyBoYXZlIHRvIGFzayBmb3Igd2hhdCB0aGV5IG5lZWQuIFdpdGggdGhhdCwgd2UgY2FuIGJ1aWxkIGJldHRlciBhbmFseXNpcyB0b29sc1xuLy8gYW5kIGNvdWxkIGRvIGJldHRlciBjb2RlZ2VuIGluIHRoZSBmdXR1cmUuXG5leHBvcnQgY2xhc3MgRWxlbWVudFJlZjxUID0gYW55PiB7XG4gIC8qKlxuICAgKiBUaGUgdW5kZXJseWluZyBuYXRpdmUgZWxlbWVudCBvciBgbnVsbGAgaWYgZGlyZWN0IGFjY2VzcyB0byBuYXRpdmUgZWxlbWVudHMgaXMgbm90IHN1cHBvcnRlZFxuICAgKiAoZS5nLiB3aGVuIHRoZSBhcHBsaWNhdGlvbiBydW5zIGluIGEgd2ViIHdvcmtlcikuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJjYWxsb3V0IGlzLWNyaXRpY2FsXCI+XG4gICAqICAgPGhlYWRlcj5Vc2Ugd2l0aCBjYXV0aW9uPC9oZWFkZXI+XG4gICAqICAgPHA+XG4gICAqICAgIFVzZSB0aGlzIEFQSSBhcyB0aGUgbGFzdCByZXNvcnQgd2hlbiBkaXJlY3QgYWNjZXNzIHRvIERPTSBpcyBuZWVkZWQuIFVzZSB0ZW1wbGF0aW5nIGFuZFxuICAgKiAgICBkYXRhLWJpbmRpbmcgcHJvdmlkZWQgYnkgQW5ndWxhciBpbnN0ZWFkLiBBbHRlcm5hdGl2ZWx5IHlvdSBjYW4gdGFrZSBhIGxvb2sgYXQge0BsaW5rXG4gICAqIFJlbmRlcmVyMn1cbiAgICogICAgd2hpY2ggcHJvdmlkZXMgQVBJIHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGV2ZW4gd2hlbiBkaXJlY3QgYWNjZXNzIHRvIG5hdGl2ZSBlbGVtZW50cyBpcyBub3RcbiAgICogICAgc3VwcG9ydGVkLlxuICAgKiAgIDwvcD5cbiAgICogICA8cD5cbiAgICogICAgUmVseWluZyBvbiBkaXJlY3QgRE9NIGFjY2VzcyBjcmVhdGVzIHRpZ2h0IGNvdXBsaW5nIGJldHdlZW4geW91ciBhcHBsaWNhdGlvbiBhbmQgcmVuZGVyaW5nXG4gICAqICAgIGxheWVycyB3aGljaCB3aWxsIG1ha2UgaXQgaW1wb3NzaWJsZSB0byBzZXBhcmF0ZSB0aGUgdHdvIGFuZCBkZXBsb3kgeW91ciBhcHBsaWNhdGlvbiBpbnRvIGFcbiAgICogICAgd2ViIHdvcmtlci5cbiAgICogICA8L3A+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKi9cbiAgcHVibGljIG5hdGl2ZUVsZW1lbnQ6IFQ7XG5cbiAgY29uc3RydWN0b3IobmF0aXZlRWxlbWVudDogVCkgeyB0aGlzLm5hdGl2ZUVsZW1lbnQgPSBuYXRpdmVFbGVtZW50OyB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIF9fTkdfRUxFTUVOVF9JRF9fOiAoKSA9PiBFbGVtZW50UmVmID0gKCkgPT4gU1dJVENIX0VMRU1FTlRfUkVGX0ZBQ1RPUlkoRWxlbWVudFJlZik7XG59XG5cbmV4cG9ydCBjb25zdCBTV0lUQ0hfRUxFTUVOVF9SRUZfRkFDVE9SWV9fUE9TVF9SM19fID0gcmVuZGVyM0luamVjdEVsZW1lbnRSZWY7XG5jb25zdCBTV0lUQ0hfRUxFTUVOVF9SRUZfRkFDVE9SWV9fUFJFX1IzX18gPSBub29wO1xuY29uc3QgU1dJVENIX0VMRU1FTlRfUkVGX0ZBQ1RPUlk6IHR5cGVvZiByZW5kZXIzSW5qZWN0RWxlbWVudFJlZiA9XG4gICAgU1dJVENIX0VMRU1FTlRfUkVGX0ZBQ1RPUllfX1BSRV9SM19fO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectTemplateRef as render3InjectTemplateRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n    return TemplateRef;\n}());\nexport { TemplateRef };\nexport var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = render3InjectTemplateRef;\nvar SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVfcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGlua2VyL3RlbXBsYXRlX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsaUJBQWlCLElBQUksd0JBQXdCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNuRyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRWxDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJekM7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0g7SUFBQTtJQThCQSxDQUFDO0lBTkM7OztPQUdHO0lBQ0ksNkJBQWlCLEdBQ1csY0FBTSxPQUFBLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsRUFBcEQsQ0FBb0QsQ0FBQTtJQUMvRixrQkFBQztDQUFBLEFBOUJELElBOEJDO1NBOUJxQixXQUFXO0FBZ0NqQyxNQUFNLENBQUMsSUFBTSxzQ0FBc0MsR0FBRyx3QkFBd0IsQ0FBQztBQUMvRSxJQUFNLHFDQUFxQyxHQUFHLElBQUksQ0FBQztBQUNuRCxJQUFNLDJCQUEyQixHQUM3QixxQ0FBcUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtpbmplY3RUZW1wbGF0ZVJlZiBhcyByZW5kZXIzSW5qZWN0VGVtcGxhdGVSZWZ9IGZyb20gJy4uL3JlbmRlcjMvdmlld19lbmdpbmVfY29tcGF0aWJpbGl0eSc7XG5pbXBvcnQge25vb3B9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5cbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnLi9lbGVtZW50X3JlZic7XG5pbXBvcnQge0VtYmVkZGVkVmlld1JlZn0gZnJvbSAnLi92aWV3X3JlZic7XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3MuXG4gKiBUbyBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3cyBiYXNlZCBvbiBhIHRlbXBsYXRlLCB1c2UgdGhlIGBWaWV3Q29udGFpbmVyUmVmYFxuICogbWV0aG9kIGBjcmVhdGVFbWJlZGRlZFZpZXcoKWAuXG4gKlxuICogQWNjZXNzIGEgYFRlbXBsYXRlUmVmYCBpbnN0YW5jZSBieSBwbGFjaW5nIGEgZGlyZWN0aXZlIG9uIGFuIGA8bmctdGVtcGxhdGU+YFxuICogZWxlbWVudCAob3IgZGlyZWN0aXZlIHByZWZpeGVkIHdpdGggYCpgKS4gVGhlIGBUZW1wbGF0ZVJlZmAgZm9yIHRoZSBlbWJlZGRlZCB2aWV3XG4gKiBpcyBpbmplY3RlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgZGlyZWN0aXZlLFxuICogdXNpbmcgdGhlIGBUZW1wbGF0ZVJlZmAgdG9rZW4uXG4gKlxuICogWW91IGNhbiBhbHNvIHVzZSBhIGBRdWVyeWAgdG8gZmluZCBhIGBUZW1wbGF0ZVJlZmAgYXNzb2NpYXRlZCB3aXRoXG4gKiBhIGNvbXBvbmVudCBvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBAc2VlIGBWaWV3Q29udGFpbmVyUmVmYFxuICogQHNlZSBbTmF2aWdhdGUgdGhlIENvbXBvbmVudCBUcmVlIHdpdGggREldKGd1aWRlL2RlcGVuZGVuY3ktaW5qZWN0aW9uLW5hdnRyZWUpXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVtcGxhdGVSZWY8Qz4ge1xuICAvKipcbiAgICogVGhlIGFuY2hvciBlbGVtZW50IGluIHRoZSBwYXJlbnQgdmlldyBmb3IgdGhpcyBlbWJlZGRlZCB2aWV3LlxuICAgKlxuICAgKiBUaGUgZGF0YS1iaW5kaW5nIGFuZCBpbmplY3Rpb24gY29udGV4dHMgb2YgZW1iZWRkZWQgdmlld3MgY3JlYXRlZCBmcm9tIHRoaXMgYFRlbXBsYXRlUmVmYFxuICAgKiBpbmhlcml0IGZyb20gdGhlIGNvbnRleHRzIG9mIHRoaXMgbG9jYXRpb24uXG4gICAqXG4gICAqIFR5cGljYWxseSBuZXcgZW1iZWRkZWQgdmlld3MgYXJlIGF0dGFjaGVkIHRvIHRoZSB2aWV3IGNvbnRhaW5lciBvZiB0aGlzIGxvY2F0aW9uLCBidXQgaW5cbiAgICogYWR2YW5jZWQgdXNlLWNhc2VzLCB0aGUgdmlldyBjYW4gYmUgYXR0YWNoZWQgdG8gYSBkaWZmZXJlbnQgY29udGFpbmVyIHdoaWxlIGtlZXBpbmcgdGhlXG4gICAqIGRhdGEtYmluZGluZyBhbmQgaW5qZWN0aW9uIGNvbnRleHQgZnJvbSB0aGUgb3JpZ2luYWwgbG9jYXRpb24uXG4gICAqXG4gICAqL1xuICAvLyBUT0RPKGkpOiByZW5hbWUgdG8gYW5jaG9yIG9yIGxvY2F0aW9uXG4gIGFic3RyYWN0IGdldCBlbGVtZW50UmVmKCk6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhbiBlbWJlZGRlZCB2aWV3IGJhc2VkIG9uIHRoaXMgdGVtcGxhdGUsXG4gICAqIGFuZCBhdHRhY2hlcyBpdCB0byB0aGUgdmlldyBjb250YWluZXIuXG4gICAqIEBwYXJhbSBjb250ZXh0IFRoZSBkYXRhLWJpbmRpbmcgY29udGV4dCBvZiB0aGUgZW1iZWRkZWQgdmlldywgYXMgZGVjbGFyZWRcbiAgICogaW4gdGhlIGA8bmctdGVtcGxhdGU+YCB1c2FnZS5cbiAgICogQHJldHVybnMgVGhlIG5ldyBlbWJlZGRlZCB2aWV3IG9iamVjdC5cbiAgICovXG4gIGFic3RyYWN0IGNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0OiBDKTogRW1iZWRkZWRWaWV3UmVmPEM+O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHN0YXRpYyBfX05HX0VMRU1FTlRfSURfXzpcbiAgICAgICgpID0+IFRlbXBsYXRlUmVmPGFueT58IG51bGwgPSAoKSA9PiBTV0lUQ0hfVEVNUExBVEVfUkVGX0ZBQ1RPUlkoVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYpXG59XG5cbmV4cG9ydCBjb25zdCBTV0lUQ0hfVEVNUExBVEVfUkVGX0ZBQ1RPUllfX1BPU1RfUjNfXyA9IHJlbmRlcjNJbmplY3RUZW1wbGF0ZVJlZjtcbmNvbnN0IFNXSVRDSF9URU1QTEFURV9SRUZfRkFDVE9SWV9fUFJFX1IzX18gPSBub29wO1xuY29uc3QgU1dJVENIX1RFTVBMQVRFX1JFRl9GQUNUT1JZOiB0eXBlb2YgcmVuZGVyM0luamVjdFRlbXBsYXRlUmVmID1cbiAgICBTV0lUQ0hfVEVNUExBVEVfUkVGX0ZBQ1RPUllfX1BSRV9SM19fO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectViewContainerRef as render3InjectViewContainerRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nvar ViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n    return ViewContainerRef;\n}());\nexport { ViewContainerRef };\nexport var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = render3InjectViewContainerRef;\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n */\nexport function isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvbGFuZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFJSDs7R0FFRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBUTtJQUNoQywyQ0FBMkM7SUFDM0MscUVBQXFFO0lBQ3JFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0FBQ2pELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBMEI7SUFDckQsc0RBQXNEO0lBQ3RELDRFQUE0RTtJQUM1RSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgYXJndW1lbnQgaXMgc2hhcGVkIGxpa2UgYSBQcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2Uob2JqOiBhbnkpOiBvYmogaXMgUHJvbWlzZTxhbnk+IHtcbiAgLy8gYWxsb3cgYW55IFByb21pc2UvQSsgY29tcGxpYW50IHRoZW5hYmxlLlxuICAvLyBJdCdzIHVwIHRvIHRoZSBjYWxsZXIgdG8gZW5zdXJlIHRoYXQgb2JqLnRoZW4gY29uZm9ybXMgdG8gdGhlIHNwZWNcbiAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIE9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmo6IGFueSB8IE9ic2VydmFibGU8YW55Pik6IG9iaiBpcyBPYnNlcnZhYmxlPGFueT4ge1xuICAvLyBUT0RPOiB1c2UgaXNPYnNlcnZhYmxlIG9uY2Ugd2UgdXBkYXRlIHBhc3MgcnhqcyA2LjFcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCM2MTAtMjAxOC0wNS0wM1xuICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iai5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbic7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nvar ComponentRef = /** @class */ (function () {\n    function ComponentRef() {\n    }\n    return ComponentRef;\n}());\nexport { ComponentRef };\n/**\n * @publicApi\n */\nvar ComponentFactory = /** @class */ (function () {\n    function ComponentFactory() {\n    }\n    return ComponentFactory;\n}());\nexport { ComponentFactory };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBVUg7Ozs7OztHQU1HO0FBQ0g7SUFBQTtJQTRDQSxDQUFDO0lBQUQsbUJBQUM7QUFBRCxDQUFDLEFBNUNELElBNENDOztBQUVEOztHQUVHO0FBQ0g7SUFBQTtJQTJCQSxDQUFDO0lBQUQsdUJBQUM7QUFBRCxDQUFDLEFBM0JELElBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmfSBmcm9tICcuLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nO1xuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnLi9lbGVtZW50X3JlZic7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuL25nX21vZHVsZV9mYWN0b3J5JztcbmltcG9ydCB7Vmlld1JlZn0gZnJvbSAnLi92aWV3X3JlZic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbXBvbmVudCBjcmVhdGVkIGJ5IGEgYENvbXBvbmVudEZhY3RvcnlgLlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIHJlbGF0ZWQgb2JqZWN0cyxcbiAqIGFuZCBwcm92aWRlcyB0aGUgbWVhbnMgb2YgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50UmVmPEM+IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0IG9yIGFuY2hvciBbZWxlbWVudF0oZ3VpZGUvZ2xvc3NhcnkjZWxlbWVudCkgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGxvY2F0aW9uKCk6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBbZGVwZW5kZW5jeSBpbmplY3Rvcl0oZ3VpZGUvZ2xvc3NhcnkjaW5qZWN0b3IpIGZvciB0aGlzIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbmplY3RvcigpOiBJbmplY3RvcjtcblxuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgaW5zdGFuY2UoKTogQztcblxuICAvKipcbiAgICogVGhlIFtob3N0IHZpZXddKGd1aWRlL2dsb3NzYXJ5I3ZpZXctdHJlZSkgZGVmaW5lZCBieSB0aGUgdGVtcGxhdGVcbiAgICogZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGhvc3RWaWV3KCk6IFZpZXdSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBjaGFuZ2UgZGV0ZWN0b3IgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGNoYW5nZURldGVjdG9yUmVmKCk6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHR5cGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIGFsbCBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICovXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcblxuICAvKipcbiAgICogQSBsaWZlY3ljbGUgaG9vayB0aGF0IHByb3ZpZGVzIGFkZGl0aW9uYWwgZGV2ZWxvcGVyLWRlZmluZWQgY2xlYW51cFxuICAgKiBmdW5jdGlvbmFsaXR5IGZvciB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgY2xlYW5zIHVwIGRldmVsb3Blci1kZWZpbmVkIGRhdGFcbiAgICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29tcG9uZW50LiBDYWxsZWQgd2hlbiB0aGUgYGRlc3Ryb3koKWAgbWV0aG9kIGlzIGludm9rZWQuXG4gICAqL1xuICBhYnN0cmFjdCBvbkRlc3Ryb3koY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZDtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnRGYWN0b3J5PEM+IHtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyBIVE1MIHNlbGVjdG9yLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IHNlbGVjdG9yKCk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyB0eXBlXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG4gIC8qKlxuICAgKiBTZWxlY3RvciBmb3IgYWxsIDxuZy1jb250ZW50PiBlbGVtZW50cyBpbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IG5nQ29udGVudFNlbGVjdG9ycygpOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSBpbnB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbnB1dHMoKToge3Byb3BOYW1lOiBzdHJpbmcsIHRlbXBsYXRlTmFtZTogc3RyaW5nfVtdO1xuICAvKipcbiAgICogVGhlIG91dHB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBvdXRwdXRzKCk6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgY3JlYXRlKFxuICAgICAgaW5qZWN0b3I6IEluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlPzogc3RyaW5nfGFueSxcbiAgICAgIG5nTW9kdWxlPzogTmdNb2R1bGVSZWY8YW55Pik6IENvbXBvbmVudFJlZjxDPjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util/stringify';\nimport { ComponentFactory } from './component_factory';\nexport function noComponentFactoryError(component) {\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nvar ERROR_COMPONENT = 'ngComponent';\nexport function getComponent(error) {\n    return error[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * @publicApi\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\nexport { ComponentFactoryBoundToModule };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUlILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUU1QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUduRSxNQUFNLFVBQVUsdUJBQXVCLENBQUMsU0FBbUI7SUFDekQsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUNmLG9DQUFrQyxTQUFTLENBQUMsU0FBUyxDQUFDLG1EQUFnRCxDQUFDLENBQUM7SUFDM0csS0FBYSxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM1QyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxJQUFNLGVBQWUsR0FBRyxhQUFhLENBQUM7QUFFdEMsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3ZDLE9BQVEsS0FBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFHRDtJQUFBO0lBSUEsQ0FBQztJQUhDLCtEQUF1QixHQUF2QixVQUEyQixTQUFvQztRQUM3RCxNQUFNLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBRUQ7O0dBRUc7QUFDSDtJQUFBO0lBR0EsQ0FBQztJQUZRLDZCQUFJLEdBQTZCLElBQUksNkJBQTZCLEVBQUUsQ0FBQztJQUU5RSwrQkFBQztDQUFBLEFBSEQsSUFHQztTQUhxQix3QkFBd0I7QUFLOUM7SUFHRSx5Q0FDSSxTQUFrQyxFQUFVLE9BQWlDLEVBQ3JFLFNBQTJCO1FBRFMsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDckUsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFKL0IsZUFBVSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO1FBS3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztJQUVELGlFQUF1QixHQUF2QixVQUEyQixTQUFvQztRQUM3RCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDNUIsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osTUFBTSx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDSCxzQ0FBQztBQUFELENBQUMsQUF0QkQsSUFzQkM7O0FBRUQ7SUFBc0QseURBQW1CO0lBT3ZFLHVDQUFvQixPQUE0QixFQUFVLFFBQTBCO1FBQXBGLFlBQ0UsaUJBQU8sU0FNUjtRQVBtQixhQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFVLGNBQVEsR0FBUixRQUFRLENBQWtCO1FBRWxGLEtBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxLQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDM0MsS0FBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUNyRCxLQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDN0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztJQUNqQyxDQUFDO0lBRUQsOENBQU0sR0FBTixVQUNJLFFBQWtCLEVBQUUsZ0JBQTBCLEVBQUUsa0JBQStCLEVBQy9FLFFBQTJCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQ3RCLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUF0QkQsQ0FBc0QsZ0JBQWdCLEdBc0JyRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuXG5pbXBvcnQge0NvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZn0gZnJvbSAnLi9jb21wb25lbnRfZmFjdG9yeSc7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuL25nX21vZHVsZV9mYWN0b3J5JztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudDogRnVuY3Rpb24pIHtcbiAgY29uc3QgZXJyb3IgPSBFcnJvcihcbiAgICAgIGBObyBjb21wb25lbnQgZmFjdG9yeSBmb3VuZCBmb3IgJHtzdHJpbmdpZnkoY29tcG9uZW50KX0uIERpZCB5b3UgYWRkIGl0IHRvIEBOZ01vZHVsZS5lbnRyeUNvbXBvbmVudHM/YCk7XG4gIChlcnJvciBhcyBhbnkpW0VSUk9SX0NPTVBPTkVOVF0gPSBjb21wb25lbnQ7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuY29uc3QgRVJST1JfQ09NUE9ORU5UID0gJ25nQ29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudChlcnJvcjogRXJyb3IpOiBUeXBlPGFueT4ge1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfQ09NUE9ORU5UXTtcbn1cblxuXG5jbGFzcyBfTnVsbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciBpbXBsZW1lbnRzIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB7XG4gIHJlc29sdmVDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDoge25ldyAoLi4uYXJnczogYW55W10pOiBUfSk6IENvbXBvbmVudEZhY3Rvcnk8VD4ge1xuICAgIHRocm93IG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIge1xuICBzdGF0aWMgTlVMTDogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gbmV3IF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk7XG4gIGFic3RyYWN0IHJlc29sdmVDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDogVHlwZTxUPik6IENvbXBvbmVudEZhY3Rvcnk8VD47XG59XG5cbmV4cG9ydCBjbGFzcyBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGltcGxlbWVudHMgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHtcbiAgcHJpdmF0ZSBfZmFjdG9yaWVzID0gbmV3IE1hcDxhbnksIENvbXBvbmVudEZhY3Rvcnk8YW55Pj4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGZhY3RvcmllczogQ29tcG9uZW50RmFjdG9yeTxhbnk+W10sIHByaXZhdGUgX3BhcmVudDogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgcHJpdmF0ZSBfbmdNb2R1bGU6IE5nTW9kdWxlUmVmPGFueT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY3Rvcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZmFjdG9yeSA9IGZhY3Rvcmllc1tpXTtcbiAgICAgIHRoaXMuX2ZhY3Rvcmllcy5zZXQoZmFjdG9yeS5jb21wb25lbnRUeXBlLCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlQ29tcG9uZW50RmFjdG9yeTxUPihjb21wb25lbnQ6IHtuZXcgKC4uLmFyZ3M6IGFueVtdKTogVH0pOiBDb21wb25lbnRGYWN0b3J5PFQ+IHtcbiAgICBsZXQgZmFjdG9yeSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQoY29tcG9uZW50KTtcbiAgICBpZiAoIWZhY3RvcnkgJiYgdGhpcy5fcGFyZW50KSB7XG4gICAgICBmYWN0b3J5ID0gdGhpcy5fcGFyZW50LnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCk7XG4gICAgfVxuICAgIGlmICghZmFjdG9yeSkge1xuICAgICAgdGhyb3cgbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZShmYWN0b3J5LCB0aGlzLl9uZ01vZHVsZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlPEM+IGV4dGVuZHMgQ29tcG9uZW50RmFjdG9yeTxDPiB7XG4gIHJlYWRvbmx5IHNlbGVjdG9yOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNvbXBvbmVudFR5cGU6IFR5cGU8YW55PjtcbiAgcmVhZG9ubHkgbmdDb250ZW50U2VsZWN0b3JzOiBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgaW5wdXRzOiB7cHJvcE5hbWU6IHN0cmluZywgdGVtcGxhdGVOYW1lOiBzdHJpbmd9W107XG4gIHJlYWRvbmx5IG91dHB1dHM6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8Qz4sIHByaXZhdGUgbmdNb2R1bGU6IE5nTW9kdWxlUmVmPGFueT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0b3IgPSBmYWN0b3J5LnNlbGVjdG9yO1xuICAgIHRoaXMuY29tcG9uZW50VHlwZSA9IGZhY3RvcnkuY29tcG9uZW50VHlwZTtcbiAgICB0aGlzLm5nQ29udGVudFNlbGVjdG9ycyA9IGZhY3RvcnkubmdDb250ZW50U2VsZWN0b3JzO1xuICAgIHRoaXMuaW5wdXRzID0gZmFjdG9yeS5pbnB1dHM7XG4gICAgdGhpcy5vdXRwdXRzID0gZmFjdG9yeS5vdXRwdXRzO1xuICB9XG5cbiAgY3JlYXRlKFxuICAgICAgaW5qZWN0b3I6IEluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlPzogc3RyaW5nfGFueSxcbiAgICAgIG5nTW9kdWxlPzogTmdNb2R1bGVSZWY8YW55Pik6IENvbXBvbmVudFJlZjxDPiB7XG4gICAgcmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGUoXG4gICAgICAgIGluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzLCByb290U2VsZWN0b3JPck5vZGUsIG5nTW9kdWxlIHx8IHRoaXMubmdNb2R1bGUpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nvar Version = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\nexport { Version };\n/**\n * @publicApi\n */\nexport var VERSION = new Version('8.0.0-beta.10+123.sha-a6809e0.with-local-changes');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7R0FJRztBQUNIO0lBS0UsaUJBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQzs7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXByZXNlbnRzIHRoZSB2ZXJzaW9uIG9mIEFuZ3VsYXJcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJzaW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IG1ham9yOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBtaW5vcjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcGF0Y2g6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVsbDogc3RyaW5nKSB7XG4gICAgdGhpcy5tYWpvciA9IGZ1bGwuc3BsaXQoJy4nKVswXTtcbiAgICB0aGlzLm1pbm9yID0gZnVsbC5zcGxpdCgnLicpWzFdO1xuICAgIHRoaXMucGF0Y2ggPSBmdWxsLnNwbGl0KCcuJykuc2xpY2UoMikuam9pbignLicpO1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IG5ldyBWZXJzaW9uKCcwLjAuMC1QTEFDRUhPTERFUicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './injection_token';\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport var APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9zY29wZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHakQ7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FDdEMsMEVBQTBFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnLi9pbmplY3Rpb25fdG9rZW4nO1xuXG5cbi8qKlxuICogQW4gaW50ZXJuYWwgdG9rZW4gd2hvc2UgcHJlc2VuY2UgaW4gYW4gaW5qZWN0b3IgaW5kaWNhdGVzIHRoYXQgdGhlIGluamVjdG9yIHNob3VsZCB0cmVhdCBpdHNlbGZcbiAqIGFzIGEgcm9vdCBzY29wZWQgaW5qZWN0b3Igd2hlbiBwcm9jZXNzaW5nIHJlcXVlc3RzIGZvciB1bmtub3duIHRva2VucyB3aGljaCBtYXkgaW5kaWNhdGVcbiAqIHRoZXkgYXJlIHByb3ZpZGVkIGluIHRoZSByb290IHNjb3BlLlxuICovXG5leHBvcnQgY29uc3QgQVBQX1JPT1QgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oXG4gICAgJ1RoZSBwcmVzZW5jZSBvZiB0aGlzIHRva2VuIG1hcmtzIGFuIGluamVjdG9yIGFzIGJlaW5nIHRoZSByb290IGluamVjdG9yLicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\nexport function shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    var state = view.state;\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar NodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\nexport { NodeData };\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport function asTextData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport function asElementData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport function asProviderData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport function asPureExpressionData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nexport function asQueryList(view, index) {\n    return view.nodes[index];\n}\nvar DebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\nexport { DebugContext };\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport var Services = {\n    setCurrentNode: undefined,\n    createRootView: undefined,\n    createEmbeddedView: undefined,\n    createComponentView: undefined,\n    createNgModuleRef: undefined,\n    overrideProvider: undefined,\n    overrideComponentView: undefined,\n    clearOverrides: undefined,\n    checkAndUpdateView: undefined,\n    checkNoChangesView: undefined,\n    destroyView: undefined,\n    resolveDep: undefined,\n    createDebugContext: undefined,\n    handleEvent: undefined,\n    updateDirectives: undefined,\n    updateRenderer: undefined,\n    dirtyParentQueries: undefined,\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy92aWV3L3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQStYSCw4RUFBOEU7QUFDOUUsc0ZBQXNGO0FBQ3RGLDRFQUE0RTtBQUM1RSxXQUFXO0FBQ1gsTUFBTSxVQUFVLGNBQWMsQ0FDMUIsSUFBYyxFQUFFLGNBQXlCLEVBQUUsWUFBdUI7SUFDcEUsb0VBQW9FO0lBQ3BFLHdFQUF3RTtJQUN4RSw0RUFBNEU7SUFDNUUsNEVBQTRFO0lBQzVFLDZFQUE2RTtJQUM3RSw2RUFBNkU7SUFDN0UsMEVBQTBFO0lBQzFFLGdGQUFnRjtJQUNoRiwrQkFBK0I7SUFDL0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixJQUFNLFNBQVMsR0FBRyxLQUFLLDRCQUEyQixDQUFDO0lBQ25ELElBQUksU0FBUyxLQUFLLGNBQWMsRUFBRTtRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLDBCQUF5QixDQUFDLEdBQUcsWUFBWSxDQUFDO1FBQ2hFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE9BQU8sU0FBUyxLQUFLLFlBQVksQ0FBQztBQUNwQyxDQUFDO0FBRUQsK0VBQStFO0FBQy9FLHdCQUF3QjtBQUN4QixNQUFNLFVBQVUsMkJBQTJCLENBQ3ZDLElBQWMsRUFBRSxTQUFvQixFQUFFLEtBQWE7SUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLDRCQUEyQixDQUFDLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxFQUFFO1FBQ3BGLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBSUQ7Ozs7Ozs7Ozs7R0FVRztBQUNIO0lBQUE7SUFBOEMsQ0FBQztJQUFELGVBQUM7QUFBRCxDQUFDLEFBQS9DLElBQStDOztBQVMvQzs7R0FFRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBYyxFQUFFLEtBQWE7SUFDdEQsT0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUErQkQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQWMsRUFBRSxLQUFhO0lBQ3pELE9BQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBU0Q7O0dBRUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLElBQWMsRUFBRSxLQUFhO0lBQzFELE9BQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBU0Q7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBYyxFQUFFLEtBQWE7SUFDaEUsT0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsSUFBYyxFQUFFLEtBQWE7SUFDdkQsT0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFhRDtJQUFBO0lBV0EsQ0FBQztJQUFELG1CQUFDO0FBQUQsQ0FBQyxBQVhELElBV0M7O0FBNENEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBYTtJQUNoQyxjQUFjLEVBQUUsU0FBVztJQUMzQixjQUFjLEVBQUUsU0FBVztJQUMzQixrQkFBa0IsRUFBRSxTQUFXO0lBQy9CLG1CQUFtQixFQUFFLFNBQVc7SUFDaEMsaUJBQWlCLEVBQUUsU0FBVztJQUM5QixnQkFBZ0IsRUFBRSxTQUFXO0lBQzdCLHFCQUFxQixFQUFFLFNBQVc7SUFDbEMsY0FBYyxFQUFFLFNBQVc7SUFDM0Isa0JBQWtCLEVBQUUsU0FBVztJQUMvQixrQkFBa0IsRUFBRSxTQUFXO0lBQy9CLFdBQVcsRUFBRSxTQUFXO0lBQ3hCLFVBQVUsRUFBRSxTQUFXO0lBQ3ZCLGtCQUFrQixFQUFFLFNBQVc7SUFDL0IsV0FBVyxFQUFFLFNBQVc7SUFDeEIsZ0JBQWdCLEVBQUUsU0FBVztJQUM3QixjQUFjLEVBQUUsU0FBVztJQUMzQixrQkFBa0IsRUFBRSxTQUFXO0NBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0b3J9IGZyb20gJy4uL2RpJztcbmltcG9ydCB7RXJyb3JIYW5kbGVyfSBmcm9tICcuLi9lcnJvcl9oYW5kbGVyJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlL3R5cGUnO1xuaW1wb3J0IHtDb21wb25lbnRGYWN0b3J5fSBmcm9tICcuLi9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnknO1xuaW1wb3J0IHtOZ01vZHVsZVJlZn0gZnJvbSAnLi4vbGlua2VyL25nX21vZHVsZV9mYWN0b3J5JztcbmltcG9ydCB7UXVlcnlMaXN0fSBmcm9tICcuLi9saW5rZXIvcXVlcnlfbGlzdCc7XG5pbXBvcnQge1RlbXBsYXRlUmVmfSBmcm9tICcuLi9saW5rZXIvdGVtcGxhdGVfcmVmJztcbmltcG9ydCB7Vmlld0NvbnRhaW5lclJlZn0gZnJvbSAnLi4vbGlua2VyL3ZpZXdfY29udGFpbmVyX3JlZic7XG5pbXBvcnQge1JlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiwgUmVuZGVyZXJUeXBlMn0gZnJvbSAnLi4vcmVuZGVyL2FwaSc7XG5pbXBvcnQge1Nhbml0aXplciwgU2VjdXJpdHlDb250ZXh0fSBmcm9tICcuLi9zYW5pdGl6YXRpb24vc2VjdXJpdHknO1xuXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRGVmc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEZhY3RvcnkgZm9yIFZpZXdEZWZpbml0aW9ucy9OZ01vZHVsZURlZmluaXRpb25zLlxuICogV2UgdXNlIGEgZnVuY3Rpb24gc28gd2UgY2FuIHJlZXhldXRlIGl0IGluIGNhc2UgYW4gZXJyb3IgaGFwcGVucyBhbmQgdXNlIHRoZSBnaXZlbiBsb2dnZXJcbiAqIGZ1bmN0aW9uIHRvIGxvZyB0aGUgZXJyb3IgZnJvbSB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgbm9kZSwgd2hpY2ggaXMgc2hvd24gaW4gYWxsIGJyb3dzZXJcbiAqIGxvZ3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVmaW5pdGlvbkZhY3Rvcnk8RCBleHRlbmRzIERlZmluaXRpb248YW55Pj4geyAobG9nZ2VyOiBOb2RlTG9nZ2VyKTogRDsgfVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGNhbGwgY29uc29sZS5lcnJvciBhdCB0aGUgcmlnaHQgc291cmNlIGxvY2F0aW9uLiBUaGlzIGlzIGFuIGluZGlyZWN0aW9uXG4gKiB2aWEgYW5vdGhlciBmdW5jdGlvbiBhcyBicm93c2VyIHdpbGwgbG9nIHRoZSBsb2NhdGlvbiB0aGF0IGFjdHVhbGx5IGNhbGxlZFxuICogYGNvbnNvbGUuZXJyb3JgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVMb2dnZXIgeyAoKTogKCkgPT4gdm9pZDsgfVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZmluaXRpb248REYgZXh0ZW5kcyBEZWZpbml0aW9uRmFjdG9yeTxhbnk+PiB7IGZhY3Rvcnk6IERGfG51bGw7IH1cblxuZXhwb3J0IGludGVyZmFjZSBOZ01vZHVsZURlZmluaXRpb24gZXh0ZW5kcyBEZWZpbml0aW9uPE5nTW9kdWxlRGVmaW5pdGlvbkZhY3Rvcnk+IHtcbiAgcHJvdmlkZXJzOiBOZ01vZHVsZVByb3ZpZGVyRGVmW107XG4gIHByb3ZpZGVyc0J5S2V5OiB7W3Rva2VuS2V5OiBzdHJpbmddOiBOZ01vZHVsZVByb3ZpZGVyRGVmfTtcbiAgbW9kdWxlczogYW55W107XG4gIGlzUm9vdDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZ01vZHVsZURlZmluaXRpb25GYWN0b3J5IGV4dGVuZHMgRGVmaW5pdGlvbkZhY3Rvcnk8TmdNb2R1bGVEZWZpbml0aW9uPiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdEZWZpbml0aW9uIGV4dGVuZHMgRGVmaW5pdGlvbjxWaWV3RGVmaW5pdGlvbkZhY3Rvcnk+IHtcbiAgZmxhZ3M6IFZpZXdGbGFncztcbiAgdXBkYXRlRGlyZWN0aXZlczogVmlld1VwZGF0ZUZuO1xuICB1cGRhdGVSZW5kZXJlcjogVmlld1VwZGF0ZUZuO1xuICBoYW5kbGVFdmVudDogVmlld0hhbmRsZUV2ZW50Rm47XG4gIC8qKlxuICAgKiBPcmRlcjogRGVwdGggZmlyc3QuXG4gICAqIEVzcGVjaWFsbHkgcHJvdmlkZXJzIGFyZSBiZWZvcmUgZWxlbWVudHMgLyBhbmNob3JzLlxuICAgKi9cbiAgbm9kZXM6IE5vZGVEZWZbXTtcbiAgLyoqIGFnZ3JlZ2F0ZWQgTm9kZUZsYWdzIGZvciBhbGwgbm9kZXMgKiovXG4gIG5vZGVGbGFnczogTm9kZUZsYWdzO1xuICByb290Tm9kZUZsYWdzOiBOb2RlRmxhZ3M7XG4gIGxhc3RSZW5kZXJSb290Tm9kZTogTm9kZURlZnxudWxsO1xuICBiaW5kaW5nQ291bnQ6IG51bWJlcjtcbiAgb3V0cHV0Q291bnQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIEJpbmFyeSBvciBvZiBhbGwgcXVlcnkgaWRzIHRoYXQgYXJlIG1hdGNoZWQgYnkgb25lIG9mIHRoZSBub2Rlcy5cbiAgICogVGhpcyBpbmNsdWRlcyBxdWVyeSBpZHMgZnJvbSB0ZW1wbGF0ZXMgYXMgd2VsbC5cbiAgICogVXNlZCBhcyBhIGJsb29tIGZpbHRlci5cbiAgICovXG4gIG5vZGVNYXRjaGVkUXVlcmllczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdEZWZpbml0aW9uRmFjdG9yeSBleHRlbmRzIERlZmluaXRpb25GYWN0b3J5PFZpZXdEZWZpbml0aW9uPiB7fVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld1VwZGF0ZUZuIHsgKGNoZWNrOiBOb2RlQ2hlY2tGbiwgdmlldzogVmlld0RhdGEpOiB2b2lkOyB9XG5cbi8vIGhlbHBlciBmdW5jdGlvbnMgdG8gY3JlYXRlIGFuIG92ZXJsb2FkZWQgZnVuY3Rpb24gdHlwZS5cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZUNoZWNrRm4ge1xuICAodmlldzogVmlld0RhdGEsIG5vZGVJbmRleDogbnVtYmVyLCBhcmdTdHlsZTogQXJndW1lbnRUeXBlLkR5bmFtaWMsIHZhbHVlczogYW55W10pOiBhbnk7XG5cbiAgKHZpZXc6IFZpZXdEYXRhLCBub2RlSW5kZXg6IG51bWJlciwgYXJnU3R5bGU6IEFyZ3VtZW50VHlwZS5JbmxpbmUsIHYwPzogYW55LCB2MT86IGFueSwgdjI/OiBhbnksXG4gICB2Mz86IGFueSwgdjQ/OiBhbnksIHY1PzogYW55LCB2Nj86IGFueSwgdjc/OiBhbnksIHY4PzogYW55LCB2OT86IGFueSk6IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gQXJndW1lbnRUeXBlIHtJbmxpbmUgPSAwLCBEeW5hbWljID0gMX1cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3SGFuZGxlRXZlbnRGbiB7XG4gICh2aWV3OiBWaWV3RGF0YSwgbm9kZUluZGV4OiBudW1iZXIsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogYW55KTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCaXRtYXNrIGZvciBWaWV3RGVmaW5pdGlvbi5mbGFncy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gVmlld0ZsYWdzIHtcbiAgTm9uZSA9IDAsXG4gIE9uUHVzaCA9IDEgPDwgMSxcbn1cblxuLyoqXG4gKiBBIG5vZGUgZGVmaW5pdGlvbiBpbiB0aGUgdmlldy5cbiAqXG4gKiBOb3RlOiBXZSB1c2Ugb25lIHR5cGUgZm9yIGFsbCBub2RlcyBzbyB0aGF0IGxvb3BzIHRoYXQgbG9vcCBvdmVyIGFsbCBub2Rlc1xuICogb2YgYSBWaWV3RGVmaW5pdGlvbiBzdGF5IG1vbm9tb3JwaGljIVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vZGVEZWYge1xuICBmbGFnczogTm9kZUZsYWdzO1xuICAvLyBJbmRleCBvZiB0aGUgbm9kZSBpbiB2aWV3IGRhdGEgYW5kIHZpZXcgZGVmaW5pdGlvbiAodGhvc2UgYXJlIHRoZSBzYW1lKVxuICBub2RlSW5kZXg6IG51bWJlcjtcbiAgLy8gSW5kZXggb2YgdGhlIG5vZGUgaW4gdGhlIGNoZWNrIGZ1bmN0aW9uc1xuICAvLyBEaWZmZXIgZnJvbSBub2RlSW5kZXggd2hlbiBub2RlcyBhcmUgYWRkZWQgb3IgcmVtb3ZlZCBhdCBydW50aW1lIChpZSBhZnRlciBjb21waWxhdGlvbilcbiAgY2hlY2tJbmRleDogbnVtYmVyO1xuICBwYXJlbnQ6IE5vZGVEZWZ8bnVsbDtcbiAgcmVuZGVyUGFyZW50OiBOb2RlRGVmfG51bGw7XG4gIC8qKiB0aGlzIGlzIGNoZWNrZWQgYWdhaW5zdCBOZ0NvbnRlbnREZWYuaW5kZXggdG8gZmluZCBtYXRjaGVkIG5vZGVzICovXG4gIG5nQ29udGVudEluZGV4OiBudW1iZXJ8bnVsbDtcbiAgLyoqIG51bWJlciBvZiB0cmFuc2l0aXZlIGNoaWxkcmVuICovXG4gIGNoaWxkQ291bnQ6IG51bWJlcjtcbiAgLyoqIGFnZ3JlZ2F0ZWQgTm9kZUZsYWdzIGZvciBhbGwgdHJhbnNpdGl2ZSBjaGlsZHJlbiAoZG9lcyBub3QgaW5jbHVkZSBzZWxmKSAqKi9cbiAgY2hpbGRGbGFnczogTm9kZUZsYWdzO1xuICAvKiogYWdncmVnYXRlZCBOb2RlRmxhZ3MgZm9yIGFsbCBkaXJlY3QgY2hpbGRyZW4gKGRvZXMgbm90IGluY2x1ZGUgc2VsZikgKiovXG4gIGRpcmVjdENoaWxkRmxhZ3M6IE5vZGVGbGFncztcblxuICBiaW5kaW5nSW5kZXg6IG51bWJlcjtcbiAgYmluZGluZ3M6IEJpbmRpbmdEZWZbXTtcbiAgYmluZGluZ0ZsYWdzOiBCaW5kaW5nRmxhZ3M7XG4gIG91dHB1dEluZGV4OiBudW1iZXI7XG4gIG91dHB1dHM6IE91dHB1dERlZltdO1xuICAvKipcbiAgICogcmVmZXJlbmNlcyB0aGF0IHRoZSB1c2VyIHBsYWNlZCBvbiB0aGUgZWxlbWVudFxuICAgKi9cbiAgcmVmZXJlbmNlczoge1tyZWZJZDogc3RyaW5nXTogUXVlcnlWYWx1ZVR5cGV9O1xuICAvKipcbiAgICogaWRzIGFuZCB2YWx1ZSB0eXBlcyBvZiBhbGwgcXVlcmllcyB0aGF0IGFyZSBtYXRjaGVkIGJ5IHRoaXMgbm9kZS5cbiAgICovXG4gIG1hdGNoZWRRdWVyaWVzOiB7W3F1ZXJ5SWQ6IG51bWJlcl06IFF1ZXJ5VmFsdWVUeXBlfTtcbiAgLyoqIEJpbmFyeSBvciBvZiBhbGwgbWF0Y2hlZCBxdWVyeSBpZHMgb2YgdGhpcyBub2RlLiAqL1xuICBtYXRjaGVkUXVlcnlJZHM6IG51bWJlcjtcbiAgLyoqXG4gICAqIEJpbmFyeSBvciBvZiBhbGwgcXVlcnkgaWRzIHRoYXQgYXJlIG1hdGNoZWQgYnkgb25lIG9mIHRoZSBjaGlsZHJlbi5cbiAgICogVGhpcyBpbmNsdWRlcyBxdWVyeSBpZHMgZnJvbSB0ZW1wbGF0ZXMgYXMgd2VsbC5cbiAgICogVXNlZCBhcyBhIGJsb29tIGZpbHRlci5cbiAgICovXG4gIGNoaWxkTWF0Y2hlZFF1ZXJpZXM6IG51bWJlcjtcbiAgZWxlbWVudDogRWxlbWVudERlZnxudWxsO1xuICBwcm92aWRlcjogUHJvdmlkZXJEZWZ8bnVsbDtcbiAgdGV4dDogVGV4dERlZnxudWxsO1xuICBxdWVyeTogUXVlcnlEZWZ8bnVsbDtcbiAgbmdDb250ZW50OiBOZ0NvbnRlbnREZWZ8bnVsbDtcbn1cblxuLyoqXG4gKiBCaXRtYXNrIGZvciBOb2RlRGVmLmZsYWdzLlxuICogTmFtaW5nIGNvbnZlbnRpb246XG4gKiAtIGBUeXBlLi4uYDogZmxhZ3MgdGhhdCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlXG4gKiAtIGBDYXQuLi5gOiB1bmlvbiBvZiBtdWx0aXBsZSBgVHlwZS4uLmAgKHNob3J0IGZvciBjYXRlZ29yeSkuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIE5vZGVGbGFncyB7XG4gIE5vbmUgPSAwLFxuICBUeXBlRWxlbWVudCA9IDEgPDwgMCxcbiAgVHlwZVRleHQgPSAxIDw8IDEsXG4gIFByb2plY3RlZFRlbXBsYXRlID0gMSA8PCAyLFxuICBDYXRSZW5kZXJOb2RlID0gVHlwZUVsZW1lbnQgfCBUeXBlVGV4dCxcbiAgVHlwZU5nQ29udGVudCA9IDEgPDwgMyxcbiAgVHlwZVBpcGUgPSAxIDw8IDQsXG4gIFR5cGVQdXJlQXJyYXkgPSAxIDw8IDUsXG4gIFR5cGVQdXJlT2JqZWN0ID0gMSA8PCA2LFxuICBUeXBlUHVyZVBpcGUgPSAxIDw8IDcsXG4gIENhdFB1cmVFeHByZXNzaW9uID0gVHlwZVB1cmVBcnJheSB8IFR5cGVQdXJlT2JqZWN0IHwgVHlwZVB1cmVQaXBlLFxuICBUeXBlVmFsdWVQcm92aWRlciA9IDEgPDwgOCxcbiAgVHlwZUNsYXNzUHJvdmlkZXIgPSAxIDw8IDksXG4gIFR5cGVGYWN0b3J5UHJvdmlkZXIgPSAxIDw8IDEwLFxuICBUeXBlVXNlRXhpc3RpbmdQcm92aWRlciA9IDEgPDwgMTEsXG4gIExhenlQcm92aWRlciA9IDEgPDwgMTIsXG4gIFByaXZhdGVQcm92aWRlciA9IDEgPDwgMTMsXG4gIFR5cGVEaXJlY3RpdmUgPSAxIDw8IDE0LFxuICBDb21wb25lbnQgPSAxIDw8IDE1LFxuICBDYXRQcm92aWRlck5vRGlyZWN0aXZlID1cbiAgICAgIFR5cGVWYWx1ZVByb3ZpZGVyIHwgVHlwZUNsYXNzUHJvdmlkZXIgfCBUeXBlRmFjdG9yeVByb3ZpZGVyIHwgVHlwZVVzZUV4aXN0aW5nUHJvdmlkZXIsXG4gIENhdFByb3ZpZGVyID0gQ2F0UHJvdmlkZXJOb0RpcmVjdGl2ZSB8IFR5cGVEaXJlY3RpdmUsXG4gIE9uSW5pdCA9IDEgPDwgMTYsXG4gIE9uRGVzdHJveSA9IDEgPDwgMTcsXG4gIERvQ2hlY2sgPSAxIDw8IDE4LFxuICBPbkNoYW5nZXMgPSAxIDw8IDE5LFxuICBBZnRlckNvbnRlbnRJbml0ID0gMSA8PCAyMCxcbiAgQWZ0ZXJDb250ZW50Q2hlY2tlZCA9IDEgPDwgMjEsXG4gIEFmdGVyVmlld0luaXQgPSAxIDw8IDIyLFxuICBBZnRlclZpZXdDaGVja2VkID0gMSA8PCAyMyxcbiAgRW1iZWRkZWRWaWV3cyA9IDEgPDwgMjQsXG4gIENvbXBvbmVudFZpZXcgPSAxIDw8IDI1LFxuICBUeXBlQ29udGVudFF1ZXJ5ID0gMSA8PCAyNixcbiAgVHlwZVZpZXdRdWVyeSA9IDEgPDwgMjcsXG4gIFN0YXRpY1F1ZXJ5ID0gMSA8PCAyOCxcbiAgRHluYW1pY1F1ZXJ5ID0gMSA8PCAyOSxcbiAgVHlwZU5nTW9kdWxlID0gMSA8PCAzMCxcbiAgQ2F0UXVlcnkgPSBUeXBlQ29udGVudFF1ZXJ5IHwgVHlwZVZpZXdRdWVyeSxcblxuICAvLyBtdXR1YWxseSBleGNsdXNpdmUgdmFsdWVzLi4uXG4gIFR5cGVzID0gQ2F0UmVuZGVyTm9kZSB8IFR5cGVOZ0NvbnRlbnQgfCBUeXBlUGlwZSB8IENhdFB1cmVFeHByZXNzaW9uIHwgQ2F0UHJvdmlkZXIgfCBDYXRRdWVyeVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmRpbmdEZWYge1xuICBmbGFnczogQmluZGluZ0ZsYWdzO1xuICBuczogc3RyaW5nfG51bGw7XG4gIG5hbWU6IHN0cmluZ3xudWxsO1xuICBub25NaW5pZmllZE5hbWU6IHN0cmluZ3xudWxsO1xuICBzZWN1cml0eUNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dHxudWxsO1xuICBzdWZmaXg6IHN0cmluZ3xudWxsO1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBCaW5kaW5nRmxhZ3Mge1xuICBUeXBlRWxlbWVudEF0dHJpYnV0ZSA9IDEgPDwgMCxcbiAgVHlwZUVsZW1lbnRDbGFzcyA9IDEgPDwgMSxcbiAgVHlwZUVsZW1lbnRTdHlsZSA9IDEgPDwgMixcbiAgVHlwZVByb3BlcnR5ID0gMSA8PCAzLFxuICBTeW50aGV0aWNQcm9wZXJ0eSA9IDEgPDwgNCxcbiAgU3ludGhldGljSG9zdFByb3BlcnR5ID0gMSA8PCA1LFxuICBDYXRTeW50aGV0aWNQcm9wZXJ0eSA9IFN5bnRoZXRpY1Byb3BlcnR5IHwgU3ludGhldGljSG9zdFByb3BlcnR5LFxuXG4gIC8vIG11dHVhbGx5IGV4Y2x1c2l2ZSB2YWx1ZXMuLi5cbiAgVHlwZXMgPSBUeXBlRWxlbWVudEF0dHJpYnV0ZSB8IFR5cGVFbGVtZW50Q2xhc3MgfCBUeXBlRWxlbWVudFN0eWxlIHwgVHlwZVByb3BlcnR5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0RGVmIHtcbiAgdHlwZTogT3V0cHV0VHlwZTtcbiAgdGFyZ2V0OiAnd2luZG93J3wnZG9jdW1lbnQnfCdib2R5J3wnY29tcG9uZW50J3xudWxsO1xuICBldmVudE5hbWU6IHN0cmluZztcbiAgcHJvcE5hbWU6IHN0cmluZ3xudWxsO1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBPdXRwdXRUeXBlIHtFbGVtZW50T3V0cHV0LCBEaXJlY3RpdmVPdXRwdXR9XG5cbmV4cG9ydCBjb25zdCBlbnVtIFF1ZXJ5VmFsdWVUeXBlIHtcbiAgRWxlbWVudFJlZiA9IDAsXG4gIFJlbmRlckVsZW1lbnQgPSAxLFxuICBUZW1wbGF0ZVJlZiA9IDIsXG4gIFZpZXdDb250YWluZXJSZWYgPSAzLFxuICBQcm92aWRlciA9IDRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50RGVmIHtcbiAgLy8gc2V0IHRvIG51bGwgZm9yIGA8bmctY29udGFpbmVyPmBcbiAgbmFtZTogc3RyaW5nfG51bGw7XG4gIG5zOiBzdHJpbmd8bnVsbDtcbiAgLyoqIG5zLCBuYW1lLCB2YWx1ZSAqL1xuICBhdHRyczogW3N0cmluZywgc3RyaW5nLCBzdHJpbmddW118bnVsbDtcbiAgdGVtcGxhdGU6IFZpZXdEZWZpbml0aW9ufG51bGw7XG4gIGNvbXBvbmVudFByb3ZpZGVyOiBOb2RlRGVmfG51bGw7XG4gIGNvbXBvbmVudFJlbmRlcmVyVHlwZTogUmVuZGVyZXJUeXBlMnxudWxsO1xuICAvLyBjbG9zdXJlIHRvIGFsbG93IHJlY3Vyc2l2ZSBjb21wb25lbnRzXG4gIGNvbXBvbmVudFZpZXc6IFZpZXdEZWZpbml0aW9uRmFjdG9yeXxudWxsO1xuICAvKipcbiAgICogdmlzaWJsZSBwdWJsaWMgcHJvdmlkZXJzIGZvciBESSBpbiB0aGUgdmlldyxcbiAgICogYXMgc2VlIGZyb20gdGhpcyBlbGVtZW50LiBUaGlzIGRvZXMgbm90IGluY2x1ZGUgcHJpdmF0ZSBwcm92aWRlcnMuXG4gICAqL1xuICBwdWJsaWNQcm92aWRlcnM6IHtbdG9rZW5LZXk6IHN0cmluZ106IE5vZGVEZWZ9fG51bGw7XG4gIC8qKlxuICAgKiBzYW1lIGFzIHZpc2libGVQdWJsaWNQcm92aWRlcnMsIGJ1dCBhbHNvIGluY2x1ZGVzIHByaXZhdGUgcHJvdmlkZXJzXG4gICAqIHRoYXQgYXJlIGxvY2F0ZWQgb24gdGhpcyBlbGVtZW50LlxuICAgKi9cbiAgYWxsUHJvdmlkZXJzOiB7W3Rva2VuS2V5OiBzdHJpbmddOiBOb2RlRGVmfXxudWxsO1xuICBoYW5kbGVFdmVudDogRWxlbWVudEhhbmRsZUV2ZW50Rm58bnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50SGFuZGxlRXZlbnRGbiB7ICh2aWV3OiBWaWV3RGF0YSwgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50OiBhbnkpOiBib29sZWFuOyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJEZWYge1xuICB0b2tlbjogYW55O1xuICB2YWx1ZTogYW55O1xuICBkZXBzOiBEZXBEZWZbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZ01vZHVsZVByb3ZpZGVyRGVmIHtcbiAgZmxhZ3M6IE5vZGVGbGFncztcbiAgaW5kZXg6IG51bWJlcjtcbiAgdG9rZW46IGFueTtcbiAgdmFsdWU6IGFueTtcbiAgZGVwczogRGVwRGVmW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVwRGVmIHtcbiAgZmxhZ3M6IERlcEZsYWdzO1xuICB0b2tlbjogYW55O1xuICB0b2tlbktleTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJpdG1hc2sgZm9yIERJIGZsYWdzXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIERlcEZsYWdzIHtcbiAgTm9uZSA9IDAsXG4gIFNraXBTZWxmID0gMSA8PCAwLFxuICBPcHRpb25hbCA9IDEgPDwgMSxcbiAgU2VsZiA9IDEgPDwgMixcbiAgVmFsdWUgPSAxIDw8IDMsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dERlZiB7IHByZWZpeDogc3RyaW5nOyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlEZWYge1xuICBpZDogbnVtYmVyO1xuICAvLyB2YXJpYW50IG9mIHRoZSBpZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGFnYWluc3QgTm9kZURlZi5tYXRjaGVkUXVlcnlJZHMsIC4uLlxuICBmaWx0ZXJJZDogbnVtYmVyO1xuICBiaW5kaW5nczogUXVlcnlCaW5kaW5nRGVmW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlCaW5kaW5nRGVmIHtcbiAgcHJvcE5hbWU6IHN0cmluZztcbiAgYmluZGluZ1R5cGU6IFF1ZXJ5QmluZGluZ1R5cGU7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFF1ZXJ5QmluZGluZ1R5cGUge0ZpcnN0ID0gMCwgQWxsID0gMX1cblxuZXhwb3J0IGludGVyZmFjZSBOZ0NvbnRlbnREZWYge1xuICAvKipcbiAgICogdGhpcyBpbmRleCBpcyBjaGVja2VkIGFnYWluc3QgTm9kZURlZi5uZ0NvbnRlbnRJbmRleCB0byBmaW5kIHRoZSBub2Rlc1xuICAgKiB0aGF0IGFyZSBtYXRjaGVkIGJ5IHRoaXMgbmctY29udGVudC5cbiAgICogTm90ZSB0aGF0IGEgTm9kZURlZiB3aXRoIGFuIG5nLWNvbnRlbnQgY2FuIGJlIHJlcHJvamVjdGVkLCBpLmUuXG4gICAqIGhhdmUgYSBuZ0NvbnRlbnRJbmRleCBvbiBpdHMgb3duLlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRGF0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaW50ZXJmYWNlIE5nTW9kdWxlRGF0YSBleHRlbmRzIEluamVjdG9yLCBOZ01vZHVsZVJlZjxhbnk+IHtcbiAgLy8gTm90ZTogd2UgYXJlIHVzaW5nIHRoZSBwcmVmaXggXyBhcyBOZ01vZHVsZURhdGEgaXMgYW4gTmdNb2R1bGVSZWYgYW5kIHRoZXJlZm9yZSBkaXJlY3RseVxuICAvLyBleHBvc2VkIHRvIHRoZSB1c2VyLlxuICBfZGVmOiBOZ01vZHVsZURlZmluaXRpb247XG4gIF9wYXJlbnQ6IEluamVjdG9yO1xuICBfcHJvdmlkZXJzOiBhbnlbXTtcbn1cblxuLyoqXG4gKiBWaWV3IGluc3RhbmNlIGRhdGEuXG4gKiBBdHRlbnRpb246IEFkZGluZyBmaWVsZHMgdG8gdGhpcyBpcyBwZXJmb3JtYW5jZSBzZW5zaXRpdmUhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmlld0RhdGEge1xuICBkZWY6IFZpZXdEZWZpbml0aW9uO1xuICByb290OiBSb290RGF0YTtcbiAgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgLy8gaW5kZXggb2YgY29tcG9uZW50IHByb3ZpZGVyIC8gYW5jaG9yLlxuICBwYXJlbnROb2RlRGVmOiBOb2RlRGVmfG51bGw7XG4gIHBhcmVudDogVmlld0RhdGF8bnVsbDtcbiAgdmlld0NvbnRhaW5lclBhcmVudDogVmlld0RhdGF8bnVsbDtcbiAgY29tcG9uZW50OiBhbnk7XG4gIGNvbnRleHQ6IGFueTtcbiAgLy8gQXR0ZW50aW9uOiBOZXZlciBsb29wIG92ZXIgdGhpcywgYXMgdGhpcyB3aWxsXG4gIC8vIGNyZWF0ZSBhIHBvbHltb3JwaGljIHVzYWdlIHNpdGUuXG4gIC8vIEluc3RlYWQ6IEFsd2F5cyBsb29wIG92ZXIgVmlld0RlZmluaXRpb24ubm9kZXMsXG4gIC8vIGFuZCBjYWxsIHRoZSByaWdodCBhY2Nlc3NvciAoZS5nLiBgZWxlbWVudERhdGFgKSBiYXNlZCBvblxuICAvLyB0aGUgTm9kZVR5cGUuXG4gIG5vZGVzOiB7W2tleTogbnVtYmVyXTogTm9kZURhdGF9O1xuICBzdGF0ZTogVmlld1N0YXRlO1xuICBvbGRWYWx1ZXM6IGFueVtdO1xuICBkaXNwb3NhYmxlczogRGlzcG9zYWJsZUZuW118bnVsbDtcbiAgaW5pdEluZGV4OiBudW1iZXI7XG59XG5cbi8qKlxuICogQml0bWFzayBvZiBzdGF0ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gVmlld1N0YXRlIHtcbiAgQmVmb3JlRmlyc3RDaGVjayA9IDEgPDwgMCxcbiAgRmlyc3RDaGVjayA9IDEgPDwgMSxcbiAgQXR0YWNoZWQgPSAxIDw8IDIsXG4gIENoZWNrc0VuYWJsZWQgPSAxIDw8IDMsXG4gIElzUHJvamVjdGVkVmlldyA9IDEgPDwgNCxcbiAgQ2hlY2tQcm9qZWN0ZWRWaWV3ID0gMSA8PCA1LFxuICBDaGVja1Byb2plY3RlZFZpZXdzID0gMSA8PCA2LFxuICBEZXN0cm95ZWQgPSAxIDw8IDcsXG5cbiAgLy8gSW5pdFN0YXRlIFVzZXMgMyBiaXRzXG4gIEluaXRTdGF0ZV9NYXNrID0gNyA8PCA4LFxuICBJbml0U3RhdGVfQmVmb3JlSW5pdCA9IDAgPDwgOCxcbiAgSW5pdFN0YXRlX0NhbGxpbmdPbkluaXQgPSAxIDw8IDgsXG4gIEluaXRTdGF0ZV9DYWxsaW5nQWZ0ZXJDb250ZW50SW5pdCA9IDIgPDwgOCxcbiAgSW5pdFN0YXRlX0NhbGxpbmdBZnRlclZpZXdJbml0ID0gMyA8PCA4LFxuICBJbml0U3RhdGVfQWZ0ZXJJbml0ID0gNCA8PCA4LFxuXG4gIENhdERldGVjdENoYW5nZXMgPSBBdHRhY2hlZCB8IENoZWNrc0VuYWJsZWQsXG4gIENhdEluaXQgPSBCZWZvcmVGaXJzdENoZWNrIHwgQ2F0RGV0ZWN0Q2hhbmdlcyB8IEluaXRTdGF0ZV9CZWZvcmVJbml0XG59XG5cbi8vIENhbGxlZCBiZWZvcmUgZWFjaCBjeWNsZSBvZiBhIHZpZXcncyBjaGVjayB0byBkZXRlY3Qgd2hldGhlciB0aGlzIGlzIGluIHRoZVxuLy8gaW5pdFN0YXRlIGZvciB3aGljaCB3ZSBuZWVkIHRvIGNhbGwgbmdPbkluaXQsIG5nQWZ0ZXJDb250ZW50SW5pdCBvciBuZ0FmdGVyVmlld0luaXRcbi8vIGxpZmVjeWNsZSBtZXRob2RzLiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjaGVjayBjeWNsZSBzaG91bGQgY2FsbCBsaWZlY3ljbGVcbi8vIG1ldGhvZHMuXG5leHBvcnQgZnVuY3Rpb24gc2hpZnRJbml0U3RhdGUoXG4gICAgdmlldzogVmlld0RhdGEsIHByaW9ySW5pdFN0YXRlOiBWaWV3U3RhdGUsIG5ld0luaXRTdGF0ZTogVmlld1N0YXRlKTogYm9vbGVhbiB7XG4gIC8vIE9ubHkgdXBkYXRlIHRoZSBJbml0U3RhdGUgaWYgd2UgYXJlIGN1cnJlbnRseSBpbiB0aGUgcHJpb3Igc3RhdGUuXG4gIC8vIEZvciBleGFtcGxlLCBvbmx5IG1vdmUgaW50byBDYWxsaW5nSW5pdCBpZiB3ZSBhcmUgaW4gQmVmb3JlSW5pdC4gT25seVxuICAvLyBtb3ZlIGludG8gQ2FsbGluZ0NvbnRlbnRJbml0IGlmIHdlIGFyZSBpbiBDYWxsaW5nSW5pdC4gTm9ybWFsbHkgdGhpcyB3aWxsXG4gIC8vIGFsd2F5cyBiZSB0cnVlIGJlY2F1c2Ugb2YgaG93IGNoZWNrQ3ljbGUgaXMgY2FsbGVkIGluIGNoZWNrQW5kVXBkYXRlVmlldy5cbiAgLy8gSG93ZXZlciwgaWYgY2hlY2tBbmRVcGRhdGVWaWV3IGlzIGNhbGxlZCByZWN1cnNpdmVseSBvciBpZiBhbiBleGNlcHRpb24gaXNcbiAgLy8gdGhyb3duIHdoaWxlIGNoZWNrQW5kVXBkYXRlVmlldyBpcyBydW5uaW5nLCBjaGVja0FuZFVwZGF0ZVZpZXcgc3RhcnRzIG92ZXJcbiAgLy8gZnJvbSB0aGUgYmVnaW5uaW5nLiBUaGlzIGVuc3VyZXMgdGhlIHN0YXRlIGlzIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyxcbiAgLy8gdGVybWluYXRpbmcgaW4gdGhlIEFmdGVySW5pdCBzdGF0ZSwgd2hpY2ggZW5zdXJlcyB0aGUgSW5pdCBtZXRob2RzIGFyZSBjYWxsZWRcbiAgLy8gYXQgbGVhc3Qgb25jZSBhbmQgb25seSBvbmNlLlxuICBjb25zdCBzdGF0ZSA9IHZpZXcuc3RhdGU7XG4gIGNvbnN0IGluaXRTdGF0ZSA9IHN0YXRlICYgVmlld1N0YXRlLkluaXRTdGF0ZV9NYXNrO1xuICBpZiAoaW5pdFN0YXRlID09PSBwcmlvckluaXRTdGF0ZSkge1xuICAgIHZpZXcuc3RhdGUgPSAoc3RhdGUgJiB+Vmlld1N0YXRlLkluaXRTdGF0ZV9NYXNrKSB8IG5ld0luaXRTdGF0ZTtcbiAgICB2aWV3LmluaXRJbmRleCA9IC0xO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBpbml0U3RhdGUgPT09IG5ld0luaXRTdGF0ZTtcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBsaWZlY3ljbGUgaW5pdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBmb3IgdGhlIG5vZGUgd2l0aFxuLy8gdGhlIGdpdmVuIGluaXQgaW5kZXguXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQ2FsbExpZmVjeWNsZUluaXRIb29rKFxuICAgIHZpZXc6IFZpZXdEYXRhLCBpbml0U3RhdGU6IFZpZXdTdGF0ZSwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICBpZiAoKHZpZXcuc3RhdGUgJiBWaWV3U3RhdGUuSW5pdFN0YXRlX01hc2spID09PSBpbml0U3RhdGUgJiYgdmlldy5pbml0SW5kZXggPD0gaW5kZXgpIHtcbiAgICB2aWV3LmluaXRJbmRleCA9IGluZGV4ICsgMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcG9zYWJsZUZuIHsgKCk6IHZvaWQ7IH1cblxuLyoqXG4gKiBOb2RlIGluc3RhbmNlIGRhdGEuXG4gKlxuICogV2UgaGF2ZSBhIHNlcGFyYXRlIHR5cGUgcGVyIE5vZGVUeXBlIHRvIHNhdmUgbWVtb3J5XG4gKiAoVGV4dERhdGEgfCBFbGVtZW50RGF0YSB8IFByb3ZpZGVyRGF0YSB8IFB1cmVFeHByZXNzaW9uRGF0YSB8IFF1ZXJ5TGlzdDxhbnk+KVxuICpcbiAqIFRvIGtlZXAgb3VyIGNvZGUgbW9ub21vcnBoaWMsXG4gKiB3ZSBwcm9oaWJpdCB1c2luZyBgTm9kZURhdGFgIGRpcmVjdGx5IGJ1dCBlbmZvcmNlIHRoZSB1c2Ugb2YgYWNjZXNzb3JzIChgYXNFbGVtZW50RGF0YWAsIC4uLikuXG4gKiBUaGlzIHdheSwgbm8gdXNhZ2Ugc2l0ZSBjYW4gZ2V0IGEgYE5vZGVEYXRhYCBmcm9tIHZpZXcubm9kZXMgYW5kIHRoZW4gdXNlIGl0IGZvciBkaWZmZXJlbnRcbiAqIHB1cnBvc2VzLlxuICovXG5leHBvcnQgY2xhc3MgTm9kZURhdGEgeyBwcml2YXRlIF9fYnJhbmQ6IGFueTsgfVxuXG4vKipcbiAqIERhdGEgZm9yIGFuIGluc3RhbnRpYXRlZCBOb2RlVHlwZS5UZXh0LlxuICpcbiAqIEF0dGVudGlvbjogQWRkaW5nIGZpZWxkcyB0byB0aGlzIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0RGF0YSB7IHJlbmRlclRleHQ6IGFueTsgfVxuXG4vKipcbiAqIEFjY2Vzc29yIGZvciB2aWV3Lm5vZGVzLCBlbmZvcmNpbmcgdGhhdCBldmVyeSB1c2FnZSBzaXRlIHN0YXlzIG1vbm9tb3JwaGljLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNUZXh0RGF0YSh2aWV3OiBWaWV3RGF0YSwgaW5kZXg6IG51bWJlcik6IFRleHREYXRhIHtcbiAgcmV0dXJuIDxhbnk+dmlldy5ub2Rlc1tpbmRleF07XG59XG5cbi8qKlxuICogRGF0YSBmb3IgYW4gaW5zdGFudGlhdGVkIE5vZGVUeXBlLkVsZW1lbnQuXG4gKlxuICogQXR0ZW50aW9uOiBBZGRpbmcgZmllbGRzIHRvIHRoaXMgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnREYXRhIHtcbiAgcmVuZGVyRWxlbWVudDogYW55O1xuICBjb21wb25lbnRWaWV3OiBWaWV3RGF0YTtcbiAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lckRhdGF8bnVsbDtcbiAgdGVtcGxhdGU6IFRlbXBsYXRlRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3Q29udGFpbmVyRGF0YSBleHRlbmRzIFZpZXdDb250YWluZXJSZWYge1xuICAvLyBOb3RlOiB3ZSBhcmUgdXNpbmcgdGhlIHByZWZpeCBfIGFzIFZpZXdDb250YWluZXJEYXRhIGlzIGEgVmlld0NvbnRhaW5lclJlZiBhbmQgdGhlcmVmb3JlXG4gIC8vIGRpcmVjdGx5XG4gIC8vIGV4cG9zZWQgdG8gdGhlIHVzZXIuXG4gIF9lbWJlZGRlZFZpZXdzOiBWaWV3RGF0YVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlRGF0YSBleHRlbmRzIFRlbXBsYXRlUmVmPGFueT4ge1xuICAvLyB2aWV3cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkIGZyb20gdGhlIHRlbXBsYXRlXG4gIC8vIG9mIHRoaXMgZWxlbWVudCxcbiAgLy8gYnV0IGluc2VydGVkIGludG8gdGhlIGVtYmVkZGVkVmlld3Mgb2YgYW5vdGhlciBlbGVtZW50LlxuICAvLyBCeSBkZWZhdWx0LCB0aGlzIGlzIHVuZGVmaW5lZC5cbiAgLy8gTm90ZTogd2UgYXJlIHVzaW5nIHRoZSBwcmVmaXggXyBhcyBUZW1wbGF0ZURhdGEgaXMgYSBUZW1wbGF0ZVJlZiBhbmQgdGhlcmVmb3JlIGRpcmVjdGx5XG4gIC8vIGV4cG9zZWQgdG8gdGhlIHVzZXIuXG4gIF9wcm9qZWN0ZWRWaWV3czogVmlld0RhdGFbXTtcbn1cblxuLyoqXG4gKiBBY2Nlc3NvciBmb3Igdmlldy5ub2RlcywgZW5mb3JjaW5nIHRoYXQgZXZlcnkgdXNhZ2Ugc2l0ZSBzdGF5cyBtb25vbW9ycGhpYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzRWxlbWVudERhdGEodmlldzogVmlld0RhdGEsIGluZGV4OiBudW1iZXIpOiBFbGVtZW50RGF0YSB7XG4gIHJldHVybiA8YW55PnZpZXcubm9kZXNbaW5kZXhdO1xufVxuXG4vKipcbiAqIERhdGEgZm9yIGFuIGluc3RhbnRpYXRlZCBOb2RlVHlwZS5Qcm92aWRlci5cbiAqXG4gKiBBdHRlbnRpb246IEFkZGluZyBmaWVsZHMgdG8gdGhpcyBpcyBwZXJmb3JtYW5jZSBzZW5zaXRpdmUhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJEYXRhIHsgaW5zdGFuY2U6IGFueTsgfVxuXG4vKipcbiAqIEFjY2Vzc29yIGZvciB2aWV3Lm5vZGVzLCBlbmZvcmNpbmcgdGhhdCBldmVyeSB1c2FnZSBzaXRlIHN0YXlzIG1vbm9tb3JwaGljLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNQcm92aWRlckRhdGEodmlldzogVmlld0RhdGEsIGluZGV4OiBudW1iZXIpOiBQcm92aWRlckRhdGEge1xuICByZXR1cm4gPGFueT52aWV3Lm5vZGVzW2luZGV4XTtcbn1cblxuLyoqXG4gKiBEYXRhIGZvciBhbiBpbnN0YW50aWF0ZWQgTm9kZVR5cGUuUHVyZUV4cHJlc3Npb24uXG4gKlxuICogQXR0ZW50aW9uOiBBZGRpbmcgZmllbGRzIHRvIHRoaXMgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFB1cmVFeHByZXNzaW9uRGF0YSB7IHZhbHVlOiBhbnk7IH1cblxuLyoqXG4gKiBBY2Nlc3NvciBmb3Igdmlldy5ub2RlcywgZW5mb3JjaW5nIHRoYXQgZXZlcnkgdXNhZ2Ugc2l0ZSBzdGF5cyBtb25vbW9ycGhpYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzUHVyZUV4cHJlc3Npb25EYXRhKHZpZXc6IFZpZXdEYXRhLCBpbmRleDogbnVtYmVyKTogUHVyZUV4cHJlc3Npb25EYXRhIHtcbiAgcmV0dXJuIDxhbnk+dmlldy5ub2Rlc1tpbmRleF07XG59XG5cbi8qKlxuICogQWNjZXNzb3IgZm9yIHZpZXcubm9kZXMsIGVuZm9yY2luZyB0aGF0IGV2ZXJ5IHVzYWdlIHNpdGUgc3RheXMgbW9ub21vcnBoaWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc1F1ZXJ5TGlzdCh2aWV3OiBWaWV3RGF0YSwgaW5kZXg6IG51bWJlcik6IFF1ZXJ5TGlzdDxhbnk+IHtcbiAgcmV0dXJuIDxhbnk+dmlldy5ub2Rlc1tpbmRleF07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm9vdERhdGEge1xuICBpbmplY3RvcjogSW5qZWN0b3I7XG4gIG5nTW9kdWxlOiBOZ01vZHVsZVJlZjxhbnk+O1xuICBwcm9qZWN0YWJsZU5vZGVzOiBhbnlbXVtdO1xuICBzZWxlY3Rvck9yTm9kZTogYW55O1xuICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTI7XG4gIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyO1xuICBzYW5pdGl6ZXI6IFNhbml0aXplcjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERlYnVnQ29udGV4dCB7XG4gIGFic3RyYWN0IGdldCB2aWV3KCk6IFZpZXdEYXRhO1xuICBhYnN0cmFjdCBnZXQgbm9kZUluZGV4KCk6IG51bWJlcnxudWxsO1xuICBhYnN0cmFjdCBnZXQgaW5qZWN0b3IoKTogSW5qZWN0b3I7XG4gIGFic3RyYWN0IGdldCBjb21wb25lbnQoKTogYW55O1xuICBhYnN0cmFjdCBnZXQgcHJvdmlkZXJUb2tlbnMoKTogYW55W107XG4gIGFic3RyYWN0IGdldCByZWZlcmVuY2VzKCk6IHtba2V5OiBzdHJpbmddOiBhbnl9O1xuICBhYnN0cmFjdCBnZXQgY29udGV4dCgpOiBhbnk7XG4gIGFic3RyYWN0IGdldCBjb21wb25lbnRSZW5kZXJFbGVtZW50KCk6IGFueTtcbiAgYWJzdHJhY3QgZ2V0IHJlbmRlck5vZGUoKTogYW55O1xuICBhYnN0cmFjdCBsb2dFcnJvcihjb25zb2xlOiBDb25zb2xlLCAuLi52YWx1ZXM6IGFueVtdKTogdm9pZDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3RoZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNvbnN0IGVudW0gQ2hlY2tUeXBlIHtDaGVja0FuZFVwZGF0ZSwgQ2hlY2tOb0NoYW5nZXN9XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJPdmVycmlkZSB7XG4gIHRva2VuOiBhbnk7XG4gIGZsYWdzOiBOb2RlRmxhZ3M7XG4gIHZhbHVlOiBhbnk7XG4gIGRlcHM6IChbRGVwRmxhZ3MsIGFueV18YW55KVtdO1xuICBkZXByZWNhdGVkQmVoYXZpb3I6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZXMge1xuICBzZXRDdXJyZW50Tm9kZSh2aWV3OiBWaWV3RGF0YSwgbm9kZUluZGV4OiBudW1iZXIpOiB2b2lkO1xuICBjcmVhdGVSb290VmlldyhcbiAgICAgIGluamVjdG9yOiBJbmplY3RvciwgcHJvamVjdGFibGVOb2RlczogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlOiBzdHJpbmd8YW55LFxuICAgICAgZGVmOiBWaWV3RGVmaW5pdGlvbiwgbmdNb2R1bGU6IE5nTW9kdWxlUmVmPGFueT4sIGNvbnRleHQ/OiBhbnkpOiBWaWV3RGF0YTtcbiAgY3JlYXRlRW1iZWRkZWRWaWV3KHBhcmVudDogVmlld0RhdGEsIGFuY2hvckRlZjogTm9kZURlZiwgdmlld0RlZjogVmlld0RlZmluaXRpb24sIGNvbnRleHQ/OiBhbnkpOlxuICAgICAgVmlld0RhdGE7XG4gIGNyZWF0ZUNvbXBvbmVudFZpZXcoXG4gICAgICBwYXJlbnRWaWV3OiBWaWV3RGF0YSwgbm9kZURlZjogTm9kZURlZiwgdmlld0RlZjogVmlld0RlZmluaXRpb24sIGhvc3RFbGVtZW50OiBhbnkpOiBWaWV3RGF0YTtcbiAgY3JlYXRlTmdNb2R1bGVSZWYoXG4gICAgICBtb2R1bGVUeXBlOiBUeXBlPGFueT4sIHBhcmVudDogSW5qZWN0b3IsIGJvb3RzdHJhcENvbXBvbmVudHM6IFR5cGU8YW55PltdLFxuICAgICAgZGVmOiBOZ01vZHVsZURlZmluaXRpb24pOiBOZ01vZHVsZVJlZjxhbnk+O1xuICBvdmVycmlkZVByb3ZpZGVyKG92ZXJyaWRlOiBQcm92aWRlck92ZXJyaWRlKTogdm9pZDtcbiAgb3ZlcnJpZGVDb21wb25lbnRWaWV3KGNvbXBUeXBlOiBUeXBlPGFueT4sIGNvbXBGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4pOiB2b2lkO1xuICBjbGVhck92ZXJyaWRlcygpOiB2b2lkO1xuICBjaGVja0FuZFVwZGF0ZVZpZXcodmlldzogVmlld0RhdGEpOiB2b2lkO1xuICBjaGVja05vQ2hhbmdlc1ZpZXcodmlldzogVmlld0RhdGEpOiB2b2lkO1xuICBkZXN0cm95Vmlldyh2aWV3OiBWaWV3RGF0YSk6IHZvaWQ7XG4gIHJlc29sdmVEZXAoXG4gICAgICB2aWV3OiBWaWV3RGF0YSwgZWxEZWY6IE5vZGVEZWZ8bnVsbCwgYWxsb3dQcml2YXRlU2VydmljZXM6IGJvb2xlYW4sIGRlcERlZjogRGVwRGVmLFxuICAgICAgbm90Rm91bmRWYWx1ZT86IGFueSk6IGFueTtcbiAgY3JlYXRlRGVidWdDb250ZXh0KHZpZXc6IFZpZXdEYXRhLCBub2RlSW5kZXg6IG51bWJlcik6IERlYnVnQ29udGV4dDtcbiAgaGFuZGxlRXZlbnQ6IFZpZXdIYW5kbGVFdmVudEZuO1xuICB1cGRhdGVEaXJlY3RpdmVzOiAodmlldzogVmlld0RhdGEsIGNoZWNrVHlwZTogQ2hlY2tUeXBlKSA9PiB2b2lkO1xuICB1cGRhdGVSZW5kZXJlcjogKHZpZXc6IFZpZXdEYXRhLCBjaGVja1R5cGU6IENoZWNrVHlwZSkgPT4gdm9pZDtcbiAgZGlydHlQYXJlbnRRdWVyaWVzOiAodmlldzogVmlld0RhdGEpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogVGhpcyBvYmplY3QgaXMgdXNlZCB0byBwcmV2ZW50IGN5Y2xlcyBpbiB0aGUgc291cmNlIGZpbGVzIGFuZCB0byBoYXZlIGEgcGxhY2Ugd2hlcmVcbiAqIGRlYnVnIG1vZGUgY2FuIGhvb2sgaXQuIEl0IGlzIGxhemlseSBmaWxsZWQgd2hlbiBgaXNEZXZNb2RlYCBpcyBrbm93bi5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VzOiBTZXJ2aWNlcyA9IHtcbiAgc2V0Q3VycmVudE5vZGU6IHVuZGVmaW5lZCAhLFxuICBjcmVhdGVSb290VmlldzogdW5kZWZpbmVkICEsXG4gIGNyZWF0ZUVtYmVkZGVkVmlldzogdW5kZWZpbmVkICEsXG4gIGNyZWF0ZUNvbXBvbmVudFZpZXc6IHVuZGVmaW5lZCAhLFxuICBjcmVhdGVOZ01vZHVsZVJlZjogdW5kZWZpbmVkICEsXG4gIG92ZXJyaWRlUHJvdmlkZXI6IHVuZGVmaW5lZCAhLFxuICBvdmVycmlkZUNvbXBvbmVudFZpZXc6IHVuZGVmaW5lZCAhLFxuICBjbGVhck92ZXJyaWRlczogdW5kZWZpbmVkICEsXG4gIGNoZWNrQW5kVXBkYXRlVmlldzogdW5kZWZpbmVkICEsXG4gIGNoZWNrTm9DaGFuZ2VzVmlldzogdW5kZWZpbmVkICEsXG4gIGRlc3Ryb3lWaWV3OiB1bmRlZmluZWQgISxcbiAgcmVzb2x2ZURlcDogdW5kZWZpbmVkICEsXG4gIGNyZWF0ZURlYnVnQ29udGV4dDogdW5kZWZpbmVkICEsXG4gIGhhbmRsZUV2ZW50OiB1bmRlZmluZWQgISxcbiAgdXBkYXRlRGlyZWN0aXZlczogdW5kZWZpbmVkICEsXG4gIHVwZGF0ZVJlbmRlcmVyOiB1bmRlZmluZWQgISxcbiAgZGlydHlQYXJlbnRRdWVyaWVzOiB1bmRlZmluZWQgISxcbn07XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical } from '../util/comparison';\nimport { stringify } from '../util/stringify';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\nexport var NOOP = function () { };\nvar _tokenKeyCache = new Map();\nexport function tokenKey(token) {\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\nvar _renderCompCount = 0;\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\nexport function checkBinding(view, def, bindingIdx, value) {\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\nexport function markParentViewsForCheck(view) {\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        var nodeDef = view.def.nodes[nodeIndex];\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        var parentView = view.parent;\n        return asElementData(parentView, view.parentNodeDef.nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n */\nexport function viewParentEl(view) {\n    var parentView = view.parent;\n    if (parentView) {\n        return view.parentNodeDef.parent;\n    }\n    else {\n        return null;\n    }\n}\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\nexport function isComponentView(view) {\n    return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\n}\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\n}\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    var matchedQueries = {};\n    var matchedQueryIds = 0;\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var _b = tslib_1.__read(_a, 2), queryId = _b[0], valueType = _b[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        var _a;\n        var token;\n        var flags;\n        if (Array.isArray(value)) {\n            _a = tslib_1.__read(value, 2), flags = _a[0], token = _a[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\nexport function getParentRenderElement(view, renderHost, def) {\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (renderParent.element.componentRendererType &&\n                renderParent.element.componentRendererType.encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, def.renderParent.nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\nvar DEFINITION_CACHE = new WeakMap();\nexport function resolveDefinition(factory) {\n    var value = DEFINITION_CACHE.get(factory);\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\nexport function rootRenderNodes(view) {\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    var hostView = compView.parent;\n    var hostElDef = viewParentEl(compView);\n    var startIndex = hostElDef.nodeIndex + 1;\n    var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = hostView.def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!hostView.parent) {\n        // a root view\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n    }\n    else {\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            target.push(renderNode);\n            break;\n    }\n}\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        var match = name.match(NS_PREFIX_RE);\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\nexport function calcBindingFlags(bindings) {\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\nexport function interpolate(valueCount, constAndInterp) {\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\nexport var EMPTY_ARRAY = [];\nexport var EMPTY_MAP = {};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZpZXcvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRixPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLEVBQUMsMkNBQTJDLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDckUsT0FBTyxFQUE2SCxRQUFRLEVBQXlFLGFBQWEsRUFBRSxVQUFVLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFL1AsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFRLGNBQU8sQ0FBQyxDQUFDO0FBRWxDLElBQU0sY0FBYyxHQUFHLElBQUksR0FBRyxFQUFlLENBQUM7QUFFOUMsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLElBQUksR0FBRyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLEdBQUcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDbkQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQWMsRUFBRSxPQUFlLEVBQUUsVUFBa0Is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eUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1dyYXBwZWRWYWx1ZSwgZGV2TW9kZUVxdWFsfSBmcm9tICcuLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nO1xuaW1wb3J0IHtTT1VSQ0V9IGZyb20gJy4uL2RpL2luamVjdG9yJztcbmltcG9ydCB7Vmlld0VuY2Fwc3VsYXRpb259IGZyb20gJy4uL21ldGFkYXRhL3ZpZXcnO1xuaW1wb3J0IHtSZW5kZXJlclR5cGUyfSBmcm9tICcuLi9yZW5kZXIvYXBpJztcbmltcG9ydCB7bG9vc2VJZGVudGljYWx9IGZyb20gJy4uL3V0aWwvY29tcGFyaXNvbic7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuaW1wb3J0IHtleHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9yfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQge0JpbmRpbmdEZWYsIEJpbmRpbmdGbGFncywgRGVmaW5pdGlvbiwgRGVmaW5pdGlvbkZhY3RvcnksIERlcERlZiwgRGVwRmxhZ3MsIEVsZW1lbnREYXRhLCBOb2RlRGVmLCBOb2RlRmxhZ3MsIFF1ZXJ5VmFsdWVUeXBlLCBTZXJ2aWNlcywgVmlld0RhdGEsIFZpZXdEZWZpbml0aW9uLCBWaWV3RGVmaW5pdGlvbkZhY3RvcnksIFZpZXdGbGFncywgVmlld1N0YXRlLCBhc0VsZW1lbnREYXRhLCBhc1RleHREYXRhfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IE5PT1A6IGFueSA9ICgpID0+IHt9O1xuXG5jb25zdCBfdG9rZW5LZXlDYWNoZSA9IG5ldyBNYXA8YW55LCBzdHJpbmc+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbktleSh0b2tlbjogYW55KTogc3RyaW5nIHtcbiAgbGV0IGtleSA9IF90b2tlbktleUNhY2hlLmdldCh0b2tlbik7XG4gIGlmICgha2V5KSB7XG4gICAga2V5ID0gc3RyaW5naWZ5KHRva2VuKSArICdfJyArIF90b2tlbktleUNhY2hlLnNpemU7XG4gICAgX3Rva2VuS2V5Q2FjaGUuc2V0KHRva2VuLCBrZXkpO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBWYWx1ZSh2aWV3OiBWaWV3RGF0YSwgbm9kZUlkeDogbnVtYmVyLCBiaW5kaW5nSWR4OiBudW1iZXIsIHZhbHVlOiBhbnkpOiBhbnkge1xuICBpZiAoV3JhcHBlZFZhbHVlLmlzV3JhcHBlZCh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IFdyYXBwZWRWYWx1ZS51bndyYXAodmFsdWUpO1xuICAgIGNvbnN0IGdsb2JhbEJpbmRpbmdJZHggPSB2aWV3LmRlZi5ub2Rlc1tub2RlSWR4XS5iaW5kaW5nSW5kZXggKyBiaW5kaW5nSWR4O1xuICAgIGNvbnN0IG9sZFZhbHVlID0gV3JhcHBlZFZhbHVlLnVud3JhcCh2aWV3Lm9sZFZhbHVlc1tnbG9iYWxCaW5kaW5nSWR4XSk7XG4gICAgdmlldy5vbGRWYWx1ZXNbZ2xvYmFsQmluZGluZ0lkeF0gPSBuZXcgV3JhcHBlZFZhbHVlKG9sZFZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IFVOREVGSU5FRF9SRU5ERVJFUl9UWVBFX0lEID0gJyQkdW5kZWZpbmVkJztcbmNvbnN0IEVNUFRZX1JFTkRFUkVSX1RZUEVfSUQgPSAnJCRlbXB0eSc7XG5cbi8vIEF0dGVudGlvbjogdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYXMgdG9wIGxldmVsIGZ1bmN0aW9uLlxuLy8gUHV0dGluZyBhbnkgbG9naWMgaW4gaGVyZSB3aWxsIGRlc3Ryb3kgY2xvc3VyZSB0cmVlIHNoYWtpbmchXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXJUeXBlMih2YWx1ZXM6IHtcbiAgc3R5bGVzOiAoc3RyaW5nIHwgYW55W10pW10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLFxuICBkYXRhOiB7W2tpbmQ6IHN0cmluZ106IGFueVtdfVxufSk6IFJlbmRlcmVyVHlwZTIge1xuICByZXR1cm4ge1xuICAgIGlkOiBVTkRFRklORURfUkVOREVSRVJfVFlQRV9JRCxcbiAgICBzdHlsZXM6IHZhbHVlcy5zdHlsZXMsXG4gICAgZW5jYXBzdWxhdGlvbjogdmFsdWVzLmVuY2Fwc3VsYXRpb24sXG4gICAgZGF0YTogdmFsdWVzLmRhdGFcbiAgfTtcbn1cblxubGV0IF9yZW5kZXJDb21wQ291bnQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJlbmRlcmVyVHlwZTIodHlwZT86IFJlbmRlcmVyVHlwZTIgfCBudWxsKTogUmVuZGVyZXJUeXBlMnxudWxsIHtcbiAgaWYgKHR5cGUgJiYgdHlwZS5pZCA9PT0gVU5ERUZJTkVEX1JFTkRFUkVSX1RZUEVfSUQpIHtcbiAgICAvLyBmaXJzdCB0aW1lIHdlIHNlZSB0aGlzIFJlbmRlcmVyVHlwZTIuIEluaXRpYWxpemUgaXQuLi5cbiAgICBjb25zdCBpc0ZpbGxlZCA9XG4gICAgICAgICgodHlwZS5lbmNhcHN1bGF0aW9uICE9IG51bGwgJiYgdHlwZS5lbmNhcHN1bGF0aW9uICE9PSBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lKSB8fFxuICAgICAgICAgdHlwZS5zdHlsZXMubGVuZ3RoIHx8IE9iamVjdC5rZXlzKHR5cGUuZGF0YSkubGVuZ3RoKTtcbiAgICBpZiAoaXNGaWxsZWQpIHtcbiAgICAgIHR5cGUuaWQgPSBgYyR7X3JlbmRlckNvbXBDb3VudCsrfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUuaWQgPSBFTVBUWV9SRU5ERVJFUl9UWVBFX0lEO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZSAmJiB0eXBlLmlkID09PSBFTVBUWV9SRU5ERVJFUl9UWVBFX0lEKSB7XG4gICAgdHlwZSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHR5cGUgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQmluZGluZyhcbiAgICB2aWV3OiBWaWV3RGF0YSwgZGVmOiBOb2RlRGVmLCBiaW5kaW5nSWR4OiBudW1iZXIsIHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgY29uc3Qgb2xkVmFsdWVzID0gdmlldy5vbGRWYWx1ZXM7XG4gIGlmICgodmlldy5zdGF0ZSAmIFZpZXdTdGF0ZS5GaXJzdENoZWNrKSB8fFxuICAgICAgIWxvb3NlSWRlbnRpY2FsKG9sZFZhbHVlc1tkZWYuYmluZGluZ0luZGV4ICsgYmluZGluZ0lkeF0sIHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlQmluZGluZyhcbiAgICB2aWV3OiBWaWV3RGF0YSwgZGVmOiBOb2RlRGVmLCBiaW5kaW5nSWR4OiBudW1iZXIsIHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgaWYgKGNoZWNrQmluZGluZyh2aWV3LCBkZWYsIGJpbmRpbmdJZHgsIHZhbHVlKSkge1xuICAgIHZpZXcub2xkVmFsdWVzW2RlZi5iaW5kaW5nSW5kZXggKyBiaW5kaW5nSWR4XSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQmluZGluZ05vQ2hhbmdlcyhcbiAgICB2aWV3OiBWaWV3RGF0YSwgZGVmOiBOb2RlRGVmLCBiaW5kaW5nSWR4OiBudW1iZXIsIHZhbHVlOiBhbnkpIHtcbiAgY29uc3Qgb2xkVmFsdWUgPSB2aWV3Lm9sZFZhbHVlc1tkZWYuYmluZGluZ0luZGV4ICsgYmluZGluZ0lkeF07XG4gIGlmICgodmlldy5zdGF0ZSAmIFZpZXdTdGF0ZS5CZWZvcmVGaXJzdENoZWNrKSB8fCAhZGV2TW9kZUVxdWFsKG9sZFZhbHVlLCB2YWx1ZSkpIHtcbiAgICBjb25zdCBiaW5kaW5nTmFtZSA9IGRlZi5iaW5kaW5nc1tiaW5kaW5nSWR4XS5uYW1lO1xuICAgIHRocm93IGV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3IoXG4gICAgICAgIFNlcnZpY2VzLmNyZWF0ZURlYnVnQ29udGV4dCh2aWV3LCBkZWYubm9kZUluZGV4KSwgYCR7YmluZGluZ05hbWV9OiAke29sZFZhbHVlfWAsXG4gICAgICAgIGAke2JpbmRpbmdOYW1lfTogJHt2YWx1ZX1gLCAodmlldy5zdGF0ZSAmIFZpZXdTdGF0ZS5CZWZvcmVGaXJzdENoZWNrKSAhPT0gMCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtQYXJlbnRWaWV3c0ZvckNoZWNrKHZpZXc6IFZpZXdEYXRhKSB7XG4gIGxldCBjdXJyVmlldzogVmlld0RhdGF8bnVsbCA9IHZpZXc7XG4gIHdoaWxlIChjdXJyVmlldykge1xuICAgIGlmIChjdXJyVmlldy5kZWYuZmxhZ3MgJiBWaWV3RmxhZ3MuT25QdXNoKSB7XG4gICAgICBjdXJyVmlldy5zdGF0ZSB8PSBWaWV3U3RhdGUuQ2hlY2tzRW5hYmxlZDtcbiAgICB9XG4gICAgY3VyclZpZXcgPSBjdXJyVmlldy52aWV3Q29udGFpbmVyUGFyZW50IHx8IGN1cnJWaWV3LnBhcmVudDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya1BhcmVudFZpZXdzRm9yQ2hlY2tQcm9qZWN0ZWRWaWV3cyh2aWV3OiBWaWV3RGF0YSwgZW5kVmlldzogVmlld0RhdGEpIHtcbiAgbGV0IGN1cnJWaWV3OiBWaWV3RGF0YXxudWxsID0gdmlldztcbiAgd2hpbGUgKGN1cnJWaWV3ICYmIGN1cnJWaWV3ICE9PSBlbmRWaWV3KSB7XG4gICAgY3VyclZpZXcuc3RhdGUgfD0gVmlld1N0YXRlLkNoZWNrUHJvamVjdGVkVmlld3M7XG4gICAgY3VyclZpZXcgPSBjdXJyVmlldy52aWV3Q29udGFpbmVyUGFyZW50IHx8IGN1cnJWaWV3LnBhcmVudDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChcbiAgICB2aWV3OiBWaWV3RGF0YSwgbm9kZUluZGV4OiBudW1iZXIsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogYW55KTogYm9vbGVhbnx1bmRlZmluZWQge1xuICB0cnkge1xuICAgIGNvbnN0IG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tub2RlSW5kZXhdO1xuICAgIGNvbnN0IHN0YXJ0VmlldyA9IG5vZGVEZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuQ29tcG9uZW50VmlldyA/XG4gICAgICAgIGFzRWxlbWVudERhdGEodmlldywgbm9kZUluZGV4KS5jb21wb25lbnRWaWV3IDpcbiAgICAgICAgdmlldztcbiAgICBtYXJrUGFyZW50Vmlld3NGb3JDaGVjayhzdGFydFZpZXcpO1xuICAgIHJldHVybiBTZXJ2aWNlcy5oYW5kbGVFdmVudCh2aWV3LCBub2RlSW5kZXgsIGV2ZW50TmFtZSwgZXZlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gQXR0ZW50aW9uOiBEb24ndCByZXRocm93LCBhcyBpdCB3b3VsZCBjYW5jZWwgT2JzZXJ2YWJsZSBzdWJzY3JpcHRpb25zIVxuICAgIHZpZXcucm9vdC5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmVkVmlld0NvbnRhaW5lcih2aWV3OiBWaWV3RGF0YSk6IEVsZW1lbnREYXRhfG51bGwge1xuICBpZiAodmlldy5wYXJlbnQpIHtcbiAgICBjb25zdCBwYXJlbnRWaWV3ID0gdmlldy5wYXJlbnQ7XG4gICAgcmV0dXJuIGFzRWxlbWVudERhdGEocGFyZW50Vmlldywgdmlldy5wYXJlbnROb2RlRGVmICEubm9kZUluZGV4KTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBmb3IgY29tcG9uZW50IHZpZXdzLCB0aGlzIGlzIHRoZSBob3N0IGVsZW1lbnQuXG4gKiBmb3IgZW1iZWRkZWQgdmlld3MsIHRoaXMgaXMgdGhlIGluZGV4IG9mIHRoZSBwYXJlbnQgbm9kZVxuICogdGhhdCBjb250YWlucyB0aGUgdmlldyBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2aWV3UGFyZW50RWwodmlldzogVmlld0RhdGEpOiBOb2RlRGVmfG51bGwge1xuICBjb25zdCBwYXJlbnRWaWV3ID0gdmlldy5wYXJlbnQ7XG4gIGlmIChwYXJlbnRWaWV3KSB7XG4gICAgcmV0dXJuIHZpZXcucGFyZW50Tm9kZURlZiAhLnBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTm9kZSh2aWV3OiBWaWV3RGF0YSwgZGVmOiBOb2RlRGVmKTogYW55IHtcbiAgc3dpdGNoIChkZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuVHlwZXMpIHtcbiAgICBjYXNlIE5vZGVGbGFncy5UeXBlRWxlbWVudDpcbiAgICAgIHJldHVybiBhc0VsZW1lbnREYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQ7XG4gICAgY2FzZSBOb2RlRmxhZ3MuVHlwZVRleHQ6XG4gICAgICByZXR1cm4gYXNUZXh0RGF0YSh2aWV3LCBkZWYubm9kZUluZGV4KS5yZW5kZXJUZXh0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50RXZlbnRGdWxsTmFtZSh0YXJnZXQ6IHN0cmluZyB8IG51bGwsIG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0YXJnZXQgPyBgJHt0YXJnZXR9OiR7bmFtZX1gIDogbmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9uZW50Vmlldyh2aWV3OiBWaWV3RGF0YSk6IGJvb2xlYW4ge1xuICByZXR1cm4gISF2aWV3LnBhcmVudCAmJiAhISh2aWV3LnBhcmVudE5vZGVEZWYgIS5mbGFncyAmIE5vZGVGbGFncy5Db21wb25lbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbWJlZGRlZFZpZXcodmlldzogVmlld0RhdGEpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhdmlldy5wYXJlbnQgJiYgISh2aWV3LnBhcmVudE5vZGVEZWYgIS5mbGFncyAmIE5vZGVGbGFncy5Db21wb25lbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUXVlcnlJZChxdWVyeUlkOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gMSA8PCAocXVlcnlJZCAlIDMyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0TWF0Y2hlZFF1ZXJpZXNEc2woXG4gICAgbWF0Y2hlZFF1ZXJpZXNEc2w6IFtzdHJpbmcgfCBudW1iZXIsIFF1ZXJ5VmFsdWVUeXBlXVtdIHwgbnVsbCk6IHtcbiAgbWF0Y2hlZFF1ZXJpZXM6IHtbcXVlcnlJZDogc3RyaW5nXTogUXVlcnlWYWx1ZVR5cGV9LFxuICByZWZlcmVuY2VzOiB7W3JlZklkOiBzdHJpbmddOiBRdWVyeVZhbHVlVHlwZX0sXG4gIG1hdGNoZWRRdWVyeUlkczogbnVtYmVyXG59IHtcbiAgY29uc3QgbWF0Y2hlZFF1ZXJpZXM6IHtbcXVlcnlJZDogc3RyaW5nXTogUXVlcnlWYWx1ZVR5cGV9ID0ge307XG4gIGxldCBtYXRjaGVkUXVlcnlJZHMgPSAwO1xuICBjb25zdCByZWZlcmVuY2VzOiB7W3JlZklkOiBzdHJpbmddOiBRdWVyeVZhbHVlVHlwZX0gPSB7fTtcbiAgaWYgKG1hdGNoZWRRdWVyaWVzRHNsKSB7XG4gICAgbWF0Y2hlZFF1ZXJpZXNEc2wuZm9yRWFjaCgoW3F1ZXJ5SWQsIHZhbHVlVHlwZV0pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcXVlcnlJZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbWF0Y2hlZFF1ZXJpZXNbcXVlcnlJZF0gPSB2YWx1ZVR5cGU7XG4gICAgICAgIG1hdGNoZWRRdWVyeUlkcyB8PSBmaWx0ZXJRdWVyeUlkKHF1ZXJ5SWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmZXJlbmNlc1txdWVyeUlkXSA9IHZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge21hdGNoZWRRdWVyaWVzLCByZWZlcmVuY2VzLCBtYXRjaGVkUXVlcnlJZHN9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXREZXBzRHNsKGRlcHM6IChbRGVwRmxhZ3MsIGFueV0gfCBhbnkpW10sIHNvdXJjZU5hbWU/OiBzdHJpbmcpOiBEZXBEZWZbXSB7XG4gIHJldHVybiBkZXBzLm1hcCh2YWx1ZSA9PiB7XG4gICAgbGV0IHRva2VuOiBhbnk7XG4gICAgbGV0IGZsYWdzOiBEZXBGbGFncztcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIFtmbGFncywgdG9rZW5dID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsYWdzID0gRGVwRmxhZ3MuTm9uZTtcbiAgICAgIHRva2VuID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0b2tlbiAmJiAodHlwZW9mIHRva2VuID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0b2tlbiA9PT0gJ29iamVjdCcpICYmIHNvdXJjZU5hbWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0b2tlbiwgU09VUkNFLCB7dmFsdWU6IHNvdXJjZU5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICAgIH1cbiAgICByZXR1cm4ge2ZsYWdzLCB0b2tlbiwgdG9rZW5LZXk6IHRva2VuS2V5KHRva2VuKX07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50UmVuZGVyRWxlbWVudCh2aWV3OiBWaWV3RGF0YSwgcmVuZGVySG9zdDogYW55LCBkZWY6IE5vZGVEZWYpOiBhbnkge1xuICBsZXQgcmVuZGVyUGFyZW50ID0gZGVmLnJlbmRlclBhcmVudDtcbiAgaWYgKHJlbmRlclBhcmVudCkge1xuICAgIGlmICgocmVuZGVyUGFyZW50LmZsYWdzICYgTm9kZUZsYWdzLlR5cGVFbGVtZW50KSA9PT0gMCB8fFxuICAgICAgICAocmVuZGVyUGFyZW50LmZsYWdzICYgTm9kZUZsYWdzLkNvbXBvbmVudFZpZXcpID09PSAwIHx8XG4gICAgICAgIChyZW5kZXJQYXJlbnQuZWxlbWVudCAhLmNvbXBvbmVudFJlbmRlcmVyVHlwZSAmJlxuICAgICAgICAgcmVuZGVyUGFyZW50LmVsZW1lbnQgIS5jb21wb25lbnRSZW5kZXJlclR5cGUgIS5lbmNhcHN1bGF0aW9uID09PVxuICAgICAgICAgICAgIFZpZXdFbmNhcHN1bGF0aW9uLk5hdGl2ZSkpIHtcbiAgICAgIC8vIG9ubHkgY2hpbGRyZW4gb2Ygbm9uIGNvbXBvbmVudHMsIG9yIGNoaWxkcmVuIG9mIGNvbXBvbmVudHMgd2l0aCBuYXRpdmUgZW5jYXBzdWxhdGlvbiBzaG91bGRcbiAgICAgIC8vIGJlIGF0dGFjaGVkLlxuICAgICAgcmV0dXJuIGFzRWxlbWVudERhdGEodmlldywgZGVmLnJlbmRlclBhcmVudCAhLm5vZGVJbmRleCkucmVuZGVyRWxlbWVudDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlbmRlckhvc3Q7XG4gIH1cbn1cblxuY29uc3QgREVGSU5JVElPTl9DQUNIRSA9IG5ldyBXZWFrTWFwPGFueSwgRGVmaW5pdGlvbjxhbnk+PigpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZURlZmluaXRpb248RCBleHRlbmRzIERlZmluaXRpb248YW55Pj4oZmFjdG9yeTogRGVmaW5pdGlvbkZhY3Rvcnk8RD4pOiBEIHtcbiAgbGV0IHZhbHVlID0gREVGSU5JVElPTl9DQUNIRS5nZXQoZmFjdG9yeSkgIWFzIEQ7XG4gIGlmICghdmFsdWUpIHtcbiAgICB2YWx1ZSA9IGZhY3RvcnkoKCkgPT4gTk9PUCk7XG4gICAgdmFsdWUuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgREVGSU5JVElPTl9DQUNIRS5zZXQoZmFjdG9yeSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvb3RSZW5kZXJOb2Rlcyh2aWV3OiBWaWV3RGF0YSk6IGFueVtdIHtcbiAgY29uc3QgcmVuZGVyTm9kZXM6IGFueVtdID0gW107XG4gIHZpc2l0Um9vdFJlbmRlck5vZGVzKHZpZXcsIFJlbmRlck5vZGVBY3Rpb24uQ29sbGVjdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlbmRlck5vZGVzKTtcbiAgcmV0dXJuIHJlbmRlck5vZGVzO1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBSZW5kZXJOb2RlQWN0aW9uIHtDb2xsZWN0LCBBcHBlbmRDaGlsZCwgSW5zZXJ0QmVmb3JlLCBSZW1vdmVDaGlsZH1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0Um9vdFJlbmRlck5vZGVzKFxuICAgIHZpZXc6IFZpZXdEYXRhLCBhY3Rpb246IFJlbmRlck5vZGVBY3Rpb24sIHBhcmVudE5vZGU6IGFueSwgbmV4dFNpYmxpbmc6IGFueSwgdGFyZ2V0PzogYW55W10pIHtcbiAgLy8gV2UgbmVlZCB0byByZS1jb21wdXRlIHRoZSBwYXJlbnQgbm9kZSBpbiBjYXNlIHRoZSBub2RlcyBoYXZlIGJlZW4gbW92ZWQgYXJvdW5kIG1hbnVhbGx5XG4gIGlmIChhY3Rpb24gPT09IFJlbmRlck5vZGVBY3Rpb24uUmVtb3ZlQ2hpbGQpIHtcbiAgICBwYXJlbnROb2RlID0gdmlldy5yZW5kZXJlci5wYXJlbnROb2RlKHJlbmRlck5vZGUodmlldywgdmlldy5kZWYubGFzdFJlbmRlclJvb3ROb2RlICEpKTtcbiAgfVxuICB2aXNpdFNpYmxpbmdSZW5kZXJOb2RlcyhcbiAgICAgIHZpZXcsIGFjdGlvbiwgMCwgdmlldy5kZWYubm9kZXMubGVuZ3RoIC0gMSwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdFNpYmxpbmdSZW5kZXJOb2RlcyhcbiAgICB2aWV3OiBWaWV3RGF0YSwgYWN0aW9uOiBSZW5kZXJOb2RlQWN0aW9uLCBzdGFydEluZGV4OiBudW1iZXIsIGVuZEluZGV4OiBudW1iZXIsIHBhcmVudE5vZGU6IGFueSxcbiAgICBuZXh0U2libGluZzogYW55LCB0YXJnZXQ/OiBhbnlbXSkge1xuICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XG4gICAgY29uc3Qgbm9kZURlZiA9IHZpZXcuZGVmLm5vZGVzW2ldO1xuICAgIGlmIChub2RlRGVmLmZsYWdzICYgKE5vZGVGbGFncy5UeXBlRWxlbWVudCB8IE5vZGVGbGFncy5UeXBlVGV4dCB8IE5vZGVGbGFncy5UeXBlTmdDb250ZW50KSkge1xuICAgICAgdmlzaXRSZW5kZXJOb2RlKHZpZXcsIG5vZGVEZWYsIGFjdGlvbiwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCk7XG4gICAgfVxuICAgIC8vIGp1bXAgdG8gbmV4dCBzaWJsaW5nXG4gICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0UHJvamVjdGVkUmVuZGVyTm9kZXMoXG4gICAgdmlldzogVmlld0RhdGEsIG5nQ29udGVudEluZGV4OiBudW1iZXIsIGFjdGlvbjogUmVuZGVyTm9kZUFjdGlvbiwgcGFyZW50Tm9kZTogYW55LFxuICAgIG5leHRTaWJsaW5nOiBhbnksIHRhcmdldD86IGFueVtdKSB7XG4gIGxldCBjb21wVmlldzogVmlld0RhdGF8bnVsbCA9IHZpZXc7XG4gIHdoaWxlIChjb21wVmlldyAmJiAhaXNDb21wb25lbnRWaWV3KGNvbXBWaWV3KSkge1xuICAgIGNvbXBWaWV3ID0gY29tcFZpZXcucGFyZW50O1xuICB9XG4gIGNvbnN0IGhvc3RWaWV3ID0gY29tcFZpZXcgIS5wYXJlbnQ7XG4gIGNvbnN0IGhvc3RFbERlZiA9IHZpZXdQYXJlbnRFbChjb21wVmlldyAhKTtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IGhvc3RFbERlZiAhLm5vZGVJbmRleCArIDE7XG4gIGNvbnN0IGVuZEluZGV4ID0gaG9zdEVsRGVmICEubm9kZUluZGV4ICsgaG9zdEVsRGVmICEuY2hpbGRDb3VudDtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPD0gZW5kSW5kZXg7IGkrKykge1xuICAgIGNvbnN0IG5vZGVEZWYgPSBob3N0VmlldyAhLmRlZi5ub2Rlc1tpXTtcbiAgICBpZiAobm9kZURlZi5uZ0NvbnRlbnRJbmRleCA9PT0gbmdDb250ZW50SW5kZXgpIHtcbiAgICAgIHZpc2l0UmVuZGVyTm9kZShob3N0VmlldyAhLCBub2RlRGVmLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgIH1cbiAgICAvLyBqdW1wIHRvIG5leHQgc2libGluZ1xuICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICB9XG4gIGlmICghaG9zdFZpZXcgIS5wYXJlbnQpIHtcbiAgICAvLyBhIHJvb3Qgdmlld1xuICAgIGNvbnN0IHByb2plY3RlZE5vZGVzID0gdmlldy5yb290LnByb2plY3RhYmxlTm9kZXNbbmdDb250ZW50SW5kZXhdO1xuICAgIGlmIChwcm9qZWN0ZWROb2Rlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleGVjUmVuZGVyTm9kZUFjdGlvbih2aWV3LCBwcm9qZWN0ZWROb2Rlc1tpXSwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmlzaXRSZW5kZXJOb2RlKFxuICAgIHZpZXc6IFZpZXdEYXRhLCBub2RlRGVmOiBOb2RlRGVmLCBhY3Rpb246IFJlbmRlck5vZGVBY3Rpb24sIHBhcmVudE5vZGU6IGFueSwgbmV4dFNpYmxpbmc6IGFueSxcbiAgICB0YXJnZXQ/OiBhbnlbXSkge1xuICBpZiAobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5UeXBlTmdDb250ZW50KSB7XG4gICAgdmlzaXRQcm9qZWN0ZWRSZW5kZXJOb2RlcyhcbiAgICAgICAgdmlldywgbm9kZURlZi5uZ0NvbnRlbnQgIS5pbmRleCwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBybiA9IHJlbmRlck5vZGUodmlldywgbm9kZURlZik7XG4gICAgaWYgKGFjdGlvbiA9PT0gUmVuZGVyTm9kZUFjdGlvbi5SZW1vdmVDaGlsZCAmJiAobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5Db21wb25lbnRWaWV3KSAmJlxuICAgICAgICAobm9kZURlZi5iaW5kaW5nRmxhZ3MgJiBCaW5kaW5nRmxhZ3MuQ2F0U3ludGhldGljUHJvcGVydHkpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBtaWdodCBuZWVkIHRvIGRvIGJvdGggYWN0aW9ucy5cbiAgICAgIGlmIChub2RlRGVmLmJpbmRpbmdGbGFncyAmIChCaW5kaW5nRmxhZ3MuU3ludGhldGljUHJvcGVydHkpKSB7XG4gICAgICAgIGV4ZWNSZW5kZXJOb2RlQWN0aW9uKHZpZXcsIHJuLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVEZWYuYmluZGluZ0ZsYWdzICYgKEJpbmRpbmdGbGFncy5TeW50aGV0aWNIb3N0UHJvcGVydHkpKSB7XG4gICAgICAgIGNvbnN0IGNvbXBWaWV3ID0gYXNFbGVtZW50RGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkuY29tcG9uZW50VmlldztcbiAgICAgICAgZXhlY1JlbmRlck5vZGVBY3Rpb24oY29tcFZpZXcsIHJuLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleGVjUmVuZGVyTm9kZUFjdGlvbih2aWV3LCBybiwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuRW1iZWRkZWRWaWV3cykge1xuICAgICAgY29uc3QgZW1iZWRkZWRWaWV3cyA9IGFzRWxlbWVudERhdGEodmlldywgbm9kZURlZi5ub2RlSW5kZXgpLnZpZXdDb250YWluZXIgIS5fZW1iZWRkZWRWaWV3cztcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZW1iZWRkZWRWaWV3cy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2aXNpdFJvb3RSZW5kZXJOb2RlcyhlbWJlZGRlZFZpZXdzW2tdLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5UeXBlRWxlbWVudCAmJiAhbm9kZURlZi5lbGVtZW50ICEubmFtZSkge1xuICAgICAgdmlzaXRTaWJsaW5nUmVuZGVyTm9kZXMoXG4gICAgICAgICAgdmlldywgYWN0aW9uLCBub2RlRGVmLm5vZGVJbmRleCArIDEsIG5vZGVEZWYubm9kZUluZGV4ICsgbm9kZURlZi5jaGlsZENvdW50LCBwYXJlbnROb2RlLFxuICAgICAgICAgIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleGVjUmVuZGVyTm9kZUFjdGlvbihcbiAgICB2aWV3OiBWaWV3RGF0YSwgcmVuZGVyTm9kZTogYW55LCBhY3Rpb246IFJlbmRlck5vZGVBY3Rpb24sIHBhcmVudE5vZGU6IGFueSwgbmV4dFNpYmxpbmc6IGFueSxcbiAgICB0YXJnZXQ/OiBhbnlbXSkge1xuICBjb25zdCByZW5kZXJlciA9IHZpZXcucmVuZGVyZXI7XG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSBSZW5kZXJOb2RlQWN0aW9uLkFwcGVuZENoaWxkOlxuICAgICAgcmVuZGVyZXIuYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSwgcmVuZGVyTm9kZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFJlbmRlck5vZGVBY3Rpb24uSW5zZXJ0QmVmb3JlOlxuICAgICAgcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIHJlbmRlck5vZGUsIG5leHRTaWJsaW5nKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgUmVuZGVyTm9kZUFjdGlvbi5SZW1vdmVDaGlsZDpcbiAgICAgIHJlbmRlcmVyLnJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIHJlbmRlck5vZGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBSZW5kZXJOb2RlQWN0aW9uLkNvbGxlY3Q6XG4gICAgICB0YXJnZXQgIS5wdXNoKHJlbmRlck5vZGUpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuY29uc3QgTlNfUFJFRklYX1JFID0gL146KFteOl0rKTooLispJC87XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdE5hbWVzcGFjZShuYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmIChuYW1lWzBdID09PSAnOicpIHtcbiAgICBjb25zdCBtYXRjaCA9IG5hbWUubWF0Y2goTlNfUFJFRklYX1JFKSAhO1xuICAgIHJldHVybiBbbWF0Y2hbMV0sIG1hdGNoWzJdXTtcbiAgfVxuICByZXR1cm4gWycnLCBuYW1lXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNCaW5kaW5nRmxhZ3MoYmluZGluZ3M6IEJpbmRpbmdEZWZbXSk6IEJpbmRpbmdGbGFncyB7XG4gIGxldCBmbGFncyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBmbGFncyB8PSBiaW5kaW5nc1tpXS5mbGFncztcbiAgfVxuICByZXR1cm4gZmxhZ3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh2YWx1ZUNvdW50OiBudW1iZXIsIGNvbnN0QW5kSW50ZXJwOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50ICogMjsgaSA9IGkgKyAyKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgY29uc3RBbmRJbnRlcnBbaV0gKyBfdG9TdHJpbmdXaXRoTnVsbChjb25zdEFuZEludGVycFtpICsgMV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQgKyBjb25zdEFuZEludGVycFt2YWx1ZUNvdW50ICogMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmxpbmVJbnRlcnBvbGF0ZShcbiAgICB2YWx1ZUNvdW50OiBudW1iZXIsIGMwOiBzdHJpbmcsIGExOiBhbnksIGMxOiBzdHJpbmcsIGEyPzogYW55LCBjMj86IHN0cmluZywgYTM/OiBhbnksXG4gICAgYzM/OiBzdHJpbmcsIGE0PzogYW55LCBjND86IHN0cmluZywgYTU/OiBhbnksIGM1Pzogc3RyaW5nLCBhNj86IGFueSwgYzY/OiBzdHJpbmcsIGE3PzogYW55LFxuICAgIGM3Pzogc3RyaW5nLCBhOD86IGFueSwgYzg/OiBzdHJpbmcsIGE5PzogYW55LCBjOT86IHN0cmluZyk6IHN0cmluZyB7XG4gIHN3aXRjaCAodmFsdWVDb3VudCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBjMCArIF90b1N0cmluZ1dpdGhOdWxsKGExKSArIGMxO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBjMCArIF90b1N0cmluZ1dpdGhOdWxsKGExKSArIGMxICsgX3RvU3RyaW5nV2l0aE51bGwoYTIpICsgYzI7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgYzM7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNDtcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gYzAgKyBfdG9TdHJpbmdXaXRoTnVsbChhMSkgKyBjMSArIF90b1N0cmluZ1dpdGhOdWxsKGEyKSArIGMyICsgX3RvU3RyaW5nV2l0aE51bGwoYTMpICtcbiAgICAgICAgICBjMyArIF90b1N0cmluZ1dpdGhOdWxsKGE0KSArIGM0ICsgX3RvU3RyaW5nV2l0aE51bGwoYTUpICsgYzU7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNCArIF90b1N0cmluZ1dpdGhOdWxsKGE1KSArIGM1ICsgX3RvU3RyaW5nV2l0aE51bGwoYTYpICsgYzY7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNCArIF90b1N0cmluZ1dpdGhOdWxsKGE1KSArIGM1ICsgX3RvU3RyaW5nV2l0aE51bGwoYTYpICtcbiAgICAgICAgICBjNiArIF90b1N0cmluZ1dpdGhOdWxsKGE3KSArIGM3O1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiBjMCArIF90b1N0cmluZ1dpdGhOdWxsKGExKSArIGMxICsgX3RvU3RyaW5nV2l0aE51bGwoYTIpICsgYzIgKyBfdG9TdHJpbmdXaXRoTnVsbChhMykgK1xuICAgICAgICAgIGMzICsgX3RvU3RyaW5nV2l0aE51bGwoYTQpICsgYzQgKyBfdG9TdHJpbmdXaXRoTnVsbChhNSkgKyBjNSArIF90b1N0cmluZ1dpdGhOdWxsKGE2KSArXG4gICAgICAgICAgYzYgKyBfdG9TdHJpbmdXaXRoTnVsbChhNykgKyBjNyArIF90b1N0cmluZ1dpdGhOdWxsKGE4KSArIGM4O1xuICAgIGNhc2UgOTpcbiAgICAgIHJldHVybiBjMCArIF90b1N0cmluZ1dpdGhOdWxsKGExKSArIGMxICsgX3RvU3RyaW5nV2l0aE51bGwoYTIpICsgYzIgKyBfdG9TdHJpbmdXaXRoTnVsbChhMykgK1xuICAgICAgICAgIGMzICsgX3RvU3RyaW5nV2l0aE51bGwoYTQpICsgYzQgKyBfdG9TdHJpbmdXaXRoTnVsbChhNSkgKyBjNSArIF90b1N0cmluZ1dpdGhOdWxsKGE2KSArXG4gICAgICAgICAgYzYgKyBfdG9TdHJpbmdXaXRoTnVsbChhNykgKyBjNyArIF90b1N0cmluZ1dpdGhOdWxsKGE4KSArIGM4ICsgX3RvU3RyaW5nV2l0aE51bGwoYTkpICsgYzk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRG9lcyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gOSBleHByZXNzaW9uc2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIF90b1N0cmluZ1dpdGhOdWxsKHY6IGFueSk6IHN0cmluZyB7XG4gIHJldHVybiB2ICE9IG51bGwgPyB2LnRvU3RyaW5nKCkgOiAnJztcbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0FSUkFZOiBhbnlbXSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX01BUDoge1trZXk6IHN0cmluZ106IGFueX0gPSB7fTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector } from '../di/injector';\nimport { setCurrentInjector } from '../di/injector_compatibility';\nimport { getInjectableDef } from '../di/interface/defs';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util/stringify';\nimport { splitDepsDsl, tokenKey } from './util';\nvar UNDEFINED_VALUE = new Object();\nvar InjectorRefTokenKey = tokenKey(Injector);\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\nexport function moduleDef(providers) {\n    var providersByKey = {};\n    var modules = [];\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\nexport function initNgModule(data) {\n    var def = data._def;\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        var injectableDef = void 0;\n        if (providerDef) {\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\nfunction _createProviderInstance(ngModule, providerDef) {\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\nfunction _createClass(ngModule, ctor, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, tslib_1.__spread([void 0], depValues)))();\n    }\n}\nfunction _callFactory(ngModule, factory, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, tslib_1.__spread(depValues));\n    }\n}\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    var def = ngModule._def;\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, viewIndex, view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\nfunction attachProjectedView(vcElementData, view) {\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);\n}\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\nexport function detachEmbeddedView(elementData, viewIndex) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :\n        elementData.renderElement;\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { InjectFlags } from '../di/interface/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util/stringify';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\nvar EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return componentFactory.viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: function () {\n            var inputsArr = [];\n            var inputs = this._inputs;\n            for (var propName in inputs) {\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: function () {\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: function () { return this._component.constructor; },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * @internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: function () {\n            var view = this._view;\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = view.parent;\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewContainerRef_.prototype.clear = function () {\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var view = detachEmbeddedView(this._data, i);\n            Services.destroyView(view);\n        }\n    };\n    ViewContainerRef_.prototype.get = function (index) {\n        var view = this._embeddedViews[index];\n        if (view) {\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n        var viewRef = templateRef.createEmbeddedView(context || {});\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    ViewContainerRef_.prototype.insert = function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        var viewRef_ = viewRef;\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.indexOf = function (viewRef) {\n        return this._embeddedViews.indexOf(viewRef._view);\n    };\n    ViewContainerRef_.prototype.remove = function (index) {\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    ViewContainerRef_.prototype.detach = function (index) {\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n    ViewRef_.prototype.detectChanges = function () {\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n    ViewRef_.prototype.onDestroy = function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(callback);\n    };\n    ViewRef_.prototype.destroy = function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    ViewRef_.prototype.detachFromAppRef = function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    ViewRef_.prototype.attachToAppRef = function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    TemplateRef_.prototype.createEmbeddedView = function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    Injector_.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nexport function nodeValue(view, index) {\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        var elData = asElementData(view, def.nodeIndex);\n        return def.element.template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\n        var _a = tslib_1.__read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\n    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    RendererAdapter.prototype.createText = function (parentElement, value) {\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\n        var parentElement = this.delegate.parentNode(node);\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    RendererAdapter.prototype.detachView = function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            var node = viewRootNodes[i];\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            this.delegate.destroyNode(viewAllNodes[i]);\n        }\n    };\n    RendererAdapter.prototype.listen = function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, callback);\n    };\n    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\n        return this.delegate.listen(target, name, callback);\n    };\n    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\n        var _a = tslib_1.__read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n        renderElement[methodName].apply(renderElement, args);\n    };\n    RendererAdapter.prototype.setText = function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }\n        var flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    NgModuleRef_.prototype.destroy = function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { isObservable } from '../util/lang';\nimport { stringify } from '../util/stringify';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\nvar RendererV1TokenKey = tokenKey(RendererV1);\nvar Renderer2TokenKey = tokenKey(Renderer2);\nvar ElementRefTokenKey = tokenKey(ElementRef);\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nvar InjectorRefTokenKey = tokenKey(Injector);\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = tslib_1.__read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\nexport function createPipeInstance(view, def) {\n    // deps are looked up from component.\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n}\nexport function createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var outputObservable = instance[output.propName];\n            if (isObservable(outputObservable)) {\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nfunction _createProviderInstance(view, def) {\n    // private services can see other private services\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n        case 256 /* TypeValueProvider */:\n            return providerDef.value;\n    }\n}\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, tslib_1.__spread([void 0], depValues)))();\n    }\n}\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, tslib_1.__spread(depValues));\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && elDef.element.componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = elDef.parent;\n    }\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (elDef.element.template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                        elDef.element.publicProviders)[tokenKey];\n                    if (providerDef_1) {\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = viewParentEl(searchView);\n        searchView = searchView.parent;\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\nfunction findCompView(view, elDef, allowPrivateServices) {\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        var compView = asElementData(view, def.parent.nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    var binding = def.bindings[bindingIdx];\n    var propName = binding.name;\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        var binding_1 = def.bindings[bindingIdx];\n        changes[binding_1.nonMinifiedName] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    var nodes = view.def.nodes;\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        var nodeDef = nodes[i];\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/ (function () {\n    function Subscription(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function') {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport var config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = typeof Symbol === 'function'\n    ? /*@__PURE__*/ Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        _this._parentSubscription = null;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        destinationOrNext.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        this._parentSubscription = null;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nvar Observable = /*@__PURE__*/ (function () {\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;\n        if (closed_1 || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/// <reference types=\"rxjs\" />\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nvar EventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n        var schedulerFn;\n        var errorFn = function (err) { return null; };\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\nexport { EventEmitter };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfZW1pdHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2V2ZW50X2VtaXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILDhCQUE4QjtBQUU5QixPQUFPLEVBQUMsT0FBTyxFQUFFLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUUzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9ERztBQUNIO0lBQXFDLHdDQUFVO0lBVTdDOzs7Ozs7T0FNRztJQUNILHNCQUFZLE9BQXdCO1FBQXhCLHdCQUFBLEVBQUEsZUFBd0I7UUFBcEMsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7O0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCwyQkFBSSxHQUFKLFVBQUssS0FBUyxJQUFJLGlCQUFNLElBQUksWUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEM7Ozs7Ozs7T0FPRztJQUNILGdDQUFTLEdBQVQsVUFBVSxlQUFxQixFQUFFLEtBQVcsRUFBRSxRQUFjO1FBQzFELElBQUksV0FBNEIsQ0FBQztRQUNqQyxJQUFJLE9BQU8sR0FBRyxVQUFDLEdBQVEsSUFBVSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7UUFDdEMsSUFBSSxVQUFVLEdBQUcsY0FBVyxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7UUFFakMsSUFBSSxlQUFlLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFO1lBQzFELFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFDLEtBQVU7Z0JBQ3hDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBM0IsQ0FBMkIsQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBQyxLQUFVLElBQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVyRCxJQUFJLGVBQWUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFDLEdBQUcsSUFBTyxVQUFVLENBQUMsY0FBTSxPQUFBLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQTFCLENBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1RCxVQUFDLEdBQUcsSUFBTyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBRUQsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFO2dCQUM1QixVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBUSxVQUFVLENBQUMsY0FBTSxPQUFBLGVBQWUsQ0FBQyxRQUFRLEVBQUUsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pELGNBQVEsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JFO1NBQ0Y7YUFBTTtZQUNMLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFDLEtBQVUsSUFBTyxVQUFVLENBQUMsY0FBTSxPQUFBLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELFVBQUMsS0FBVSxJQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUzRSxJQUFJLEtBQUssRUFBRTtnQkFDVCxPQUFPO29CQUNILElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQUMsR0FBRyxJQUFPLFVBQVUsQ0FBQyxjQUFNLE9BQUEsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFWLENBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFDLEdBQUcsSUFBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUY7WUFFRCxJQUFJLFFBQVEsRUFBRTtnQkFDWixVQUFVO29CQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQVEsVUFBVSxDQUFDLGNBQU0sT0FBQSxRQUFRLEVBQUUsRUFBVixDQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBUSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0RjtTQUNGO1FBRUQsSUFBTSxJQUFJLEdBQUcsaUJBQU0sU0FBUyxZQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFL0QsSUFBSSxlQUFlLFlBQVksWUFBWSxFQUFFO1lBQzNDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUE5RUQsQ0FBcUMsT0FBTyxHQThFM0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwicnhqc1wiIC8+XG5cbmltcG9ydCB7U3ViamVjdCwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBVc2UgaW4gZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyB0byBlbWl0IGN1c3RvbSBldmVudHMgc3luY2hyb25vdXNseVxuICogb3IgYXN5bmNocm9ub3VzbHksIGFuZCByZWdpc3RlciBoYW5kbGVycyBmb3IgdGhvc2UgZXZlbnRzIGJ5IHN1YnNjcmliaW5nXG4gKiB0byBhbiBpbnN0YW5jZS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSwgYSBjb21wb25lbnQgZGVmaW5lcyB0d28gb3V0cHV0IHByb3BlcnRpZXNcbiAqIHRoYXQgY3JlYXRlIGV2ZW50IGVtaXR0ZXJzLiBXaGVuIHRoZSB0aXRsZSBpcyBjbGlja2VkLCB0aGUgZW1pdHRlclxuICogZW1pdHMgYW4gb3BlbiBvciBjbG9zZSBldmVudCB0byB0b2dnbGUgdGhlIGN1cnJlbnQgdmlzaWJpbGl0eSBzdGF0ZS5cbiAqXG4gKiBgYGBcbiAqIEBDb21wb25lbnQoe1xuICogICBzZWxlY3RvcjogJ3ppcHB5JyxcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgPGRpdiBjbGFzcz1cInppcHB5XCI+XG4gKiAgICAgPGRpdiAoY2xpY2spPVwidG9nZ2xlKClcIj5Ub2dnbGU8L2Rpdj5cbiAqICAgICA8ZGl2IFtoaWRkZW5dPVwiIXZpc2libGVcIj5cbiAqICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAqICAgICA8L2Rpdj5cbiAqICA8L2Rpdj5gfSlcbiAqIGV4cG9ydCBjbGFzcyBaaXBweSB7XG4gKiAgIHZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xuICogICBAT3V0cHV0KCkgb3BlbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gKiAgIEBPdXRwdXQoKSBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gKlxuICogICB0b2dnbGUoKSB7XG4gKiAgICAgdGhpcy52aXNpYmxlID0gIXRoaXMudmlzaWJsZTtcbiAqICAgICBpZiAodGhpcy52aXNpYmxlKSB7XG4gKiAgICAgICB0aGlzLm9wZW4uZW1pdChudWxsKTtcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgdGhpcy5jbG9zZS5lbWl0KG51bGwpO1xuICogICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQWNjZXNzIHRoZSBldmVudCBvYmplY3Qgd2l0aCB0aGUgYCRldmVudGAgYXJndW1lbnQgcGFzc2VkIHRvIHRoZSBvdXRwdXQgZXZlbnRcbiAqIGhhbmRsZXI6XG4gKlxuICogYGBgXG4gKiA8emlwcHkgKG9wZW4pPVwib25PcGVuKCRldmVudClcIiAoY2xvc2UpPVwib25DbG9zZSgkZXZlbnQpXCI+PC96aXBweT5cbiAqIGBgYFxuICpcbiAqICMjIyBOb3Rlc1xuICpcbiAqIFVzZXMgUnguT2JzZXJ2YWJsZSBidXQgcHJvdmlkZXMgYW4gYWRhcHRlciB0byBtYWtlIGl0IHdvcmsgYXMgc3BlY2lmaWVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vamh1c2Fpbi9vYnNlcnZhYmxlLXNwZWNcbiAqXG4gKiBPbmNlIGEgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBzcGVjIGlzIGF2YWlsYWJsZSwgc3dpdGNoIHRvIGl0LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlcjxUPiBleHRlbmRzIFN1YmplY3Q8VD4ge1xuICAvLyBUT0RPOiBtYXJrIHRoaXMgYXMgaW50ZXJuYWwgb25jZSBhbGwgdGhlIGZhY2FkZXMgYXJlIGdvbmVcbiAgLy8gd2UgY2FuJ3QgbWFyayBpdCBhcyBpbnRlcm5hbCBub3cgYmVjYXVzZSBFdmVudEVtaXR0ZXIgZXhwb3J0ZWQgdmlhIEBhbmd1bGFyL2NvcmUgd291bGQgbm90XG4gIC8vIGNvbnRhaW4gdGhpcyBwcm9wZXJ0eSBtYWtpbmcgaXQgaW5jb21wYXRpYmxlIHdpdGggYWxsIHRoZSBjb2RlIHRoYXQgdXNlcyBFdmVudEVtaXR0ZXIgdmlhXG4gIC8vIGZhY2FkZXMsIHdoaWNoIGFyZSBsb2NhbCB0byB0aGUgY29kZSBhbmQgZG8gbm90IGhhdmUgdGhpcyBwcm9wZXJ0eSBzdHJpcHBlZC5cbiAgLyoqXG4gICAqIEludGVybmFsXG4gICAqL1xuICBfX2lzQXN5bmM6IGJvb2xlYW47ICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyB0aGF0IGNhblxuICAgKiBkZWxpdmVyIGV2ZW50cyBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICAgKlxuICAgKiBAcGFyYW0gaXNBc3luYyBXaGVuIHRydWUsIGRlbGl2ZXIgZXZlbnRzIGFzeW5jaHJvbm91c2x5LlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoaXNBc3luYzogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9faXNBc3luYyA9IGlzQXN5bmM7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgYW4gZXZlbnQgY29udGFpbmluZyBhIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGVtaXQuXG4gICAqL1xuICBlbWl0KHZhbHVlPzogVCkgeyBzdXBlci5uZXh0KHZhbHVlKTsgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgaGFuZGxlcnMgZm9yIGV2ZW50cyBlbWl0dGVkIGJ5IHRoaXMgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBnZW5lcmF0b3JPck5leHQgV2hlbiBzdXBwbGllZCwgYSBjdXN0b20gaGFuZGxlciBmb3IgZW1pdHRlZCBldmVudHMuXG4gICAqIEBwYXJhbSBlcnJvciBXaGVuIHN1cHBsaWVkLCBhIGN1c3RvbSBoYW5kbGVyIGZvciBhbiBlcnJvciBub3RpZmljYXRpb25cbiAgICogZnJvbSB0aGlzIGVtaXR0ZXIuXG4gICAqIEBwYXJhbSBjb21wbGV0ZSBXaGVuIHN1cHBsaWVkLCBhIGN1c3RvbSBoYW5kbGVyIGZvciBhIGNvbXBsZXRpb25cbiAgICogbm90aWZpY2F0aW9uIGZyb20gdGhpcyBlbWl0dGVyLlxuICAgKi9cbiAgc3Vic2NyaWJlKGdlbmVyYXRvck9yTmV4dD86IGFueSwgZXJyb3I/OiBhbnksIGNvbXBsZXRlPzogYW55KTogU3Vic2NyaXB0aW9uIHtcbiAgICBsZXQgc2NoZWR1bGVyRm46ICh0OiBhbnkpID0+IGFueTtcbiAgICBsZXQgZXJyb3JGbiA9IChlcnI6IGFueSk6IGFueSA9PiBudWxsO1xuICAgIGxldCBjb21wbGV0ZUZuID0gKCk6IGFueSA9PiBudWxsO1xuXG4gICAgaWYgKGdlbmVyYXRvck9yTmV4dCAmJiB0eXBlb2YgZ2VuZXJhdG9yT3JOZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgc2NoZWR1bGVyRm4gPSB0aGlzLl9faXNBc3luYyA/ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZ2VuZXJhdG9yT3JOZXh0Lm5leHQodmFsdWUpKTtcbiAgICAgIH0gOiAodmFsdWU6IGFueSkgPT4geyBnZW5lcmF0b3JPck5leHQubmV4dCh2YWx1ZSk7IH07XG5cbiAgICAgIGlmIChnZW5lcmF0b3JPck5leHQuZXJyb3IpIHtcbiAgICAgICAgZXJyb3JGbiA9IHRoaXMuX19pc0FzeW5jID8gKGVycikgPT4geyBzZXRUaW1lb3V0KCgpID0+IGdlbmVyYXRvck9yTmV4dC5lcnJvcihlcnIpKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHsgZ2VuZXJhdG9yT3JOZXh0LmVycm9yKGVycik7IH07XG4gICAgICB9XG5cbiAgICAgIGlmIChnZW5lcmF0b3JPck5leHQuY29tcGxldGUpIHtcbiAgICAgICAgY29tcGxldGVGbiA9IHRoaXMuX19pc0FzeW5jID8gKCkgPT4geyBzZXRUaW1lb3V0KCgpID0+IGdlbmVyYXRvck9yTmV4dC5jb21wbGV0ZSgpKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHsgZ2VuZXJhdG9yT3JOZXh0LmNvbXBsZXRlKCk7IH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlckZuID0gdGhpcy5fX2lzQXN5bmMgPyAodmFsdWU6IGFueSkgPT4geyBzZXRUaW1lb3V0KCgpID0+IGdlbmVyYXRvck9yTmV4dCh2YWx1ZSkpOyB9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodmFsdWU6IGFueSkgPT4geyBnZW5lcmF0b3JPck5leHQodmFsdWUpOyB9O1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3JGbiA9XG4gICAgICAgICAgICB0aGlzLl9faXNBc3luYyA/IChlcnIpID0+IHsgc2V0VGltZW91dCgoKSA9PiBlcnJvcihlcnIpKTsgfSA6IChlcnIpID0+IHsgZXJyb3IoZXJyKTsgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgIGNvbXBsZXRlRm4gPVxuICAgICAgICAgICAgdGhpcy5fX2lzQXN5bmMgPyAoKSA9PiB7IHNldFRpbWVvdXQoKCkgPT4gY29tcGxldGUoKSk7IH0gOiAoKSA9PiB7IGNvbXBsZXRlKCk7IH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2luayA9IHN1cGVyLnN1YnNjcmliZShzY2hlZHVsZXJGbiwgZXJyb3JGbiwgY29tcGxldGVGbik7XG5cbiAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICBnZW5lcmF0b3JPck5leHQuYWRkKHNpbmspO1xuICAgIH1cblxuICAgIHJldHVybiBzaW5rO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { flatten } from '../util/array_utils';\nimport { getSymbolIterator } from '../util/symbol';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nvar QueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    QueryList.prototype.filter = function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    QueryList.prototype.find = function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    QueryList.prototype.reduce = function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    QueryList.prototype.some = function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * Returns a copy of the internal results list as an Array.\n     */\n    QueryList.prototype.toArray = function () { return this._results.slice(); };\n    QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };\n    QueryList.prototype.toString = function () { return this._results.toString(); };\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param resultsTree The results tree to store\n     */\n    QueryList.prototype.reset = function (resultsTree) {\n        this._results = flatten(resultsTree);\n        this.dirty = false;\n        this.length = this._results.length;\n        this.last = this._results[this.length - 1];\n        this.first = this._results[0];\n    };\n    /**\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n     */\n    QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\n    /** internal */\n    QueryList.prototype.setDirty = function () { this.dirty = true; };\n    /** internal */\n    QueryList.prototype.destroy = function () {\n        this.changes.complete();\n        this.changes.unsubscribe();\n    };\n    return QueryList;\n}());\nexport { QueryList };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Equivalent to ES6 spread, add each item to an array.\n*\n* @param items The items to add\n* @param arr The array to which you want to add the items\n*/\nexport function addAllToArray(items, arr) {\n    for (var i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list) {\n    var result = [];\n    var i = 0;\n    while (i < list.length) {\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL2FycmF5X3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7OztFQUtFO0FBQ0YsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFZLEVBQUUsR0FBVTtJQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFXO0lBQ2pDLElBQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztJQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3RCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNQO2lCQUFNO2dCQUNMLENBQUMsRUFBRSxDQUFDO2FBQ0w7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNMO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiogRXF1aXZhbGVudCB0byBFUzYgc3ByZWFkLCBhZGQgZWFjaCBpdGVtIHRvIGFuIGFycmF5LlxuKlxuKiBAcGFyYW0gaXRlbXMgVGhlIGl0ZW1zIHRvIGFkZFxuKiBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3aGljaCB5b3Ugd2FudCB0byBhZGQgdGhlIGl0ZW1zXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbFRvQXJyYXkoaXRlbXM6IGFueVtdLCBhcnI6IGFueVtdKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChpdGVtc1tpXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBhbiBhcnJheSBpbiBub24tcmVjdXJzaXZlIHdheS4gSW5wdXQgYXJyYXlzIGFyZSBub3QgbW9kaWZpZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuKGxpc3Q6IGFueVtdKTogYW55W10ge1xuICBjb25zdCByZXN1bHQ6IGFueVtdID0gW107XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBsaXN0Lmxlbmd0aCkge1xuICAgIGNvbnN0IGl0ZW0gPSBsaXN0W2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICBpZiAoaXRlbS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpc3QgPSBpdGVtLmNvbmNhdChsaXN0LnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgIGkrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\nexport function queryDef(flags, id, bindings) {\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\nexport function createQuery() {\n    return new QueryList();\n}\nexport function dirtyParentQueries(view) {\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        var tplDef = view.parentNodeDef;\n        view = view.parent;\n        // content queries\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\nexport function checkAndUpdateQuery(view, nodeDef) {\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    var directiveInstance;\n    var newValues = undefined;\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        var elementDef = nodeDef.parent.parent;\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);\n        directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    var bindings = nodeDef.query.bindings;\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        var binding = bindings[i];\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = view.def.nodes[i];\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\n            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var embeddedViews = elementData.viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    var embeddedView = embeddedViews[k];\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy92aWV3L3F1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsT0FBTyxFQUE0RixhQUFhLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5SixPQUFPLEVBQUMscUJBQXFCLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUU1RSxNQUFNLFVBQVUsUUFBUSxDQUNwQixLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFnRDtJQUNoRixJQUFJLFdBQVcsR0FBc0IsRUFBRSxDQUFDO0lBQ3hDLEtBQUssSUFBSSxRQUFRLElBQUksUUFBUSxFQUFFO1FBQzdCLElBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxVQUFBLEVBQUUsV0FBVyxhQUFBLEVBQUMsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsT0FBTztRQUNMLHNDQUFzQztRQUN0QyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ2IsTUFBTSxFQUFFLElBQUk7UUFDWixZQUFZLEVBQUUsSUFBSTtRQUNsQixZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDZixpQkFBaUI7UUFDakIsb0JBQW9CO1FBQ3BCLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQUE7UUFDckIsVUFBVSxFQUFFLENBQUM7UUFDYixnQkFBZ0IsRUFBRSxDQUFDO1FBQ25CLG1CQUFtQixFQUFFLENBQUM7UUFDdEIsY0FBYyxF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IEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnLi4vbGlua2VyL2VsZW1lbnRfcmVmJztcbmltcG9ydCB7UXVlcnlMaXN0fSBmcm9tICcuLi9saW5rZXIvcXVlcnlfbGlzdCc7XG5cbmltcG9ydCB7Tm9kZURlZiwgTm9kZUZsYWdzLCBRdWVyeUJpbmRpbmdEZWYsIFF1ZXJ5QmluZGluZ1R5cGUsIFF1ZXJ5RGVmLCBRdWVyeVZhbHVlVHlwZSwgVmlld0RhdGEsIGFzRWxlbWVudERhdGEsIGFzUHJvdmlkZXJEYXRhLCBhc1F1ZXJ5TGlzdH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge2RlY2xhcmVkVmlld0NvbnRhaW5lciwgZmlsdGVyUXVlcnlJZCwgaXNFbWJlZGRlZFZpZXd9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeURlZihcbiAgICBmbGFnczogTm9kZUZsYWdzLCBpZDogbnVtYmVyLCBiaW5kaW5nczoge1twcm9wTmFtZTogc3RyaW5nXTogUXVlcnlCaW5kaW5nVHlwZX0pOiBOb2RlRGVmIHtcbiAgbGV0IGJpbmRpbmdEZWZzOiBRdWVyeUJpbmRpbmdEZWZbXSA9IFtdO1xuICBmb3IgKGxldCBwcm9wTmFtZSBpbiBiaW5kaW5ncykge1xuICAgIGNvbnN0IGJpbmRpbmdUeXBlID0gYmluZGluZ3NbcHJvcE5hbWVdO1xuICAgIGJpbmRpbmdEZWZzLnB1c2goe3Byb3BOYW1lLCBiaW5kaW5nVHlwZX0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyB3aWxsIGJldCBzZXQgYnkgdGhlIHZpZXcgZGVmaW5pdGlvblxuICAgIG5vZGVJbmRleDogLTEsXG4gICAgcGFyZW50OiBudWxsLFxuICAgIHJlbmRlclBhcmVudDogbnVsbCxcbiAgICBiaW5kaW5nSW5kZXg6IC0xLFxuICAgIG91dHB1dEluZGV4OiAtMSxcbiAgICAvLyByZWd1bGFyIHZhbHVlc1xuICAgIC8vIFRPRE8odmljYik6IGNoZWNrXG4gICAgY2hlY2tJbmRleDogLTEsIGZsYWdzLFxuICAgIGNoaWxkRmxhZ3M6IDAsXG4gICAgZGlyZWN0Q2hpbGRGbGFnczogMCxcbiAgICBjaGlsZE1hdGNoZWRRdWVyaWVzOiAwLFxuICAgIG5nQ29udGVudEluZGV4OiAtMSxcbiAgICBtYXRjaGVkUXVlcmllczoge30sXG4gICAgbWF0Y2hlZFF1ZXJ5SWRzOiAwLFxuICAgIHJlZmVyZW5jZXM6IHt9LFxuICAgIGNoaWxkQ291bnQ6IDAsXG4gICAgYmluZGluZ3M6IFtdLFxuICAgIGJpbmRpbmdGbGFnczogMCxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBlbGVtZW50OiBudWxsLFxuICAgIHByb3ZpZGVyOiBudWxsLFxuICAgIHRleHQ6IG51bGwsXG4gICAgcXVlcnk6IHtpZCwgZmlsdGVySWQ6IGZpbHRlclF1ZXJ5SWQoaWQpLCBiaW5kaW5nczogYmluZGluZ0RlZnN9LFxuICAgIG5nQ29udGVudDogbnVsbFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUXVlcnkoKTogUXVlcnlMaXN0PGFueT4ge1xuICByZXR1cm4gbmV3IFF1ZXJ5TGlzdCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlydHlQYXJlbnRRdWVyaWVzKHZpZXc6IFZpZXdEYXRhKSB7XG4gIGNvbnN0IHF1ZXJ5SWRzID0gdmlldy5kZWYubm9kZU1hdGNoZWRRdWVyaWVzO1xuICB3aGlsZSAodmlldy5wYXJlbnQgJiYgaXNFbWJlZGRlZFZpZXcodmlldykpIHtcbiAgICBsZXQgdHBsRGVmID0gdmlldy5wYXJlbnROb2RlRGVmICE7XG4gICAgdmlldyA9IHZpZXcucGFyZW50O1xuICAgIC8vIGNvbnRlbnQgcXVlcmllc1xuICAgIGNvbnN0IGVuZCA9IHRwbERlZi5ub2RlSW5kZXggKyB0cGxEZWYuY2hpbGRDb3VudDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZURlZiA9IHZpZXcuZGVmLm5vZGVzW2ldO1xuICAgICAgaWYgKChub2RlRGVmLmZsYWdzICYgTm9kZUZsYWdzLlR5cGVDb250ZW50UXVlcnkpICYmXG4gICAgICAgICAgKG5vZGVEZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuRHluYW1pY1F1ZXJ5KSAmJlxuICAgICAgICAgIChub2RlRGVmLnF1ZXJ5ICEuZmlsdGVySWQgJiBxdWVyeUlkcykgPT09IG5vZGVEZWYucXVlcnkgIS5maWx0ZXJJZCkge1xuICAgICAgICBhc1F1ZXJ5TGlzdCh2aWV3LCBpKS5zZXREaXJ0eSgpO1xuICAgICAgfVxuICAgICAgaWYgKChub2RlRGVmLmZsYWdzICYgTm9kZUZsYWdzLlR5cGVFbGVtZW50ICYmIGkgKyBub2RlRGVmLmNoaWxkQ291bnQgPCB0cGxEZWYubm9kZUluZGV4KSB8fFxuICAgICAgICAgICEobm9kZURlZi5jaGlsZEZsYWdzICYgTm9kZUZsYWdzLlR5cGVDb250ZW50UXVlcnkpIHx8XG4gICAgICAgICAgIShub2RlRGVmLmNoaWxkRmxhZ3MgJiBOb2RlRmxhZ3MuRHluYW1pY1F1ZXJ5KSkge1xuICAgICAgICAvLyBza2lwIGVsZW1lbnRzIHRoYXQgZG9uJ3QgY29udGFpbiB0aGUgdGVtcGxhdGUgZWxlbWVudCBvciBubyBxdWVyeS5cbiAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdmlldyBxdWVyaWVzXG4gIGlmICh2aWV3LmRlZi5ub2RlRmxhZ3MgJiBOb2RlRmxhZ3MuVHlwZVZpZXdRdWVyeSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlldy5kZWYubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tpXTtcbiAgICAgIGlmICgobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5UeXBlVmlld1F1ZXJ5KSAmJiAobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5EeW5hbWljUXVlcnkpKSB7XG4gICAgICAgIGFzUXVlcnlMaXN0KHZpZXcsIGkpLnNldERpcnR5KCk7XG4gICAgICB9XG4gICAgICAvLyBvbmx5IHZpc2l0IHRoZSByb290IG5vZGVzXG4gICAgICBpICs9IG5vZGVEZWYuY2hpbGRDb3VudDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlUXVlcnkodmlldzogVmlld0RhdGEsIG5vZGVEZWY6IE5vZGVEZWYpIHtcbiAgY29uc3QgcXVlcnlMaXN0ID0gYXNRdWVyeUxpc3Qodmlldywgbm9kZURlZi5ub2RlSW5kZXgpO1xuICBpZiAoIXF1ZXJ5TGlzdC5kaXJ0eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZGlyZWN0aXZlSW5zdGFuY2U6IGFueTtcbiAgbGV0IG5ld1ZhbHVlczogYW55W10gPSB1bmRlZmluZWQgITtcbiAgaWYgKG5vZGVEZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuVHlwZUNvbnRlbnRRdWVyeSkge1xuICAgIGNvbnN0IGVsZW1lbnREZWYgPSBub2RlRGVmLnBhcmVudCAhLnBhcmVudCAhO1xuICAgIG5ld1ZhbHVlcyA9IGNhbGNRdWVyeVZhbHVlcyhcbiAgICAgICAgdmlldywgZWxlbWVudERlZi5ub2RlSW5kZXgsIGVsZW1lbnREZWYubm9kZUluZGV4ICsgZWxlbWVudERlZi5jaGlsZENvdW50LCBub2RlRGVmLnF1ZXJ5ICEsXG4gICAgICAgIFtdKTtcbiAgICBkaXJlY3RpdmVJbnN0YW5jZSA9IGFzUHJvdmlkZXJEYXRhKHZpZXcsIG5vZGVEZWYucGFyZW50ICEubm9kZUluZGV4KS5pbnN0YW5jZTtcbiAgfSBlbHNlIGlmIChub2RlRGVmLmZsYWdzICYgTm9kZUZsYWdzLlR5cGVWaWV3UXVlcnkpIHtcbiAgICBuZXdWYWx1ZXMgPSBjYWxjUXVlcnlWYWx1ZXModmlldywgMCwgdmlldy5kZWYubm9kZXMubGVuZ3RoIC0gMSwgbm9kZURlZi5xdWVyeSAhLCBbXSk7XG4gICAgZGlyZWN0aXZlSW5zdGFuY2UgPSB2aWV3LmNvbXBvbmVudDtcbiAgfVxuICBxdWVyeUxpc3QucmVzZXQobmV3VmFsdWVzKTtcbiAgY29uc3QgYmluZGluZ3MgPSBub2RlRGVmLnF1ZXJ5ICEuYmluZGluZ3M7XG4gIGxldCBub3RpZnkgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcbiAgICBsZXQgYm91bmRWYWx1ZTogYW55O1xuICAgIHN3aXRjaCAoYmluZGluZy5iaW5kaW5nVHlwZSkge1xuICAgICAgY2FzZSBRdWVyeUJpbmRpbmdUeXBlLkZpcnN0OlxuICAgICAgICBib3VuZFZhbHVlID0gcXVlcnlMaXN0LmZpcnN0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUXVlcnlCaW5kaW5nVHlwZS5BbGw6XG4gICAgICAgIGJvdW5kVmFsdWUgPSBxdWVyeUxpc3Q7XG4gICAgICAgIG5vdGlmeSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkaXJlY3RpdmVJbnN0YW5jZVtiaW5kaW5nLnByb3BOYW1lXSA9IGJvdW5kVmFsdWU7XG4gIH1cbiAgaWYgKG5vdGlmeSkge1xuICAgIHF1ZXJ5TGlzdC5ub3RpZnlPbkNoYW5nZXMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjUXVlcnlWYWx1ZXMoXG4gICAgdmlldzogVmlld0RhdGEsIHN0YXJ0SW5kZXg6IG51bWJlciwgZW5kSW5kZXg6IG51bWJlciwgcXVlcnlEZWY6IFF1ZXJ5RGVmLFxuICAgIHZhbHVlczogYW55W10pOiBhbnlbXSB7XG4gIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDw9IGVuZEluZGV4OyBpKyspIHtcbiAgICBjb25zdCBub2RlRGVmID0gdmlldy5kZWYubm9kZXNbaV07XG4gICAgY29uc3QgdmFsdWVUeXBlID0gbm9kZURlZi5tYXRjaGVkUXVlcmllc1txdWVyeURlZi5pZF07XG4gICAgaWYgKHZhbHVlVHlwZSAhPSBudWxsKSB7XG4gICAgICB2YWx1ZXMucHVzaChnZXRRdWVyeVZhbHVlKHZpZXcsIG5vZGVEZWYsIHZhbHVlVHlwZSkpO1xuICAgIH1cbiAgICBpZiAobm9kZURlZi5mbGFncyAmIE5vZGVGbGFncy5UeXBlRWxlbWVudCAmJiBub2RlRGVmLmVsZW1lbnQgIS50ZW1wbGF0ZSAmJlxuICAgICAgICAobm9kZURlZi5lbGVtZW50ICEudGVtcGxhdGUgIS5ub2RlTWF0Y2hlZFF1ZXJpZXMgJiBxdWVyeURlZi5maWx0ZXJJZCkgPT09XG4gICAgICAgICAgICBxdWVyeURlZi5maWx0ZXJJZCkge1xuICAgICAgY29uc3QgZWxlbWVudERhdGEgPSBhc0VsZW1lbnREYXRhKHZpZXcsIGkpO1xuICAgICAgLy8gY2hlY2sgZW1iZWRkZWQgdmlld3MgdGhhdCB3ZXJlIGF0dGFjaGVkIGF0IHRoZSBwbGFjZSBvZiB0aGVpciB0ZW1wbGF0ZSxcbiAgICAgIC8vIGJ1dCBwcm9jZXNzIGNoaWxkIG5vZGVzIGZpcnN0IGlmIHNvbWUgbWF0Y2ggdGhlIHF1ZXJ5IChzZWUgaXNzdWUgIzE2NTY4KVxuICAgICAgaWYgKChub2RlRGVmLmNoaWxkTWF0Y2hlZFF1ZXJpZXMgJiBxdWVyeURlZi5maWx0ZXJJZCkgPT09IHF1ZXJ5RGVmLmZpbHRlcklkKSB7XG4gICAgICAgIGNhbGNRdWVyeVZhbHVlcyh2aWV3LCBpICsgMSwgaSArIG5vZGVEZWYuY2hpbGRDb3VudCwgcXVlcnlEZWYsIHZhbHVlcyk7XG4gICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiBOb2RlRmxhZ3MuRW1iZWRkZWRWaWV3cykge1xuICAgICAgICBjb25zdCBlbWJlZGRlZFZpZXdzID0gZWxlbWVudERhdGEudmlld0NvbnRhaW5lciAhLl9lbWJlZGRlZFZpZXdzO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGVtYmVkZGVkVmlld3MubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBjb25zdCBlbWJlZGRlZFZpZXcgPSBlbWJlZGRlZFZpZXdzW2tdO1xuICAgICAgICAgIGNvbnN0IGR2YyA9IGRlY2xhcmVkVmlld0NvbnRhaW5lcihlbWJlZGRlZFZpZXcpO1xuICAgICAgICAgIGlmIChkdmMgJiYgZHZjID09PSBlbGVtZW50RGF0YSkge1xuICAgICAgICAgICAgY2FsY1F1ZXJ5VmFsdWVzKGVtYmVkZGVkVmlldywgMCwgZW1iZWRkZWRWaWV3LmRlZi5ub2Rlcy5sZW5ndGggLSAxLCBxdWVyeURlZiwgdmFsdWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2plY3RlZFZpZXdzID0gZWxlbWVudERhdGEudGVtcGxhdGUuX3Byb2plY3RlZFZpZXdzO1xuICAgICAgaWYgKHByb2plY3RlZFZpZXdzKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcHJvamVjdGVkVmlld3MubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRWaWV3ID0gcHJvamVjdGVkVmlld3Nba107XG4gICAgICAgICAgY2FsY1F1ZXJ5VmFsdWVzKHByb2plY3RlZFZpZXcsIDAsIHByb2plY3RlZFZpZXcuZGVmLm5vZGVzLmxlbmd0aCAtIDEsIHF1ZXJ5RGVmLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgobm9kZURlZi5jaGlsZE1hdGNoZWRRdWVyaWVzICYgcXVlcnlEZWYuZmlsdGVySWQpICE9PSBxdWVyeURlZi5maWx0ZXJJZCkge1xuICAgICAgLy8gaWYgbm8gY2hpbGQgbWF0Y2hlcyB0aGUgcXVlcnksIHNraXAgdGhlIGNoaWxkcmVuLlxuICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWVyeVZhbHVlKFxuICAgIHZpZXc6IFZpZXdEYXRhLCBub2RlRGVmOiBOb2RlRGVmLCBxdWVyeVZhbHVlVHlwZTogUXVlcnlWYWx1ZVR5cGUpOiBhbnkge1xuICBpZiAocXVlcnlWYWx1ZVR5cGUgIT0gbnVsbCkge1xuICAgIC8vIGEgbWF0Y2hcbiAgICBzd2l0Y2ggKHF1ZXJ5VmFsdWVUeXBlKSB7XG4gICAgICBjYXNlIFF1ZXJ5VmFsdWVUeXBlLlJlbmRlckVsZW1lbnQ6XG4gICAgICAgIHJldHVybiBhc0VsZW1lbnREYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS5yZW5kZXJFbGVtZW50O1xuICAgICAgY2FzZSBRdWVyeVZhbHVlVHlwZS5FbGVtZW50UmVmOlxuICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRSZWYoYXNFbGVtZW50RGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkucmVuZGVyRWxlbWVudCk7XG4gICAgICBjYXNlIFF1ZXJ5VmFsdWVUeXBlLlRlbXBsYXRlUmVmOlxuICAgICAgICByZXR1cm4gYXNFbGVtZW50RGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkudGVtcGxhdGU7XG4gICAgICBjYXNlIFF1ZXJ5VmFsdWVUeXBlLlZpZXdDb250YWluZXJSZWY6XG4gICAgICAgIHJldHVybiBhc0VsZW1lbnREYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS52aWV3Q29udGFpbmVyO1xuICAgICAgY2FzZSBRdWVyeVZhbHVlVHlwZS5Qcm92aWRlcjpcbiAgICAgICAgcmV0dXJuIGFzUHJvdmlkZXJEYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS5pbnN0YW5jZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ViewEncapsulation } from '../metadata/view';\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    var ns = null;\n    var name = null;\n    if (namespaceAndName) {\n        _a = tslib_1.__read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = tslib_1.__read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = tslib_1.__read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\n        var securityContext = undefined;\n        var suffix = undefined;\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = suffixOrSecurityContext;\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = suffixOrSecurityContext;\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = tslib_1.__read(outputs[i], 2), target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: target, eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    var attrs = fixedAttrs.map(function (_a) {\n        var _b = tslib_1.__read(_a, 2), namespaceAndName = _b[0], value = _b[1];\n        var _c = tslib_1.__read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\n        return [ns, name, value];\n    });\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nexport function createElement(view, renderHost, def) {\n    var elDef = def.element;\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    var renderer = view.renderer;\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = tslib_1.__read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        var output = def.outputs[i];\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        var listenTarget = output.target;\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n        view.disposables[def.outputIndex + i] = disposable;\n    }\n}\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindLen = def.bindings.length;\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    var binding = def.bindings[bindingIdx];\n    var elData = asElementData(view, def.nodeIndex);\n    var renderNode = elData.renderElement;\n    var name = binding.name;\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    var securityContext = binding.securityContext;\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\nfunction setElementClass(view, renderNode, name, value) {\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    var securityContext = binding.securityContext;\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\nexport function appendNgContent(view, renderHost, def) {\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    var ngContentIndex = def.ngContent.index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZpZXcvbmdfY29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQW1CLHNCQUFzQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTNGLE1BQU0sVUFBVSxZQUFZLENBQUMsY0FBNkIsRUFBRSxLQUFhO0lBQ3ZFLE9BQU87UUFDTCxzQ0FBc0M7UUFDdEMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNiLE1BQU0sRUFBRSxJQUFJO1FBQ1osWUFBWSxFQUFFLElBQUk7UUFDbEIsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNoQixXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsaUJBQWlCO1FBQ2pCLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDZCxLQUFLLHVCQUF5QjtRQUM5QixVQUFVLEVBQUUsQ0FBQztRQUNiLGdCQUFnQixFQUFFLENBQUM7UUFDbkIsbUJBQW1CLEVBQUUsQ0FBQztRQUN0QixjQUFjLEVBQUUsRUFBRTtRQUNsQixlQUFlLEVBQUUsQ0FBQztRQUNsQixVQUFVLEVBQUUsRUFBRSxFQUFFLGNBQWMsZ0JBQUE7UUFDOUIsVUFBVSxFQUFFLENBQUM7UUFDYixRQUFRLEVBQUUsRUFBRTtRQUNaLFlBQVksRUFBRSxDQUFDO1FBQ2YsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUUsSUFBSTtRQUNiLFFBQVEsRUFBRSxJQUFJO1FBQ2QsSUFBSSxFQUFFLElBQUk7UUFDVixLQUFLLEVBQUUsSUFBSTtRQUNYLFNBQVMsRUFBRSxFQUFDLEtBQUssT0FBQSxFQUFDO0tBQ25CLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFjLEVBQUUsVUFBZSxFQUFFLEdBQVk7SUFDM0UsSUFBTSxRQUFRLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvRCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsK0NBQStDO1FBQy9DLE9BQU87S0FDUjtJQUNELElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxTQUFXLENBQUMsS0FBSyxDQUFDO0lBQzdDLHlCQUF5QixDQUNyQixJQUFJLEVBQUUsY0FBYyx1QkFBZ0MsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge05vZGVEZWYsIE5vZGVGbGFncywgVmlld0RhdGF9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtSZW5kZXJOb2RlQWN0aW9uLCBnZXRQYXJlbnRSZW5kZXJFbGVtZW50LCB2aXNpdFByb2plY3RlZFJlbmRlck5vZGVzfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmdDb250ZW50RGVmKG5nQ29udGVudEluZGV4OiBudWxsIHwgbnVtYmVyLCBpbmRleDogbnVtYmVyKTogTm9kZURlZiB7XG4gIHJldHVybiB7XG4gICAgLy8gd2lsbCBiZXQgc2V0IGJ5IHRoZSB2aWV3IGRlZmluaXRpb25cbiAgICBub2RlSW5kZXg6IC0xLFxuICAgIHBhcmVudDogbnVsbCxcbiAgICByZW5kZXJQYXJlbnQ6IG51bGwsXG4gICAgYmluZGluZ0luZGV4OiAtMSxcbiAgICBvdXRwdXRJbmRleDogLTEsXG4gICAgLy8gcmVndWxhciB2YWx1ZXNcbiAgICBjaGVja0luZGV4OiAtMSxcbiAgICBmbGFnczogTm9kZUZsYWdzLlR5cGVOZ0NvbnRlbnQsXG4gICAgY2hpbGRGbGFnczogMCxcbiAgICBkaXJlY3RDaGlsZEZsYWdzOiAwLFxuICAgIGNoaWxkTWF0Y2hlZFF1ZXJpZXM6IDAsXG4gICAgbWF0Y2hlZFF1ZXJpZXM6IHt9LFxuICAgIG1hdGNoZWRRdWVyeUlkczogMCxcbiAgICByZWZlcmVuY2VzOiB7fSwgbmdDb250ZW50SW5kZXgsXG4gICAgY2hpbGRDb3VudDogMCxcbiAgICBiaW5kaW5nczogW10sXG4gICAgYmluZGluZ0ZsYWdzOiAwLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgcHJvdmlkZXI6IG51bGwsXG4gICAgdGV4dDogbnVsbCxcbiAgICBxdWVyeTogbnVsbCxcbiAgICBuZ0NvbnRlbnQ6IHtpbmRleH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZE5nQ29udGVudCh2aWV3OiBWaWV3RGF0YSwgcmVuZGVySG9zdDogYW55LCBkZWY6IE5vZGVEZWYpIHtcbiAgY29uc3QgcGFyZW50RWwgPSBnZXRQYXJlbnRSZW5kZXJFbGVtZW50KHZpZXcsIHJlbmRlckhvc3QsIGRlZik7XG4gIGlmICghcGFyZW50RWwpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGlmIHRoZXJlIGlzIG5vIHBhcmVudCBlbGVtZW50LlxuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBuZ0NvbnRlbnRJbmRleCA9IGRlZi5uZ0NvbnRlbnQgIS5pbmRleDtcbiAgdmlzaXRQcm9qZWN0ZWRSZW5kZXJOb2RlcyhcbiAgICAgIHZpZXcsIG5nQ29udGVudEluZGV4LCBSZW5kZXJOb2RlQWN0aW9uLkFwcGVuZENoaWxkLCBwYXJlbnRFbCwgbnVsbCwgdW5kZWZpbmVkKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\nexport function createText(view, renderHost, def) {\n    var renderNode;\n    var renderer = view.renderer;\n    renderNode = renderer.createText(def.text.prefix);\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var changed = false;\n    var bindings = def.bindings;\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var value = def.text.prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    var bindings = def.bindings;\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = def.text.prefix + value;\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\nfunction _addInterpolationPart(value, binding) {\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    var viewBindingCount = 0;\n    var viewDisposableCount = 0;\n    var viewNodeFlags = 0;\n    var viewRootNodeFlags = 0;\n    var viewMatchedQueries = 0;\n    var currentParent = null;\n    var currentRenderParent = null;\n    var currentElementHasPublicProviders = false;\n    var currentElementHasPrivateProviders = false;\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? currentParent.element.publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                currentParent.element.publicProviders =\n                    Object.create(currentParent.element.publicProviders);\n                currentParent.element.allProviders = currentParent.element.publicProviders;\n            }\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.allProviders =\n                        Object.create(currentParent.element.publicProviders);\n                }\n                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\n            }\n            if (isComponent) {\n                currentParent.element.componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    var handleEvent = function (view, nodeIndex, eventName, event) {\n        return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n    };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\n}\nfunction validateNode(parent, node, nodeCount) {\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\nexport function createRootView(root, def, context) {\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var rendererType = nodeDef.element.componentRendererType;\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\n}\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    var nodes = new Array(def.nodes.length);\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\nfunction createViewNodes(view) {\n    var renderHost;\n    if (isComponentView(view)) {\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;\n    }\n    var def = view.def;\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                var el = createElement(view, renderHost, nodeDef);\n                var componentView = undefined;\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    var compViewDef = resolveDefinition(nodeDef.element.componentView);\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = {\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n                };\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = createText(view, renderHost, nodeDef);\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = { instance: instance };\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = createPureExpression(view, nodeDef);\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = createQuery();\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\nfunction markProjectedViewsForCheck(view) {\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\nfunction destroyViewNodes(view) {\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            view.renderer.destroyNode(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            view.renderer.destroyNode(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\nvar ViewAction;\n(function (ViewAction) {\n    ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\n    ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\n    ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\n    ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\n    ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\n    ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\n})(ViewAction || (ViewAction = {}));\nfunction execComponentViewsAction(view, action) {\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction execEmbeddedViewsAction(view, action) {\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction callViewAction(view, action) {\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\nexport function pureObjectDef(checkIndex, propToIndex) {\n    var keys = Object.keys(propToIndex);\n    var nbKeys = keys.length;\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        var key = keys[i];\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindings = def.bindings;\n    var changed = false;\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var data = asPureExpressionData(view, def.nodeIndex);\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[bindings[0].name] = v0;\n                if (bindLen > 1)\n                    value[bindings[1].name] = v1;\n                if (bindLen > 2)\n                    value[bindings[2].name] = v2;\n                if (bindLen > 3)\n                    value[bindings[3].name] = v3;\n                if (bindLen > 4)\n                    value[bindings[4].name] = v4;\n                if (bindLen > 5)\n                    value[bindings[5].name] = v5;\n                if (bindLen > 6)\n                    value[bindings[6].name] = v6;\n                if (bindLen > 7)\n                    value[bindings[7].name] = v7;\n                if (bindLen > 8)\n                    value[bindings[8].name] = v8;\n                if (bindLen > 9)\n                    value[bindings[9].name] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    var bindings = def.bindings;\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var data = asPureExpressionData(view, def.nodeIndex);\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[bindings[i].name] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                var pipe = values[0];\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, tslib_1.__spread(params));\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DebugElement__PRE_R3__, DebugNode__PRE_R3__, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { getInjectableDef } from '../di/interface/defs';\nimport { ErrorHandler } from '../error_handler';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { isDevMode } from '../util/is_dev_mode';\nimport { normalizeDebugBindingName, normalizeDebugBindingValue } from '../util/ng_reflect';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, tokenKey, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\nvar initialized = false;\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\nvar providerOverrides = new Map();\nvar providerOverridesWithScope = new Map();\nvar viewDefOverrides = new Map();\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    var injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(override.token, override);\n    }\n}\nfunction debugOverrideComponentView(comp, compFactory) {\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);\n    viewDefOverrides.set(comp, compViewDef);\n}\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = def.factory(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    function findElementIndicesWithOverwrittenProviders(def) {\n        var elIndicesWithOverwrittenProviders = [];\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(nodeDef.provider.token)) {\n                elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                var provider = nodeDef.provider;\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = def.factory(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    function calcHasOverrides(def) {\n        var hasOverrides = false;\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (getInjectableDef(token).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(getInjectableDef(token).providedIn)) {\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\nvar DebugAction;\n(function (DebugAction) {\n    DebugAction[DebugAction[\"create\"] = 0] = \"create\";\n    DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\n    DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\n    DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\n    DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\n})(DebugAction || (DebugAction = {}));\nvar _currentAction;\nvar _currentView;\nvar _currentNodeIndex;\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    var changed = checkAndUpdateNode.apply(void 0, tslib_1.__spread([view, nodeDef, argStyle], givenValues));\n    if (changed) {\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                var binding = nodeDef.bindings[i];\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            var elDef = nodeDef.parent;\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!elDef.element.name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    checkNoChangesNode.apply(void 0, tslib_1.__spread([view, nodeDef, argStyle], values));\n}\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        var elDef = this.nodeDef;\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = elDef.parent;\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = viewParentEl(elView);\n                elView = elView.parent;\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: function () {\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(childDef.provider.token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: function () {\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: function () {\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugContext_.prototype.logError = function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        var logViewDef;\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        var currRenderNodeIndex = -1;\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, tslib_1.__spread([console], values));\n            }\n            else {\n                return NOOP;\n            }\n        };\n        logViewDef.factory(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, tslib_1.__spread(values));\n        }\n    };\n    return DebugContext_;\n}());\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = view.parent;\n    }\n    if (view.parent) {\n        return asElementData(view.parent, viewParentEl(view).nodeIndex);\n    }\n    return null;\n}\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\nfunction callWithDebugContext(action, fn, self, args) {\n    var oldAction = _currentAction;\n    var oldView = _currentView;\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, getCurrentDebugContext());\n    }\n}\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    DebugRendererFactory2.prototype.begin = function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    DebugRendererFactory2.prototype.end = function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    DebugRendererFactory2.prototype.whenRenderingDone = function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nexport { DebugRendererFactory2 };\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    DebugRenderer2.prototype.createDebugContext = function (nativeElement) { return this.debugContextFactory(nativeElement); };\n    DebugRenderer2.prototype.destroyNode = function (node) {\n        removeDebugNodeFromIndex(getDebugNode(node));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n    DebugRenderer2.prototype.createElement = function (name, namespace) {\n        var el = this.delegate.createElement(name, namespace);\n        var debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    DebugRenderer2.prototype.createComment = function (value) {\n        var comment = this.delegate.createComment(value);\n        var debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    DebugRenderer2.prototype.createText = function (value) {\n        var text = this.delegate.createText(value);\n        var debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    };\n    DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(newChild);\n        var debugRefEl = getDebugNode(refChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        var debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    };\n    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    DebugRenderer2.prototype.addClass = function (el, name) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    DebugRenderer2.prototype.removeClass = function (el, name) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    DebugRenderer2.prototype.setProperty = function (el, name, value) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nexport { DebugRenderer2 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\nfunction cloneNgModuleDefinition(def) {\n    var providers = Array.from(def.providers);\n    var modules = Array.from(def.modules);\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    NgModuleFactory_.prototype.create = function (parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50cnlwb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZpZXcvZW50cnlwb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3hDLE9BQU8sRUFBQyxlQUFlLEVBQWMsTUFBTSw2QkFBNkIsQ0FBQztBQUV6RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDaEQsT0FBTyxFQUF1RixRQUFRLEVBQWlCLE1BQU0sU0FBUyxDQUFDO0FBQ3ZJLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUV6QyxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsUUFBMEI7SUFDekQsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixPQUFPLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLElBQWUsRUFBRSxnQkFBdUM7SUFDNUYsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixPQUFPLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixPQUFPLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNuQyxDQUFDO0FBRUQsNERBQTREO0FBQzVELCtEQUErRDtBQUMvRCxNQUFNLFVBQVUscUJBQXFCLENBQ2pDLFlBQXVCLEVBQUUsbUJBQWdDLEVBQ3pELFVBQXFDO0lBQ3ZDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsR0FBdUI7SUFDdEQsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsSUFBTSxjQUFjLEdBQThDLEVBQUUsQ0FBQztJQUNyRSxLQUFLLElBQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLEVBQUU7UUFDcEMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDL0M7SUFFRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO1FBQ3BCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsV0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLGNBQWMsZ0JBQUE7S0FDdkQsQ0FBQztBQUNKLENBQUM7QUFFRDtJQUErQiw0Q0FBb0I7SUFDakQsMEJBQ29CLFVBQXFCLEVBQVUsb0JBQWlDLEVBQ3hFLG1CQUE4QztRQUYxRDtRQUdFLHdEQUF3RDtRQUN4RCwrREFBK0Q7UUFDL0QsaUJBQU8sU0FDUjtRQUxtQixnQkFBVSxHQUFWLFVBQVUsQ0FBVztRQUFVLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBYTtRQUN4RSx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQTJCOztJQUkxRCxDQUFDO0lBRUQsaUNBQU0sR0FBTixVQUFPLGNBQTZCO1FBQ2xDLG9CQUFvQixFQUFFLENBQUM7UUFDdkIsOEVBQThFO1FBQzlFLDRFQUE0RTtRQUM1RSx1REFBdUQ7UUFDdkQsSUFBTSxHQUFHLEdBQUcsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqRixPQUFPLFFBQVEsQ0FBQyxpQkFBaUIsQ0FDN0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQWxCRCxDQUErQixlQUFlLEdBa0I3QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5pbXBvcnQge0NvbXBvbmVudEZhY3Rvcnl9IGZyb20gJy4uL2xpbmtlci9jb21wb25lbnRfZmFjdG9yeSc7XG5pbXBvcnQge05nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWZ9IGZyb20gJy4uL2xpbmtlci9uZ19tb2R1bGVfZmFjdG9yeSc7XG5cbmltcG9ydCB7aW5pdFNlcnZpY2VzSWZOZWVkZWR9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHtOZ01vZHVsZURlZmluaXRpb24sIE5nTW9kdWxlRGVmaW5pdGlvbkZhY3RvcnksIE5nTW9kdWxlUHJvdmlkZXJEZWYsIFByb3ZpZGVyT3ZlcnJpZGUsIFNlcnZpY2VzLCBWaWV3RGVmaW5pdGlvbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge3Jlc29sdmVEZWZpbml0aW9ufSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcnJpZGVQcm92aWRlcihvdmVycmlkZTogUHJvdmlkZXJPdmVycmlkZSkge1xuICBpbml0U2VydmljZXNJZk5lZWRlZCgpO1xuICByZXR1cm4gU2VydmljZXMub3ZlcnJpZGVQcm92aWRlcihvdmVycmlkZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvdmVycmlkZUNvbXBvbmVudFZpZXcoY29tcDogVHlwZTxhbnk+LCBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4pIHtcbiAgaW5pdFNlcnZpY2VzSWZOZWVkZWQoKTtcbiAgcmV0dXJuIFNlcnZpY2VzLm92ZXJyaWRlQ29tcG9uZW50Vmlldyhjb21wLCBjb21wb25lbnRGYWN0b3J5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyT3ZlcnJpZGVzKCkge1xuICBpbml0U2VydmljZXNJZk5lZWRlZCgpO1xuICByZXR1cm4gU2VydmljZXMuY2xlYXJPdmVycmlkZXMoKTtcbn1cblxuLy8gQXR0ZW50aW9uOiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhcyB0b3AgbGV2ZWwgZnVuY3Rpb24uXG4vLyBQdXR0aW5nIGFueSBsb2dpYyBpbiBoZXJlIHdpbGwgZGVzdHJveSBjbG9zdXJlIHRyZWUgc2hha2luZyFcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZ01vZHVsZUZhY3RvcnkoXG4gICAgbmdNb2R1bGVUeXBlOiBUeXBlPGFueT4sIGJvb3RzdHJhcENvbXBvbmVudHM6IFR5cGU8YW55PltdLFxuICAgIGRlZkZhY3Rvcnk6IE5nTW9kdWxlRGVmaW5pdGlvbkZhY3RvcnkpOiBOZ01vZHVsZUZhY3Rvcnk8YW55PiB7XG4gIHJldHVybiBuZXcgTmdNb2R1bGVGYWN0b3J5XyhuZ01vZHVsZVR5cGUsIGJvb3RzdHJhcENvbXBvbmVudHMsIGRlZkZhY3RvcnkpO1xufVxuXG5mdW5jdGlvbiBjbG9uZU5nTW9kdWxlRGVmaW5pdGlvbihkZWY6IE5nTW9kdWxlRGVmaW5pdGlvbik6IE5nTW9kdWxlRGVmaW5pdGlvbiB7XG4gIGNvbnN0IHByb3ZpZGVycyA9IEFycmF5LmZyb20oZGVmLnByb3ZpZGVycyk7XG4gIGNvbnN0IG1vZHVsZXMgPSBBcnJheS5mcm9tKGRlZi5tb2R1bGVzKTtcbiAgY29uc3QgcHJvdmlkZXJzQnlLZXk6IHtbdG9rZW5LZXk6IHN0cmluZ106IE5nTW9kdWxlUHJvdmlkZXJEZWZ9ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZi5wcm92aWRlcnNCeUtleSkge1xuICAgIHByb3ZpZGVyc0J5S2V5W2tleV0gPSBkZWYucHJvdmlkZXJzQnlLZXlba2V5XTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmFjdG9yeTogZGVmLmZhY3RvcnksXG4gICAgaXNSb290OiBkZWYuaXNSb290LCBwcm92aWRlcnMsIG1vZHVsZXMsIHByb3ZpZGVyc0J5S2V5LFxuICB9O1xufVxuXG5jbGFzcyBOZ01vZHVsZUZhY3RvcnlfIGV4dGVuZHMgTmdNb2R1bGVGYWN0b3J5PGFueT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBtb2R1bGVUeXBlOiBUeXBlPGFueT4sIHByaXZhdGUgX2Jvb3RzdHJhcENvbXBvbmVudHM6IFR5cGU8YW55PltdLFxuICAgICAgcHJpdmF0ZSBfbmdNb2R1bGVEZWZGYWN0b3J5OiBOZ01vZHVsZURlZmluaXRpb25GYWN0b3J5KSB7XG4gICAgLy8gQXR0ZW50aW9uOiB0aGlzIGN0b3IgaXMgY2FsbGVkIGFzIHRvcCBsZXZlbCBmdW5jdGlvbi5cbiAgICAvLyBQdXR0aW5nIGFueSBsb2dpYyBpbiBoZXJlIHdpbGwgZGVzdHJveSBjbG9zdXJlIHRyZWUgc2hha2luZyFcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY3JlYXRlKHBhcmVudEluamVjdG9yOiBJbmplY3RvcnxudWxsKTogTmdNb2R1bGVSZWY8YW55PiB7XG4gICAgaW5pdFNlcnZpY2VzSWZOZWVkZWQoKTtcbiAgICAvLyBDbG9uZSB0aGUgTmdNb2R1bGVEZWZpbml0aW9uIHNvIHRoYXQgYW55IHRyZWUgc2hha2VhYmxlIHByb3ZpZGVyIGRlZmluaXRpb25cbiAgICAvLyBhZGRlZCB0byB0aGlzIGluc3RhbmNlIG9mIHRoZSBOZ01vZHVsZVJlZiBkb2Vzbid0IGFmZmVjdCB0aGUgY2FjaGVkIGNvcHkuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzI1MDE4LlxuICAgIGNvbnN0IGRlZiA9IGNsb25lTmdNb2R1bGVEZWZpbml0aW9uKHJlc29sdmVEZWZpbml0aW9uKHRoaXMuX25nTW9kdWxlRGVmRmFjdG9yeSkpO1xuICAgIHJldHVybiBTZXJ2aWNlcy5jcmVhdGVOZ01vZHVsZVJlZihcbiAgICAgICAgdGhpcy5tb2R1bGVUeXBlLCBwYXJlbnRJbmplY3RvciB8fCBJbmplY3Rvci5OVUxMLCB0aGlzLl9ib290c3RyYXBDb21wb25lbnRzLCBkZWYpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport var MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaTE4bi90b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkc7QUFDSCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQVMsVUFBVSxDQUFDLENBQUM7QUFFaEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFTLGNBQWMsQ0FBQyxDQUFDO0FBRXZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFTLG9CQUFvQixDQUFDLENBQUM7QUFFcEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLENBQU4sSUFBWSwwQkFJWDtBQUpELFdBQVksMEJBQTBCO0lBQ3BDLDZFQUFTLENBQUE7SUFDVCxpRkFBVyxDQUFBO0lBQ1gsK0VBQVUsQ0FBQTtBQUNaLENBQUMsRUFKVywwQkFBMEIsS0FBMUIsMEJBQTBCLFFBSXJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICcuLi9kaS9pbmplY3Rpb25fdG9rZW4nO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhpcyB0b2tlbiB0byBzZXQgdGhlIGxvY2FsZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICogSXQgaXMgdXNlZCBmb3IgaTE4biBleHRyYWN0aW9uLCBieSBpMThuIHBpcGVzIChEYXRlUGlwZSwgSTE4blBsdXJhbFBpcGUsIEN1cnJlbmN5UGlwZSxcbiAqIERlY2ltYWxQaXBlIGFuZCBQZXJjZW50UGlwZSkgYW5kIGJ5IElDVSBleHByZXNzaW9ucy5cbiAqXG4gKiBTZWUgdGhlIFtpMThuIGd1aWRlXShndWlkZS9pMThuI3NldHRpbmctdXAtbG9jYWxlKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6ICdlbi1VUycgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgTE9DQUxFX0lEID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0xvY2FsZUlkJyk7XG5cbi8qKlxuICogVXNlIHRoaXMgdG9rZW4gYXQgYm9vdHN0cmFwIHRvIHByb3ZpZGUgdGhlIGNvbnRlbnQgb2YgeW91ciB0cmFuc2xhdGlvbiBmaWxlIChgeHRiYCxcbiAqIGB4bGZgIG9yIGB4bGYyYCkgd2hlbiB5b3Ugd2FudCB0byB0cmFuc2xhdGUgeW91ciBhcHBsaWNhdGlvbiBpbiBhbm90aGVyIGxhbmd1YWdlLlxuICpcbiAqIFNlZSB0aGUgW2kxOG4gZ3VpZGVdKGd1aWRlL2kxOG4jbWVyZ2UpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRSQU5TTEFUSU9OUyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiAvLyBjb250ZW50IG9mIHlvdXIgdHJhbnNsYXRpb24gZmlsZVxuICogY29uc3QgdHJhbnNsYXRpb25zID0gJy4uLi4nO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIHByb3ZpZGVyczogW3twcm92aWRlOiBUUkFOU0xBVElPTlMsIHVzZVZhbHVlOiB0cmFuc2xhdGlvbnMgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNMQVRJT05TID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1RyYW5zbGF0aW9ucycpO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhpcyB0b2tlbiBhdCBib290c3RyYXAgdG8gc2V0IHRoZSBmb3JtYXQgb2YgeW91ciB7QGxpbmsgVFJBTlNMQVRJT05TfTogYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmAuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4biNtZXJnZSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVFJBTlNMQVRJT05TX0ZPUk1BVCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSwge1xuICogICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVFJBTlNMQVRJT05TX0ZPUk1BVCwgdXNlVmFsdWU6ICd4bGYnIH1dXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFUSU9OU19GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignVHJhbnNsYXRpb25zRm9ybWF0Jyk7XG5cbi8qKlxuICogVXNlIHRoaXMgZW51bSBhdCBib290c3RyYXAgYXMgYW4gb3B0aW9uIG9mIGBib290c3RyYXBNb2R1bGVgIHRvIGRlZmluZSB0aGUgc3RyYXRlZ3lcbiAqIHRoYXQgdGhlIGNvbXBpbGVyIHNob3VsZCB1c2UgaW4gY2FzZSBvZiBtaXNzaW5nIHRyYW5zbGF0aW9uczpcbiAqIC0gRXJyb3I6IHRocm93IGlmIHlvdSBoYXZlIG1pc3NpbmcgdHJhbnNsYXRpb25zLlxuICogLSBXYXJuaW5nIChkZWZhdWx0KTogc2hvdyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgYW5kL29yIHNoZWxsLlxuICogLSBJZ25vcmU6IGRvIG5vdGhpbmcuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4biNtaXNzaW5nLXRyYW5zbGF0aW9uKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbiAqIGltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC5tb2R1bGUnO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIG1pc3NpbmdUcmFuc2xhdGlvbjogTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3kuRXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneSB7XG4gIEVycm9yID0gMCxcbiAgV2FybmluZyA9IDEsXG4gIElnbm9yZSA9IDIsXG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    ApplicationInitStatus.prototype.runInitializers = function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        var asyncInitPromises = [];\n        var complete = function () {\n            _this.done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(APP_INITIALIZER)), tslib_1.__param(0, Optional()),\n        tslib_1.__metadata(\"design:paramtypes\", [Array])\n    ], ApplicationInitStatus);\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb25faW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2FwcGxpY2F0aW9uX2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBR2xFOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQW9CLHlCQUF5QixDQUFDLENBQUM7QUFFaEc7Ozs7R0FJRztBQUVIO0lBU0UsK0JBQXlELFFBQXVCO1FBQWhGLGlCQUtDO1FBTHdELGFBQVEsR0FBUixRQUFRLENBQWU7UUFKeEUsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFFWixTQUFJLEdBQUcsS0FBSyxDQUFDO1FBRzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRztZQUN0QyxLQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztZQUNuQixLQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsK0NBQWUsR0FBZjtRQUFBLGlCQTJCQztRQTFCQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsT0FBTztTQUNSO1FBRUQsSUFBTSxpQkFBaUIsR0FBbUIsRUFBRSxDQUFDO1FBRTdDLElBQU0sUUFBUSxHQUFHO1lBQ2QsS0FBdUIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3RDLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUN6QixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3BDO2FBQ0Y7U0FDRjtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBUSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLENBQUMsSUFBTSxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0YsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLFFBQVEsRUFBRSxDQUFDO1NBQ1o7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBNUNVLHFCQUFxQjtRQURqQyxVQUFVLEVBQUU7UUFVRSxtQkFBQSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTs7T0FUckMscUJBQXFCLENBNkNqQztJQUFELDRCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E3Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2lzUHJvbWlzZX0gZnJvbSAnLi4vc3JjL3V0aWwvbGFuZyc7XG5cbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWx9IGZyb20gJy4vZGknO1xuXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiBhbiBhcHBsaWNhdGlvbiBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBUFBfSU5JVElBTElaRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48QXJyYXk8KCkgPT4gdm9pZD4+KCdBcHBsaWNhdGlvbiBJbml0aWFsaXplcicpO1xuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCByZWZsZWN0cyB0aGUgc3RhdGUgb2YgcnVubmluZyB7QGxpbmsgQVBQX0lOSVRJQUxJWkVSfXMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb25Jbml0U3RhdHVzIHtcbiAgLy8gVE9ETyhpc3N1ZS8yNDU3MSk6IHJlbW92ZSAnIScuXG4gIHByaXZhdGUgcmVzb2x2ZSAhOiBGdW5jdGlvbjtcbiAgLy8gVE9ETyhpc3N1ZS8yNDU3MSk6IHJlbW92ZSAnIScuXG4gIHByaXZhdGUgcmVqZWN0ICE6IEZ1bmN0aW9uO1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHB1YmxpYyByZWFkb25seSBkb25lUHJvbWlzZTogUHJvbWlzZTxhbnk+O1xuICBwdWJsaWMgcmVhZG9ubHkgZG9uZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQVBQX0lOSVRJQUxJWkVSKSBAT3B0aW9uYWwoKSBwcml2YXRlIGFwcEluaXRzOiAoKCkgPT4gYW55KVtdKSB7XG4gICAgdGhpcy5kb25lUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzO1xuICAgICAgdGhpcy5yZWplY3QgPSByZWo7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHJ1bkluaXRpYWxpemVycygpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFzeW5jSW5pdFByb21pc2VzOiBQcm9taXNlPGFueT5bXSA9IFtdO1xuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAodGhpcyBhc3tkb25lOiBib29sZWFufSkuZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLnJlc29sdmUoKTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuYXBwSW5pdHMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hcHBJbml0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpbml0UmVzdWx0ID0gdGhpcy5hcHBJbml0c1tpXSgpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKGluaXRSZXN1bHQpKSB7XG4gICAgICAgICAgYXN5bmNJbml0UHJvbWlzZXMucHVzaChpbml0UmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIFByb21pc2UuYWxsKGFzeW5jSW5pdFByb21pc2VzKS50aGVuKCgpID0+IHsgY29tcGxldGUoKTsgfSkuY2F0Y2goZSA9PiB7IHRoaXMucmVqZWN0KGUpOyB9KTtcblxuICAgIGlmIChhc3luY0luaXRQcm9taXNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG59XG4iXX0=","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {\n    if (destination === void 0) {\n        destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    }\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n//# sourceMappingURL=share.js.map\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nexport var APP_ID = new InjectionToken('AppId');\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: [],\n};\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb25fdG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYXBwbGljYXRpb25fdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJcEM7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFTLE9BQU8sQ0FBQyxDQUFDO0FBRTFELE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsT0FBTyxLQUFHLFdBQVcsRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLFdBQVcsRUFBSSxDQUFDO0FBQzVELENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRztJQUNwQyxPQUFPLEVBQUUsTUFBTTtJQUNmLFVBQVUsRUFBRSwyQkFBMkI7SUFDdkMsSUFBSSxFQUFTLEVBQUU7Q0FDaEIsQ0FBQztBQUVGLFNBQVMsV0FBVztJQUNsQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFvQixzQkFBc0IsQ0FBQyxDQUFDO0FBRWxHOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBUyxhQUFhLENBQUMsQ0FBQztBQUVyRTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQy9CLElBQUksY0FBYyxDQUE4QyxzQkFBc0IsQ0FBQyxDQUFDO0FBRTVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFTLCtCQUErQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJy4vZGknO1xuaW1wb3J0IHtDb21wb25lbnRSZWZ9IGZyb20gJy4vbGlua2VyL2NvbXBvbmVudF9mYWN0b3J5JztcblxuXG4vKipcbiAqIEEgREkgVG9rZW4gcmVwcmVzZW50aW5nIGEgdW5pcXVlIHN0cmluZyBpZCBhc3NpZ25lZCB0byB0aGUgYXBwbGljYXRpb24gYnkgQW5ndWxhciBhbmQgdXNlZFxuICogcHJpbWFyaWx5IGZvciBwcmVmaXhpbmcgYXBwbGljYXRpb24gYXR0cmlidXRlcyBhbmQgQ1NTIHN0eWxlcyB3aGVuXG4gKiB7QGxpbmsgVmlld0VuY2Fwc3VsYXRpb24jRW11bGF0ZWQgVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWR9IGlzIGJlaW5nIHVzZWQuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gYXZvaWQgcmFuZG9tbHkgZ2VuZXJhdGVkIHZhbHVlIHRvIGJlIHVzZWQgYXMgYW4gYXBwbGljYXRpb24gaWQsIHlvdSBjYW4gcHJvdmlkZVxuICogYSBjdXN0b20gdmFsdWUgdmlhIGEgREkgcHJvdmlkZXIgPCEtLSBUT0RPOiBwcm92aWRlciAtLT4gY29uZmlndXJpbmcgdGhlIHJvb3Qge0BsaW5rIEluamVjdG9yfVxuICogdXNpbmcgdGhpcyB0b2tlbi5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IEFQUF9JRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdBcHBJZCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gX2FwcElkUmFuZG9tUHJvdmlkZXJGYWN0b3J5KCkge1xuICByZXR1cm4gYCR7X3JhbmRvbUNoYXIoKX0ke19yYW5kb21DaGFyKCl9JHtfcmFuZG9tQ2hhcigpfWA7XG59XG5cbi8qKlxuICogUHJvdmlkZXJzIHRoYXQgd2lsbCBnZW5lcmF0ZSBhIHJhbmRvbSBBUFBfSURfVE9LRU4uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBUFBfSURfUkFORE9NX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBBUFBfSUQsXG4gIHVzZUZhY3Rvcnk6IF9hcHBJZFJhbmRvbVByb3ZpZGVyRmFjdG9yeSxcbiAgZGVwczogPGFueVtdPltdLFxufTtcblxuZnVuY3Rpb24gX3JhbmRvbUNoYXIoKTogc3RyaW5nIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNSkpO1xufVxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gYSBwbGF0Zm9ybSBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX0lOSVRJQUxJWkVSID0gbmV3IEluamVjdGlvblRva2VuPEFycmF5PCgpID0+IHZvaWQ+PignUGxhdGZvcm0gSW5pdGlhbGl6ZXInKTtcblxuLyoqXG4gKiBBIHRva2VuIHRoYXQgaW5kaWNhdGVzIGFuIG9wYXF1ZSBwbGF0Zm9ybSBpZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX0lEID0gbmV3IEluamVjdGlvblRva2VuPE9iamVjdD4oJ1BsYXRmb3JtIElEJyk7XG5cbi8qKlxuICogQWxsIGNhbGxiYWNrcyBwcm92aWRlZCB2aWEgdGhpcyB0b2tlbiB3aWxsIGJlIGNhbGxlZCBmb3IgZXZlcnkgY29tcG9uZW50IHRoYXQgaXMgYm9vdHN0cmFwcGVkLlxuICogU2lnbmF0dXJlIG9mIHRoZSBjYWxsYmFjazpcbiAqXG4gKiBgKGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmKSA9PiB2b2lkYC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSID1cbiAgICBuZXcgSW5qZWN0aW9uVG9rZW48QXJyYXk8KGNvbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB2b2lkPj4oJ2FwcEJvb3RzdHJhcExpc3RlbmVyJyk7XG5cbi8qKlxuICogQSB0b2tlbiB3aGljaCBpbmRpY2F0ZXMgdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoZSBhcHBsaWNhdGlvblxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgUEFDS0FHRV9ST09UX1VSTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdBcHBsaWNhdGlvbiBQYWNrYWdlcyBSb290IFVSTCcpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector_compatibility';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { assertDefined } from '../util/assert';\nimport { VERSION } from '../version';\nimport { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '../view/provider';\nimport { assertComponentType } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { NodeInjector } from './di';\nimport { addToViewTree, assignTViewNodeToLView, createLView, createTView, elementCreate, locateHostElement, refreshDescendantViews } from './instructions/shared';\nimport { domRendererFactory3, isProceduralRenderer } from './interfaces/renderer';\nimport { TVIEW } from './interfaces/view';\nimport { enterView, leaveView } from './state';\nimport { defaultScheduler } from './util/misc_utils';\nimport { getTNode } from './util/view_utils';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    function ComponentFactoryResolver(ngModule) {\n        var _this = _super.call(this) || this;\n        _this.ngModule = ngModule;\n        return _this;\n    }\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        ngDevMode && assertComponentType(component);\n        var componentDef = getComponentDef(component);\n        return new ComponentFactory(componentDef, this.ngModule);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\nfunction toRefArray(map) {\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () { return defaultScheduler; },\n});\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: function (token, notFoundValue, flags) {\n            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        }\n    };\n}\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nvar ComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    function ComponentFactory(componentDef, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.ngModule = ngModule;\n        _this.componentType = componentDef.type;\n        _this.selector = componentDef.selectors[0][0];\n        // The component definition does not include the wildcard ('*') selector in its list.\n        // It is implicitly expected as the first item in the projectable nodes array.\n        _this.ngContentSelectors =\n            componentDef.ngContentSelectors ? tslib_1.__spread(['*'], componentDef.ngContentSelectors) : [];\n        _this.isBoundToModule = !!ngModule;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n        var sanitizer = rootViewInjector.get(Sanitizer, null);\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        var oldLView = enterView(rootLView, null);\n        var component;\n        var tElementNode;\n        try {\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = getTNode(0, rootLView);\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n        }\n        var componentRef = new ComponentRef(this.componentType, component, createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode.child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\nexport { ComponentFactory };\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nvar ComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this._rootLView = _rootLView;\n        _this._tNode = _tNode;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n        _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        _this.componentType = componentType;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef.prototype, \"injector\", {\n        get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentRef.prototype.destroy = function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n        !this.hostView.destroyed && this.hostView.destroy();\n    };\n    ComponentRef.prototype.onDestroy = function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\nexport { ComponentRef };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\nimport { ComponentFactory as ComponentFactoryR3 } from '../render3/component_ref';\nimport { getComponentDef, getNgModuleDef } from '../render3/definition';\nimport { NgModuleFactory as NgModuleFactoryR3 } from '../render3/ng_module_ref';\nimport { maybeUnwrapFn } from '../render3/util/misc_utils';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nvar ModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\nexport { ModuleWithComponentFactories };\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\nvar Compiler_compileModuleSync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactoryR3(moduleType);\n};\nvar Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\nvar Compiler_compileModuleAsync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\nvar Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n    var moduleDef = getNgModuleDef(moduleType);\n    var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n        .reduce(function (factories, declaration) {\n        var componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactoryR3(componentDef));\n        return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n};\nvar Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\nvar Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     */\n    Compiler.prototype.clearCache = function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    Compiler.prototype.clearCacheFor = function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\n    Compiler = tslib_1.__decorate([\n        Injectable()\n    ], Compiler);\n    return Compiler;\n}());\nexport { Compiler };\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nvar CompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\nexport { CompilerFactory };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util/global';\nvar trace;\nvar events;\nexport function detectWTF() {\n    var wtf = global /** TODO #9100 */['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3RmX2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9wcm9maWxlL3d0Zl9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQTRCdEMsSUFBSSxLQUFZLENBQUM7QUFDakIsSUFBSSxNQUFjLENBQUM7QUFFbkIsTUFBTSxVQUFVLFNBQVM7SUFDdkIsSUFBTSxHQUFHLEdBQVMsTUFBYSxDQUFDLGlCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFELElBQUksR0FBRyxFQUFFO1FBQ1AsS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQixJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekIsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxTQUFpQixFQUFFLEtBQWlCO0lBQWpCLHNCQUFBLEVBQUEsWUFBaUI7SUFDOUQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBSUQsTUFBTSxVQUFVLEtBQUssQ0FBSSxLQUFZLEVBQUUsV0FBaUI7SUFDdEQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckMsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsU0FBaUIsRUFBRSxNQUFjO0lBQzlELE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBWTtJQUN2QyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Z2xvYmFsfSBmcm9tICcuLi91dGlsL2dsb2JhbCc7XG5cbi8qKlxuICogQSBzY29wZSBmdW5jdGlvbiBmb3IgdGhlIFdlYiBUcmFjaW5nIEZyYW1ld29yayAoV1RGKS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV3RmU2NvcGVGbiB7IChhcmcwPzogYW55LCBhcmcxPzogYW55KTogYW55OyB9XG5cbmludGVyZmFjZSBXVEYge1xuICB0cmFjZTogVHJhY2U7XG59XG5cbmludGVyZmFjZSBUcmFjZSB7XG4gIGV2ZW50czogRXZlbnRzO1xuICBsZWF2ZVNjb3BlKHNjb3BlOiBTY29wZSwgcmV0dXJuVmFsdWU6IGFueSk6IGFueSAvKiogVE9ETyAjOTEwMCAqLztcbiAgYmVnaW5UaW1lUmFuZ2UocmFuZ2VUeXBlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nKTogUmFuZ2U7XG4gIGVuZFRpbWVSYW5nZShyYW5nZTogUmFuZ2UpOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi87XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmFuZ2Uge31cblxuaW50ZXJmYWNlIEV2ZW50cyB7XG4gIGNyZWF0ZVNjb3BlKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFnczogYW55KTogU2NvcGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgeyAoLi4uYXJnczogYW55W10gLyoqIFRPRE8gIzkxMDAgKi8pOiBhbnk7IH1cblxubGV0IHRyYWNlOiBUcmFjZTtcbmxldCBldmVudHM6IEV2ZW50cztcblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdFdURigpOiBib29sZWFuIHtcbiAgY29uc3Qgd3RmOiBXVEYgPSAoZ2xvYmFsIGFzIGFueSAvKiogVE9ETyAjOTEwMCAqLylbJ3d0ZiddO1xuICBpZiAod3RmKSB7XG4gICAgdHJhY2UgPSB3dGZbJ3RyYWNlJ107XG4gICAgaWYgKHRyYWNlKSB7XG4gICAgICBldmVudHMgPSB0cmFjZVsnZXZlbnRzJ107XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2NvcGUoc2lnbmF0dXJlOiBzdHJpbmcsIGZsYWdzOiBhbnkgPSBudWxsKTogYW55IHtcbiAgcmV0dXJuIGV2ZW50cy5jcmVhdGVTY29wZShzaWduYXR1cmUsIGZsYWdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlYXZlPFQ+KHNjb3BlOiBTY29wZSk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gbGVhdmU8VD4oc2NvcGU6IFNjb3BlLCByZXR1cm5WYWx1ZT86IFQpOiBUO1xuZXhwb3J0IGZ1bmN0aW9uIGxlYXZlPFQ+KHNjb3BlOiBTY29wZSwgcmV0dXJuVmFsdWU/OiBhbnkpOiBhbnkge1xuICB0cmFjZS5sZWF2ZVNjb3BlKHNjb3BlLCByZXR1cm5WYWx1ZSk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VGltZVJhbmdlKHJhbmdlVHlwZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZyk6IFJhbmdlIHtcbiAgcmV0dXJuIHRyYWNlLmJlZ2luVGltZVJhbmdlKHJhbmdlVHlwZSwgYWN0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZFRpbWVSYW5nZShyYW5nZTogUmFuZ2UpOiB2b2lkIHtcbiAgdHJhY2UuZW5kVGltZVJhbmdlKHJhbmdlKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createScope, detectWTF, endTimeRange, leave, startTimeRange } from './wtf_impl';\n/**\n * True if WTF is enabled.\n */\nexport var wtfEnabled = detectWTF();\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nexport var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nexport var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nexport var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nexport var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Byb2ZpbGUvcHJvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQWEsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUtuRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUV0QyxTQUFTLFNBQVMsQ0FBQyxJQUFVLEVBQUUsSUFBVTtJQUN2QyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2Qkc7QUFDSCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQ3ZCLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFDLFNBQWlCLEVBQUUsS0FBVyxJQUFLLE9BQUEsU0FBUyxFQUFULENBQVMsQ0FBQztBQUU3RTs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FDakIsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQUMsQ0FBTSxFQUFFLENBQU8sSUFBSyxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUM7QUFFaEQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQzFCLFVBQVUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxVQUFDLFNBQWlCLEVBQUUsTUFBYyxJQUFLLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztBQUU5RTs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBeUIsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQUMsQ0FBTSxJQUFLLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtXdGZTY29wZUZuLCBjcmVhdGVTY29wZSwgZGV0ZWN0V1RGLCBlbmRUaW1lUmFuZ2UsIGxlYXZlLCBzdGFydFRpbWVSYW5nZX0gZnJvbSAnLi93dGZfaW1wbCc7XG5cbmV4cG9ydCB7V3RmU2NvcGVGbn0gZnJvbSAnLi93dGZfaW1wbCc7XG5cblxuLyoqXG4gKiBUcnVlIGlmIFdURiBpcyBlbmFibGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3RmRW5hYmxlZCA9IGRldGVjdFdURigpO1xuXG5mdW5jdGlvbiBub29wU2NvcGUoYXJnMD86IGFueSwgYXJnMT86IGFueSk6IGFueSB7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0cmFjZSBzY29wZS5cbiAqXG4gKiBTY29wZXMgbXVzdCBiZSBzdHJpY3RseSBuZXN0ZWQgYW5kIGFyZSBhbmFsb2dvdXMgdG8gc3RhY2sgZnJhbWVzLCBidXRcbiAqIGRvIG5vdCBoYXZlIHRvIGZvbGxvdyB0aGUgc3RhY2sgZnJhbWVzLiBJbnN0ZWFkIGl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhleSBmb2xsb3cgbG9naWNhbFxuICogbmVzdGluZy4gWW91IG1heSB3YW50IHRvIHVzZVxuICogW0V2ZW50XG4gKiBTaWduYXR1cmVzXShodHRwOi8vZ29vZ2xlLmdpdGh1Yi5pby90cmFjaW5nLWZyYW1ld29yay9pbnN0cnVtZW50aW5nLWNvZGUuaHRtbCNjdXN0b20tZXZlbnRzKVxuICogYXMgdGhleSBhcmUgZGVmaW5lZCBpbiBXVEYuXG4gKlxuICogVXNlZCB0byBtYXJrIHNjb3BlIGVudHJ5LiBUaGUgcmV0dXJuIHZhbHVlIGlzIHVzZWQgdG8gbGVhdmUgdGhlIHNjb3BlLlxuICpcbiAqICAgICB2YXIgbXlTY29wZSA9IHd0ZkNyZWF0ZVNjb3BlKCdNeUNsYXNzI215TWV0aG9kKGFzY2lpIHNvbWVWYWwpJyk7XG4gKlxuICogICAgIHNvbWVNZXRob2QoKSB7XG4gKiAgICAgICAgdmFyIHMgPSBteVNjb3BlKCdGb28nKTsgLy8gJ0ZvbycgZ2V0cyBzdG9yZWQgaW4gdHJhY2luZyBVSVxuICogICAgICAgIC8vIERPIFNPTUUgV09SSyBIRVJFXG4gKiAgICAgICAgcmV0dXJuIHd0ZkxlYXZlKHMsIDEyMyk7IC8vIFJldHVybiB2YWx1ZSAxMjNcbiAqICAgICB9XG4gKlxuICogTm90ZSwgYWRkaW5nIHRyeS1maW5hbGx5IGJsb2NrIGFyb3VuZCB0aGUgd29yayB0byBlbnN1cmUgdGhhdCBgd3RmTGVhdmVgIGdldHMgY2FsbGVkIGNhblxuICogbmVnYXRpdmVseSBpbXBhY3QgdGhlIHBlcmZvcm1hbmNlIG9mIHlvdXIgYXBwbGljYXRpb24uIEZvciB0aGlzIHJlYXNvbiB3ZSByZWNvbW1lbmQgdGhhdFxuICogeW91IGRvbid0IGFkZCB0aGVtIHRvIGVuc3VyZSB0aGF0IGB3dGZMZWF2ZWAgZ2V0cyBjYWxsZWQuIEluIHByb2R1Y3Rpb24gYHd0ZkxlYXZlYCBpcyBhIG5vb3AgYW5kXG4gKiBzbyB0cnktZmluYWxseSBibG9jayBoYXMgbm8gdmFsdWUuIFdoZW4gZGVidWdnaW5nIHBlcmYgaXNzdWVzLCBza2lwcGluZyBgd3RmTGVhdmVgLCBkbyB0b1xuICogZXhjZXB0aW9uLCB3aWxsIHByb2R1Y2UgaW5jb3JyZWN0IHRyYWNlLCBidXQgcHJlc2VuY2Ugb2YgZXhjZXB0aW9uIHNpZ25pZmllcyBsb2dpYyBlcnJvciB3aGljaFxuICogbmVlZHMgdG8gYmUgZml4ZWQgYmVmb3JlIHRoZSBhcHAgc2hvdWxkIGJlIHByb2ZpbGVkLiBBZGQgdHJ5LWZpbmFsbHkgb25seSB3aGVuIHlvdSBleHBlY3QgdGhhdFxuICogYW4gZXhjZXB0aW9uIGlzIGV4cGVjdGVkIGR1cmluZyBub3JtYWwgZXhlY3V0aW9uIHdoaWxlIHByb2ZpbGluZy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCB3dGZDcmVhdGVTY29wZTogKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFncz86IGFueSkgPT4gV3RmU2NvcGVGbiA9XG4gICAgd3RmRW5hYmxlZCA/IGNyZWF0ZVNjb3BlIDogKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFncz86IGFueSkgPT4gbm9vcFNjb3BlO1xuXG4vKipcbiAqIFVzZWQgdG8gbWFyayBlbmQgb2YgU2NvcGUuXG4gKlxuICogLSBgc2NvcGVgIHRvIGVuZC5cbiAqIC0gYHJldHVyblZhbHVlYCAob3B0aW9uYWwpIHRvIGJlIHBhc3NlZCB0byB0aGUgV1RGLlxuICpcbiAqIFJldHVybnMgdGhlIGByZXR1cm5WYWx1ZSBmb3IgZWFzeSBjaGFpbmluZy5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IHd0ZkxlYXZlOiA8VD4oc2NvcGU6IGFueSwgcmV0dXJuVmFsdWU/OiBUKSA9PiBUID1cbiAgICB3dGZFbmFibGVkID8gbGVhdmUgOiAoczogYW55LCByPzogYW55KSA9PiByO1xuXG4vKipcbiAqIFVzZWQgdG8gbWFyayBBc3luYyBzdGFydC4gQXN5bmMgYXJlIHNpbWlsYXIgdG8gc2NvcGUgYnV0IHRoZXkgZG9uJ3QgaGF2ZSB0byBiZSBzdHJpY3RseSBuZXN0ZWQuXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW4gdGhlIGNhbGwgdG8gW2VuZEFzeW5jXS4gQXN5bmMgcmFuZ2VzIG9ubHkgd29yayBpZiBXVEYgaGFzIGJlZW5cbiAqIGVuYWJsZWQuXG4gKlxuICogICAgIHNvbWVNZXRob2QoKSB7XG4gKiAgICAgICAgdmFyIHMgPSB3dGZTdGFydFRpbWVSYW5nZSgnSFRUUDpHRVQnLCAnc29tZS51cmwnKTtcbiAqICAgICAgICB2YXIgZnV0dXJlID0gbmV3IEZ1dHVyZS5kZWxheSg1KS50aGVuKChfKSB7XG4gKiAgICAgICAgICB3dGZFbmRUaW1lUmFuZ2Uocyk7XG4gKiAgICAgICAgfSk7XG4gKiAgICAgfVxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3Qgd3RmU3RhcnRUaW1lUmFuZ2U6IChyYW5nZVR5cGU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcpID0+IGFueSA9XG4gICAgd3RmRW5hYmxlZCA/IHN0YXJ0VGltZVJhbmdlIDogKHJhbmdlVHlwZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZykgPT4gbnVsbDtcblxuLyoqXG4gKiBFbmRzIGEgYXN5bmMgdGltZSByYW5nZSBvcGVyYXRpb24uXG4gKiBbcmFuZ2VdIGlzIHRoZSByZXR1cm4gdmFsdWUgZnJvbSBbd3RmU3RhcnRUaW1lUmFuZ2VdIEFzeW5jIHJhbmdlcyBvbmx5IHdvcmsgaWYgV1RGIGhhcyBiZWVuXG4gKiBlbmFibGVkLlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3Qgd3RmRW5kVGltZVJhbmdlOiAocmFuZ2U6IGFueSkgPT4gdm9pZCA9IHd0ZkVuYWJsZWQgPyBlbmRUaW1lUmFuZ2UgOiAocjogYW55KSA9PiBudWxsO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar promise = Promise.resolve(0);\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm90YXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9taWNyb3Rhc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsSUFBTSxPQUFPLEdBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFJakQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQVk7SUFDNUMsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLEVBQUU7UUFDL0Isd0RBQXdEO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBUSxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyRDtTQUFNO1FBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN6RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuY29uc3QgcHJvbWlzZTogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKDApO1xuXG5kZWNsYXJlIGNvbnN0IFpvbmU6IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlTWljcm9UYXNrKGZuOiBGdW5jdGlvbikge1xuICBpZiAodHlwZW9mIFpvbmUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gdXNlIHByb21pc2UgdG8gc2NoZWR1bGUgbWljcm9UYXNrIGluc3RlYWQgb2YgdXNlIFpvbmVcbiAgICBwcm9taXNlLnRoZW4oKCkgPT4geyBmbiAmJiBmbi5hcHBseShudWxsLCBudWxsKTsgfSk7XG4gIH0gZWxzZSB7XG4gICAgWm9uZS5jdXJyZW50LnNjaGVkdWxlTWljcm9UYXNrKCdzY2hlZHVsZU1pY3JvdGFzaycsIGZuKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nvar NgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        var self = this;\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (Zone['wtfZoneSpec']) {\n            self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n        }\n        if (Zone['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n        }\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n    NgZone.assertInAngularZone = function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    NgZone.assertNotInAngularZone = function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n        return this._inner.run(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n        var zone = this._inner;\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return zone.runTask(task, applyThis, applyArgs);\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    NgZone.prototype.runOutsideAngular = function (fn) {\n        return this._outer.run(fn);\n    };\n    return NgZone;\n}());\nexport { NgZone };\nfunction noop() { }\nvar EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: { 'isAngularZone': true },\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar NoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    NoopNgZone.prototype.run = function (fn) { return fn(); };\n    NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\n    NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n    NoopNgZone.prototype.runTask = function (fn) { return fn(); };\n    return NoopNgZone;\n}());\nexport { NoopNgZone };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfem9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3pvbmUvbmdfem9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFOUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5RUc7QUFDSDtJQWlDRSxnQkFBWSxFQUE4QjtZQUE3Qiw0QkFBNEIsRUFBNUIsaURBQTRCO1FBaENoQyx5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFDdEMseUJBQW9CLEdBQVksS0FBSyxDQUFDO1FBRS9DOztXQUVHO1FBQ00sYUFBUSxHQUFZLElBQUksQ0FBQztRQUVsQzs7V0FFRztRQUNNLGVBQVUsR0FBc0IsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakU7Ozs7V0FJRztRQUNNLHFCQUFnQixHQUFzQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2RTs7OztXQUlHO1FBQ00sYUFBUSxHQUFzQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUvRDs7V0FFRztRQUNNLFlBQU8sR0FBc0IsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFHNUQsSUFBSSxPQUFPLElBQUksSUFBSSxXQUFXLEVBQUU7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBNEIsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdB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O1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzVCO0FBQ0gsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLElBQW1CO0lBQ2xDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQixXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVEOzs7R0FHRztBQUNIO0lBQUE7UUFDVyx5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFDdEMseUJBQW9CLEdBQVksS0FBSyxDQUFDO1FBQ3RDLGFBQVEsR0FBWSxJQUFJLENBQUM7UUFDekIsZUFBVSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25ELHFCQUFnQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pELGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNqRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFTM0QsQ0FBQztJQVBDLHdCQUFHLEdBQUgsVUFBSSxFQUFhLElBQVMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFeEMsK0JBQVUsR0FBVixVQUFXLEVBQWEsSUFBUyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUvQyxzQ0FBaUIsR0FBakIsVUFBa0IsRUFBYSxJQUFTLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXRELDRCQUFPLEdBQVAsVUFBVyxFQUFhLElBQVMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakQsaUJBQUM7QUFBRCxDQUFDLEFBaEJELElBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnLi4vZXZlbnRfZW1pdHRlcic7XG5cbi8qKlxuICogQW4gaW5qZWN0YWJsZSBzZXJ2aWNlIGZvciBleGVjdXRpbmcgd29yayBpbnNpZGUgb3Igb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lLlxuICpcbiAqIFRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIHdoZW4gc3RhcnRpbmcgYSB3b3JrIGNvbnNpc3Rpbmcgb2ZcbiAqIG9uZSBvciBtb3JlIGFzeW5jaHJvbm91cyB0YXNrcyB0aGF0IGRvbid0IHJlcXVpcmUgVUkgdXBkYXRlcyBvciBlcnJvciBoYW5kbGluZyB0byBiZSBoYW5kbGVkIGJ5XG4gKiBBbmd1bGFyLiBTdWNoIHRhc2tzIGNhbiBiZSBraWNrZWQgb2ZmIHZpYSB7QGxpbmsgI3J1bk91dHNpZGVBbmd1bGFyfSBhbmQgaWYgbmVlZGVkLCB0aGVzZSB0YXNrc1xuICogY2FuIHJlZW50ZXIgdGhlIEFuZ3VsYXIgem9uZSB2aWEge0BsaW5rICNydW59LlxuICpcbiAqIDwhLS0gVE9ETzogYWRkL2ZpeCBsaW5rcyB0bzpcbiAqICAgLSBkb2NzIGV4cGxhaW5pbmcgem9uZXMgYW5kIHRoZSB1c2Ugb2Ygem9uZXMgaW4gQW5ndWxhciBhbmQgY2hhbmdlLWRldGVjdGlvblxuICogICAtIGxpbmsgdG8gcnVuT3V0c2lkZUFuZ3VsYXIvcnVuICh0aHJvdWdob3V0IHRoaXMgZmlsZSEpXG4gKiAgIC0tPlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFxuICogaW1wb3J0IHtDb21wb25lbnQsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQge05nSWZ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnbmctem9uZS1kZW1vJyxcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgICA8aDI+RGVtbzogTmdab25lPC9oMj5cbiAqXG4gKiAgICAgPHA+UHJvZ3Jlc3M6IHt7cHJvZ3Jlc3N9fSU8L3A+XG4gKiAgICAgPHAgKm5nSWY9XCJwcm9ncmVzcyA+PSAxMDBcIj5Eb25lIHByb2Nlc3Npbmcge3tsYWJlbH19IG9mIEFuZ3VsYXIgem9uZSE8L3A+XG4gKlxuICogICAgIDxidXR0b24gKGNsaWNrKT1cInByb2Nlc3NXaXRoaW5Bbmd1bGFyWm9uZSgpXCI+UHJvY2VzcyB3aXRoaW4gQW5ndWxhciB6b25lPC9idXR0b24+XG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwicHJvY2Vzc091dHNpZGVPZkFuZ3VsYXJab25lKClcIj5Qcm9jZXNzIG91dHNpZGUgb2YgQW5ndWxhciB6b25lPC9idXR0b24+XG4gKiAgIGAsXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIE5nWm9uZURlbW8ge1xuICogICBwcm9ncmVzczogbnVtYmVyID0gMDtcbiAqICAgbGFiZWw6IHN0cmluZztcbiAqXG4gKiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nWm9uZTogTmdab25lKSB7fVxuICpcbiAqICAgLy8gTG9vcCBpbnNpZGUgdGhlIEFuZ3VsYXIgem9uZVxuICogICAvLyBzbyB0aGUgVUkgRE9FUyByZWZyZXNoIGFmdGVyIGVhY2ggc2V0VGltZW91dCBjeWNsZVxuICogICBwcm9jZXNzV2l0aGluQW5ndWxhclpvbmUoKSB7XG4gKiAgICAgdGhpcy5sYWJlbCA9ICdpbnNpZGUnO1xuICogICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICogICAgIHRoaXMuX2luY3JlYXNlUHJvZ3Jlc3MoKCkgPT4gY29uc29sZS5sb2coJ0luc2lkZSBEb25lIScpKTtcbiAqICAgfVxuICpcbiAqICAgLy8gTG9vcCBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmVcbiAqICAgLy8gc28gdGhlIFVJIERPRVMgTk9UIHJlZnJlc2ggYWZ0ZXIgZWFjaCBzZXRUaW1lb3V0IGN5Y2xlXG4gKiAgIHByb2Nlc3NPdXRzaWRlT2ZBbmd1bGFyWm9uZSgpIHtcbiAqICAgICB0aGlzLmxhYmVsID0gJ291dHNpZGUnO1xuICogICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICogICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gKiAgICAgICB0aGlzLl9pbmNyZWFzZVByb2dyZXNzKCgpID0+IHtcbiAqICAgICAgICAgLy8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkaXNwbGF5IGRvbmVcbiAqICAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7IGNvbnNvbGUubG9nKCdPdXRzaWRlIERvbmUhJyk7IH0pO1xuICogICAgICAgfSk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIF9pbmNyZWFzZVByb2dyZXNzKGRvbmVDYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICogICAgIHRoaXMucHJvZ3Jlc3MgKz0gMTtcbiAqICAgICBjb25zb2xlLmxvZyhgQ3VycmVudCBwcm9ncmVzczogJHt0aGlzLnByb2dyZXNzfSVgKTtcbiAqXG4gKiAgICAgaWYgKHRoaXMucHJvZ3Jlc3MgPCAxMDApIHtcbiAqICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuX2luY3JlYXNlUHJvZ3Jlc3MoZG9uZUNhbGxiYWNrKSwgMTApO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICBkb25lQ2FsbGJhY2soKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIE5nWm9uZSB7XG4gIHJlYWRvbmx5IGhhc1BlbmRpbmdNaWNyb3Rhc2tzOiBib29sZWFuID0gZmFsc2U7XG4gIHJlYWRvbmx5IGhhc1BlbmRpbmdNYWNyb3Rhc2tzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIG1pY3JvdGFza3Mgb3IgbWFjcm90YXNrcy5cbiAgICovXG4gIHJlYWRvbmx5IGlzU3RhYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAvKipcbiAgICogTm90aWZpZXMgd2hlbiBjb2RlIGVudGVycyBBbmd1bGFyIFpvbmUuIFRoaXMgZ2V0cyBmaXJlZCBmaXJzdCBvbiBWTSBUdXJuLlxuICAgKi9cbiAgcmVhZG9ubHkgb25VbnN0YWJsZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcblxuICAvKipcbiAgICogTm90aWZpZXMgd2hlbiB0aGVyZSBpcyBubyBtb3JlIG1pY3JvdGFza3MgZW5xdWV1ZWQgaW4gdGhlIGN1cnJlbnQgVk0gVHVybi5cbiAgICogVGhpcyBpcyBhIGhpbnQgZm9yIEFuZ3VsYXIgdG8gZG8gY2hhbmdlIGRldGVjdGlvbiwgd2hpY2ggbWF5IGVucXVldWUgbW9yZSBtaWNyb3Rhc2tzLlxuICAgKiBGb3IgdGhpcyByZWFzb24gdGhpcyBldmVudCBjYW4gZmlyZSBtdWx0aXBsZSB0aW1lcyBwZXIgVk0gVHVybi5cbiAgICovXG4gIHJlYWRvbmx5IG9uTWljcm90YXNrRW1wdHk6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XG5cbiAgLyoqXG4gICAqIE5vdGlmaWVzIHdoZW4gdGhlIGxhc3QgYG9uTWljcm90YXNrRW1wdHlgIGhhcyBydW4gYW5kIHRoZXJlIGFyZSBubyBtb3JlIG1pY3JvdGFza3MsIHdoaWNoXG4gICAqIGltcGxpZXMgd2UgYXJlIGFib3V0IHRvIHJlbGlucXVpc2ggVk0gdHVybi5cbiAgICogVGhpcyBldmVudCBnZXRzIGNhbGxlZCBqdXN0IG9uY2UuXG4gICAqL1xuICByZWFkb25seSBvblN0YWJsZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcblxuICAvKipcbiAgICogTm90aWZpZXMgdGhhdCBhbiBlcnJvciBoYXMgYmVlbiBkZWxpdmVyZWQuXG4gICAqL1xuICByZWFkb25seSBvbkVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xuXG4gIGNvbnN0cnVjdG9yKHtlbmFibGVMb25nU3RhY2tUcmFjZSA9IGZhbHNlfSkge1xuICAgIGlmICh0eXBlb2YgWm9uZSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbiB0aGlzIGNvbmZpZ3VyYXRpb24gQW5ndWxhciByZXF1aXJlcyBab25lLmpzYCk7XG4gICAgfVxuXG4gICAgWm9uZS5hc3NlcnRab25lUGF0Y2hlZCgpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzIGFzIGFueSBhcyBOZ1pvbmVQcml2YXRlO1xuICAgIHNlbGYuX25lc3RpbmcgPSAwO1xuXG4gICAgc2VsZi5fb3V0ZXIgPSBzZWxmLl9pbm5lciA9IFpvbmUuY3VycmVudDtcblxuICAgIGlmICgoWm9uZSBhcyBhbnkpWyd3dGZab25lU3BlYyddKSB7XG4gICAgICBzZWxmLl9pbm5lciA9IHNlbGYuX2lubmVyLmZvcmsoKFpvbmUgYXMgYW55KVsnd3RmWm9uZVNwZWMnXSk7XG4gICAgfVxuXG4gICAgaWYgKChab25lIGFzIGFueSlbJ1Rhc2tUcmFja2luZ1pvbmVTcGVjJ10pIHtcbiAgICAgIHNlbGYuX2lubmVyID0gc2VsZi5faW5uZXIuZm9yayhuZXcgKChab25lIGFzIGFueSlbJ1Rhc2tUcmFja2luZ1pvbmVTcGVjJ10gYXMgYW55KSk7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZUxvbmdTdGFja1RyYWNlICYmIChab25lIGFzIGFueSlbJ2xvbmdTdGFja1RyYWNlWm9uZVNwZWMnXSkge1xuICAgICAgc2VsZi5faW5uZXIgPSBzZWxmLl9pbm5lci5mb3JrKChab25lIGFzIGFueSlbJ2xvbmdTdGFja1RyYWNlWm9uZVNwZWMnXSk7XG4gICAgfVxuXG4gICAgZm9ya0lubmVyWm9uZVdpdGhBbmd1bGFyQmVoYXZpb3Ioc2VsZik7XG4gIH1cblxuICBzdGF0aWMgaXNJbkFuZ3VsYXJab25lKCk6IGJvb2xlYW4geyByZXR1cm4gWm9uZS5jdXJyZW50LmdldCgnaXNBbmd1bGFyWm9uZScpID09PSB0cnVlOyB9XG5cbiAgc3RhdGljIGFzc2VydEluQW5ndWxhclpvbmUoKTogdm9pZCB7XG4gICAgaWYgKCFOZ1pvbmUuaXNJbkFuZ3VsYXJab25lKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdG8gYmUgaW4gQW5ndWxhciBab25lLCBidXQgaXQgaXMgbm90IScpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3NlcnROb3RJbkFuZ3VsYXJab25lKCk6IHZvaWQge1xuICAgIGlmIChOZ1pvbmUuaXNJbkFuZ3VsYXJab25lKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdG8gbm90IGJlIGluIEFuZ3VsYXIgWm9uZSwgYnV0IGl0IGlzIScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IHdpdGhpbiB0aGUgQW5ndWxhciB6b25lIGFuZCByZXR1cm5zIHZhbHVlIHJldHVybmVkIGJ5XG4gICAqIHRoZSBmdW5jdGlvbi5cbiAgICpcbiAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIGBydW5gIGFsbG93cyB5b3UgdG8gcmVlbnRlciBBbmd1bGFyIHpvbmUgZnJvbSBhIHRhc2sgdGhhdCB3YXMgZXhlY3V0ZWRcbiAgICogb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lICh0eXBpY2FsbHkgc3RhcnRlZCB2aWEge0BsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgKlxuICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICpcbiAgICogSWYgYSBzeW5jaHJvbm91cyBlcnJvciBoYXBwZW5zIGl0IHdpbGwgYmUgcmV0aHJvd24gYW5kIG5vdCByZXBvcnRlZCB2aWEgYG9uRXJyb3JgLlxuICAgKi9cbiAgcnVuPFQ+KGZuOiAoLi4uYXJnczogYW55W10pID0+IFQsIGFwcGx5VGhpcz86IGFueSwgYXBwbHlBcmdzPzogYW55W10pOiBUIHtcbiAgICByZXR1cm4gKHRoaXMgYXMgYW55IGFzIE5nWm9uZVByaXZhdGUpLl9pbm5lci5ydW4oZm4sIGFwcGx5VGhpcywgYXBwbHlBcmdzKSBhcyBUO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uIHN5bmNocm9ub3VzbHkgd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUgYXMgYSB0YXNrIGFuZCByZXR1cm5zIHZhbHVlXG4gICAqIHJldHVybmVkIGJ5IHRoZSBmdW5jdGlvbi5cbiAgICpcbiAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIGBydW5gIGFsbG93cyB5b3UgdG8gcmVlbnRlciBBbmd1bGFyIHpvbmUgZnJvbSBhIHRhc2sgdGhhdCB3YXMgZXhlY3V0ZWRcbiAgICogb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lICh0eXBpY2FsbHkgc3RhcnRlZCB2aWEge0BsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgKlxuICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICpcbiAgICogSWYgYSBzeW5jaHJvbm91cyBlcnJvciBoYXBwZW5zIGl0IHdpbGwgYmUgcmV0aHJvd24gYW5kIG5vdCByZXBvcnRlZCB2aWEgYG9uRXJyb3JgLlxuICAgKi9cbiAgcnVuVGFzazxUPihmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBULCBhcHBseVRoaXM/OiBhbnksIGFwcGx5QXJncz86IGFueVtdLCBuYW1lPzogc3RyaW5nKTogVCB7XG4gICAgY29uc3Qgem9uZSA9ICh0aGlzIGFzIGFueSBhcyBOZ1pvbmVQcml2YXRlKS5faW5uZXI7XG4gICAgY29uc3QgdGFzayA9IHpvbmUuc2NoZWR1bGVFdmVudFRhc2soJ05nWm9uZUV2ZW50OiAnICsgbmFtZSwgZm4sIEVNUFRZX1BBWUxPQUQsIG5vb3AsIG5vb3ApO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gem9uZS5ydW5UYXNrKHRhc2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzKSBhcyBUO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB6b25lLmNhbmNlbFRhc2sodGFzayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYHJ1bmAsIGV4Y2VwdCB0aGF0IHN5bmNocm9ub3VzIGVycm9ycyBhcmUgY2F1Z2h0IGFuZCBmb3J3YXJkZWQgdmlhIGBvbkVycm9yYCBhbmQgbm90XG4gICAqIHJldGhyb3duLlxuICAgKi9cbiAgcnVuR3VhcmRlZDxUPihmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBULCBhcHBseVRoaXM/OiBhbnksIGFwcGx5QXJncz86IGFueVtdKTogVCB7XG4gICAgcmV0dXJuICh0aGlzIGFzIGFueSBhcyBOZ1pvbmVQcml2YXRlKS5faW5uZXIucnVuR3VhcmRlZChmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MpIGFzIFQ7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSBpbiBBbmd1bGFyJ3MgcGFyZW50IHpvbmUgYW5kIHJldHVybnMgdmFsdWUgcmV0dXJuZWQgYnlcbiAgICogdGhlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEge0BsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0gYWxsb3dzIHlvdSB0byBlc2NhcGUgQW5ndWxhcidzIHpvbmUgYW5kIGRvXG4gICAqIHdvcmsgdGhhdFxuICAgKiBkb2Vzbid0IHRyaWdnZXIgQW5ndWxhciBjaGFuZ2UtZGV0ZWN0aW9uIG9yIGlzIHN1YmplY3QgdG8gQW5ndWxhcidzIGVycm9yIGhhbmRsaW5nLlxuICAgKlxuICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgKiBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAqXG4gICAqIFVzZSB7QGxpbmsgI3J1bn0gdG8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkbyB3b3JrIHRoYXQgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gbW9kZWwuXG4gICAqL1xuICBydW5PdXRzaWRlQW5ndWxhcjxUPihmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBUKTogVCB7XG4gICAgcmV0dXJuICh0aGlzIGFzIGFueSBhcyBOZ1pvbmVQcml2YXRlKS5fb3V0ZXIucnVuKGZuKSBhcyBUO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuY29uc3QgRU1QVFlfUEFZTE9BRCA9IHt9O1xuXG5cbmludGVyZmFjZSBOZ1pvbmVQcml2YXRlIGV4dGVuZHMgTmdab25lIHtcbiAgX291dGVyOiBab25lO1xuICBfaW5uZXI6IFpvbmU7XG4gIF9uZXN0aW5nOiBudW1iZXI7XG5cbiAgaGFzUGVuZGluZ01pY3JvdGFza3M6IGJvb2xlYW47XG4gIGhhc1BlbmRpbmdNYWNyb3Rhc2tzOiBib29sZWFuO1xuICBpc1N0YWJsZTogYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGFibGUoem9uZTogTmdab25lUHJpdmF0ZSkge1xuICBpZiAoem9uZS5fbmVzdGluZyA9PSAwICYmICF6b25lLmhhc1BlbmRpbmdNaWNyb3Rhc2tzICYmICF6b25lLmlzU3RhYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHpvbmUuX25lc3RpbmcrKztcbiAgICAgIHpvbmUub25NaWNyb3Rhc2tFbXB0eS5lbWl0KG51bGwpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB6b25lLl9uZXN0aW5nLS07XG4gICAgICBpZiAoIXpvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHpvbmUub25TdGFibGUuZW1pdChudWxsKSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgem9uZS5pc1N0YWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ya0lubmVyWm9uZVdpdGhBbmd1bGFyQmVoYXZpb3Ioem9uZTogTmdab25lUHJpdmF0ZSkge1xuICB6b25lLl9pbm5lciA9IHpvbmUuX2lubmVyLmZvcmsoe1xuICAgIG5hbWU6ICdhbmd1bGFyJyxcbiAgICBwcm9wZXJ0aWVzOiA8YW55PnsnaXNBbmd1bGFyWm9uZSc6IHRydWV9LFxuICAgIG9uSW52b2tlVGFzazogKGRlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnQ6IFpvbmUsIHRhcmdldDogWm9uZSwgdGFzazogVGFzaywgYXBwbHlUaGlzOiBhbnksXG4gICAgICAgICAgICAgICAgICAgYXBwbHlBcmdzOiBhbnkpOiBhbnkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb25FbnRlcih6b25lKTtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmludm9rZVRhc2sodGFyZ2V0LCB0YXNrLCBhcHBseVRoaXMsIGFwcGx5QXJncyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBvbkxlYXZlKHpvbmUpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIG9uSW52b2tlOiAoZGVsZWdhdGU6IFpvbmVEZWxlZ2F0ZSwgY3VycmVudDogWm9uZSwgdGFyZ2V0OiBab25lLCBjYWxsYmFjazogRnVuY3Rpb24sXG4gICAgICAgICAgICAgICBhcHBseVRoaXM6IGFueSwgYXBwbHlBcmdzOiBhbnlbXSwgc291cmNlOiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb25FbnRlcih6b25lKTtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmludm9rZSh0YXJnZXQsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIG9uTGVhdmUoem9uZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uSGFzVGFzazpcbiAgICAgICAgKGRlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnQ6IFpvbmUsIHRhcmdldDogWm9uZSwgaGFzVGFza1N0YXRlOiBIYXNUYXNrU3RhdGUpID0+IHtcbiAgICAgICAgICBkZWxlZ2F0ZS5oYXNUYXNrKHRhcmdldCwgaGFzVGFza1N0YXRlKTtcbiAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBXZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGhhc1Rhc2sgZXZlbnRzIHdoaWNoIG9yaWdpbmF0ZSBmcm9tIG91ciB6b25lXG4gICAgICAgICAgICAvLyAoQSBjaGlsZCBoYXNUYXNrIGV2ZW50IGlzIG5vdCBpbnRlcmVzdGluZyB0byB1cylcbiAgICAgICAgICAgIGlmIChoYXNUYXNrU3RhdGUuY2hhbmdlID09ICdtaWNyb1Rhc2snKSB7XG4gICAgICAgICAgICAgIHpvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MgPSBoYXNUYXNrU3RhdGUubWljcm9UYXNrO1xuICAgICAgICAgICAgICBjaGVja1N0YWJsZSh6b25lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzVGFza1N0YXRlLmNoYW5nZSA9PSAnbWFjcm9UYXNrJykge1xuICAgICAgICAgICAgICB6b25lLmhhc1BlbmRpbmdNYWNyb3Rhc2tzID0gaGFzVGFza1N0YXRlLm1hY3JvVGFzaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICBvbkhhbmRsZUVycm9yOiAoZGVsZWdhdGU6IFpvbmVEZWxlZ2F0ZSwgY3VycmVudDogWm9uZSwgdGFyZ2V0OiBab25lLCBlcnJvcjogYW55KTogYm9vbGVhbiA9PiB7XG4gICAgICBkZWxlZ2F0ZS5oYW5kbGVFcnJvcih0YXJnZXQsIGVycm9yKTtcbiAgICAgIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gem9uZS5vbkVycm9yLmVtaXQoZXJyb3IpKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkVudGVyKHpvbmU6IE5nWm9uZVByaXZhdGUpIHtcbiAgem9uZS5fbmVzdGluZysrO1xuICBpZiAoem9uZS5pc1N0YWJsZSkge1xuICAgIHpvbmUuaXNTdGFibGUgPSBmYWxzZTtcbiAgICB6b25lLm9uVW5zdGFibGUuZW1pdChudWxsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkxlYXZlKHpvbmU6IE5nWm9uZVByaXZhdGUpIHtcbiAgem9uZS5fbmVzdGluZy0tO1xuICBjaGVja1N0YWJsZSh6b25lKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhIG5vb3AgaW1wbGVtZW50YXRpb24gb2YgYE5nWm9uZWAgd2hpY2ggZG9lcyBub3RoaW5nLiBUaGlzIHpvbmUgcmVxdWlyZXMgZXhwbGljaXQgY2FsbHNcbiAqIHRvIGZyYW1ld29yayB0byBwZXJmb3JtIHJlbmRlcmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vb3BOZ1pvbmUgaW1wbGVtZW50cyBOZ1pvbmUge1xuICByZWFkb25seSBoYXNQZW5kaW5nTWljcm90YXNrczogYm9vbGVhbiA9IGZhbHNlO1xuICByZWFkb25seSBoYXNQZW5kaW5nTWFjcm90YXNrczogYm9vbGVhbiA9IGZhbHNlO1xuICByZWFkb25seSBpc1N0YWJsZTogYm9vbGVhbiA9IHRydWU7XG4gIHJlYWRvbmx5IG9uVW5zdGFibGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICByZWFkb25seSBvbk1pY3JvdGFza0VtcHR5OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcmVhZG9ubHkgb25TdGFibGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICByZWFkb25seSBvbkVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBydW4oZm46ICgpID0+IGFueSk6IGFueSB7IHJldHVybiBmbigpOyB9XG5cbiAgcnVuR3VhcmRlZChmbjogKCkgPT4gYW55KTogYW55IHsgcmV0dXJuIGZuKCk7IH1cblxuICBydW5PdXRzaWRlQW5ndWxhcihmbjogKCkgPT4gYW55KTogYW55IHsgcmV0dXJuIGZuKCk7IH1cblxuICBydW5UYXNrPFQ+KGZuOiAoKSA9PiBhbnkpOiBhbnkgeyByZXR1cm4gZm4oKTsgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { getCompilerFacade } from './compiler/compiler_facade';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { COMPILER_OPTIONS, CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { isComponentResourceResolutionQueueEmpty, resolveComponentResources } from './metadata/resource_loading';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { isDevMode } from './util/is_dev_mode';\nimport { isPromise } from './util/lang';\nimport { scheduleMicroTask } from './util/microtask';\nimport { stringify } from './util/stringify';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\nvar _platform;\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    var compilerFactory = injector.get(CompilerFactory);\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\nexport function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    var moduleFactory = new R3NgModuleFactory(moduleType);\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compiler = getCompilerFacade();\n    var compilerInjector = Injector.create({ providers: compilerProviders });\n    var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n        .then(function () { return moduleFactory; });\n}\nvar isBoundToModule = isBoundToModule__PRE_R3__;\nexport function isBoundToModule__PRE_R3__(cf) {\n    return cf instanceof ComponentFactoryBoundToModule;\n}\nexport function isBoundToModule__POST_R3__(cf) {\n    return cf.isBoundToModule;\n}\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nvar NgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\nexport { NgProbeToken };\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    var desc = \"Platform: \" + name;\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken) {\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n        var _this = this;\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        var ngZoneOption = options ? options.ngZone : undefined;\n        var ngZone = getNgZone(ngZoneOption);\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            var moduleRef = moduleFactory.create(ngZoneInjector);\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n            ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n        var appRef = moduleRef.injector.get(ApplicationRef);\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    PlatformRef.prototype.destroy = function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [Injector])\n    ], PlatformRef);\n    return PlatformRef;\n}());\nexport { PlatformRef };\nfunction getNgZone(ngZoneOption) {\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, objs);\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        var isStable = new Observable(function (observer) {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        this.isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    ApplicationRef_1 = ApplicationRef;\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        var ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    ApplicationRef.prototype.tick = function () {\n        var _this = this;\n        var e_1, _a, e_2, _b;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        var scope = ApplicationRef_1._tickScope();\n        try {\n            this._runningTick = true;\n            try {\n                for (var _c = tslib_1.__values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var view = _d.value;\n                    view.detectChanges();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this._enforceNoNewChanges) {\n                try {\n                    for (var _e = tslib_1.__values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                        var view = _f.value;\n                        view.checkNoChanges();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    ApplicationRef.prototype.attachView = function (viewRef) {\n        var view = viewRef;\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    ApplicationRef.prototype.detachView = function (viewRef) {\n        var view = viewRef;\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    ApplicationRef.prototype._loadComponent = function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    ApplicationRef.prototype._unloadComponent = function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    ApplicationRef.prototype.ngOnDestroy = function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    var ApplicationRef_1;\n    /** @internal */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef = ApplicationRef_1 = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [NgZone, Console, Injector,\n            ErrorHandler,\n            ComponentFactoryResolver,\n            ApplicationInitStatus])\n    ], ApplicationRef);\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nfunction remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\nfunction _mergeArrays(parts) {\n    var result = [];\n    parts.forEach(function (part) { return part && result.push.apply(result, tslib_1.__spread(part)); });\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util/microtask';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * @internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(function () {\n            _this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    Testability.prototype._watchAngularEvents = function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    Testability.prototype.increasePendingRequestCount = function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.decreasePendingRequestCount = function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    Testability.prototype.isStable = function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    Testability.prototype._runCallbacksIfReady = function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    var cb = _this._callbacks.pop();\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    Testability.prototype.getPendingTasks = function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: t.creationLocation,\n                data: t.data\n            };\n        });\n    };\n    Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n        var _this = this;\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(doneCb, timeout, updateCb);\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    Testability.prototype.findProviders = function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [NgZone])\n    ], Testability);\n    return Testability;\n}());\nexport { Testability };\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /** @internal */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], TestabilityRegistry);\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    _NoopGetTestability.prototype.addToWindow = function (registry) { };\n    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nvar _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=data:application/json;base64,","/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n","/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../../util/comparison';\nimport { stringify } from '../../util/stringify';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\nvar trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nvar DefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n        var nextIt = this._itHead;\n        var nextRemove = this._removalsHead;\n        var addRemoveOffset = 0;\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            var record = !nextRemove ||\n                nextIt &&\n                    nextIt.currentIndex <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                nextIt :\n                nextRemove;\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = nextIt._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    var localCurrentIndex = currentIndex - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.diff = function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    DefaultIterableDiffer.prototype.onDestroy = function () { };\n    DefaultIterableDiffer.prototype.check = function (collection) {\n        var _this = this;\n        this._reset();\n        var record = this._itHead;\n        var mayBeDirty = false;\n        var index;\n        var item;\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            this.length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            this.length = index;\n        }\n        this._truncate(record);\n        this.collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._truncate = function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var prev = record._prevRemoved;\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._remove = function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._unlink = function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var prev = record._prev;\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\nexport { DefaultIterableDiffer };\nvar IterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prevDup = null;\n        /** @internal */\n        this._nextDup = null;\n        /** @internal */\n        this._prevRemoved = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextMoved = null;\n        /** @internal */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\nexport { IterableChangeRecord_ };\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\nvar _DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /** @internal */\n        this._head = null;\n        /** @internal */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    _DuplicateItemRecordList.prototype.add = function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    _DuplicateItemRecordList.prototype.remove = function (record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var prev = record._prevDup;\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nvar _DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    _DuplicateMap.prototype.put = function (record) {\n        var key = record.trackById;\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n        var key = trackById;\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    _DuplicateMap.prototype.remove = function (record) {\n        var key = record.trackById;\n        var recordList = this.map.get(key);\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../../util/comparison';\nimport { stringify } from '../../util/stringify';\nimport { isJsObject } from '../change_detection_util';\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n    DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\nexport { DefaultKeyValueDifferFactory };\nvar DefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.diff = function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    DefaultKeyValueDiffer.prototype.check = function (map) {\n        var _this = this;\n        this._reset();\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n        if (before) {\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n        if (this._records.has(key)) {\n            var record_1 = this._records.get(key);\n            this._maybeAddToChanges(record_1, value);\n            var prev = record_1._prev;\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            this._additionsTail._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            this._changesTail._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\nexport { DefaultKeyValueDiffer };\nvar KeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/interface/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    IterableDiffers.create = function (factories, parent) {\n        if (parent != null) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    IterableDiffers.extend = function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    IterableDiffers.prototype.find = function (iterable) {\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */\n    IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf, defineInjectable } from '../../di';\nimport { DefaultKeyValueDifferFactory } from './default_keyvalue_differ';\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nvar KeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    KeyValueDiffers.create = function (factories, parent) {\n        if (parent) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    KeyValueDiffers.extend = function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    KeyValueDiffers.prototype.find = function (kv) {\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    /** @nocollapse */\n    KeyValueDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n    });\n    return KeyValueDiffers;\n}());\nexport { KeyValueDiffers };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nimport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { IterableDiffers } from './differs/iterable_differs';\nexport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChange } from '../interface/simple_change';\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nvar keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nvar iterableDiff = [new DefaultIterableDifferFactory()];\nexport var defaultIterableDiffers = new IterableDiffers(iterableDiff);\nexport var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlX2RldGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQXdCLGVBQWUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2xGLE9BQU8sRUFBd0IsZUFBZSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFbEYsT0FBTyxFQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsb0JBQW9CLEVBQUUsZ0NBQWdDLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDNUcsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0UsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDeEUsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0UsT0FBTyxFQU1MLGVBQWUsRUFHaEIsTUFDRCw0QkFBNEIsQ0FBQztBQUM3QixPQUFPLEVBQStFLGVBQWUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRXpJLE9BQU8sRUFBQyxZQUFZLEVBQWdCLE1BQU0sNEJBQTRCLENBQUM7QUFJdkU7O0dBRUc7QUFDSCxJQUFNLFVBQVUsR0FBNEIsQ0FBQyxJQUFJLDRCQUE0QixFQUFFLENBQUMsQ0FBQztBQUVqRjs7R0FFRztBQUNILElBQU0sWUFBWSxHQUE0QixDQUFDLElBQUksNEJBQTRCLEVBQUUsQ0FBQyxDQUFDO0FBRW5GLE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RlZmF1bHRJdGVyYWJsZURpZmZlckZhY3Rvcnl9IGZyb20gJy4vZGlmZmVycy9kZWZhdWx0X2l0ZXJhYmxlX2RpZmZlcic7XG5pbXBvcnQge0RlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3Rvcnl9IGZyb20gJy4vZGlmZmVycy9kZWZhdWx0X2tleXZhbHVlX2RpZmZlcic7XG5pbXBvcnQge0l0ZXJhYmxlRGlmZmVyRmFjdG9yeSwgSXRlcmFibGVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMvaXRlcmFibGVfZGlmZmVycyc7XG5pbXBvcnQge0tleVZhbHVlRGlmZmVyRmFjdG9yeSwgS2V5VmFsdWVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMva2V5dmFsdWVfZGlmZmVycyc7XG5cbmV4cG9ydCB7V3JhcHBlZFZhbHVlLCBkZXZNb2RlRXF1YWx9IGZyb20gJy4vY2hhbmdlX2RldGVjdGlvbl91dGlsJztcbmV4cG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWZ9IGZyb20gJy4vY2hhbmdlX2RldGVjdG9yX3JlZic7XG5leHBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclN0YXR1cywgaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3l9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCB7RGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeX0gZnJvbSAnLi9kaWZmZXJzL2RlZmF1bHRfaXRlcmFibGVfZGlmZmVyJztcbmV4cG9ydCB7RGVmYXVsdEl0ZXJhYmxlRGlmZmVyfSBmcm9tICcuL2RpZmZlcnMvZGVmYXVsdF9pdGVyYWJsZV9kaWZmZXInO1xuZXhwb3J0IHtEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5fSBmcm9tICcuL2RpZmZlcnMvZGVmYXVsdF9rZXl2YWx1ZV9kaWZmZXInO1xuZXhwb3J0IHtcbiAgQ29sbGVjdGlvbkNoYW5nZVJlY29yZCxcbiAgSXRlcmFibGVDaGFuZ2VSZWNvcmQsXG4gIEl0ZXJhYmxlQ2hhbmdlcyxcbiAgSXRlcmFibGVEaWZmZXIsXG4gIEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSxcbiAgSXRlcmFibGVEaWZmZXJzLFxuICBOZ0l0ZXJhYmxlLFxuICBUcmFja0J5RnVuY3Rpb25cbn0gZnJvbVxuJy4vZGlmZmVycy9pdGVyYWJsZV9kaWZmZXJzJztcbmV4cG9ydCB7S2V5VmFsdWVDaGFuZ2VSZWNvcmQsIEtleVZhbHVlQ2hhbmdlcywgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVyRmFjdG9yeSwgS2V5VmFsdWVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMva2V5dmFsdWVfZGlmZmVycyc7XG5leHBvcnQge1BpcGVUcmFuc2Zvcm19IGZyb20gJy4vcGlwZV90cmFuc2Zvcm0nO1xuZXhwb3J0IHtTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXN9IGZyb20gJy4uL2ludGVyZmFjZS9zaW1wbGVfY2hhbmdlJztcblxuXG5cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgT2JqZWN0YHMgYW5kIGBNYXBgcy5cbiAqL1xuY29uc3Qga2V5VmFsRGlmZjogS2V5VmFsdWVEaWZmZXJGYWN0b3J5W10gPSBbbmV3IERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkoKV07XG5cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgSXRlcmFibGVgIHR5cGVzIHN1Y2ggYXMgYEFycmF5YHMuXG4gKi9cbmNvbnN0IGl0ZXJhYmxlRGlmZjogSXRlcmFibGVEaWZmZXJGYWN0b3J5W10gPSBbbmV3IERlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkoKV07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SXRlcmFibGVEaWZmZXJzID0gbmV3IEl0ZXJhYmxlRGlmZmVycyhpdGVyYWJsZURpZmYpO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEtleVZhbHVlRGlmZmVycyA9IG5ldyBLZXlWYWx1ZURpZmZlcnMoa2V5VmFsRGlmZik7XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    Console.prototype.log = function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    Console.prototype.warn = function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console = tslib_1.__decorate([\n        Injectable()\n    ], Console);\n    return Console;\n}());\nexport { Console };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NvbnNvbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHaEM7SUFBQTtJQVVBLENBQUM7SUFUQyxxQkFBRyxHQUFILFVBQUksT0FBZTtRQUNqQixzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsNkVBQTZFO0lBQzdFLHNCQUFJLEdBQUosVUFBSyxPQUFlO1FBQ2xCLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFUVSxPQUFPO1FBRG5CLFVBQVUsRUFBRTtPQUNBLE9BQU8sQ0FVbkI7SUFBRCxjQUFDO0NBQUEsQUFWRCxJQVVDO1NBVlksT0FBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICcuL2RpJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnNvbGUge1xuICBsb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfVxuICAvLyBOb3RlOiBmb3IgcmVwb3J0aW5nIGVycm9ycyB1c2UgYERPTS5sb2dFcnJvcigpYCBhcyBpdCBpcyBwbGF0Zm9ybSBzcGVjaWZpY1xuICB3YXJuKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { SCHEDULER } from './render3/component_ref';\nimport { NgZone } from './zone';\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nexport function zoneSchedulerFactory(ngZone) {\n    var queue = [];\n    ngZone.onStable.subscribe(function () {\n        while (queue.length) {\n            queue.pop()();\n        }\n    });\n    return function (fn) { queue.push(fn); };\n}\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule = tslib_1.__decorate([\n        NgModule({ providers: APPLICATION_MODULE_PROVIDERS }),\n        tslib_1.__metadata(\"design:paramtypes\", [ApplicationRef])\n    ], ApplicationModule);\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb25fbW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYXBwbGljYXRpb25fbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDMUUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBQyxlQUFlLEVBQUUsZUFBZSxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDckksT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUMsUUFBUSxFQUFpQixNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sVUFBVSx1QkFBdUI7SUFDckMsT0FBTyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QjtJQUNyQyxPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQWU7SUFDNUMsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDO0FBQzNCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSw0QkFBNEIsR0FBcUI7SUFDNUQ7UUFDRSxPQUFPLEVBQUUsY0FBYztRQUN2QixRQUFRLEVBQUUsY0FBYztRQUN4QixJQUFJLEVBQ0EsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUscUJBQXFCLENBQUM7S0FDL0Y7SUFDRCxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFDO0lBQ3RFO1FBQ0UsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixRQUFRLEVBQUUscUJBQXFCO1FBQy9CLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUMxQztJQUNELEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDakQsc0JBQXNCO0lBQ3RCLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUN6RSxFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDekU7UUFDRSxPQUFPLEVBQUUsU0FBUztRQUNsQixVQUFVLEVBQUUsY0FBYztRQUMxQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ2hFO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE1BQWM7SUFDakQsSUFBSSxLQUFLLEdBQW1CLEVBQUUsQ0FBQztJQUMvQixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkIsS0FBSyxDQUFDLEdBQUcsRUFBSSxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sVUFBUyxFQUFjLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBRUg7SUFDRSw0Q0FBNEM7SUFDNUMsMkJBQVksTUFBc0I7SUFBRyxDQUFDO0lBRjNCLGlCQUFpQjtRQUQ3QixRQUFRLENBQUMsRUFBQyxTQUFTLEVBQUUsNEJBQTRCLEVBQUMsQ0FBQztpREFHOUIsY0FBYztPQUZ2QixpQkFBaUIsQ0FHN0I7SUFBRCx3QkFBQztDQUFBLEFBSEQsSUFHQztTQUhZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEFwcGxpY2F0aW9uSW5pdFN0YXR1c30gZnJvbSAnLi9hcHBsaWNhdGlvbl9pbml0JztcbmltcG9ydCB7QXBwbGljYXRpb25SZWZ9IGZyb20gJy4vYXBwbGljYXRpb25fcmVmJztcbmltcG9ydCB7QVBQX0lEX1JBTkRPTV9QUk9WSURFUn0gZnJvbSAnLi9hcHBsaWNhdGlvbl90b2tlbnMnO1xuaW1wb3J0IHtJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgZGVmYXVsdEl0ZXJhYmxlRGlmZmVycywgZGVmYXVsdEtleVZhbHVlRGlmZmVyc30gZnJvbSAnLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nO1xuaW1wb3J0IHtDb25zb2xlfSBmcm9tICcuL2NvbnNvbGUnO1xuaW1wb3J0IHtJbmplY3RvciwgU3RhdGljUHJvdmlkZXJ9IGZyb20gJy4vZGknO1xuaW1wb3J0IHtJbmplY3QsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnLi9kaS9tZXRhZGF0YSc7XG5pbXBvcnQge0Vycm9ySGFuZGxlcn0gZnJvbSAnLi9lcnJvcl9oYW5kbGVyJztcbmltcG9ydCB7TE9DQUxFX0lEfSBmcm9tICcuL2kxOG4vdG9rZW5zJztcbmltcG9ydCB7Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyfSBmcm9tICcuL2xpbmtlcic7XG5pbXBvcnQge0NvbXBpbGVyfSBmcm9tICcuL2xpbmtlci9jb21waWxlcic7XG5pbXBvcnQge05nTW9kdWxlfSBmcm9tICcuL21ldGFkYXRhJztcbmltcG9ydCB7U0NIRURVTEVSfSBmcm9tICcuL3JlbmRlcjMvY29tcG9uZW50X3JlZic7XG5pbXBvcnQge05nWm9uZX0gZnJvbSAnLi96b25lJztcblxuZXhwb3J0IGZ1bmN0aW9uIF9pdGVyYWJsZURpZmZlcnNGYWN0b3J5KCkge1xuICByZXR1cm4gZGVmYXVsdEl0ZXJhYmxlRGlmZmVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9rZXlWYWx1ZURpZmZlcnNGYWN0b3J5KCkge1xuICByZXR1cm4gZGVmYXVsdEtleVZhbHVlRGlmZmVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9sb2NhbGVGYWN0b3J5KGxvY2FsZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBsb2NhbGUgfHwgJ2VuLVVTJztcbn1cblxuLyoqXG4gKiBBIGJ1aWx0LWluIFtkZXBlbmRlbmN5IGluamVjdGlvbiB0b2tlbl0oZ3VpZGUvZ2xvc3NhcnkjZGktdG9rZW4pXG4gKiB0aGF0IGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSByb290IGluamVjdG9yIGZvciBib290c3RyYXBwaW5nLlxuICovXG5leHBvcnQgY29uc3QgQVBQTElDQVRJT05fTU9EVUxFX1BST1ZJREVSUzogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAge1xuICAgIHByb3ZpZGU6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHVzZUNsYXNzOiBBcHBsaWNhdGlvblJlZixcbiAgICBkZXBzOlxuICAgICAgICBbTmdab25lLCBDb25zb2xlLCBJbmplY3RvciwgRXJyb3JIYW5kbGVyLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEFwcGxpY2F0aW9uSW5pdFN0YXR1c11cbiAgfSxcbiAge3Byb3ZpZGU6IFNDSEVEVUxFUiwgZGVwczogW05nWm9uZV0sIHVzZUZhY3Rvcnk6IHpvbmVTY2hlZHVsZXJGYWN0b3J5fSxcbiAge1xuICAgIHByb3ZpZGU6IEFwcGxpY2F0aW9uSW5pdFN0YXR1cyxcbiAgICB1c2VDbGFzczogQXBwbGljYXRpb25Jbml0U3RhdHVzLFxuICAgIGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIEFQUF9JTklUSUFMSVpFUl1dXG4gIH0sXG4gIHtwcm92aWRlOiBDb21waWxlciwgdXNlQ2xhc3M6IENvbXBpbGVyLCBkZXBzOiBbXX0sXG4gIEFQUF9JRF9SQU5ET01fUFJPVklERVIsXG4gIHtwcm92aWRlOiBJdGVyYWJsZURpZmZlcnMsIHVzZUZhY3Rvcnk6IF9pdGVyYWJsZURpZmZlcnNGYWN0b3J5LCBkZXBzOiBbXX0sXG4gIHtwcm92aWRlOiBLZXlWYWx1ZURpZmZlcnMsIHVzZUZhY3Rvcnk6IF9rZXlWYWx1ZURpZmZlcnNGYWN0b3J5LCBkZXBzOiBbXX0sXG4gIHtcbiAgICBwcm92aWRlOiBMT0NBTEVfSUQsXG4gICAgdXNlRmFjdG9yeTogX2xvY2FsZUZhY3RvcnksXG4gICAgZGVwczogW1tuZXcgSW5qZWN0KExPQ0FMRV9JRCksIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKV1dXG4gIH0sXG5dO1xuXG4vKipcbiAqIFNjaGVkdWxlIHdvcmsgYXQgbmV4dCBhdmFpbGFibGUgc2xvdC5cbiAqXG4gKiBJbiBJdnkgdGhpcyBpcyBqdXN0IGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLiBGb3IgY29tcGF0aWJpbGl0eSByZWFzb25zIHdoZW4gYm9vdHN0cmFwcGVkXG4gKiB1c2luZyBgcGxhdGZvcm1SZWYuYm9vdHN0cmFwYCB3ZSBuZWVkIHRvIHVzZSBgTmdab25lLm9uU3RhYmxlYCBhcyB0aGUgc2NoZWR1bGluZyBtZWNoYW5pc20uXG4gKiBUaGlzIG92ZXJyaWRlcyB0aGUgc2NoZWR1bGluZyBtZWNoYW5pc20gaW4gSXZ5IHRvIGBOZ1pvbmUub25TdGFibGVgLlxuICpcbiAqIEBwYXJhbSBuZ1pvbmUgTmdab25lIHRvIHVzZSBmb3Igc2NoZWR1bGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHpvbmVTY2hlZHVsZXJGYWN0b3J5KG5nWm9uZTogTmdab25lKTogKGZuOiAoKSA9PiB2b2lkKSA9PiB2b2lkIHtcbiAgbGV0IHF1ZXVlOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuICBuZ1pvbmUub25TdGFibGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICBxdWV1ZS5wb3AoKSAhKCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGZuOiAoKSA9PiB2b2lkKSB7IHF1ZXVlLnB1c2goZm4pOyB9O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIHJvb3QgaW5qZWN0b3IgZm9yIGFuIGFwcCB3aXRoXG4gKiBwcm92aWRlcnMgb2YgYEBhbmd1bGFyL2NvcmVgIGRlcGVuZGVuY2llcyB0aGF0IGBBcHBsaWNhdGlvblJlZmAgbmVlZHNcbiAqIHRvIGJvb3RzdHJhcCBjb21wb25lbnRzLlxuICpcbiAqIFJlLWV4cG9ydGVkIGJ5IGBCcm93c2VyTW9kdWxlYCwgd2hpY2ggaXMgaW5jbHVkZWQgYXV0b21hdGljYWxseSBpbiB0aGUgcm9vdFxuICogYEFwcE1vZHVsZWAgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IGFwcCB3aXRoIHRoZSBDTEkgYG5ld2AgY29tbWFuZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbkBOZ01vZHVsZSh7cHJvdmlkZXJzOiBBUFBMSUNBVElPTl9NT0RVTEVfUFJPVklERVJTfSlcbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvbk1vZHVsZSB7XG4gIC8vIEluamVjdCBBcHBsaWNhdGlvblJlZiB0byBtYWtlIGl0IGVhZ2VyLi4uXG4gIGNvbnN0cnVjdG9yKGFwcFJlZjogQXBwbGljYXRpb25SZWYpIHt9XG59XG4iXX0=","import { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@Component({ selector: 'hello-world', template: 'Hello World!' })\nexport class AppComponent { }\n\n@NgModule({ declarations: [AppComponent], imports: [BrowserModule], bootstrap: [AppComponent] })\nexport class AppModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\nvar u = undefined;\nfunction plural(n) {\n    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nexport default [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9pMThuL2xvY2FsZV9lbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCx5Q0FBeUM7QUFDekMsK0NBQStDO0FBRS9DLElBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUVwQixTQUFTLE1BQU0sQ0FBQyxDQUFTO0lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsZUFBZTtJQUNiLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RDtRQUNFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDdEYsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7UUFDOUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7S0FDM0M7SUFDRCxDQUFDO0lBQ0Q7UUFDRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQzVELENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDcEY7WUFDRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVc7WUFDckYsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVO1NBQ2xDO0tBQ0Y7SUFDRCxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQztJQUN0RCxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5RixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzlELENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTTtDQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vLyBUSElTIENPREUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIE1PRElGWVxuLy8gU2VlIGFuZ3VsYXIvdG9vbHMvZ3VscC10YXNrcy9jbGRyL2V4dHJhY3QuanNcblxuY29uc3QgdSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gcGx1cmFsKG46IG51bWJlcik6IG51bWJlciB7XG4gIGxldCBpID0gTWF0aC5mbG9vcihNYXRoLmFicyhuKSksIHYgPSBuLnRvU3RyaW5nKCkucmVwbGFjZSgvXlteLl0qXFwuPy8sICcnKS5sZW5ndGg7XG4gIGlmIChpID09PSAxICYmIHYgPT09IDApIHJldHVybiAxO1xuICByZXR1cm4gNTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW1xuICAnZW4nLCBbWydhJywgJ3AnXSwgWydBTScsICdQTSddLCB1XSwgW1snQU0nLCAnUE0nXSwgdSwgdV0sXG4gIFtcbiAgICBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSwgWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgICBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J10sXG4gICAgWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddXG4gIF0sXG4gIHUsXG4gIFtcbiAgICBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gICAgWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgIFtcbiAgICAgICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsXG4gICAgICAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlcidcbiAgICBdXG4gIF0sXG4gIHUsIFtbJ0InLCAnQSddLCBbJ0JDJywgJ0FEJ10sIFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXSwgMCwgWzYsIDBdLFxuICBbJ00vZC95eScsICdNTU0gZCwgeScsICdNTU1NIGQsIHknLCAnRUVFRSwgTU1NTSBkLCB5J10sXG4gIFsnaDptbSBhJywgJ2g6bW06c3MgYScsICdoOm1tOnNzIGEgeicsICdoOm1tOnNzIGEgenp6eiddLCBbJ3sxfSwgezB9JywgdSwgJ3sxfSBcXCdhdFxcJyB7MH0nLCB1XSxcbiAgWycuJywgJywnLCAnOycsICclJywgJysnLCAnLScsICdFJywgJ8OXJywgJ+KAsCcsICfiiJ4nLCAnTmFOJywgJzonXSxcbiAgWycjLCMjMC4jIyMnLCAnIywjIzAlJywgJ8KkIywjIzAuMDAnLCAnI0UwJ10sICckJywgJ1VTIERvbGxhcicsIHt9LCBwbHVyYWxcbl07XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nexport var LOCALE_DATA = {};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * @publicApi\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nexport function registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[0 /* LocaleId */];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][19 /* ExtraData */] = extraData;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL2kxOG4vbG9jYWxlX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQThCLEVBQUUsQ0FBQztBQUV6RDs7Ozs7R0FLRztBQUNILHdGQUF3RjtBQUN4RixNQUFNLFVBQVUsa0JBQWtCLENBQUMsSUFBUyxFQUFFLFFBQXVCLEVBQUUsU0FBZTtJQUNwRixJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3JCLFFBQVEsR0FBRyxJQUFJLGtCQUEwQixDQUFDO0tBQzNDO0lBRUQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXJELFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFN0IsSUFBSSxTQUFTLEVBQUU7UUFDYixXQUFXLENBQUMsUUFBUSxDQUFDLG9CQUEyQixHQUFHLFNBQVMsQ0FBQztLQUM5RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgTE9DQUxFX0RBVEE6IHtbbG9jYWxlSWQ6IHN0cmluZ106IGFueX0gPSB7fTtcblxuLyoqXG4gKiBSZWdpc3RlciBnbG9iYWwgZGF0YSB0byBiZSB1c2VkIGludGVybmFsbHkgYnkgQW5ndWxhci4gU2VlIHRoZVxuICogW1wiSTE4biBndWlkZVwiXShndWlkZS9pMThuI2kxOG4tcGlwZXMpIHRvIGtub3cgaG93IHRvIGltcG9ydCBhZGRpdGlvbmFsIGxvY2FsZSBkYXRhLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuLy8gVGhlIHNpZ25hdHVyZSByZWdpc3RlckxvY2FsZURhdGEoZGF0YTogYW55LCBleHRyYURhdGE/OiBhbnkpIGlzIGRlcHJlY2F0ZWQgc2luY2UgdjUuMVxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlRGF0YShkYXRhOiBhbnksIGxvY2FsZUlkPzogc3RyaW5nIHwgYW55LCBleHRyYURhdGE/OiBhbnkpOiB2b2lkIHtcbiAgaWYgKHR5cGVvZiBsb2NhbGVJZCAhPT0gJ3N0cmluZycpIHtcbiAgICBleHRyYURhdGEgPSBsb2NhbGVJZDtcbiAgICBsb2NhbGVJZCA9IGRhdGFbTG9jYWxlRGF0YUluZGV4LkxvY2FsZUlkXTtcbiAgfVxuXG4gIGxvY2FsZUlkID0gbG9jYWxlSWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJyk7XG5cbiAgTE9DQUxFX0RBVEFbbG9jYWxlSWRdID0gZGF0YTtcblxuICBpZiAoZXh0cmFEYXRhKSB7XG4gICAgTE9DQUxFX0RBVEFbbG9jYWxlSWRdW0xvY2FsZURhdGFJbmRleC5FeHRyYURhdGFdID0gZXh0cmFEYXRhO1xuICB9XG59XG5cbi8qKlxuICogSW5kZXggb2YgZWFjaCB0eXBlIG9mIGxvY2FsZSBkYXRhIGZyb20gdGhlIGxvY2FsZSBkYXRhIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIExvY2FsZURhdGFJbmRleCB7XG4gIExvY2FsZUlkID0gMCxcbiAgRGF5UGVyaW9kc0Zvcm1hdCxcbiAgRGF5UGVyaW9kc1N0YW5kYWxvbmUsXG4gIERheXNGb3JtYXQsXG4gIERheXNTdGFuZGFsb25lLFxuICBNb250aHNGb3JtYXQsXG4gIE1vbnRoc1N0YW5kYWxvbmUsXG4gIEVyYXMsXG4gIEZpcnN0RGF5T2ZXZWVrLFxuICBXZWVrZW5kUmFuZ2UsXG4gIERhdGVGb3JtYXQsXG4gIFRpbWVGb3JtYXQsXG4gIERhdGVUaW1lRm9ybWF0LFxuICBOdW1iZXJTeW1ib2xzLFxuICBOdW1iZXJGb3JtYXRzLFxuICBDdXJyZW5jeVN5bWJvbCxcbiAgQ3VycmVuY3lOYW1lLFxuICBDdXJyZW5jaWVzLFxuICBQbHVyYWxDYXNlLFxuICBFeHRyYURhdGFcbn1cblxuLyoqXG4gKiBJbmRleCBvZiBlYWNoIHR5cGUgb2YgbG9jYWxlIGRhdGEgZnJvbSB0aGUgZXh0cmEgbG9jYWxlIGRhdGEgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gRXh0cmFMb2NhbGVEYXRhSW5kZXgge1xuICBFeHRyYURheVBlcmlvZEZvcm1hdHMgPSAwLFxuICBFeHRyYURheVBlcmlvZFN0YW5kYWxvbmUsXG4gIEV4dHJhRGF5UGVyaW9kc1J1bGVzXG59XG5cbi8qKlxuICogSW5kZXggb2YgZWFjaCB2YWx1ZSBpbiBjdXJyZW5jeSBkYXRhICh1c2VkIHRvIGRlc2NyaWJlIENVUlJFTkNJRVNfRU4gaW4gY3VycmVuY2llcy50cylcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ3VycmVuY3lJbmRleCB7U3ltYm9sID0gMCwgU3ltYm9sTmFycm93LCBOYk9mRGlnaXRzfVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport localeEn from './locale_en';\nimport { LOCALE_DATA } from './locale_data';\nimport { CURRENCIES_EN } from './currencies';\n/**\n * Format styles that can be used to represent numbers.\n * @see `getLocaleNumberFormat()`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var NumberFormatStyle;\n(function (NumberFormatStyle) {\n    NumberFormatStyle[NumberFormatStyle[\"Decimal\"] = 0] = \"Decimal\";\n    NumberFormatStyle[NumberFormatStyle[\"Percent\"] = 1] = \"Percent\";\n    NumberFormatStyle[NumberFormatStyle[\"Currency\"] = 2] = \"Currency\";\n    NumberFormatStyle[NumberFormatStyle[\"Scientific\"] = 3] = \"Scientific\";\n})(NumberFormatStyle || (NumberFormatStyle = {}));\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see `NgPlural`\n * @see `NgPluralCase`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi */\nexport var Plural;\n(function (Plural) {\n    Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n    Plural[Plural[\"One\"] = 1] = \"One\";\n    Plural[Plural[\"Two\"] = 2] = \"Two\";\n    Plural[Plural[\"Few\"] = 3] = \"Few\";\n    Plural[Plural[\"Many\"] = 4] = \"Many\";\n    Plural[Plural[\"Other\"] = 5] = \"Other\";\n})(Plural || (Plural = {}));\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var FormStyle;\n(function (FormStyle) {\n    FormStyle[FormStyle[\"Format\"] = 0] = \"Format\";\n    FormStyle[FormStyle[\"Standalone\"] = 1] = \"Standalone\";\n})(FormStyle || (FormStyle = {}));\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nexport var TranslationWidth;\n(function (TranslationWidth) {\n    /** 1 character for `en-US`. For example: 'S' */\n    TranslationWidth[TranslationWidth[\"Narrow\"] = 0] = \"Narrow\";\n    /** 3 characters for `en-US`. For example: 'Sun' */\n    TranslationWidth[TranslationWidth[\"Abbreviated\"] = 1] = \"Abbreviated\";\n    /** Full length for `en-US`. For example: \"Sunday\" */\n    TranslationWidth[TranslationWidth[\"Wide\"] = 2] = \"Wide\";\n    /** 2 characters for `en-US`, For example: \"Su\" */\n    TranslationWidth[TranslationWidth[\"Short\"] = 3] = \"Short\";\n})(TranslationWidth || (TranslationWidth = {}));\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see `getLocaleDateFormat()`\n * @see `getLocaleTimeFormat()``\n * @see `getLocaleDateTimeFormat()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @publicApi\n */\nexport var FormatWidth;\n(function (FormatWidth) {\n    /**\n     * For `en-US`, 'M/d/yy, h:mm a'`\n     * (Example: `6/15/15, 9:03 AM`)\n     */\n    FormatWidth[FormatWidth[\"Short\"] = 0] = \"Short\";\n    /**\n     * For `en-US`, `'MMM d, y, h:mm:ss a'`\n     * (Example: `Jun 15, 2015, 9:03:01 AM`)\n     */\n    FormatWidth[FormatWidth[\"Medium\"] = 1] = \"Medium\";\n    /**\n     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n     */\n    FormatWidth[FormatWidth[\"Long\"] = 2] = \"Long\";\n    /**\n     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n     */\n    FormatWidth[FormatWidth[\"Full\"] = 3] = \"Full\";\n})(FormatWidth || (FormatWidth = {}));\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see `getLocaleNumberSymbol()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var NumberSymbol;\n(function (NumberSymbol) {\n    /**\n     * Decimal separator.\n     * For `en-US`, the dot character.\n     * Example : 2,345`.`67\n     */\n    NumberSymbol[NumberSymbol[\"Decimal\"] = 0] = \"Decimal\";\n    /**\n     * Grouping separator, typically for thousands.\n     * For `en-US`, the comma character.\n     * Example: 2`,`345.67\n     */\n    NumberSymbol[NumberSymbol[\"Group\"] = 1] = \"Group\";\n    /**\n     * List-item separator.\n     * Example: \"one, two, and three\"\n     */\n    NumberSymbol[NumberSymbol[\"List\"] = 2] = \"List\";\n    /**\n     * Sign for percentage (out of 100).\n     * Example: 23.4%\n     */\n    NumberSymbol[NumberSymbol[\"PercentSign\"] = 3] = \"PercentSign\";\n    /**\n     * Sign for positive numbers.\n     * Example: +23\n     */\n    NumberSymbol[NumberSymbol[\"PlusSign\"] = 4] = \"PlusSign\";\n    /**\n     * Sign for negative numbers.\n     * Example: -23\n     */\n    NumberSymbol[NumberSymbol[\"MinusSign\"] = 5] = \"MinusSign\";\n    /**\n     * Computer notation for exponential value (n times a power of 10).\n     * Example: 1.2E3\n     */\n    NumberSymbol[NumberSymbol[\"Exponential\"] = 6] = \"Exponential\";\n    /**\n     * Human-readable format of exponential.\n     * Example: 1.2x103\n     */\n    NumberSymbol[NumberSymbol[\"SuperscriptingExponent\"] = 7] = \"SuperscriptingExponent\";\n    /**\n     * Sign for permille (out of 1000).\n     * Example: 23.4‰\n     */\n    NumberSymbol[NumberSymbol[\"PerMille\"] = 8] = \"PerMille\";\n    /**\n     * Infinity, can be used with plus and minus.\n     * Example: ∞, +∞, -∞\n     */\n    NumberSymbol[NumberSymbol[\"Infinity\"] = 9] = \"Infinity\";\n    /**\n     * Not a number.\n     * Example: NaN\n     */\n    NumberSymbol[NumberSymbol[\"NaN\"] = 10] = \"NaN\";\n    /**\n     * Symbol used between time units.\n     * Example: 10:52\n     */\n    NumberSymbol[NumberSymbol[\"TimeSeparator\"] = 11] = \"TimeSeparator\";\n    /**\n     * Decimal separator for currency values (fallback to `Decimal`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyDecimal\"] = 12] = \"CurrencyDecimal\";\n    /**\n     * Group separator for currency values (fallback to `Group`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyGroup\"] = 13] = \"CurrencyGroup\";\n})(NumberSymbol || (NumberSymbol = {}));\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nexport var WeekDay;\n(function (WeekDay) {\n    WeekDay[WeekDay[\"Sunday\"] = 0] = \"Sunday\";\n    WeekDay[WeekDay[\"Monday\"] = 1] = \"Monday\";\n    WeekDay[WeekDay[\"Tuesday\"] = 2] = \"Tuesday\";\n    WeekDay[WeekDay[\"Wednesday\"] = 3] = \"Wednesday\";\n    WeekDay[WeekDay[\"Thursday\"] = 4] = \"Thursday\";\n    WeekDay[WeekDay[\"Friday\"] = 5] = \"Friday\";\n    WeekDay[WeekDay[\"Saturday\"] = 6] = \"Saturday\";\n})(WeekDay || (WeekDay = {}));\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleId(locale) {\n    return findLocaleData(locale)[0 /* LocaleId */];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var amPmData = [data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]];\n    var amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var daysData = [data[3 /* DaysFormat */], data[4 /* DaysStandalone */]];\n    var days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var monthsData = [data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]];\n    var months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleEraNames(locale, width) {\n    var data = findLocaleData(locale);\n    var erasData = data[7 /* Eras */];\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale) {\n    var data = findLocaleData(locale);\n    return data[8 /* FirstDayOfWeek */];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale) {\n    var data = findLocaleData(locale);\n    return data[9 /* WeekendRange */];\n}\n/**\n * Retrieves a localized date-value formating string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formating string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[10 /* DateFormat */], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[11 /* TimeFormat */], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    var dateTimeFormatData = data[12 /* DateTimeFormat */];\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see `NumberSymbol`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale, symbol) {\n    var data = findLocaleData(locale);\n    var res = data[13 /* NumberSymbols */][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see `NumberFormatStyle`\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale, type) {\n    var data = findLocaleData(locale);\n    return data[14 /* NumberFormats */][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale) {\n    var data = findLocaleData(locale);\n    return data[15 /* CurrencySymbol */] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale) {\n    var data = findLocaleData(locale);\n    return data[16 /* CurrencyName */] || null;\n}\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nfunction getLocaleCurrencies(locale) {\n    var data = findLocaleData(locale);\n    return data[17 /* Currencies */];\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocalePluralCase(locale) {\n    var data = findLocaleData(locale);\n    return data[18 /* PluralCase */];\n}\nfunction checkFullData(data) {\n    if (!data[19 /* ExtraData */]) {\n        throw new Error(\"Missing extra locale data for the locale \\\"\" + data[0 /* LocaleId */] + \"\\\". Use \\\"registerLocaleData\\\" to load new data. See the \\\"I18n guide\\\" on angular.io to know more.\");\n    }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see `getLocaleExtraDayPeriods()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var rules = data[19 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map(function (rule) {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    });\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see `getLocaleExtraDayPeriodRules()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var dayPeriodsData = [\n        data[19 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\n        data[19 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\n    ];\n    var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLastDefinedValue(data, index) {\n    for (var i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time) {\n    var _a = tslib_1.__read(time.split(':'), 2), h = _a[0], m = _a[1];\n    return { hours: +h, minutes: +m };\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function findLocaleData(locale) {\n    var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    var match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    var parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.0\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code, format, locale) {\n    if (locale === void 0) { locale = 'en'; }\n    var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    var symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\nvar DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code) {\n    var digits;\n    var currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, InjectionToken, LOCALE_ID, Optional } from '@angular/core';\nimport { Plural, getLocalePluralCase } from './locale_data_api';\n/**\n * @deprecated from v5\n */\nexport var DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * @publicApi\n */\nvar NgLocalization = /** @class */ (function () {\n    function NgLocalization() {\n    }\n    return NgLocalization;\n}());\nexport { NgLocalization };\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(value, cases, ngLocalization, locale) {\n    var key = \"=\" + value;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(\"No plural message found for value \\\"\" + value + \"\\\"\");\n}\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\nvar NgLocaleLocalization = /** @class */ (function (_super) {\n    tslib_1.__extends(NgLocaleLocalization, _super);\n    function NgLocaleLocalization(locale, \n    /** @deprecated from v5 */\n    deprecatedPluralFn) {\n        var _this = _super.call(this) || this;\n        _this.locale = locale;\n        _this.deprecatedPluralFn = deprecatedPluralFn;\n        return _this;\n    }\n    NgLocaleLocalization.prototype.getPluralCategory = function (value, locale) {\n        var plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    };\n    NgLocaleLocalization = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(LOCALE_ID)),\n        tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(DEPRECATED_PLURAL_FN)),\n        tslib_1.__metadata(\"design:paramtypes\", [String, Object])\n    ], NgLocaleLocalization);\n    return NgLocaleLocalization;\n}(NgLocalization));\nexport { NgLocaleLocalization };\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @publicApi\n */\nexport function getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt(nLike, 10);\n    }\n    var n = nLike;\n    var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    var i = Math.floor(Math.abs(n));\n    var v = nDecimal.length;\n    var f = parseInt(nDecimal, 10);\n    var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    var lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @publicApi\n */\nexport var DOCUMENT = new InjectionToken('DocumentToken');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tX3Rva2Vucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbW1vbi9zcmMvZG9tX3Rva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQVcsZUFBZSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEEgREkgVG9rZW4gcmVwcmVzZW50aW5nIHRoZSBtYWluIHJlbmRlcmluZyBjb250ZXh0LiBJbiBhIGJyb3dzZXIgdGhpcyBpcyB0aGUgRE9NIERvY3VtZW50LlxuICpcbiAqIE5vdGU6IERvY3VtZW50IG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgaW4gdGhlIEFwcGxpY2F0aW9uIENvbnRleHQgd2hlbiBBcHBsaWNhdGlvbiBhbmQgUmVuZGVyaW5nXG4gKiBDb250ZXh0cyBhcmUgbm90IHRoZSBzYW1lIChlLmcuIHdoZW4gcnVubmluZyB0aGUgYXBwbGljYXRpb24gaW50byBhIFdlYiBXb3JrZXIpLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IERPQ1VNRU5UID0gbmV3IEluamVjdGlvblRva2VuPERvY3VtZW50PignRG9jdW1lbnRUb2tlbicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModule } from '@angular/core';\nimport { COMMON_DIRECTIVES } from './directives/index';\nimport { DEPRECATED_PLURAL_FN, NgLocaleLocalization, NgLocalization, getPluralCase } from './i18n/localization';\nimport { COMMON_DEPRECATED_I18N_PIPES } from './pipes/deprecated/index';\nimport { COMMON_PIPES } from './pipes/index';\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\nvar CommonModule = /** @class */ (function () {\n    function CommonModule() {\n    }\n    CommonModule = tslib_1.__decorate([\n        NgModule({\n            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n            exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n            providers: [\n                { provide: NgLocalization, useClass: NgLocaleLocalization },\n            ],\n        })\n    ], CommonModule);\n    return CommonModule;\n}());\nexport { CommonModule };\nvar ɵ0 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * @publicApi\n */\nvar DeprecatedI18NPipesModule = /** @class */ (function () {\n    function DeprecatedI18NPipesModule() {\n    }\n    DeprecatedI18NPipesModule = tslib_1.__decorate([\n        NgModule({\n            declarations: [COMMON_DEPRECATED_I18N_PIPES],\n            exports: [COMMON_DEPRECATED_I18N_PIPES],\n            providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }],\n        })\n    ], DeprecatedI18NPipesModule);\n    return DeprecatedI18NPipesModule;\n}());\nexport { DeprecatedI18NPipesModule };\nexport { ɵ0 };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX21vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbW1vbi9zcmMvY29tbW9uX21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzlHLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHM0Msc0RBQXNEO0FBQ3RELCtEQUErRDtBQUMvRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFRSDtJQUFBO0lBQ0EsQ0FBQztJQURZLFlBQVk7UUFQeEIsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDO1lBQy9DLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQztZQUMxQyxTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBQzthQUMxRDtTQUNGLENBQUM7T0FDVyxZQUFZLENBQ3hCO0lBQUQsbUJBQUM7Q0FBQSxBQURELElBQ0M7U0FEWSxZQUFZO1NBWStCLGFBQWE7QUFUckU7Ozs7O0dBS0c7QUFNSDtJQUFBO0lBQ0EsQ0FBQztJQURZLHlCQUF5QjtRQUxyQyxRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztZQUM1QyxPQUFPLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztZQUN2QyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLElBQWUsRUFBQyxDQUFDO1NBQ3RFLENBQUM7T0FDVyx5QkFBeUIsQ0FDckM7SUFBRCxnQ0FBQztDQUFBLEFBREQsSUFDQztTQURZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NPTU1PTl9ESVJFQ1RJVkVTfSBmcm9tICcuL2RpcmVjdGl2ZXMvaW5kZXgnO1xuaW1wb3J0IHtERVBSRUNBVEVEX1BMVVJBTF9GTiwgTmdMb2NhbGVMb2NhbGl6YXRpb24sIE5nTG9jYWxpemF0aW9uLCBnZXRQbHVyYWxDYXNlfSBmcm9tICcuL2kxOG4vbG9jYWxpemF0aW9uJztcbmltcG9ydCB7Q09NTU9OX0RFUFJFQ0FURURfSTE4Tl9QSVBFU30gZnJvbSAnLi9waXBlcy9kZXByZWNhdGVkL2luZGV4JztcbmltcG9ydCB7Q09NTU9OX1BJUEVTfSBmcm9tICcuL3BpcGVzL2luZGV4JztcblxuXG4vLyBOb3RlOiBUaGlzIGRvZXMgbm90IGNvbnRhaW4gdGhlIGxvY2F0aW9uIHByb3ZpZGVycyxcbi8vIGFzIHRoZXkgbmVlZCBzb21lIHBsYXRmb3JtIHNwZWNpZmljIGltcGxlbWVudGF0aW9ucyB0byB3b3JrLlxuLyoqXG4gKiBFeHBvcnRzIGFsbCB0aGUgYmFzaWMgQW5ndWxhciBkaXJlY3RpdmVzIGFuZCBwaXBlcyxcbiAqIHN1Y2ggYXMgYE5nSWZgLCBgTmdGb3JPZmAsIGBEZWNpbWFsUGlwZWAsIGFuZCBzbyBvbi5cbiAqIFJlLWV4cG9ydGVkIGJ5IGBCcm93c2VyTW9kdWxlYCwgd2hpY2ggaXMgaW5jbHVkZWQgYXV0b21hdGljYWxseSBpbiB0aGUgcm9vdFxuICogYEFwcE1vZHVsZWAgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IGFwcCB3aXRoIHRoZSBDTEkgYG5ld2AgY29tbWFuZC5cbiAqXG4gKiAqIFRoZSBgcHJvdmlkZXJzYCBvcHRpb25zIGNvbmZpZ3VyZSB0aGUgTmdNb2R1bGUncyBpbmplY3RvciB0byBwcm92aWRlXG4gKiBsb2NhbGl6YXRpb24gZGVwZW5kZW5jaWVzIHRvIG1lbWJlcnMuXG4gKiAqIFRoZSBgZXhwb3J0c2Agb3B0aW9ucyBtYWtlIHRoZSBkZWNsYXJlZCBkaXJlY3RpdmVzIGFuZCBwaXBlcyBhdmFpbGFibGUgZm9yIGltcG9ydFxuICogYnkgb3RoZXIgTmdNb2R1bGVzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQ09NTU9OX0RJUkVDVElWRVMsIENPTU1PTl9QSVBFU10sXG4gIGV4cG9ydHM6IFtDT01NT05fRElSRUNUSVZFUywgQ09NTU9OX1BJUEVTXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge3Byb3ZpZGU6IE5nTG9jYWxpemF0aW9uLCB1c2VDbGFzczogTmdMb2NhbGVMb2NhbGl6YXRpb259LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDb21tb25Nb2R1bGUge1xufVxuXG4vKipcbiAqIEEgbW9kdWxlIHRoYXQgY29udGFpbnMgdGhlIGRlcHJlY2F0ZWQgaTE4biBwaXBlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBmcm9tIHY1XG4gKiBAcHVibGljQXBpXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0NPTU1PTl9ERVBSRUNBVEVEX0kxOE5fUElQRVNdLFxuICBleHBvcnRzOiBbQ09NTU9OX0RFUFJFQ0FURURfSTE4Tl9QSVBFU10sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBERVBSRUNBVEVEX1BMVVJBTF9GTiwgdXNlVmFsdWU6IGdldFBsdXJhbENhc2V9XSxcbn0pXG5leHBvcnQgY2xhc3MgRGVwcmVjYXRlZEkxOE5QaXBlc01vZHVsZSB7XG59XG4iXX0=","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar InertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        var body = xhr.response.body;\n        body.removeChild(body.firstChild);\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            var body = new window\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body;\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n        // Prefer using <template> element if supported.\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (this.defaultDoc.documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            var attrib = elAttrs.item(i);\n            var attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        var childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(childNode);\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\nexport { InertBodyHelper };\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!window.DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/* A pattern that matches safe srcset values */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX3Nhbml0aXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUNILElBQU0sZ0JBQWdCLEdBQUcsNkRBQTZELENBQUM7QUFFdkYsK0NBQStDO0FBQy9DLElBQU0sbUJBQW1CLEdBQUcsOENBQThDLENBQUM7QUFFM0Usd0ZBQXdGO0FBQ3hGLElBQU0sZ0JBQWdCLEdBQ2xCLHNJQUFzSSxDQUFDO0FBRTNJLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVztJQUN0QyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUUzRSxJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBd0MsR0FBRyx1Q0FBb0MsQ0FBQyxDQUFDO0tBQy9GO0lBRUQsT0FBTyxTQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQWM7SUFDM0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7aXNEZXZNb2RlfSBmcm9tICcuLi91dGlsL2lzX2Rldl9tb2RlJztcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hlcyBhIHN1YnNldCBvZiBVUkxzIHRoYXQgd2lsbCBub3QgY2F1c2Ugc2NyaXB0XG4gKiBleGVjdXRpb24gaWYgdXNlZCBpbiBVUkwgY29udGV4dCB3aXRoaW4gYSBIVE1MIGRvY3VtZW50LiBTcGVjaWZpY2FsbHksIHRoaXNcbiAqIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGVzIGlmIChjb21tZW50IGZyb20gaGVyZSBvbiBhbmQgcmVnZXggY29waWVkIGZyb21cbiAqIFNveSdzIEVzY2FwaW5nQ29udmVudGlvbnMpOlxuICogKDEpIEVpdGhlciBhbiBhbGxvd2VkIHByb3RvY29sIChodHRwLCBodHRwcywgbWFpbHRvIG9yIGZ0cCkuXG4gKiAoMikgb3Igbm8gcHJvdG9jb2wuICBBIHByb3RvY29sIG11c3QgYmUgZm9sbG93ZWQgYnkgYSBjb2xvbi4gVGhlIGJlbG93XG4gKiAgICAgYWxsb3dzIHRoYXQgYnkgYWxsb3dpbmcgY29sb25zIG9ubHkgYWZ0ZXIgb25lIG9mIHRoZSBjaGFyYWN0ZXJzIFsvPyNdLlxuICogICAgIEEgY29sb24gYWZ0ZXIgYSBoYXNoICgjKSBtdXN0IGJlIGluIHRoZSBmcmFnbWVudC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSAoPykgbXVzdCBiZSBpbiBhIHF1ZXJ5LlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhIHNpbmdsZSBzb2xpZHVzICgvKSBtdXN0IGJlIGluIGEgcGF0aC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSBkb3VibGUgc29saWR1cyAoLy8pIG11c3QgYmUgaW4gdGhlIGF1dGhvcml0eVxuICogICAgIChiZWZvcmUgcG9ydCkuXG4gKlxuICogVGhlIHBhdHRlcm4gZGlzYWxsb3dzICYsIHVzZWQgaW4gSFRNTCBlbnRpdHkgZGVjbGFyYXRpb25zIGJlZm9yZVxuICogb25lIG9mIHRoZSBjaGFyYWN0ZXJzIGluIFsvPyNdLiBUaGlzIGRpc2FsbG93cyBIVE1MIGVudGl0aWVzIHVzZWQgaW4gdGhlXG4gKiBwcm90b2NvbCBuYW1lLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuLCBlLmcuIFwiaCYjMTE2O3RwXCIgZm9yIFwiaHR0cFwiLlxuICogSXQgYWxzbyBkaXNhbGxvd3MgSFRNTCBlbnRpdGllcyBpbiB0aGUgZmlyc3QgcGF0aCBwYXJ0IG9mIGEgcmVsYXRpdmUgcGF0aCxcbiAqIGUuZy4gXCJmb28mbHQ7YmFyL2JhelwiLiAgT3VyIGV4aXN0aW5nIGVzY2FwaW5nIGZ1bmN0aW9ucyBzaG91bGQgbm90IHByb2R1Y2VcbiAqIHRoYXQuIE1vcmUgaW1wb3J0YW50bHksIGl0IGRpc2FsbG93cyBtYXNraW5nIG9mIGEgY29sb24sXG4gKiBlLmcuIFwiamF2YXNjcmlwdCYjNTg7Li4uXCIuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gd2FzIHRha2VuIGZyb20gdGhlIENsb3N1cmUgc2FuaXRpemF0aW9uIGxpYnJhcnkuXG4gKi9cbmNvbnN0IFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuXG4vKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgc3Jjc2V0IHZhbHVlcyAqL1xuY29uc3QgU0FGRV9TUkNTRVRfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fGZpbGUpOnxbXiY6Lz8jXSooPzpbLz8jXXwkKSkvZ2k7XG5cbi8qKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy4gKi9cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPVxuICAgIC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9zYW5pdGl6ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHVybCA9IFN0cmluZyh1cmwpO1xuICBpZiAodXJsLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IHVybC5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSkgcmV0dXJuIHVybDtcblxuICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICBjb25zb2xlLndhcm4oYFdBUk5JTkc6IHNhbml0aXppbmcgdW5zYWZlIFVSTCB2YWx1ZSAke3VybH0gKHNlZSBodHRwOi8vZy5jby9uZy9zZWN1cml0eSN4c3MpYCk7XG4gIH1cblxuICByZXR1cm4gJ3Vuc2FmZTonICsgdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVTcmNzZXQoc3Jjc2V0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBzcmNzZXQgPSBTdHJpbmcoc3Jjc2V0KTtcbiAgcmV0dXJuIHNyY3NldC5zcGxpdCgnLCcpLm1hcCgoc3Jjc2V0KSA9PiBfc2FuaXRpemVVcmwoc3Jjc2V0LnRyaW0oKSkpLmpvaW4oJywgJyk7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { isDevMode } from '../util/is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\nfunction tagSet(tags) {\n    var e_1, _a;\n    var res = {};\n    try {\n        for (var _b = tslib_1.__values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var t = _c.value;\n            res[t] = true;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return res;\n}\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var e_2, _a;\n    var res = {};\n    try {\n        for (var sets_1 = tslib_1.__values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n            var s = sets_1_1.value;\n            for (var v in s) {\n                if (s.hasOwnProperty(v))\n                    res[v] = true;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nexport var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nexport var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nexport var SRCSET_ATTRS = tagSet('srcset');\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nexport var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nvar SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar SanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var current = el.firstChild;\n        var traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                var next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    SanitizingHtmlSerializer.prototype.startElement = function (element) {\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var elAttr = elAttrs.item(i);\n            var attrName = elAttr.name;\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            var value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    };\n    SanitizingHtmlSerializer.prototype.endElement = function (current) {\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var hi = match.charCodeAt(0);\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var mXSSAttempts = 5;\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        var sanitizer = new SanitizingHtmlSerializer();\n        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\nexport function getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nvar COLOR_FNS = '(?:rgb|hsl)a?';\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nvar CSS3_FNS = '(?:calc|attr)';\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n */\nfunction hasBalancedQuotes(value) {\n    var outsideSingle = true;\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeStyle as _sanitizeStyle, ɵ_sanitizeUrl as _sanitizeUrl } from '@angular/core';\nexport { SecurityContext };\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nvar DomSanitizer = /** @class */ (function () {\n    function DomSanitizer() {\n    }\n    return DomSanitizer;\n}());\nexport { DomSanitizer };\nvar DomSanitizerImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(DomSanitizerImpl, _super);\n    function DomSanitizerImpl(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return value;\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return _sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return _sanitizeStyle(value);\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return _sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +\n                \"(see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\n        return new SafeResourceUrlImpl(value);\n    };\n    DomSanitizerImpl = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], DomSanitizerImpl);\n    return DomSanitizerImpl;\n}(DomSanitizer));\nexport { DomSanitizerImpl };\nvar SafeValueImpl = /** @class */ (function () {\n    function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    SafeValueImpl.prototype.toString = function () {\n        return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\n            \" (see http://g.co/ng/security#xss)\";\n    };\n    return SafeValueImpl;\n}());\nvar SafeHtmlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeHtmlImpl, _super);\n    function SafeHtmlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\n    return SafeHtmlImpl;\n}(SafeValueImpl));\nvar SafeStyleImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeStyleImpl, _super);\n    function SafeStyleImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\n    return SafeStyleImpl;\n}(SafeValueImpl));\nvar SafeScriptImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeScriptImpl, _super);\n    function SafeScriptImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\n    return SafeScriptImpl;\n}(SafeValueImpl));\nvar SafeUrlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeUrlImpl, _super);\n    function SafeUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\n    return SafeUrlImpl;\n}(SafeValueImpl));\nvar SafeResourceUrlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeResourceUrlImpl, _super);\n    function SafeResourceUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\n    return SafeResourceUrlImpl;\n}(SafeValueImpl));\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _DOM = null;\nexport function getDOM() {\n    return _DOM;\n}\nexport function setDOM(adapter) {\n    _DOM = adapter;\n}\nexport function setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar DomAdapter = /** @class */ (function () {\n    function DomAdapter() {\n        this.resourceLoaderType = null;\n    }\n    Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\n        /**\n         * Maps attribute names to their corresponding property names for cases\n         * where attribute name doesn't match property name.\n         */\n        get: function () { return this._attrToPropMap; },\n        set: function (value) { this._attrToPropMap = value; },\n        enumerable: true,\n        configurable: true\n    });\n    return DomAdapter;\n}());\nexport { DomAdapter };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\nvar ɵ0 = function (v) {\n    return '__zone_symbol__' + v;\n};\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nvar __symbol__ = (typeof Zone !== 'undefined') && Zone['__symbol__'] || ɵ0;\nvar ADD_EVENT_LISTENER = __symbol__('addEventListener');\nvar REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\nvar symbolNames = {};\nvar FALSE = 'FALSE';\nvar ANGULAR = 'ANGULAR';\nvar NATIVE_ADD_LISTENER = 'addEventListener';\nvar NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\nvar stopSymbol = '__zone_symbol__propagationStopped';\nvar stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\nvar blackListedEvents = (typeof Zone !== 'undefined') && Zone[__symbol__('BLACK_LISTED_EVENTS')];\nvar blackListedMap;\nif (blackListedEvents) {\n    blackListedMap = {};\n    blackListedEvents.forEach(function (eventName) { blackListedMap[eventName] = eventName; });\n}\nvar isBlackListedEvent = function (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n};\nvar ɵ1 = isBlackListedEvent;\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nvar globalListener = function (event) {\n    var symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    var taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    var args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        var taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        var copiedTasks = taskDatas.slice();\n        for (var i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (event[stopSymbol] === true) {\n                break;\n            }\n            var taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n};\nvar ɵ2 = globalListener;\nvar DomEventsPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(DomEventsPlugin, _super);\n    function DomEventsPlugin(doc, ngZone, platformId) {\n        var _this = _super.call(this, doc) || this;\n        _this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            _this.patchEvent();\n        }\n        return _this;\n    }\n    DomEventsPlugin.prototype.patchEvent = function () {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (Event.prototype[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        var delegate = Event.prototype[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // should call native delegate in case\n            // in some environment part of the application\n            // will not use the patched Event\n            delegate && delegate.apply(this, arguments);\n        };\n    };\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    DomEventsPlugin.prototype.supports = function (eventName) { return true; };\n    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        /**\n         * This code is about to add a listener to the DOM. If Zone.js is present, than\n         * `addEventListener` has been patched. The patched code adds overhead in both\n         * memory and speed (3x slower) than native. For this reason if we detect that\n         * Zone.js is present we use a simple version of zone aware addEventListener instead.\n         * The result is faster registration and the zone will be restored.\n         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n         * will not be invoked\n         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n         *\n         * NOTE: it is possible that the element is from different iframe, and so we\n         * have to check before we execute the method.\n         */\n        var self = this;\n        var zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        var callback = handler;\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            var symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            var taskDatas = element[symbolName];\n            var globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = element[symbolName] = [];\n            }\n            var zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                var callbackRegistered = false;\n                for (var i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return function () { return _this.removeEventListener(element, eventName, callback); };\n    };\n    DomEventsPlugin.prototype.removeEventListener = function (target, eventName, callback) {\n        var underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        var symbolName = symbolNames[eventName];\n        var taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        var found = false;\n        for (var i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    };\n    DomEventsPlugin = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(PLATFORM_ID)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object, NgZone, Object])\n    ], DomEventsPlugin);\n    return DomEventsPlugin;\n}(EventManagerPlugin));\nexport { DomEventsPlugin };\nexport { ɵ0, ɵ1, ɵ2 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, InjectionToken, NgZone } from '@angular/core';\nimport { getDOM } from '../dom_adapter';\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nvar EventManager = /** @class */ (function () {\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    function EventManager(plugins, _zone) {\n        var _this = this;\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach(function (p) { return p.manager = _this; });\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addEventListener = function (element, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    };\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    };\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    EventManager.prototype.getZone = function () { return this._zone; };\n    /** @internal */\n    EventManager.prototype._findPluginFor = function (eventName) {\n        var plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        var plugins = this._plugins;\n        for (var i = 0; i < plugins.length; i++) {\n            var plugin_1 = plugins[i];\n            if (plugin_1.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin_1);\n                return plugin_1;\n            }\n        }\n        throw new Error(\"No event manager plugin found for event \" + eventName);\n    };\n    EventManager = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(EVENT_MANAGER_PLUGINS)),\n        tslib_1.__metadata(\"design:paramtypes\", [Array, NgZone])\n    ], EventManager);\n    return EventManager;\n}());\nexport { EventManager };\nvar EventManagerPlugin = /** @class */ (function () {\n    function EventManagerPlugin(_doc) {\n        this._doc = _doc;\n    }\n    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n        var target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\n        }\n        return this.addEventListener(target, eventName, handler);\n    };\n    return EventManagerPlugin;\n}());\nexport { EventManagerPlugin };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2RvbS9ldmVudHMvZXZlbnRfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEM7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUM5QixJQUFJLGNBQWMsQ0FBdUIscUJBQXFCLENBQUMsQ0FBQztBQUVwRTs7Ozs7R0FLRztBQUVIO0lBSUU7O09BRUc7SUFDSCxzQkFBMkMsT0FBNkIsRUFBVSxLQUFhO1FBQS9GLGlCQUdDO1FBSGlGLFVBQUssR0FBTCxLQUFLLENBQVE7UUFMdkYsdUJBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQThCLENBQUM7UUFNakUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSSxFQUFoQixDQUFnQixDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsdUNBQWdCLEdBQWhCLFVBQWlCLE9BQW9CLEVBQUUsU0FBaUIsRUFBRSxPQUFpQjtRQUN6RSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsNkNBQXNCLEdBQXRCLFVBQXVCLE1BQWMsRUFBRSxTQUFpQixFQUFFLE9BQWlCO1FBQ3pFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsT0FBTyxNQUFNLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCw4QkFBTyxHQUFQLGNBQW9CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFeEMsZ0JBQWdCO0lBQ2hCLHFDQUFjLEdBQWQsVUFBZSxTQUFpQjtRQUM5QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsSUFBTSxRQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksUUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBTSxDQUFDLENBQUM7Z0JBQy9DLE9BQU8sUUFBTSxDQUFDO2FBQ2Y7U0FDRjtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTJDLFNBQVcsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUE3RFUsWUFBWTtRQUR4QixVQUFVLEVBQUU7UUFRRSxtQkFBQSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQTt3REFBK0MsTUFBTTtPQVBwRixZQUFZLENBOER4QjtJQUFELG1CQUFDO0NBQUEsQUE5REQsSUE4REM7U0E5RFksWUFBWTtBQWdFekI7SUFDRSw0QkFBb0IsSUFBUztRQUFULFNBQUksR0FBSixJQUFJLENBQUs7SUFBRyxDQUFDO0lBU2pDLG1EQUFzQixHQUF0QixVQUF1QixPQUFlLEVBQUUsU0FBaUIsRUFBRSxPQUFpQjtRQUMxRSxJQUFNLE1BQU0sR0FBZ0IsTUFBTSxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBNEIsTUFBTSxtQkFBYyxTQUFXLENBQUMsQ0FBQztTQUM5RTtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQWpCRCxJQWlCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge2dldERPTX0gZnJvbSAnLi4vZG9tX2FkYXB0ZXInO1xuXG4vKipcbiAqIFRoZSBpbmplY3Rpb24gdG9rZW4gZm9yIHRoZSBldmVudC1tYW5hZ2VyIHBsdWctaW4gc2VydmljZS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBFVkVOVF9NQU5BR0VSX1BMVUdJTlMgPVxuICAgIG5ldyBJbmplY3Rpb25Ub2tlbjxFdmVudE1hbmFnZXJQbHVnaW5bXT4oJ0V2ZW50TWFuYWdlclBsdWdpbnMnKTtcblxuLyoqXG4gKiBBbiBpbmplY3RhYmxlIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBldmVudCBtYW5hZ2VtZW50IGZvciBBbmd1bGFyXG4gKiB0aHJvdWdoIGEgYnJvd3NlciBwbHVnLWluLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV2ZW50TWFuYWdlciB7XG4gIHByaXZhdGUgX3BsdWdpbnM6IEV2ZW50TWFuYWdlclBsdWdpbltdO1xuICBwcml2YXRlIF9ldmVudE5hbWVUb1BsdWdpbiA9IG5ldyBNYXA8c3RyaW5nLCBFdmVudE1hbmFnZXJQbHVnaW4+KCk7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoZSBldmVudC1tYW5hZ2VyIHNlcnZpY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KEVWRU5UX01BTkFHRVJfUExVR0lOUykgcGx1Z2luczogRXZlbnRNYW5hZ2VyUGx1Z2luW10sIHByaXZhdGUgX3pvbmU6IE5nWm9uZSkge1xuICAgIHBsdWdpbnMuZm9yRWFjaChwID0+IHAubWFuYWdlciA9IHRoaXMpO1xuICAgIHRoaXMuX3BsdWdpbnMgPSBwbHVnaW5zLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIGEgc3BlY2lmaWMgZWxlbWVudCBhbmQgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gcmVjZWl2ZSBldmVudCBub3RpZmljYXRpb25zLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gZm9yLlxuICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgbm90aWZpY2F0aW9uIG9jY3Vycy4gUmVjZWl2ZXMgdGhlXG4gICAqIGV2ZW50IG9iamVjdCBhcyBhbiBhcmd1bWVudC5cbiAgICogQHJldHVybnMgIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGhhbmRsZXIuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBldmVudE5hbWU6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgY29uc3QgcGx1Z2luID0gdGhpcy5fZmluZFBsdWdpbkZvcihldmVudE5hbWUpO1xuICAgIHJldHVybiBwbHVnaW4uYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGdsb2JhbCBoYW5kbGVyIGZvciBhbiBldmVudCBpbiBhIHRhcmdldCB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gdGFyZ2V0IEEgdGFyZ2V0IGZvciBnbG9iYWwgZXZlbnQgbm90aWZpY2F0aW9ucy4gT25lIG9mIFwid2luZG93XCIsIFwiZG9jdW1lbnRcIiwgb3IgXCJib2R5XCIuXG4gICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG4gICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBub3RpZmljYXRpb24gb2NjdXJzLiBSZWNlaXZlcyB0aGVcbiAgICogZXZlbnQgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LlxuICAgKiBAcmV0dXJucyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBoYW5kbGVyLlxuICAgKi9cbiAgYWRkR2xvYmFsRXZlbnRMaXN0ZW5lcih0YXJnZXQ6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogRnVuY3Rpb24ge1xuICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMuX2ZpbmRQbHVnaW5Gb3IoZXZlbnROYW1lKTtcbiAgICByZXR1cm4gcGx1Z2luLmFkZEdsb2JhbEV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgY29tcGlsYXRpb24gem9uZSBpbiB3aGljaCBldmVudCBsaXN0ZW5lcnMgYXJlIHJlZ2lzdGVyZWQuXG4gICAqL1xuICBnZXRab25lKCk6IE5nWm9uZSB7IHJldHVybiB0aGlzLl96b25lOyB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluZFBsdWdpbkZvcihldmVudE5hbWU6IHN0cmluZyk6IEV2ZW50TWFuYWdlclBsdWdpbiB7XG4gICAgY29uc3QgcGx1Z2luID0gdGhpcy5fZXZlbnROYW1lVG9QbHVnaW4uZ2V0KGV2ZW50TmFtZSk7XG4gICAgaWYgKHBsdWdpbikge1xuICAgICAgcmV0dXJuIHBsdWdpbjtcbiAgICB9XG5cbiAgICBjb25zdCBwbHVnaW5zID0gdGhpcy5fcGx1Z2lucztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgICBpZiAocGx1Z2luLnN1cHBvcnRzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgdGhpcy5fZXZlbnROYW1lVG9QbHVnaW4uc2V0KGV2ZW50TmFtZSwgcGx1Z2luKTtcbiAgICAgICAgcmV0dXJuIHBsdWdpbjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBldmVudCBtYW5hZ2VyIHBsdWdpbiBmb3VuZCBmb3IgZXZlbnQgJHtldmVudE5hbWV9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV2ZW50TWFuYWdlclBsdWdpbiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2RvYzogYW55KSB7fVxuXG4gIC8vIFRPRE8oaXNzdWUvMjQ1NzEpOiByZW1vdmUgJyEnLlxuICBtYW5hZ2VyICE6IEV2ZW50TWFuYWdlcjtcblxuICBhYnN0cmFjdCBzdXBwb3J0cyhldmVudE5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG5cbiAgYWJzdHJhY3QgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50OiBIVE1MRWxlbWVudCwgZXZlbnROYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKTogRnVuY3Rpb247XG5cbiAgYWRkR2xvYmFsRXZlbnRMaXN0ZW5lcihlbGVtZW50OiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IEZ1bmN0aW9uIHtcbiAgICBjb25zdCB0YXJnZXQ6IEhUTUxFbGVtZW50ID0gZ2V0RE9NKCkuZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGhpcy5fZG9jLCBlbGVtZW50KTtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBldmVudCB0YXJnZXQgJHt0YXJnZXR9IGZvciBldmVudCAke2V2ZW50TmFtZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, InjectionToken, Optional, ɵConsole as Console } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * Supported HammerJS recognizer event names.\n */\nvar EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport var HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nvar HammerGestureConfig = /** @class */ (function () {\n    function HammerGestureConfig() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n        * Maps gesture event names to a set of configuration options\n        * that specify overrides to the default values for specific properties.\n        *\n        * The key is a supported event name to be configured,\n        * and the options object contains a set of properties, with override values\n        * to be applied to the named recognizer event.\n        * For example, to disable recognition of the rotate event, specify\n        *  `{\"rotate\": {\"enable\": false}}`.\n        *\n        * Properties that are not present take the HammerJS default values.\n        * For information about which properties are supported for which events,\n        * and their allowed and default values, see\n        * [HammerJS documentation](http://hammerjs.github.io/).\n        *\n        */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    HammerGestureConfig.prototype.buildHammer = function (element) {\n        var mc = new Hammer(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (var eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    };\n    HammerGestureConfig = tslib_1.__decorate([\n        Injectable()\n    ], HammerGestureConfig);\n    return HammerGestureConfig;\n}());\nexport { HammerGestureConfig };\nvar HammerGesturesPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(HammerGesturesPlugin, _super);\n    function HammerGesturesPlugin(doc, _config, console, loader) {\n        var _this = _super.call(this, doc) || this;\n        _this._config = _config;\n        _this.console = console;\n        _this.loader = loader;\n        return _this;\n    }\n    HammerGesturesPlugin.prototype.supports = function (eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!window.Hammer && !this.loader) {\n            this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because Hammer.JS is not \" +\n                \"loaded and no custom loader has been specified.\");\n            return false;\n        }\n        return true;\n    };\n    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        var zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!window.Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            var cancelRegistration_1 = false;\n            var deregister_1 = function () { cancelRegistration_1 = true; };\n            this.loader()\n                .then(function () {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!window.Hammer) {\n                    _this.console.warn(\"The custom HAMMER_LOADER completed, but Hammer.JS is not present.\");\n                    deregister_1 = function () { };\n                    return;\n                }\n                if (!cancelRegistration_1) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister_1 = _this.addEventListener(element, eventName, handler);\n                }\n            })\n                .catch(function () {\n                _this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because the custom \" +\n                    \"Hammer.JS loader failed.\");\n                deregister_1 = function () { };\n            });\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return function () { deregister_1(); };\n        }\n        return zone.runOutsideAngular(function () {\n            // Creating the manager bind events, must be done outside of angular\n            var mc = _this._config.buildHammer(element);\n            var callback = function (eventObj) {\n                zone.runGuarded(function () { handler(eventObj); });\n            };\n            mc.on(eventName, callback);\n            return function () {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            };\n        });\n    };\n    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\n    HammerGesturesPlugin = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__param(1, Inject(HAMMER_GESTURE_CONFIG)),\n        tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(HAMMER_LOADER)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object, HammerGestureConfig, Console, Object])\n    ], HammerGesturesPlugin);\n    return HammerGesturesPlugin;\n}(EventManagerPlugin));\nexport { HammerGesturesPlugin };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var PLATFORM_BROWSER_ID = 'browser';\nexport var PLATFORM_SERVER_ID = 'server';\nexport var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1faWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL3BsYXRmb3JtX2lkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztBQUM3QyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFDM0MsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsa0JBQWtCLENBQUM7QUFDekQsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsaUJBQWlCLENBQUM7QUFFdkQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFVBQWtCO0lBQ2xELE9BQU8sVUFBVSxLQUFLLG1CQUFtQixDQUFDO0FBQzVDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsVUFBa0I7SUFDakQsT0FBTyxVQUFVLEtBQUssa0JBQWtCLENBQUM7QUFDM0MsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxVQUFrQjtJQUNwRCxPQUFPLFVBQVUsS0FBSyxzQkFBc0IsQ0FBQztBQUMvQyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFVBQWtCO0lBQ25ELE9BQU8sVUFBVSxLQUFLLHFCQUFxQixDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBjb25zdCBQTEFURk9STV9CUk9XU0VSX0lEID0gJ2Jyb3dzZXInO1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX1NFUlZFUl9JRCA9ICdzZXJ2ZXInO1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX1dPUktFUl9BUFBfSUQgPSAnYnJvd3NlcldvcmtlckFwcCc7XG5leHBvcnQgY29uc3QgUExBVEZPUk1fV09SS0VSX1VJX0lEID0gJ2Jyb3dzZXJXb3JrZXJVaSc7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIGJyb3dzZXIgcGxhdGZvcm0uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkOiBPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBsYXRmb3JtSWQgPT09IFBMQVRGT1JNX0JST1dTRVJfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHNlcnZlciBwbGF0Zm9ybS5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhdGZvcm1TZXJ2ZXIocGxhdGZvcm1JZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHJldHVybiBwbGF0Zm9ybUlkID09PSBQTEFURk9STV9TRVJWRVJfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHdlYiB3b3JrZXIgYXBwIHBsYXRmb3JtLlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQbGF0Zm9ybVdvcmtlckFwcChwbGF0Zm9ybUlkOiBPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBsYXRmb3JtSWQgPT09IFBMQVRGT1JNX1dPUktFUl9BUFBfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHdlYiB3b3JrZXIgVUkgcGxhdGZvcm0uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYXRmb3JtV29ya2VyVWkocGxhdGZvcm1JZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHJldHVybiBwbGF0Zm9ybUlkID09PSBQTEFURk9STV9XT1JLRVJfVUlfSUQ7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from '../dom_adapter';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * Defines supported modifiers for key events.\n */\nvar MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nvar ɵ0 = function (event) { return event.altKey; }, ɵ1 = function (event) { return event.ctrlKey; }, ɵ2 = function (event) { return event.metaKey; }, ɵ3 = function (event) { return event.shiftKey; };\n/**\n * Retrieves modifiers from key-event objects.\n */\nvar MODIFIER_KEY_GETTERS = {\n    'alt': ɵ0,\n    'control': ɵ1,\n    'meta': ɵ2,\n    'shift': ɵ3\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nvar KeyEventsPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyEventsPlugin, _super);\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    function KeyEventsPlugin(doc) {\n        return _super.call(this, doc) || this;\n    }\n    KeyEventsPlugin_1 = KeyEventsPlugin;\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin_1.parseEventName(eventName) != null; };\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var parsedEvent = KeyEventsPlugin_1.parseEventName(eventName);\n        var outsideHandler = KeyEventsPlugin_1.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(function () {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    };\n    KeyEventsPlugin.parseEventName = function (eventName) {\n        var parts = eventName.toLowerCase().split('.');\n        var domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        var key = KeyEventsPlugin_1._normalizeKey(parts.pop());\n        var fullKey = '';\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            var index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        var result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    };\n    KeyEventsPlugin.getEventFullKey = function (event) {\n        var fullKey = '';\n        var key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            if (modifierName != key) {\n                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        });\n        fullKey += key;\n        return fullKey;\n    };\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {\n        return function (event /** TODO #9100 */) {\n            if (KeyEventsPlugin_1.getEventFullKey(event) === fullKey) {\n                zone.runGuarded(function () { return handler(event); });\n            }\n        };\n    };\n    /** @internal */\n    KeyEventsPlugin._normalizeKey = function (keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    };\n    var KeyEventsPlugin_1;\n    KeyEventsPlugin = KeyEventsPlugin_1 = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], KeyEventsPlugin);\n    return KeyEventsPlugin;\n}(EventManagerPlugin));\nexport { KeyEventsPlugin };\nexport { ɵ0, ɵ1, ɵ2, ɵ3 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from './dom_adapter';\nvar SharedStylesHost = /** @class */ (function () {\n    function SharedStylesHost() {\n        /** @internal */\n        this._stylesSet = new Set();\n    }\n    SharedStylesHost.prototype.addStyles = function (styles) {\n        var _this = this;\n        var additions = new Set();\n        styles.forEach(function (style) {\n            if (!_this._stylesSet.has(style)) {\n                _this._stylesSet.add(style);\n                additions.add(style);\n            }\n        });\n        this.onStylesAdded(additions);\n    };\n    SharedStylesHost.prototype.onStylesAdded = function (additions) { };\n    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };\n    SharedStylesHost = tslib_1.__decorate([\n        Injectable()\n    ], SharedStylesHost);\n    return SharedStylesHost;\n}());\nexport { SharedStylesHost };\nvar DomSharedStylesHost = /** @class */ (function (_super) {\n    tslib_1.__extends(DomSharedStylesHost, _super);\n    function DomSharedStylesHost(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._hostNodes = new Set();\n        _this._styleNodes = new Set();\n        _this._hostNodes.add(_doc.head);\n        return _this;\n    }\n    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\n        var _this = this;\n        styles.forEach(function (style) {\n            var styleEl = _this._doc.createElement('style');\n            styleEl.textContent = style;\n            _this._styleNodes.add(host.appendChild(styleEl));\n        });\n    };\n    DomSharedStylesHost.prototype.addHost = function (hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    };\n    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\n    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\n        var _this = this;\n        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });\n    };\n    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };\n    DomSharedStylesHost = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], DomSharedStylesHost);\n    return DomSharedStylesHost;\n}(SharedStylesHost));\nexport { DomSharedStylesHost };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkX3N0eWxlc19ob3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcGxhdGZvcm0tYnJvd3Nlci9zcmMvZG9tL3NoYXJlZF9zdHlsZXNfaG9zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHckM7SUFEQTtRQUVFLGdCQUFnQjtRQUNOLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBZ0IzQyxDQUFDO0lBZEMsb0NBQVMsR0FBVCxVQUFVLE1BQWdCO1FBQTFCLGlCQVNDO1FBUkMsSUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUNwQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNsQixJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQy9CLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCx3Q0FBYSxHQUFiLFVBQWMsU0FBc0IsSUFBUyxDQUFDO0lBRTlDLHVDQUFZLEdBQVosY0FBMkIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFqQnJELGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7T0FDQSxnQkFBZ0IsQ0FrQjVCO0lBQUQsdUJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWxCWSxnQkFBZ0I7QUFxQjdCO0lBQXlDLCtDQUFnQjtJQUd2RCw2QkFBc0MsSUFBUztRQUEvQyxZQUNFLGlCQUFPLFNBRVI7UUFIcUMsVUFBSSxHQUFKLElBQUksQ0FBSztRQUZ2QyxnQkFBVSxHQUFHLElBQUksR0FBRyxFQUFRLENBQUM7UUFDN0IsaUJBQVcsR0FBRyxJQUFJLEdBQUcsRUFBUSxDQUFDO1FBR3BDLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7SUFDakMsQ0FBQztJQUVPLDhDQUFnQixHQUF4QixVQUF5QixNQUFtQixFQUFFLElBQVU7UUFBeEQsaUJBTUM7UUFMQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBYTtZQUMzQixJQUFNLE9BQU8sR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqRCxPQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUM1QixLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQscUNBQU8sR0FBUCxVQUFRLFFBQWM7UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELHdDQUFVLEdBQVYsVUFBVyxRQUFjLElBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRFLDJDQUFhLEdBQWIsVUFBYyxTQUFzQjtRQUFwQyxpQkFFQztRQURDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBMUMsQ0FBMEMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCx5Q0FBVyxHQUFYLGNBQXNCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBM0IvRSxtQkFBbUI7UUFEL0IsVUFBVSxFQUFFO1FBSUUsbUJBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBOztPQUhsQixtQkFBbUIsQ0E0Qi9CO0lBQUQsMEJBQUM7Q0FBQSxBQTVCRCxDQUF5QyxnQkFBZ0IsR0E0QnhEO1NBNUJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtnZXRET019IGZyb20gJy4vZG9tX2FkYXB0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2hhcmVkU3R5bGVzSG9zdCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9zdHlsZXNTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICBhZGRTdHlsZXMoc3R5bGVzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGNvbnN0IGFkZGl0aW9ucyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcbiAgICAgIGlmICghdGhpcy5fc3R5bGVzU2V0LmhhcyhzdHlsZSkpIHtcbiAgICAgICAgdGhpcy5fc3R5bGVzU2V0LmFkZChzdHlsZSk7XG4gICAgICAgIGFkZGl0aW9ucy5hZGQoc3R5bGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMub25TdHlsZXNBZGRlZChhZGRpdGlvbnMpO1xuICB9XG5cbiAgb25TdHlsZXNBZGRlZChhZGRpdGlvbnM6IFNldDxzdHJpbmc+KTogdm9pZCB7fVxuXG4gIGdldEFsbFN0eWxlcygpOiBzdHJpbmdbXSB7IHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3N0eWxlc1NldCk7IH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvbVNoYXJlZFN0eWxlc0hvc3QgZXh0ZW5kcyBTaGFyZWRTdHlsZXNIb3N0IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfaG9zdE5vZGVzID0gbmV3IFNldDxOb2RlPigpO1xuICBwcml2YXRlIF9zdHlsZU5vZGVzID0gbmV3IFNldDxOb2RlPigpO1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2M6IGFueSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faG9zdE5vZGVzLmFkZChfZG9jLmhlYWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWRkU3R5bGVzVG9Ib3N0KHN0eWxlczogU2V0PHN0cmluZz4sIGhvc3Q6IE5vZGUpOiB2b2lkIHtcbiAgICBzdHlsZXMuZm9yRWFjaCgoc3R5bGU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVFbCA9IHRoaXMuX2RvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGVFbC50ZXh0Q29udGVudCA9IHN0eWxlO1xuICAgICAgdGhpcy5fc3R5bGVOb2Rlcy5hZGQoaG9zdC5hcHBlbmRDaGlsZChzdHlsZUVsKSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRIb3N0KGhvc3ROb2RlOiBOb2RlKTogdm9pZCB7XG4gICAgdGhpcy5fYWRkU3R5bGVzVG9Ib3N0KHRoaXMuX3N0eWxlc1NldCwgaG9zdE5vZGUpO1xuICAgIHRoaXMuX2hvc3ROb2Rlcy5hZGQoaG9zdE5vZGUpO1xuICB9XG5cbiAgcmVtb3ZlSG9zdChob3N0Tm9kZTogTm9kZSk6IHZvaWQgeyB0aGlzLl9ob3N0Tm9kZXMuZGVsZXRlKGhvc3ROb2RlKTsgfVxuXG4gIG9uU3R5bGVzQWRkZWQoYWRkaXRpb25zOiBTZXQ8c3RyaW5nPik6IHZvaWQge1xuICAgIHRoaXMuX2hvc3ROb2Rlcy5mb3JFYWNoKGhvc3ROb2RlID0+IHRoaXMuX2FkZFN0eWxlc1RvSG9zdChhZGRpdGlvbnMsIGhvc3ROb2RlKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHsgdGhpcy5fc3R5bGVOb2Rlcy5mb3JFYWNoKHN0eWxlTm9kZSA9PiBnZXRET00oKS5yZW1vdmUoc3R5bGVOb2RlKSk7IH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable, RendererStyleFlags2, ViewEncapsulation } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { DomSharedStylesHost } from './shared_styles_host';\nexport var NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\nvar COMPONENT_REGEX = /%COMP%/g;\nexport var COMPONENT_VARIABLE = '%COMP%';\nexport var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nexport var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\nexport function shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function flattenStyles(compId, styles, target) {\n    for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\nfunction decoratePreventDefault(eventHandler) {\n    return function (event) {\n        var allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    };\n}\nvar DomRendererFactory2 = /** @class */ (function () {\n    function DomRendererFactory2(eventManager, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    DomRendererFactory2.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                var renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer =\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                renderer.applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    var styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    };\n    DomRendererFactory2.prototype.begin = function () { };\n    DomRendererFactory2.prototype.end = function () { };\n    DomRendererFactory2 = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [EventManager, DomSharedStylesHost])\n    ], DomRendererFactory2);\n    return DomRendererFactory2;\n}());\nexport { DomRendererFactory2 };\nvar DefaultDomRenderer2 = /** @class */ (function () {\n    function DefaultDomRenderer2(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    DefaultDomRenderer2.prototype.destroy = function () { };\n    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {\n        if (namespace) {\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n            // will result in undefined, so we just return the namespace here.\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    };\n    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };\n    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };\n    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\n    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n        var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    };\n    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\n    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\n    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + \":\" + name;\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        if (namespace) {\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n                // which is wrong.\n                el.removeAttribute(namespace + \":\" + name);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    };\n    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\n    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\n    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    };\n    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    };\n    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    };\n    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };\n    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n        }\n        return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n    };\n    return DefaultDomRenderer2;\n}());\nvar AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\n    }\n}\nvar EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {\n    tslib_1.__extends(EmulatedEncapsulationDomRenderer2, _super);\n    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.component = component;\n        var styles = flattenStyles(component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        _this.contentAttr = shimContentAttribute(component.id);\n        _this.hostAttr = shimHostAttribute(component.id);\n        return _this;\n    }\n    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\n    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {\n        var el = _super.prototype.createElement.call(this, parent, name);\n        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\n        return el;\n    };\n    return EmulatedEncapsulationDomRenderer2;\n}(DefaultDomRenderer2));\nvar ShadowDomRenderer = /** @class */ (function (_super) {\n    tslib_1.__extends(ShadowDomRenderer, _super);\n    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.sharedStylesHost = sharedStylesHost;\n        _this.hostEl = hostEl;\n        _this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        }\n        else {\n            _this.shadowRoot = hostEl.createShadowRoot();\n        }\n        _this.sharedStylesHost.addHost(_this.shadowRoot);\n        var styles = flattenStyles(component.id, component.styles, []);\n        for (var i = 0; i < styles.length; i++) {\n            var styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            _this.shadowRoot.appendChild(styleEl);\n        }\n        return _this;\n    }\n    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };\n    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };\n    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {\n        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);\n    };\n    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\n    };\n    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {\n        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);\n    };\n    ShadowDomRenderer.prototype.parentNode = function (node) {\n        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));\n    };\n    return ShadowDomRenderer;\n}(DefaultDomRenderer2));\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ɵparseCookieValue as parseCookieValue } from '@angular/common';\nimport { ɵglobal as global } from '@angular/core';\nimport { setRootDomAdapter } from '../dom/dom_adapter';\nimport { GenericBrowserDomAdapter } from './generic_browser_adapter';\nvar _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nvar _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nvar _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nvar nodeContains;\nif (global['Node']) {\n    nodeContains = global['Node'].prototype.contains || function (node) {\n        return !!(this.compareDocumentPosition(node) & 16);\n    };\n}\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nvar BrowserDomAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(BrowserDomAdapter, _super);\n    function BrowserDomAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\n    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\n    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };\n    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };\n    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };\n    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {\n        var _a;\n        (_a = el)[methodName].apply(_a, tslib_1.__spread(args));\n    };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.logError = function (error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    };\n    BrowserDomAdapter.prototype.log = function (error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroup = function (error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroupEnd = function () {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    };\n    Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\n        get: function () { return _attrToPropMap; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };\n    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };\n    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };\n    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };\n    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return function () { el.removeEventListener(evt, listener, false); };\n    };\n    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };\n    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.createEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.preventDefault = function (evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    };\n    BrowserDomAdapter.prototype.isPrevented = function (evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    };\n    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };\n    BrowserDomAdapter.prototype.getTemplateContent = function (el) {\n        return 'content' in el && this.isTemplateElement(el) ? el.content : null;\n    };\n    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };\n    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\n    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\n    BrowserDomAdapter.prototype.type = function (node) { return node.type; };\n    BrowserDomAdapter.prototype.content = function (node) {\n        if (this.hasProperty(node, 'content')) {\n            return node.content;\n        }\n        else {\n            return node;\n        }\n    };\n    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };\n    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };\n    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };\n    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };\n    BrowserDomAdapter.prototype.childNodesAsList = function (el) {\n        var childNodes = el.childNodes;\n        var res = new Array(childNodes.length);\n        for (var i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.clearNodes = function (el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    };\n    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };\n    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };\n    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };\n    BrowserDomAdapter.prototype.remove = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    };\n    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };\n    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {\n        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });\n    };\n    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };\n    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };\n    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };\n    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };\n    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };\n    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };\n    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };\n    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };\n    BrowserDomAdapter.prototype.createComment = function (text) { return this.getDefaultDocument().createComment(text); };\n    BrowserDomAdapter.prototype.createTemplate = function (html) {\n        var t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    };\n    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    };\n    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    };\n    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    };\n    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        var el = doc.createElement('SCRIPT');\n        el.setAttribute(attrName, attrValue);\n        return el;\n    };\n    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\n        doc = doc || this.getDefaultDocument();\n        var style = doc.createElement('style');\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    };\n    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };\n    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };\n    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };\n    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\n    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {\n        return element.getElementsByClassName(name);\n    };\n    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {\n        return element.getElementsByTagName(name);\n    };\n    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };\n    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };\n    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };\n    BrowserDomAdapter.prototype.hasClass = function (element, className) {\n        return element.classList.contains(className);\n    };\n    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    };\n    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    };\n    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };\n    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {\n        var value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    };\n    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };\n    BrowserDomAdapter.prototype.attributeMap = function (element) {\n        var res = new Map();\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {\n        return element.hasAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    };\n    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {\n        return element.getAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };\n    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    };\n    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };\n    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };\n    BrowserDomAdapter.prototype.createHtmlDocument = function () {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    };\n    BrowserDomAdapter.prototype.getDefaultDocument = function () { return document; };\n    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    };\n    BrowserDomAdapter.prototype.getTitle = function (doc) { return doc.title; };\n    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { doc.title = newTitle || ''; };\n    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    };\n    BrowserDomAdapter.prototype.isTemplateElement = function (el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    };\n    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\n    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\n    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\n    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    };\n    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };\n    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };\n    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\n    BrowserDomAdapter.prototype.getHref = function (el) { return el.getAttribute('href'); };\n    BrowserDomAdapter.prototype.getEventKey = function (event) {\n        var key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = _chromeNumKeyPadMap[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    };\n    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    };\n    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\n    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\n    BrowserDomAdapter.prototype.getBaseHref = function (doc) {\n        var href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    };\n    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\n    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\n    BrowserDomAdapter.prototype.setData = function (element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    };\n    BrowserDomAdapter.prototype.getData = function (element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    };\n    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.supportsWebAnimation = function () {\n        return typeof Element.prototype['animate'] === 'function';\n    };\n    BrowserDomAdapter.prototype.performanceNow = function () {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    };\n    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\n    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };\n    BrowserDomAdapter.prototype.setCookie = function (name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    };\n    return BrowserDomAdapter;\n}(GenericBrowserDomAdapter));\nexport { BrowserDomAdapter };\nvar baseElement = null;\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = document.querySelector('base');\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\nvar urlParsingNode;\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * @publicApi\n */\nvar PlatformLocation = /** @class */ (function () {\n    function PlatformLocation() {\n    }\n    return PlatformLocation;\n}());\nexport { PlatformLocation };\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1fbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL2xvY2F0aW9uL3BsYXRmb3JtX2xvY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNIO0lBQUE7SUFnQkEsQ0FBQztJQUFELHVCQUFDO0FBQUQsQ0FBQyxBQWhCRCxJQWdCQzs7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFlLHNCQUFzQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBhbiBhcHBsaWNhdGlvbiBkZXZlbG9wZXIuIEluc3RlYWQsIHVzZVxuICoge0BsaW5rIExvY2F0aW9ufS5cbiAqXG4gKiBgUGxhdGZvcm1Mb2NhdGlvbmAgZW5jYXBzdWxhdGVzIGFsbCBjYWxscyB0byBET00gYXBpcywgd2hpY2ggYWxsb3dzIHRoZSBSb3V0ZXIgdG8gYmUgcGxhdGZvcm1cbiAqIGFnbm9zdGljLlxuICogVGhpcyBtZWFucyB0aGF0IHdlIGNhbiBoYXZlIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBvZiBgUGxhdGZvcm1Mb2NhdGlvbmAgZm9yIHRoZSBkaWZmZXJlbnRcbiAqIHBsYXRmb3JtcyB0aGF0IGFuZ3VsYXIgc3VwcG9ydHMuIEZvciBleGFtcGxlLCBgQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlcmAgcHJvdmlkZXMgYW5cbiAqIGltcGxlbWVudGF0aW9uIHNwZWNpZmljIHRvIHRoZSBicm93c2VyIGVudmlyb25tZW50LCB3aGlsZSBgQGFuZ3VsYXIvcGxhdGZvcm0td2Vid29ya2VyYCBwcm92aWRlc1xuICogb25lIHN1aXRhYmxlIGZvciB1c2Ugd2l0aCB3ZWIgd29ya2Vycy5cbiAqXG4gKiBUaGUgYFBsYXRmb3JtTG9jYXRpb25gIGNsYXNzIGlzIHVzZWQgZGlyZWN0bHkgYnkgYWxsIGltcGxlbWVudGF0aW9ucyBvZiB7QGxpbmsgTG9jYXRpb25TdHJhdGVneX1cbiAqIHdoZW4gdGhleSBuZWVkIHRvIGludGVyYWN0IHdpdGggdGhlIERPTSBhcGlzIGxpa2UgcHVzaFN0YXRlLCBwb3BTdGF0ZSwgZXRjLi4uXG4gKlxuICoge0BsaW5rIExvY2F0aW9uU3RyYXRlZ3l9IGluIHR1cm4gaXMgdXNlZCBieSB0aGUge0BsaW5rIExvY2F0aW9ufSBzZXJ2aWNlIHdoaWNoIGlzIHVzZWQgZGlyZWN0bHlcbiAqIGJ5IHRoZSB7QGxpbmsgUm91dGVyfSBpbiBvcmRlciB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHJvdXRlcy4gU2luY2UgYWxsIGludGVyYWN0aW9ucyBiZXR3ZWVuIHtAbGlua1xuICogUm91dGVyfSAvXG4gKiB7QGxpbmsgTG9jYXRpb259IC8ge0BsaW5rIExvY2F0aW9uU3RyYXRlZ3l9IGFuZCBET00gYXBpcyBmbG93IHRocm91Z2ggdGhlIGBQbGF0Zm9ybUxvY2F0aW9uYFxuICogY2xhc3MgdGhleSBhcmUgYWxsIHBsYXRmb3JtIGluZGVwZW5kZW50LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBsYXRmb3JtTG9jYXRpb24ge1xuICBhYnN0cmFjdCBnZXRCYXNlSHJlZkZyb21ET00oKTogc3RyaW5nO1xuICBhYnN0cmFjdCBvblBvcFN0YXRlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZDtcbiAgYWJzdHJhY3Qgb25IYXNoQ2hhbmdlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZDtcblxuICBhYnN0cmFjdCBnZXQgcGF0aG5hbWUoKTogc3RyaW5nO1xuICBhYnN0cmFjdCBnZXQgc2VhcmNoKCk6IHN0cmluZztcbiAgYWJzdHJhY3QgZ2V0IGhhc2goKTogc3RyaW5nO1xuXG4gIGFic3RyYWN0IHJlcGxhY2VTdGF0ZShzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgcHVzaFN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZDtcblxuICBhYnN0cmFjdCBmb3J3YXJkKCk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgYmFjaygpOiB2b2lkO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogSW5kaWNhdGVzIHdoZW4gYSBsb2NhdGlvbiBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBMT0NBVElPTl9JTklUSUFMSVpFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQcm9taXNlPGFueT4+KCdMb2NhdGlvbiBJbml0aWFsaXplZCcpO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJpYWxpemFibGUgdmVyc2lvbiBvZiB0aGUgZXZlbnQgZnJvbSBgb25Qb3BTdGF0ZWAgb3IgYG9uSGFzaENoYW5nZWBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25DaGFuZ2VFdmVudCB7XG4gIHR5cGU6IHN0cmluZztcbiAgc3RhdGU6IGFueTtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25DaGFuZ2VMaXN0ZW5lciB7IChldmVudDogTG9jYXRpb25DaGFuZ2VFdmVudCk6IGFueTsgfVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, createPlatformFactory } from './application_ref';\nimport { PLATFORM_ID } from './application_tokens';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { TestabilityRegistry } from './testability/testability';\nvar _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1fY29yZV9wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9wbGF0Zm9ybV9jb3JlX3Byb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsV0FBVyxFQUFFLHFCQUFxQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDckUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFDLFFBQVEsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFOUQsSUFBTSx3QkFBd0IsR0FBcUI7SUFDakQsMEVBQTBFO0lBQzFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFDO0lBQzNDLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBQztJQUN4QyxFQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3hDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0NBQzdCLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtQbGF0Zm9ybVJlZiwgY3JlYXRlUGxhdGZvcm1GYWN0b3J5fSBmcm9tICcuL2FwcGxpY2F0aW9uX3JlZic7XG5pbXBvcnQge1BMQVRGT1JNX0lEfSBmcm9tICcuL2FwcGxpY2F0aW9uX3Rva2Vucyc7XG5pbXBvcnQge0NvbnNvbGV9IGZyb20gJy4vY29uc29sZSc7XG5pbXBvcnQge0luamVjdG9yLCBTdGF0aWNQcm92aWRlcn0gZnJvbSAnLi9kaSc7XG5pbXBvcnQge1Rlc3RhYmlsaXR5UmVnaXN0cnl9IGZyb20gJy4vdGVzdGFiaWxpdHkvdGVzdGFiaWxpdHknO1xuXG5jb25zdCBfQ09SRV9QTEFURk9STV9QUk9WSURFUlM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gIC8vIFNldCBhIGRlZmF1bHQgcGxhdGZvcm0gbmFtZSBmb3IgcGxhdGZvcm1zIHRoYXQgZG9uJ3Qgc2V0IGl0IGV4cGxpY2l0bHkuXG4gIHtwcm92aWRlOiBQTEFURk9STV9JRCwgdXNlVmFsdWU6ICd1bmtub3duJ30sXG4gIHtwcm92aWRlOiBQbGF0Zm9ybVJlZiwgZGVwczogW0luamVjdG9yXX0sXG4gIHtwcm92aWRlOiBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBkZXBzOiBbXX0sXG4gIHtwcm92aWRlOiBDb25zb2xlLCBkZXBzOiBbXX0sXG5dO1xuXG4vKipcbiAqIFRoaXMgcGxhdGZvcm0gaGFzIHRvIGJlIGluY2x1ZGVkIGluIGFueSBvdGhlciBwbGF0Zm9ybVxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IHBsYXRmb3JtQ29yZSA9IGNyZWF0ZVBsYXRmb3JtRmFjdG9yeShudWxsLCAnY29yZScsIF9DT1JFX1BMQVRGT1JNX1BST1ZJREVSUyk7XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nexport function parseCookieValue(cookieStr, name) {\n    var e_1, _a;\n    name = encodeURIComponent(name);\n    try {\n        for (var _b = tslib_1.__values(cookieStr.split(';')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var cookie = _c.value;\n            var eqIndex = cookie.indexOf('=');\n            var _d = tslib_1.__read(eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], 2), cookieName = _d[0], cookieValue = _d[1];\n            if (cookieName.trim() === name) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9jb29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxTQUFpQixFQUFFLElBQVk7O0lBQzlELElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFDaEMsS0FBcUIsSUFBQSxLQUFBLGlCQUFBLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBdEMsSUFBTSxNQUFNLFdBQUE7WUFDZixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLElBQUEsNEdBQ2tGLEVBRGpGLGtCQUFVLEVBQUUsbUJBQ3FFLENBQUM7WUFDekYsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUM5QixPQUFPLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7Ozs7Ozs7OztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29va2llVmFsdWUoY29va2llU3RyOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IHN0cmluZ3xudWxsIHtcbiAgbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcbiAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llU3RyLnNwbGl0KCc7JykpIHtcbiAgICBjb25zdCBlcUluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICBjb25zdCBbY29va2llTmFtZSwgY29va2llVmFsdWVdOiBzdHJpbmdbXSA9XG4gICAgICAgIGVxSW5kZXggPT0gLTEgPyBbY29va2llLCAnJ10gOiBbY29va2llLnNsaWNlKDAsIGVxSW5kZXgpLCBjb29raWUuc2xpY2UoZXFJbmRleCArIDEpXTtcbiAgICBpZiAoY29va2llTmFtZS50cmltKCkgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29va2llVmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DomAdapter } from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar GenericBrowserDomAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(GenericBrowserDomAdapter, _super);\n    function GenericBrowserDomAdapter() {\n        var _this = _super.call(this) || this;\n        _this._animationPrefix = null;\n        _this._transitionEnd = null;\n        try {\n            var element_1 = _this.createElement('div', document);\n            if (_this.getStyle(element_1, 'animationName') != null) {\n                _this._animationPrefix = '';\n            }\n            else {\n                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (var i = 0; i < domPrefixes.length; i++) {\n                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {\n                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            var transEndEventNames_1 = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames_1).forEach(function (key) {\n                if (_this.getStyle(element_1, key) != null) {\n                    _this._transitionEnd = transEndEventNames_1[key];\n                }\n            });\n        }\n        catch (_a) {\n            _this._animationPrefix = null;\n            _this._transitionEnd = null;\n        }\n        return _this;\n    }\n    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };\n    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    };\n    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\n    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\n        return typeof document.body.createShadowRoot === 'function';\n    };\n    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };\n    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };\n    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    };\n    return GenericBrowserDomAdapter;\n}(DomAdapter));\nexport { GenericBrowserDomAdapter };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpY19icm93c2VyX2FkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL2dlbmVyaWNfYnJvd3Nlcl9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJOUM7Ozs7O0dBS0c7QUFDSDtJQUF1RCxvREFBVTtJQUcvRDtRQUFBLFlBQ0UsaUJBQU8sU0FnQ1I7UUFuQ08sc0JBQWdCLEdBQWdCLElBQUksQ0FBQztRQUNyQyxvQkFBYyxHQUFnQixJQUFJLENBQUM7UUFHekMsSUFBSTtZQUNGLElBQU0sU0FBTyxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELElBQUksS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFPLEVBQUUsZUFBZSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUNuRCxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLElBQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRWpELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMzQyxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEVBQUU7d0JBQ3BFLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQzt3QkFDakUsTUFBTTtxQkFDUDtpQkFDRjthQUNGO1lBRUQsSUFBTSxvQkFBa0IsR0FBNEI7Z0JBQ2xELGdCQUFnQixFQUFFLHFCQUFxQjtnQkFDdkMsYUFBYSxFQUFFLGVBQWU7Z0JBQzlCLFdBQVcsRUFBRSwrQkFBK0I7Z0JBQzVDLFVBQVUsRUFBRSxlQUFlO2FBQzVCLENBQUM7WUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztnQkFDbEQsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUU7b0JBQ3ZDLEtBQUksQ0FBQyxjQUFjLEdBQUcsb0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQy9DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLFdBQU07WUFDTixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1lBQzdCLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQzVCOztJQUNILENBQUM7SUFFRCxzREFBbUIsR0FBbkIsVUFBb0IsRUFBZSxJQUFZLE9BQWEsRUFBRyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLG9EQUFpQixHQUFqQixVQUFrQixFQUFxQixFQUFFLE9BQWUsRUFBRSxJQUFZO1FBQ3BFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0RBQWlCLEdBQWpCLGNBQStCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3QywwREFBdUIsR0FBdkI7UUFDRSxPQUFPLE9BQVksUUFBUSxDQUFDLElBQUssQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLENBQUM7SUFDcEUsQ0FBQztJQUNELHFEQUFrQixHQUFsQixjQUErQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNGLG1EQUFnQixHQUFoQixjQUE2QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckYsb0RBQWlCLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDO0lBQ3RFLENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUFuREQsQ0FBdUQsVUFBVSxHQW1EaEUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RG9tQWRhcHRlcn0gZnJvbSAnLi4vZG9tL2RvbV9hZGFwdGVyJztcblxuXG5cbi8qKlxuICogUHJvdmlkZXMgRE9NIG9wZXJhdGlvbnMgaW4gYW55IGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gKlxuICogQHNlY3VyaXR5IFRyZWFkIGNhcmVmdWxseSEgSW50ZXJhY3Rpbmcgd2l0aCB0aGUgRE9NIGRpcmVjdGx5IGlzIGRhbmdlcm91cyBhbmRcbiAqIGNhbiBpbnRyb2R1Y2UgWFNTIHJpc2tzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyIGV4dGVuZHMgRG9tQWRhcHRlciB7XG4gIHByaXZhdGUgX2FuaW1hdGlvblByZWZpeDogc3RyaW5nfG51bGwgPSBudWxsO1xuICBwcml2YXRlIF90cmFuc2l0aW9uRW5kOiBzdHJpbmd8bnVsbCA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIGRvY3VtZW50KTtcbiAgICAgIGlmICh0aGlzLmdldFN0eWxlKGVsZW1lbnQsICdhbmltYXRpb25OYW1lJykgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb25QcmVmaXggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRvbVByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbVByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0U3R5bGUoZWxlbWVudCwgZG9tUHJlZml4ZXNbaV0gKyAnQW5pbWF0aW9uTmFtZScpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9ICctJyArIGRvbVByZWZpeGVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnLSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNFbmRFdmVudE5hbWVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICAgICAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcbiAgICAgIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKHRyYW5zRW5kRXZlbnROYW1lcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0U3R5bGUoZWxlbWVudCwga2V5KSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZCA9IHRyYW5zRW5kRXZlbnROYW1lc1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9IG51bGw7XG4gICAgICB0aGlzLl90cmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBnZXREaXN0cmlidXRlZE5vZGVzKGVsOiBIVE1MRWxlbWVudCk6IE5vZGVbXSB7IHJldHVybiAoPGFueT5lbCkuZ2V0RGlzdHJpYnV0ZWROb2RlcygpOyB9XG4gIHJlc29sdmVBbmRTZXRIcmVmKGVsOiBIVE1MQW5jaG9yRWxlbWVudCwgYmFzZVVybDogc3RyaW5nLCBocmVmOiBzdHJpbmcpIHtcbiAgICBlbC5ocmVmID0gaHJlZiA9PSBudWxsID8gYmFzZVVybCA6IGJhc2VVcmwgKyAnLy4uLycgKyBocmVmO1xuICB9XG4gIHN1cHBvcnRzRE9NRXZlbnRzKCk6IGJvb2xlYW4geyByZXR1cm4gdHJ1ZTsgfVxuICBzdXBwb3J0c05hdGl2ZVNoYWRvd0RPTSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mKDxhbnk+ZG9jdW1lbnQuYm9keSkuY3JlYXRlU2hhZG93Um9vdCA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICBnZXRBbmltYXRpb25QcmVmaXgoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX2FuaW1hdGlvblByZWZpeCA/IHRoaXMuX2FuaW1hdGlvblByZWZpeCA6ICcnOyB9XG4gIGdldFRyYW5zaXRpb25FbmQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25FbmQgPyB0aGlzLl90cmFuc2l0aW9uRW5kIDogJyc7IH1cbiAgc3VwcG9ydHNBbmltYXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvblByZWZpeCAhPSBudWxsICYmIHRoaXMuX3RyYW5zaXRpb25FbmQgIT0gbnVsbDtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function supportsState() {\n    return !!window.history.pushState;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2Jyb3dzZXIvbG9jYXRpb24vaGlzdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxNQUFNLFVBQVUsYUFBYTtJQUMzQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdGF0ZSgpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlO1xufSJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT, PlatformLocation } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from '../../dom/dom_adapter';\nimport { supportsState } from './history';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nvar BrowserPlatformLocation = /** @class */ (function (_super) {\n    tslib_1.__extends(BrowserPlatformLocation, _super);\n    function BrowserPlatformLocation(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._init();\n        return _this;\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /** @internal */\n    BrowserPlatformLocation.prototype._init = function () {\n        this.location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    };\n    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };\n    BrowserPlatformLocation.prototype.onPopState = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    };\n    BrowserPlatformLocation.prototype.onHashChange = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    };\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\n        get: function () { return this.location.pathname; },\n        set: function (newPath) { this.location.pathname = newPath; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\n        get: function () { return this.location.search; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\n        get: function () { return this.location.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\n    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\n    BrowserPlatformLocation = tslib_1.__decorate([\n        Injectable(),\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], BrowserPlatformLocation);\n    return BrowserPlatformLocation;\n}(PlatformLocation));\nexport { BrowserPlatformLocation };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlcl9wbGF0Zm9ybV9sb2NhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2Jyb3dzZXIvbG9jYXRpb24vYnJvd3Nlcl9wbGF0Zm9ybV9sb2NhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFFBQVEsRUFBMEIsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRixPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFN0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUl4Qzs7OztHQUlHO0FBRUg7SUFBNkMsbURBQWdCO0lBTTNELGlDQUFzQyxJQUFTO1FBQS9DLFlBQ0UsaUJBQU8sU0FFUjtRQUhxQyxVQUFJLEdBQUosSUFBSSxDQUFLO1FBRTdDLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7SUFDZixDQUFDO0lBRUQsMEZBQTBGO0lBQzFGLGdCQUFnQjtJQUNoQix1Q0FBSyxHQUFMO1FBQ0csSUFBNEIsQ0FBQyxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsb0RBQWtCLEdBQWxCLGNBQStCLE9BQU8sTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUM7SUFFMUUsNENBQVUsR0FBVixVQUFXLEVBQTBCO1FBQ25DLE1BQU0sRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsOENBQVksR0FBWixVQUFhLEVBQTBCO1FBQ3JDLE1BQU0sRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQsc0JBQUksNkNBQVE7YUFBWixjQUF5QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUd6RCxVQUFhLE9BQWUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7T0FIVjtJQUN6RCxzQkFBSSwyQ0FBTTthQUFWLGNBQXVCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUNyRCxzQkFBSSx5Q0FBSTthQUFSLGNBQXFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUdqRCwyQ0FBUyxHQUFULFVBQVUsS0FBVSxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzlDLElBQUksYUFBYSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELDhDQUFZLEdBQVosVUFBYSxLQUFVLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDakQsSUFBSSxhQUFhLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQseUNBQU8sR0FBUCxjQUFrQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU1QyxzQ0FBSSxHQUFKLGNBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFuRDNCLHVCQUF1QjtRQURuQyxVQUFVLEVBQUU7UUFPRSxtQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7O09BTmxCLHVCQUF1QixDQW9EbkM7SUFBRCw4QkFBQztDQUFBLEFBcERELENBQTZDLGdCQUFnQixHQW9ENUQ7U0FwRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RPQ1VNRU5ULCBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyLCBQbGF0Zm9ybUxvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge2dldERPTX0gZnJvbSAnLi4vLi4vZG9tL2RvbV9hZGFwdGVyJztcblxuaW1wb3J0IHtzdXBwb3J0c1N0YXRlfSBmcm9tICcuL2hpc3RvcnknO1xuXG5cblxuLyoqXG4gKiBgUGxhdGZvcm1Mb2NhdGlvbmAgZW5jYXBzdWxhdGVzIGFsbCBvZiB0aGUgZGlyZWN0IGNhbGxzIHRvIHBsYXRmb3JtIEFQSXMuXG4gKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBhbiBhcHBsaWNhdGlvbiBkZXZlbG9wZXIuIEluc3RlYWQsIHVzZVxuICoge0BsaW5rIExvY2F0aW9ufS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uIGV4dGVuZHMgUGxhdGZvcm1Mb2NhdGlvbiB7XG4gIC8vIFRPRE8oaXNzdWUvMjQ1NzEpOiByZW1vdmUgJyEnLlxuICBwdWJsaWMgcmVhZG9ubHkgbG9jYXRpb24gITogTG9jYXRpb247XG4gIC8vIFRPRE8oaXNzdWUvMjQ1NzEpOiByZW1vdmUgJyEnLlxuICBwcml2YXRlIF9oaXN0b3J5ICE6IEhpc3Rvcnk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgbW92ZWQgdG8gaXRzIG93biBtZXRob2Qgc28gdGhhdCBgTW9ja1BsYXRmb3JtTG9jYXRpb25TdHJhdGVneWAgY2FuIG92ZXJ3cml0ZSBpdFxuICAvKiogQGludGVybmFsICovXG4gIF9pbml0KCkge1xuICAgICh0aGlzIGFze2xvY2F0aW9uOiBMb2NhdGlvbn0pLmxvY2F0aW9uID0gZ2V0RE9NKCkuZ2V0TG9jYXRpb24oKTtcbiAgICB0aGlzLl9oaXN0b3J5ID0gZ2V0RE9NKCkuZ2V0SGlzdG9yeSgpO1xuICB9XG5cbiAgZ2V0QmFzZUhyZWZGcm9tRE9NKCk6IHN0cmluZyB7IHJldHVybiBnZXRET00oKS5nZXRCYXNlSHJlZih0aGlzLl9kb2MpICE7IH1cblxuICBvblBvcFN0YXRlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZCB7XG4gICAgZ2V0RE9NKCkuZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGhpcy5fZG9jLCAnd2luZG93JykuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmbiwgZmFsc2UpO1xuICB9XG5cbiAgb25IYXNoQ2hhbmdlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZCB7XG4gICAgZ2V0RE9NKCkuZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGhpcy5fZG9jLCAnd2luZG93JykuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZuLCBmYWxzZSk7XG4gIH1cblxuICBnZXQgcGF0aG5hbWUoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMubG9jYXRpb24ucGF0aG5hbWU7IH1cbiAgZ2V0IHNlYXJjaCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5sb2NhdGlvbi5zZWFyY2g7IH1cbiAgZ2V0IGhhc2goKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMubG9jYXRpb24uaGFzaDsgfVxuICBzZXQgcGF0aG5hbWUobmV3UGF0aDogc3RyaW5nKSB7IHRoaXMubG9jYXRpb24ucGF0aG5hbWUgPSBuZXdQYXRoOyB9XG5cbiAgcHVzaFN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHN1cHBvcnRzU3RhdGUoKSkge1xuICAgICAgdGhpcy5faGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvY2F0aW9uLmhhc2ggPSB1cmw7XG4gICAgfVxuICB9XG5cbiAgcmVwbGFjZVN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHN1cHBvcnRzU3RhdGUoKSkge1xuICAgICAgdGhpcy5faGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvY2F0aW9uLmhhc2ggPSB1cmw7XG4gICAgfVxuICB9XG5cbiAgZm9yd2FyZCgpOiB2b2lkIHsgdGhpcy5faGlzdG9yeS5mb3J3YXJkKCk7IH1cblxuICBiYWNrKCk6IHZvaWQgeyB0aGlzLl9oaXN0b3J5LmJhY2soKTsgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { APP_INITIALIZER, ApplicationInitStatus, InjectionToken, Injector } from '@angular/core';\nimport { getDOM } from '../dom/dom_adapter';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport var TRANSITION_ID = new InjectionToken('TRANSITION_ID');\nexport function appInitializerFactory(transitionId, document, injector) {\n    return function () {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then(function () {\n            var dom = getDOM();\n            var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));\n            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })\n                .forEach(function (el) { return dom.remove(el); });\n        });\n    };\n}\nexport var SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\n        multi: true\n    },\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyYW5zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL3NlcnZlci10cmFuc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFVLGNBQWMsRUFBRSxRQUFRLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXZILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUUxQzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFakUsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFlBQW9CLEVBQUUsUUFBYSxFQUFFLFFBQWtCO0lBQzNGLE9BQU87UUFDTCwwRkFBMEY7UUFDMUYsY0FBYztRQUNkLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ25ELElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO1lBQ3JCLElBQU0sTUFBTSxHQUNSLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLEtBQUssWUFBWSxFQUF0RCxDQUFzRCxDQUFDO2lCQUN0RSxPQUFPLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFkLENBQWMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUFxQjtJQUMzRDtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxxQkFBcUI7UUFDakMsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDekMsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0FQUF9JTklUSUFMSVpFUiwgQXBwbGljYXRpb25Jbml0U3RhdHVzLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBJbmplY3RvciwgU3RhdGljUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge2dldERPTX0gZnJvbSAnLi4vZG9tL2RvbV9hZGFwdGVyJztcblxuLyoqXG4gKiBBbiBpZCB0aGF0IGlkZW50aWZpZXMgYSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGJlaW5nIGJvb3RzdHJhcHBlZCwgdGhhdCBzaG91bGRcbiAqIG1hdGNoIGFjcm9zcyB0aGUgY2xpZW50L3NlcnZlciBib3VuZGFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RSQU5TSVRJT05fSUQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXRpYWxpemVyRmFjdG9yeSh0cmFuc2l0aW9uSWQ6IHN0cmluZywgZG9jdW1lbnQ6IGFueSwgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgLy8gV2FpdCBmb3IgYWxsIGFwcGxpY2F0aW9uIGluaXRpYWxpemVycyB0byBiZSBjb21wbGV0ZWQgYmVmb3JlIHJlbW92aW5nIHRoZSBzdHlsZXMgc2V0IGJ5XG4gICAgLy8gdGhlIHNlcnZlci5cbiAgICBpbmplY3Rvci5nZXQoQXBwbGljYXRpb25Jbml0U3RhdHVzKS5kb25lUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IGRvbSA9IGdldERPTSgpO1xuICAgICAgY29uc3Qgc3R5bGVzOiBhbnlbXSA9XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGRvbS5xdWVyeVNlbGVjdG9yQWxsKGRvY3VtZW50LCBgc3R5bGVbbmctdHJhbnNpdGlvbl1gKSk7XG4gICAgICBzdHlsZXMuZmlsdGVyKGVsID0+IGRvbS5nZXRBdHRyaWJ1dGUoZWwsICduZy10cmFuc2l0aW9uJykgPT09IHRyYW5zaXRpb25JZClcbiAgICAgICAgICAuZm9yRWFjaChlbCA9PiBkb20ucmVtb3ZlKGVsKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBTRVJWRVJfVFJBTlNJVElPTl9QUk9WSURFUlM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogYXBwSW5pdGlhbGl6ZXJGYWN0b3J5LFxuICAgIGRlcHM6IFtUUkFOU0lUSU9OX0lELCBET0NVTUVOVCwgSW5qZWN0b3JdLFxuICAgIG11bHRpOiB0cnVlXG4gIH0sXG5dO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { setTestabilityGetter, ɵglobal as global } from '@angular/core';\nimport { getDOM } from '../dom/dom_adapter';\nvar BrowserGetTestability = /** @class */ (function () {\n    function BrowserGetTestability() {\n    }\n    BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };\n    BrowserGetTestability.prototype.addToWindow = function (registry) {\n        global['getAngularTestability'] = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            var testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        global['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };\n        global['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };\n        var whenAllStable = function (callback /** TODO #9100 */) {\n            var testabilities = global['getAllAngularTestabilities']();\n            var count = testabilities.length;\n            var didWork = false;\n            var decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!global['frameworkStabilizers']) {\n            global['frameworkStabilizers'] = [];\n        }\n        global['frameworkStabilizers'].push(whenAllStable);\n    };\n    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        var t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    };\n    return BrowserGetTestability;\n}());\nexport { BrowserGetTestability };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGFiaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL3Rlc3RhYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBbUQsb0JBQW9CLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV4SCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUM7SUFBQTtJQXNEQSxDQUFDO0lBckRRLDBCQUFJLEdBQVgsY0FBZ0Isb0JBQW9CLENBQUMsSUFBSSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBFLDJDQUFXLEdBQVgsVUFBWSxRQUE2QjtRQUN2QyxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxVQUFDLElBQVMsRUFBRSxlQUErQjtZQUEvQixnQ0FBQSxFQUFBLHNCQUErQjtZQUMzRSxJQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQzFFLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtnQkFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsY0FBTSxPQUFBLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxFQUE5QixDQUE4QixDQUFDO1FBRTVFLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLGNBQU0sT0FBQSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsRUFBN0IsQ0FBNkIsQ0FBQztRQUUxRSxJQUFNLGFBQWEsR0FBRyxVQUFDLFFBQWEsQ0FBQyxpQkFBaUI7WUFDcEQsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQztZQUM3RCxJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO1lBQ2pDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFNLFNBQVMsR0FBRyxVQUFTLFFBQWEsQ0FBQyxpQkFBaUI7Z0JBQ3hELE9BQU8sR0FBRyxPQUFPLElBQUksUUFBUSxDQUFDO2dCQUM5QixLQUFLLEVBQUUsQ0FBQztnQkFDUixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7b0JBQ2QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQztZQUNGLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBUyxXQUFnQixDQUFDLGlCQUFpQjtnQkFDL0QsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsRUFBRTtZQUNuQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDckM7UUFDRCxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELHFEQUFxQixHQUFyQixVQUFzQixRQUE2QixFQUFFLElBQVMsRUFBRSxlQUF3QjtRQUV0RixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2IsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDM0U7UUFDRCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUF0REQsSUFzREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7R2V0VGVzdGFiaWxpdHksIFRlc3RhYmlsaXR5LCBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBzZXRUZXN0YWJpbGl0eUdldHRlciwgybVnbG9iYWwgYXMgZ2xvYmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtnZXRET019IGZyb20gJy4uL2RvbS9kb21fYWRhcHRlcic7XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyR2V0VGVzdGFiaWxpdHkgaW1wbGVtZW50cyBHZXRUZXN0YWJpbGl0eSB7XG4gIHN0YXRpYyBpbml0KCkgeyBzZXRUZXN0YWJpbGl0eUdldHRlcihuZXcgQnJvd3NlckdldFRlc3RhYmlsaXR5KCkpOyB9XG5cbiAgYWRkVG9XaW5kb3cocmVnaXN0cnk6IFRlc3RhYmlsaXR5UmVnaXN0cnkpOiB2b2lkIHtcbiAgICBnbG9iYWxbJ2dldEFuZ3VsYXJUZXN0YWJpbGl0eSddID0gKGVsZW06IGFueSwgZmluZEluQW5jZXN0b3JzOiBib29sZWFuID0gdHJ1ZSkgPT4ge1xuICAgICAgY29uc3QgdGVzdGFiaWxpdHkgPSByZWdpc3RyeS5maW5kVGVzdGFiaWxpdHlJblRyZWUoZWxlbSwgZmluZEluQW5jZXN0b3JzKTtcbiAgICAgIGlmICh0ZXN0YWJpbGl0eSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGVzdGFiaWxpdHkgZm9yIGVsZW1lbnQuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVzdGFiaWxpdHk7XG4gICAgfTtcblxuICAgIGdsb2JhbFsnZ2V0QWxsQW5ndWxhclRlc3RhYmlsaXRpZXMnXSA9ICgpID0+IHJlZ2lzdHJ5LmdldEFsbFRlc3RhYmlsaXRpZXMoKTtcblxuICAgIGdsb2JhbFsnZ2V0QWxsQW5ndWxhclJvb3RFbGVtZW50cyddID0gKCkgPT4gcmVnaXN0cnkuZ2V0QWxsUm9vdEVsZW1lbnRzKCk7XG5cbiAgICBjb25zdCB3aGVuQWxsU3RhYmxlID0gKGNhbGxiYWNrOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi8pID0+IHtcbiAgICAgIGNvbnN0IHRlc3RhYmlsaXRpZXMgPSBnbG9iYWxbJ2dldEFsbEFuZ3VsYXJUZXN0YWJpbGl0aWVzJ10oKTtcbiAgICAgIGxldCBjb3VudCA9IHRlc3RhYmlsaXRpZXMubGVuZ3RoO1xuICAgICAgbGV0IGRpZFdvcmsgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRlY3JlbWVudCA9IGZ1bmN0aW9uKGRpZFdvcmtfOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi8pIHtcbiAgICAgICAgZGlkV29yayA9IGRpZFdvcmsgfHwgZGlkV29ya187XG4gICAgICAgIGNvdW50LS07XG4gICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgY2FsbGJhY2soZGlkV29yayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0ZXN0YWJpbGl0aWVzLmZvckVhY2goZnVuY3Rpb24odGVzdGFiaWxpdHk6IGFueSAvKiogVE9ETyAjOTEwMCAqLykge1xuICAgICAgICB0ZXN0YWJpbGl0eS53aGVuU3RhYmxlKGRlY3JlbWVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFnbG9iYWxbJ2ZyYW1ld29ya1N0YWJpbGl6ZXJzJ10pIHtcbiAgICAgIGdsb2JhbFsnZnJhbWV3b3JrU3RhYmlsaXplcnMnXSA9IFtdO1xuICAgIH1cbiAgICBnbG9iYWxbJ2ZyYW1ld29ya1N0YWJpbGl6ZXJzJ10ucHVzaCh3aGVuQWxsU3RhYmxlKTtcbiAgfVxuXG4gIGZpbmRUZXN0YWJpbGl0eUluVHJlZShyZWdpc3RyeTogVGVzdGFiaWxpdHlSZWdpc3RyeSwgZWxlbTogYW55LCBmaW5kSW5BbmNlc3RvcnM6IGJvb2xlYW4pOlxuICAgICAgVGVzdGFiaWxpdHl8bnVsbCB7XG4gICAgaWYgKGVsZW0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHQgPSByZWdpc3RyeS5nZXRUZXN0YWJpbGl0eShlbGVtKTtcbiAgICBpZiAodCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9IGVsc2UgaWYgKCFmaW5kSW5BbmNlc3RvcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZ2V0RE9NKCkuaXNTaGFkb3dSb290KGVsZW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kVGVzdGFiaWxpdHlJblRyZWUocmVnaXN0cnksIGdldERPTSgpLmdldEhvc3QoZWxlbSksIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5kVGVzdGFiaWxpdHlJblRyZWUocmVnaXN0cnksIGdldERPTSgpLnBhcmVudEVsZW1lbnQoZWxlbSksIHRydWUpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵglobal as global } from '@angular/core';\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\nvar DASH_CASE_REGEXP = /-([a-z])/g;\nexport function camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\nexport function dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        var ng = global['ng'] = global['ng'] || {};\n        ng[name] = value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2RvbS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxPQUFPLElBQUksTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhELElBQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDO0FBQ3JDLElBQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDO0FBR3JDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxLQUFhO0lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtRQUFDLFdBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsc0JBQWM7O1FBQUssT0FBQSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRTtJQUF4QixDQUF3QixDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxLQUFhO0lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtRQUFDLFdBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsc0JBQWM7O1FBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFO0lBQWxCLENBQWtCLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxJQUFZLEVBQUUsS0FBVTtJQUNsRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNoRCwwRUFBMEU7UUFDMUUsZ0dBQWdHO1FBQ2hHLDBGQUEwRjtRQUMxRiw4REFBOEQ7UUFDOUQsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFJLE1BQU0sQ0FBQyxJQUFJLENBQXFDLElBQUksRUFBRSxDQUFDO1FBQ2xGLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDbEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge8m1Z2xvYmFsIGFzIGdsb2JhbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IENBTUVMX0NBU0VfUkVHRVhQID0gLyhbQS1aXSkvZztcbmNvbnN0IERBU0hfQ0FTRV9SRUdFWFAgPSAvLShbYS16XSkvZztcblxuXG5leHBvcnQgZnVuY3Rpb24gY2FtZWxDYXNlVG9EYXNoQ2FzZShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsICguLi5tOiBzdHJpbmdbXSkgPT4gJy0nICsgbVsxXS50b0xvd2VyQ2FzZSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhc2hDYXNlVG9DYW1lbENhc2UoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKERBU0hfQ0FTRV9SRUdFWFAsICguLi5tOiBzdHJpbmdbXSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuLyoqXG4gKiBFeHBvcnRzIHRoZSB2YWx1ZSB1bmRlciBhIGdpdmVuIGBuYW1lYCBpbiB0aGUgZ2xvYmFsIHByb3BlcnR5IGBuZ2AuIEZvciBleGFtcGxlIGBuZy5wcm9iZWAgaWZcbiAqIGBuYW1lYCBpcyBgJ3Byb2JlJ2AuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHVuZGVyIHdoaWNoIGl0IHdpbGwgYmUgZXhwb3J0ZWQuIEtlZXAgaW4gbWluZCB0aGlzIHdpbGwgYmUgYSBwcm9wZXJ0eSBvZiB0aGVcbiAqIGdsb2JhbCBgbmdgIG9iamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXhwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0TmdWYXIobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gIGlmICh0eXBlb2YgQ09NUElMRUQgPT09ICd1bmRlZmluZWQnIHx8ICFDT01QSUxFRCkge1xuICAgIC8vIE5vdGU6IHdlIGNhbid0IGV4cG9ydCBgbmdgIHdoZW4gdXNpbmcgY2xvc3VyZSBlbmhhbmNlZCBvcHRpbWl6YXRpb24gYXM6XG4gICAgLy8gLSBjbG9zdXJlIGRlY2xhcmVzIGdsb2JhbHMgaXRzZWxmIGZvciBtaW5pZmllZCBuYW1lcywgd2hpY2ggc29tZXRpbWVzIGNsb2JiZXIgb3VyIGBuZ2AgZ2xvYmFsXG4gICAgLy8gLSB3ZSBjYW4ndCBkZWNsYXJlIGEgY2xvc3VyZSBleHRlcm4gYXMgdGhlIG5hbWVzcGFjZSBgbmdgIGlzIGFscmVhZHkgdXNlZCB3aXRoaW4gR29vZ2xlXG4gICAgLy8gICBmb3IgdHlwaW5ncyBmb3IgYW5ndWxhckpTICh2aWEgYGdvb2cucHJvdmlkZSgnbmcuLi4uJylgKS5cbiAgICBjb25zdCBuZyA9IGdsb2JhbFsnbmcnXSA9IChnbG9iYWxbJ25nJ10gYXN7W2tleTogc3RyaW5nXTogYW55fSB8IHVuZGVmaW5lZCkgfHwge307XG4gICAgbmdbbmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as core from '@angular/core';\nimport { exportNgVar } from '../util';\nvar CORE_TOKENS = {\n    'ApplicationRef': core.ApplicationRef,\n    'NgZone': core.NgZone,\n};\nvar INSPECT_GLOBAL_NAME = 'probe';\nvar CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElement(element) {\n    return core.getDebugNode(element);\n}\nexport function _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, tslib_1.__assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return function () { return inspectNativeElement; };\n}\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport var ELEMENT_PROBE_PROVIDERS = [\n    {\n        provide: core.APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [core.NgProbeToken, new core.Optional()],\n        ],\n        multi: true,\n    },\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfcHJvYmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9kb20vZGVidWcvbmdfcHJvYmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE9BQU8sS0FBSyxJQUFJLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFcEMsSUFBTSxXQUFXLEdBQUc7SUFDbEIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWM7SUFDckMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO0NBQ3RCLENBQUM7QUFFRixJQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQztBQUNwQyxJQUFNLHVCQUF1QixHQUFHLFlBQVksQ0FBQztBQUU3Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE9BQVk7SUFDL0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLFVBQStCO0lBQzVELFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZELFdBQVcsQ0FBQyx1QkFBdUIsdUJBQU0sV0FBVyxFQUFLLG1CQUFtQixDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2pHLE9BQU8sY0FBTSxPQUFBLG9CQUFvQixFQUFwQixDQUFvQixDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLE1BQTJCO0lBQ3RELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQVMsRUFBRSxDQUFNLElBQUssT0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBOUIsQ0FBOEIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBb0I7SUFDdEQ7UUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDN0IsVUFBVSxFQUFFLGNBQWM7UUFDMUIsSUFBSSxFQUFFO1lBQ0osQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3pDO1FBQ0QsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2V4cG9ydE5nVmFyfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgQ09SRV9UT0tFTlMgPSB7XG4gICdBcHBsaWNhdGlvblJlZic6IGNvcmUuQXBwbGljYXRpb25SZWYsXG4gICdOZ1pvbmUnOiBjb3JlLk5nWm9uZSxcbn07XG5cbmNvbnN0IElOU1BFQ1RfR0xPQkFMX05BTUUgPSAncHJvYmUnO1xuY29uc3QgQ09SRV9UT0tFTlNfR0xPQkFMX05BTUUgPSAnY29yZVRva2Vucyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHtAbGluayBEZWJ1Z0VsZW1lbnR9IGZvciB0aGUgZ2l2ZW4gbmF0aXZlIERPTSBlbGVtZW50LCBvclxuICogbnVsbCBpZiB0aGUgZ2l2ZW4gbmF0aXZlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhbiBBbmd1bGFyIHZpZXcgYXNzb2NpYXRlZFxuICogd2l0aCBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3ROYXRpdmVFbGVtZW50KGVsZW1lbnQ6IGFueSk6IGNvcmUuRGVidWdOb2RlfG51bGwge1xuICByZXR1cm4gY29yZS5nZXREZWJ1Z05vZGUoZWxlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlTmdQcm9iZShjb3JlVG9rZW5zOiBjb3JlLk5nUHJvYmVUb2tlbltdKTogYW55IHtcbiAgZXhwb3J0TmdWYXIoSU5TUEVDVF9HTE9CQUxfTkFNRSwgaW5zcGVjdE5hdGl2ZUVsZW1lbnQpO1xuICBleHBvcnROZ1ZhcihDT1JFX1RPS0VOU19HTE9CQUxfTkFNRSwgey4uLkNPUkVfVE9LRU5TLCAuLi5fbmdQcm9iZVRva2Vuc1RvTWFwKGNvcmVUb2tlbnMgfHwgW10pfSk7XG4gIHJldHVybiAoKSA9PiBpbnNwZWN0TmF0aXZlRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gX25nUHJvYmVUb2tlbnNUb01hcCh0b2tlbnM6IGNvcmUuTmdQcm9iZVRva2VuW10pOiB7W25hbWU6IHN0cmluZ106IGFueX0ge1xuICByZXR1cm4gdG9rZW5zLnJlZHVjZSgocHJldjogYW55LCB0OiBhbnkpID0+IChwcmV2W3QubmFtZV0gPSB0LnRva2VuLCBwcmV2KSwge30pO1xufVxuXG4vKipcbiAqIFByb3ZpZGVycyB3aGljaCBzdXBwb3J0IGRlYnVnZ2luZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyAoZS5nLiB2aWEgYG5nLnByb2JlYCkuXG4gKi9cbmV4cG9ydCBjb25zdCBFTEVNRU5UX1BST0JFX1BST1ZJREVSUzogY29yZS5Qcm92aWRlcltdID0gW1xuICB7XG4gICAgcHJvdmlkZTogY29yZS5BUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogX2NyZWF0ZU5nUHJvYmUsXG4gICAgZGVwczogW1xuICAgICAgW2NvcmUuTmdQcm9iZVRva2VuLCBuZXcgY29yZS5PcHRpb25hbCgpXSxcbiAgICBdLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuXTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CommonModule, DOCUMENT, PlatformLocation, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID } from '@angular/common';\nimport { APP_ID, ApplicationModule, ErrorHandler, Inject, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, RendererFactory2, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore, ɵAPP_ROOT as APP_ROOT, ɵConsole as Console } from '@angular/core';\nimport { BrowserDomAdapter } from './browser/browser_adapter';\nimport { BrowserPlatformLocation } from './browser/location/browser_platform_location';\nimport { SERVER_TRANSITION_PROVIDERS, TRANSITION_ID } from './browser/server-transition';\nimport { BrowserGetTestability } from './browser/testability';\nimport { ELEMENT_PROBE_PROVIDERS } from './dom/debug/ng_probe';\nimport { DomRendererFactory2 } from './dom/dom_renderer';\nimport { DomEventsPlugin } from './dom/events/dom_events';\nimport { EVENT_MANAGER_PLUGINS, EventManager } from './dom/events/event_manager';\nimport { HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin } from './dom/events/hammer_gestures';\nimport { KeyEventsPlugin } from './dom/events/key_events';\nimport { DomSharedStylesHost, SharedStylesHost } from './dom/shared_styles_host';\nimport { DomSanitizer, DomSanitizerImpl } from './security/dom_sanitization_service';\nexport var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT] },\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\n];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport var BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT] },\n];\n/**\n * @publicApi\n */\nexport var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\nexport function initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\nexport function errorHandler() {\n    return new ErrorHandler();\n}\nexport function _document() {\n    return document;\n}\nexport var BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: APP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nvar BrowserModule = /** @class */ (function () {\n    function BrowserModule(parentModule) {\n        if (parentModule) {\n            throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\n        }\n    }\n    BrowserModule_1 = BrowserModule;\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    BrowserModule.withServerTransition = function (params) {\n        return {\n            ngModule: BrowserModule_1,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    };\n    var BrowserModule_1;\n    BrowserModule = BrowserModule_1 = tslib_1.__decorate([\n        NgModule({ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] }),\n        tslib_1.__param(0, Optional()), tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Inject(BrowserModule_1)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], BrowserModule);\n    return BrowserModule;\n}());\nexport { BrowserModule };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.module\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/platform-browser\";\nvar AppModuleNgFactory = i0.ɵcmf(i1.AppModule, [i1.AppComponent], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [AppComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(5120, i0.LOCALE_ID, i0.ɵangular_packages_core_core_q, [[3, i0.LOCALE_ID]]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(5120, i0.ɵangular_packages_core_core_bb, i0.ɵangular_packages_core_core_s, [i0.NgZone]), i0.ɵmpd(4608, i0.Compiler, i0.Compiler, []), i0.ɵmpd(5120, i0.APP_ID, i0.ɵangular_packages_core_core_f, []), i0.ɵmpd(5120, i0.IterableDiffers, i0.ɵangular_packages_core_core_o, []), i0.ɵmpd(5120, i0.KeyValueDiffers, i0.ɵangular_packages_core_core_p, []), i0.ɵmpd(4608, i3.DomSanitizer, i3.ɵDomSanitizerImpl, [i2.DOCUMENT]), i0.ɵmpd(6144, i0.Sanitizer, null, [i3.DomSanitizer]), i0.ɵmpd(4608, i3.HAMMER_GESTURE_CONFIG, i3.HammerGestureConfig, []), i0.ɵmpd(5120, i3.EVENT_MANAGER_PLUGINS, function (p0_0, p0_1, p0_2, p1_0, p2_0, p2_1, p2_2, p2_3) { return [new i3.ɵDomEventsPlugin(p0_0, p0_1, p0_2), new i3.ɵKeyEventsPlugin(p1_0), new i3.ɵHammerGesturesPlugin(p2_0, p2_1, p2_2, p2_3)]; }, [i2.DOCUMENT, i0.NgZone, i0.PLATFORM_ID, i2.DOCUMENT, i2.DOCUMENT, i3.HAMMER_GESTURE_CONFIG, i0.ɵConsole, [2, i3.HAMMER_LOADER]]), i0.ɵmpd(4608, i3.EventManager, i3.EventManager, [i3.EVENT_MANAGER_PLUGINS, i0.NgZone]), i0.ɵmpd(135680, i3.ɵDomSharedStylesHost, i3.ɵDomSharedStylesHost, [i2.DOCUMENT]), i0.ɵmpd(4608, i3.ɵDomRendererFactory2, i3.ɵDomRendererFactory2, [i3.EventManager, i3.ɵDomSharedStylesHost]), i0.ɵmpd(6144, i0.RendererFactory2, null, [i3.ɵDomRendererFactory2]), i0.ɵmpd(6144, i3.ɵSharedStylesHost, null, [i3.ɵDomSharedStylesHost]), i0.ɵmpd(4608, i0.Testability, i0.Testability, [i0.NgZone]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1024, i0.ErrorHandler, i3.ɵangular_packages_platform_browser_platform_browser_a, []), i0.ɵmpd(1024, i0.APP_INITIALIZER, function (p0_0) { return [i3.ɵangular_packages_platform_browser_platform_browser_j(p0_0)]; }, [[2, i0.NgProbeToken]]), i0.ɵmpd(512, i0.ApplicationInitStatus, i0.ApplicationInitStatus, [[2, i0.APP_INITIALIZER]]), i0.ɵmpd(131584, i0.ApplicationRef, i0.ApplicationRef, [i0.NgZone, i0.ɵConsole, i0.Injector, i0.ErrorHandler, i0.ComponentFactoryResolver, i0.ApplicationInitStatus]), i0.ɵmpd(1073742336, i0.ApplicationModule, i0.ApplicationModule, [i0.ApplicationRef]), i0.ɵmpd(1073742336, i3.BrowserModule, i3.BrowserModule, [[3, i3.BrowserModule]]), i0.ɵmpd(1073742336, i1.AppModule, i1.AppModule, []), i0.ɵmpd(256, i0.ɵAPP_ROOT, true, [])]); });\nexport { AppModuleNgFactory as AppModuleNgFactory };\nvar styles_AppComponent = [];\nvar RenderType_AppComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_AppComponent, data: {} });\nexport { RenderType_AppComponent as RenderType_AppComponent };\nexport function View_AppComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"Hello World!\"]))], null, null); }\nexport function View_AppComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"hello-world\", [], null, null, null, View_AppComponent_0, RenderType_AppComponent)), i0.ɵdid(1, 49152, null, 0, i1.AppComponent, [], null, null)], null, null); }\nvar AppComponentNgFactory = i0.ɵccf(\"hello-world\", i1.AppComponent, View_AppComponent_Host_0, {}, {}, []);\nexport { AppComponentNgFactory as AppComponentNgFactory };\n","Hello World!","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nenableProdMode();\n\nplatformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));\n\n// import('lazy');\n"],"sourceRoot":""}