{"version":3,"sources":["webpack:///./src/app.module.ts","webpack:///./node_modules/@angular/common/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/fesm5/common.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/fesm5/platform-browser.js.pre-build-optimizer.js","webpack:///./src/app.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app.module.ts.AppComponent.html","webpack:///./src/main.cli.ts","webpack:///./node_modules/@angular/core/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isFunction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/errorObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/tryCatch.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/config.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/hostReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observer.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/toSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/canReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/pipe.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/noop.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/SubjectSubscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/InnerSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/iterator.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArrayLike.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeTo.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/OuterSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/map.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeMap.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/identity.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/refCount.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/share.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/fesm5/core.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/merge.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeAll.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/from.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/multicast.js.pre-build-optimizer.js","webpack:///./src/$_lazy_route_resource lazy namespace object"],"names":["AppComponent","AppModule","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","PlatformLocation","u","undefined","localeEn","Math","floor","abs","v","toString","replace","length","LOCALE_DATA","Plural","DEPRECATED_PLURAL_FN","core","NgLocalization","common_NgLocaleLocalization","_super","NgLocaleLocalization","locale","deprecatedPluralFn","_this","this","__","constructor","prototype","create","__extends","getPluralCategory","normalizedLocale","toLowerCase","match","parentLocale","split","Error","findLocaleData","getLocalePluralCase","Zero","One","Two","Few","Many","CommonModule","DOCUMENT","PLATFORM_SERVER_ID","tslib_es6_extendStatics","tslib_es6_extends","tslib_es6_assign","assign","t","s","arguments","apply","tslib_es6_metadata","metadataKey","metadataValue","Reflect","metadata","tslib_es6_read","_DOM","getDOM","nodeContains","_attrToPropMap","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","¬ê","contains","node","compareDocumentPosition","urlParsingNode","platform_browser_BrowserDomAdapter","BrowserDomAdapter","parse","templateHtml","makeCurrent","adapter","hasProperty","element","name","setProperty","el","getProperty","invoke","methodName","args","_a","concat","tslib_es6_spread","logError","window","console","log","logGroup","group","logGroupEnd","groupEnd","defineProperty","get","enumerable","configurable","nodeA","nodeB","querySelector","selector","querySelectorAll","on","evt","listener","addEventListener","onAndCancel","removeEventListener","dispatchEvent","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","returnValue","isPrevented","defaultPrevented","getInnerHTML","innerHTML","getTemplateContent","isTemplateElement","content","getOuterHTML","outerHTML","nodeName","nodeValue","type","firstChild","nextSibling","parentElement","parentNode","childNodes","childNodesAsList","res","clearNodes","removeChild","appendChild","replaceChild","newChild","oldChild","remove","insertBefore","parent","ref","insertAllBefore","nodes","forEach","insertAfter","setInnerHTML","getText","textContent","setText","getValue","setValue","getChecked","checked","setChecked","createComment","text","createTemplate","html","createElement","tagName","doc","createElementNS","ns","createTextNode","createScriptTag","attrName","attrValue","setAttribute","createStyleElement","css","style","createShadowRoot","getShadowRoot","shadowRoot","getHost","host","clone","cloneNode","getElementsByClassName","getElementsByTagName","classList","slice","addClass","className","add","removeClass","hasClass","setStyle","styleName","styleValue","removeStyle","stylename","getStyle","hasStyle","attributeMap","Map","elAttrs","attributes","attrib","item","set","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttribute","removeAttributeNS","templateAwareRoot","createHtmlDocument","document","implementation","createHTMLDocument","getBoundingClientRect","top","bottom","left","right","width","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","matches","msMatchesSelector","webkitMatchesSelector","isTextNode","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","ELEMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","getEventKey","event","key","keyIdentifier","startsWith","String","fromCharCode","parseInt","substring","location","getGlobalEventTarget","target","body","getHistory","history","getLocation","getBaseHref","url","href","baseElement","pathname","charAt","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","Date","getTime","supportsCookies","getCookie","cookieStr","e_1","encodeURIComponent","_b","__values","_c","cookie","eqIndex","indexOf","_d","cookieValue","trim","decodeURIComponent","e_1_1","return","parseCookieValue","setCookie","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","keys","getDistributedNodes","resolveAndSetHref","baseUrl","supportsDOMEvents","supportsNativeShadowDOM","getAnimationPrefix","getTransitionEnd","supportsAnimation","DomAdapter","resourceLoaderType","supportsState","pushState","platform_browser_BrowserPlatformLocation","BrowserPlatformLocation","_doc","_init","decorator","_history","getBaseHrefFromDOM","onPopState","fn","onHashChange","newPath","search","hash","state","replaceState","forward","back","decorators","desc","c","getOwnPropertyDescriptor","decorate","tslib_es6_decorate","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","provide","useFactory","transitionId","injector","donePromise","then","dom","filter","deps","multi","platform_browser_BrowserGetTestability","BrowserGetTestability","init","addToWindow","registry","elem","findInAncestors","testability","findTestabilityInTree","getAllTestabilities","getAllRootElements","callback","testabilities","count","didWork","decrement","didWork_","whenStable","getTestability","exportNgVar","COMPILED","CORE_TOKENS","ApplicationRef","NgZone","inspectNativeElement","EVENT_MANAGER_PLUGINS","EventManager","plugins","_zone","_eventNameToPlugin","manager","_plugins","reverse","eventName","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","supports","EventManagerPlugin","SharedStylesHost","_stylesSet","Set","addStyles","styles","additions","has","onStylesAdded","getAllStyles","from","platform_browser_DomSharedStylesHost","DomSharedStylesHost","_hostNodes","_styleNodes","head","_addStylesToHost","styleEl","addHost","hostNode","removeHost","delete","ngOnDestroy","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","isArray","decoratePreventDefault","eventHandler","platform_browser_DomRendererFactory2","DomRendererFactory2","eventManager","sharedStylesHost","rendererByCompId","defaultRenderer","platform_browser_DefaultDomRenderer2","createRenderer","encapsulation","Emulated","renderer","id","platform_browser_EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDom","platform_browser_ShadowDomRenderer","begin","end","DefaultDomRenderer2","data","destroy","namespace","createText","refChild","selectRootElement","selectorOrNode","preserveContent","namespaceUri","flags","DashCase","Important","removeProperty","checkNoSyntheticProp","listen","AT_CHARCODE","charCodeAt","nameKind","blackListedMap","EmulatedEncapsulationDomRenderer2","component","contentAttr","hostAttr","ShadowDomRenderer","hostEl","attachShadow","mode","nodeOrShadowRoot","__symbol__","Zone","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","stopSymbol","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","zone","current","run","copiedTasks","platform_browser_DomEventsPlugin","DomEventsPlugin","ngZone","platformId","isPlatformServer","patchEvent","Event","delegate","stopImmediatePropagation","isInAngularZone","globalListenerRegistered","root","callbackRegistered","underlyingRemove","found","splice","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","events","overrides","buildHammer","mc","Hammer","options","enable","platform_browser_HammerGesturesPlugin","HammerGesturesPlugin","_config","loader","isCustomEvent","warn","cancelRegistration_1","deregister_1","catch","runOutsideAngular","eventObj","runGuarded","off","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","meta","metaKey","shift","shiftKey","platform_browser_KeyEventsPlugin","KeyEventsPlugin","KeyEventsPlugin_1","parseEventName","parsedEvent","outsideHandler","eventCallback","parts","domEventName","_normalizeKey","pop","fullKey","modifierName","index","result","getEventFullKey","modifierGetter","keyName","DomSanitizer","platform_browser_DomSanitizerImpl","DomSanitizerImpl","sanitize","ctx","NONE","HTML","platform_browser_SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","STYLE","platform_browser_SafeStyleImpl","SCRIPT","platform_browser_SafeScriptImpl","URL","platform_browser_SafeResourceUrlImpl","platform_browser_SafeUrlImpl","RESOURCE_URL","expectedType","SafeValueImpl","getTypeName","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","SafeHtmlImpl","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","INTERNAL_BROWSER_PLATFORM_PROVIDERS","useValue","useClass","platformBrowser","errorHandler","platform_browser_BrowserModule","BrowserModule","parentModule","BrowserModule_1","withServerTransition","params","ngModule","providers","appId","useExisting","AppModuleNgFactory","_l","AppComponentNgFactory","p0_0","p0_1","p0_2","p1_0","p2_0","p2_1","p2_2","p2_3","coreTokens","reduce","prev","token","RenderType_AppComponent","View_AppComponent_0","View_AppComponent_Host_0","bootstrapModuleFactory","err","__webpack_require__","bind","__assign","__metadata","__spread","x","isObject","isFunction","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","message","map","join","UnsubscriptionError","Subscription_Subscription","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","hasErrors","len","flattenUnsubscriptionErrors","sub","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","errs","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","useDeprecatedSynchronousErrorHandling","hostReportError","setTimeout","complete","rxSubscriber","random","Subscriber_Subscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","Subscriber_SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable_observable","observable","Observable_Observable","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","promiseCtor","getPromiseCtor","resolve","reject","pipe","operations","_i","fns","input","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription_SubjectSubscription","SubjectSubscription","subject","observers","subscriberIndex","Subject_SubjectSubscriber","SubjectSubscriber","Subject_Subject","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","asObservable","AnonymousSubject","InnerSubscriber_InnerSubscriber","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToArray","array","subscribeToPromise","promise","getSymbolIterator","iterator_iterator","subscribeToIterable","iterable","subscribeToObservable","obj","obs","TypeError","isArrayLike","isPromise","subscribeTo","OuterSubscriber_OuterSubscriber","OuterSubscriber","innerValue","innerIndex","innerSub","MapOperator","project","thisArg","map_MapSubscriber","MapSubscriber","fromArray","scheduler","schedule","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","identity","refCount","RefCountOperator","connectable","_refCount","refCounter","refCount_RefCountSubscriber","connection","connect","RefCountSubscriber","sharedConnection","_connection","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableObservable_ConnectableSubscriber","connectableObservableDescriptor","writable","ConnectableSubscriber","shareSubjectFactory","__webpack_exports__","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","zoneSchedulerFactory","_appIdRandomProviderFactory","SCHEDULER","core_ApplicationRef","createPlatformFactory","NgProbeToken","enableProdMode","isDevMode","APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","APP_INITIALIZER","ApplicationInitStatus","getDebugNode","Testability","setTestabilityGetter","LOCALE_ID","ApplicationModule","core_EventEmitter","ErrorHandler","Sanitizer","SecurityContext","Component","NgModule","ViewEncapsulation","Version","defineInjectable","Injector","inject","InjectionToken","Inject","Optional","RendererFactory2","RendererStyleFlags2","Compiler","core_ComponentFactoryResolver","NgModuleRef","IterableDiffers","KeyValueDiffers","WrappedValue","platformCore","isListLikeIterable","Console","APP_ROOT","CodegenComponentFactoryResolver","_sanitizeHtml","_sanitizeStyle","_sanitizeUrl","_global","stringify","isObservable","core_isPromise","defineDirective","elementHostStyling","elementHostStylingMap","elementHostStylingApply","createComponentFactory","createNgModuleFactory","createRendererType2","directiveDef","elementDef","moduleDef","moduleProvideDef","textDef","viewDef","ANNOTATIONS","PARAMETERS","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","cls","ngMetadataName","annotationCls","values","propName","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","parameters","Self","SkipSelf","InjectFlags","getClosureSafeProperty","objWithPropertyToExtract","opts","providedIn","factory","getInjectableDef","NG_INJECTABLE_DEF","ngInjectableDef","overriddenName","newLineIndex","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","getGlobal","__globalThis","globalThis","__window","__self","self","WorkerGlobalScope","__global","global","_injectImplementation","_currentInjector","setCurrentInjector","former","Default","notFoundValue","injectableDef","injectRootLimpMode","injectArgs","types","arg","j","Type","Function","isType","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","INHERITED_CLASS_WITH_DELEGATE_CTOR","core_ReflectionCapabilities","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","getOwnMetadata","fill","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","USE_VALUE$1","EMPTY_ARRAY","convertInjectableProviderToFactory","provider","deps_1","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","_desc","__NG_ELEMENT_ID__","SOURCE","_THROW_IF_NOT_FOUND","INJECTOR","NullInjector","StaticInjector","THROW_IF_NOT_FOUND","NULL","IDENT","CIRCULAR","MULTI_PROVIDER_FN","USE_VALUE$2","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","records","_records","useNew","recursivelyProcessProviders","staticError","resolvedProvider","providerDeps","computeDeps","resolveProvider","multiProvider","multiProviderMixError","record","tryResolveToken","depRecords","depRecord","childRecord","resolveToken","unshift","injectorErrorName","tokenPath","formatError","catchInjectorError","tokens","substr","JSON","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","ChangeDetectionStrategy","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","EMPTY_OBJ","EMPTY_ARRAY$1","defaultScheduler","requestAnimationFrame","_renderCompCount","extractDirectiveDef","getComponentDef","getDirectiveDef","extractPipeDef","getPipeDef","invertObject","secondary","newLookup","minifiedKey","publicName","declaredName","componentDefinition","typePrototype","declaredInputs","def","providersResolver","consts","vars","template","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","_","setInput","schemas","directiveTypes","directives","feature","pipeTypes","pipes","HOST","TVIEW","FLAGS","PARENT","NEXT","T_HOST","BINDING_INDEX","CONTEXT","RENDERER_FACTORY","RENDERER","CHILD_HEAD","PREORDER_HOOK_FLAGS","HEADER_OFFSET","TYPE","ACTIVE_INDEX","VIEWS","MONKEY_PATCH_KEY_NAME","unwrapRNode","isLView","getTNode","view","readPatchedLView","readPatchedData","lView","resetPreOrderHookFlags","INJECTOR_BLOOM_PARENT_SIZE","executeHooks","currentView","firstPassHooks","checkHooks","checkNoChangesMode","initPhaseState","currentNodeIndex","hooksToCall","arr","initPhase","nodeIndexLimit","lastNodeIndexFound","callHook","callHooks","isInitHook","hook","directive","getLView","core_lView","previousOrParentTNode","isParent","activeHostContext","activeHostElementIndex","setActiveHost","getActiveHostContext","getActiveHostElementIndex","getPreviousOrParentTNode","setPreviousOrParentTNode","tNode","setIsParent","isCreationMode","getCheckNoChangesMode","enterView","newView","hostTNode","oldView","leaveView","tView","viewHooks","viewCheckHooks","bindingStartIndex","RendererStyleFlags3","isProceduralRenderer","CorePlayerHandler","_players","flushPlayers","player","play","queuePlayer","createEmptyStylingContext","wrappedElement","sanitizer","initialStyles","initialClasses","allocateDirectiveIntoContext","directiveRef","dirs","getStylingContext","viewData","storageIndex","slotValue","wrapper","stylingTemplate","templateStyleContext","allocStylingContext","addPlayerInternal","playerContext","rootContext","playerContextIndex","playerHandler","getLViewParent","getRootContext","viewOrComponent","componentOrLView","getRootView","getDebugContext","getOriginalError","defaultErrorLogger","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","NO_CHANGE","BoundPlayerFactory","getMatchingBindingIndex","bindingName","start","getProp","patchStylingMapIntoContext","directiveIndex","playerBuilderIndex","ctxStart","ctxEnd","cacheValue","entryIsClassBased","dirty","cacheIndex","cachedValues","ownershipValuesStartIndex","existingCachedValueCount","valuesEntryShapeChange","totalUniqueValues","totalNewAllocatedSlots","applyAllProps","ctxIndex","totalRemainingProperties","currentProp","normalizedProp","mapProp","hyphenate","currentValue","currentDirectiveIndex","getDirectiveIndexFromEntry","currentFlag","getPointers","hasValueChanged","allowValueChange","setPlayerBuilderIndex","hasInitialValueChanged","setDirty","getStyleSanitizer","propertiesLoop","isInsideOwnershipArea","distantCtxDirectiveIndex","distantCtxPlayerBuilderIndex","getPlayerBuilderIndex","distantCtxValue","distantCtxFlag","swapMultiContextEntries","insertNewMultiProperty","prepareInitialFlag","ctxValue","ctxFlag","startPosition","endPosition","totalValues","dirtyFutureValues","nextStartPosition","totalStylingEntries","classCache","diffInStartPosition","updateCachedMapValue","setContextDirty","setDirectiveDirty","native","store","playerBuilder","setClass","isDirtyYes","adjustedIndex","isDirty","isClassBasedValue","isSanitizable","pointers","configFlag","staticIndex","dynamicIndex","getInitialValue","flag","getInitialIndex","getMultiOrSingleIndex","getMultiClassesStartIndex","getMultiStylesStartIndex","setProp","hasPlayerBuilderChanged","builder","setPlayerBuilder","insertionIndex","playerIndex","directiveOwnerPointers","getPlayerBuilder","setFlag","setContextPlayersDirty","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","tmpDirectiveIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","classBased","doShift","indexStartPosition","singleIndex","initialIndexForSingle","updateSinglePointerValues","valueExists","isClassBased","initialIndex","getInitialStylingValuesIndexOf","newValue","initialValue","a","ClassAndStylePlayerBuilder","_element","_type","_values","_dirty","_factory","buildPlayer","currentPlayer","isFirstRender","getDirectiveIndexFromRegistry","getDirectiveRegistryValuesIndexOf","classesStartIndex","registerMultiMapEntry","keyValues","dirtyYes","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","readCachedMapValue","isMultiValueCacheHit","limit","_CLEAN_PROMISE","refreshDescendantViews","creationMode","firstTemplatePass","preOrderHooks","preOrderCheckHooks","executePreOrderHooks","container","dynamicViewData","renderEmbeddedTemplate","refreshDynamicEmbeddedViews","refreshContentQueries","contentHooks","contentCheckHooks","expandoInstructions","bindingRootIndex","expandoStartIndex","currentElementIndex","instruction","providerCount","hostCtx","setHostBindings","staticContentQueries","components","adjustedElementIndex","hostView","componentView","componentTView","blueprint","syncViewWithBlueprint","hostTView","templateFn","executeViewQueryFn","getRenderFlags","staticViewQueries","checkView","refreshChildComponents","directiveDefIdx","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","renderComponentOrTemplate","rendererFactory","normalExecutionPath","creationModeIsActive","rootComponent","setInputsForProperty","privateName","instance","_devMode","_runModeLocked","InertBodyHelper","defaultDoc","inertDocument","inertBodyElement","inertHtml","getInertBodyElement","DOMParser","isDOMParserAvailable","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","parseFromString","templateEl","documentMode","stripCustomNsAttrs","childNode","SAFE_URL_PATTERN","DATA_URL_PATTERN","tagSet","tags","core_merge","e_2","sets","sets_1","sets_1_1","e_2_1","inertBodyHelper","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","startElement","chars","endElement","checkClobberedElement","srcset","elAttr","lower","encodeEntities","nextNode","DOCUMENT_POSITION_CONTAINED_BY","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","parent_1","SAFE_STYLE_VALUE","RegExp","URL_RE","urlMatch","outsideSingle","outsideDouble","hasBalancedQuotes","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","_symbolIterator","core_getSymbolIterator","Symbol_1","getOwnPropertyNames","looseIdentical","isNaN","devModeEqual","isListLikeIterableA","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","areIterablesEqual","wrapped","wrap","unwrap","isWrapped","isJsObject","classBindingNames","styleBindingNames","styleSanitizer","onElementCreationFns","directiveRefs","nextOffsetInsertionIndex","detectedIndex","findOrPatchDirectiveIntoRegistry","entries","newEntries","hyphenateEntries","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","cachedClassMapValues","cachedStyleMapValues","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","i_1","name_1","singlePropIndex","filteredClassBindingNames","i_2","name_2","totalStyles","totalClasses","totalNewEntries","i_3","isMultiBased","singleOrMultiIndex","i_4","i_5","i_6","multiIndex","initialValuesToLookup","indexForInitial","staticStyles","directiveOwnerIndex","initialFlag","newStylesSpaceAllocationSize","newClassesSpaceAllocationSize","cachedStyleMapIndex","i_7","cachedClassMapIndex","i_8","updateContextWithBindings","initElementStyling","classes","stylingContext","hasClassInput","classInputVal","forceClassesAsString","hasStyleInput","styleInputVal","str","forceStylesAsString","classesInput","stylesInput","ignoreAllClassUpdates","ignoreAllStyleUpdates","classesPlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","classNames","applyAllClasses","playerBuildersAreDirty","classesPlayerBuilderIndex","stylesPlayerBuilderIndex","multiClassesEndIndex","updateStylingMap","elementStylingMapInternal","res_1","nothingScheduled","rootOrView","classesStore","stylesStore","totalPlayersQueued","targetDirectiveIndex","isContextDirty","isDirectiveDirty","flushPlayerBuilders","multiStartIndex","stillDirty","valueToApply","playersStartIndex","playerInsertionIndex","oldPlayer","renderStyling","clean","SimpleChange","previousValue","firstChange","isFirstChange","core_ComponentRef","core_ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","factories","_ngModule","_factories","componentType","core_ComponentFactoryBoundToModule","ComponentFactoryBoundToModule","projectableNodes","rootSelectorOrNode","core_NgModuleFactory","core_noop","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","Renderer","Renderer2","SWITCH_RENDERER2_FACTORY","full","major","minor","patch","VERSION","DefaultIterableDifferFactory","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","clear","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","size","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","_addToChanges","k","copied","extend","find","f","kv","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","expressionChangedAfterItHasBeenCheckedError","oldValue","currValue","isFirstCheck","msg","_addDebugContext","viewDebugError","viewDestroyedError","action","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","bindingIndex","checkAndUpdateBinding","checkBindingNoChanges","bindings","nodeIndex","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","queryId","valueType","filterQueryId","splitDepsDsl","sourceName","getParentRenderElement","renderHost","renderParent","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","lastRenderRootNode","visitSiblingRenderNodes","startIndex","endIndex","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","providersByKey","modules","isRoot","resolveNgModuleDep","depDef","tokenKey_1","providerDef","_def","providerInstance","_providers","_createProviderInstance","scope","moduleTransitivelyPresent","injectable","depValues","_createClass","_callFactory","detachEmbeddedView","elementData","viewIndex","removeFromArray","renderDetachView$1","renderAttachEmbeddedView","prevView","prevRenderNode","addToArray","EMPTY_CONTEXT","viewDefFactory","core_ComponentFactory_","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","componentNodeIndex","componentProvider","core_ComponentRef_","ViewRef_","ComponentRef_","_view","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","elDef","elData","core_ViewContainerRef_","ViewContainerRef_","_data","attachToViewContainerRef","templateRef","viewRef","insert","createComponent","componentFactory","ngModuleRef","contextInjector","parentInjector","componentRef","destroyed","viewRef_","vcElementData","dvcElementData","projectedViews","_projectedViews","nodeFlags","childFlags","markNodeAsProjectedTemplate","attachProjectedView","move","oldViewIndex","newViewIndex","detach","createChangeDetectorRef","_viewContainerRef","_appRef","renderNodes","markForCheck","detectChanges","fs","checkNoChanges","reattach","disposables","detachView","detachFromAppRef","attachToAppRef","appRef","vcRef","createTemplateData","core_TemplateRef_","TemplateRef_","_parentView","createInjector$1","createRendererV1","core_RendererAdapter","RendererAdapter","namespaceAndName","createViewRoot","hostElement","createTemplateAnchor","comment","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","destroyNode","listenGlobal","setElementProperty","propertyName","propertyValue","setElementAttribute","attributeValue","setBindingDebugInfo","setElementClass","isAdd","setElementStyle","invokeElementMethod","animate","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","_destroyed","provDef","initNgModule","injectFlags","lifecycles","callNgModuleLifecycle","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","nonMinifiedName","securityContext","suffix","outputDefs","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","output","outputObservable","eventHandlerClosure","allowPrivateServices","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","startView","searchView","findCompView","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","QueryList","_results","some","toArray","reset","resultsTree","list","flatten","last","first","notifyOnChanges","dir","SWITCH_COMPILE_DIRECTIVE","SWITCH_COMPILE_COMPONENT","SWITCH_COMPILE_NGMODULE","imports","exports","ngInjectorDef","appInits","initialized","rej","runInitializers","asyncInitPromises","initResult","all","_randomChar","APP_BOOTSTRAP_LISTENER","_throwError","trace","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","CompilerFactory","detectWTF","wtf","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","signature","createScope","wtfLeave","leaveScope","core_promise","scheduleMicroTask","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","assertInAngularZone","assertNotInAngularZone","runTask","scheduleEventTask","EMPTY_PAYLOAD","noop$1","cancelTask","NoopNgZone","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","getPendingRequestCount","findProviders","using","exactMatch","core_TestabilityRegistry","TestabilityRegistry","_applications","_testabilityGetter","registerApplication","unregisterApplication","unregisterAllApplications","__decorate","_platform","_NoopGetTestability","ALLOW_MULTIPLE_PLATFORMS","parentPlatformFactory","marker","extraProviders","platform","getPlatform","injectedProviders","PlatformRef","inits","createPlatform","requiredToken","assertPlatform","_injector","_modules","moduleFactory","ngZoneOption","ngZoneInjector","moduleRef","exceptionHandler","initStatus","_moduleDoBootstrap","_callAndReportToErrorHandler","bootstrapModule","compilerOptions","optionsReducer","createCompiler","compileNgModuleFactory","bootstrap","ngDoBootstrap","module","dst","objs","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","stableSub","unstableSub","observables","mergeMap","resultSelector","ii","mergeAll","merge","subjectOrSubjectFactory","ApplicationRef_1","componentOrFactory","compRef","_unloadComponent","_loadComponent","_tickScope","_e","_f","attachView","EventListener","DebugNode__PRE_R3__","nativeNode","_debugContext","listeners","core_DebugElement_PRE_R3_","addChild","providerTokens","DebugElement__PRE_R3__","child","childIndex","insertChildrenAfter","newChildren","siblingIndex","refIndex","predicate","queryAll","_queryElementChildren","queryAllNodes","_queryNodeChildren","triggerEventHandler","_nativeNodeToDebugNode","indexDebugNode","queue","fixedAttrs","bindingDefs","suffixOrSecurityContext","ns_1","attrs","isFilled","None","resolveRendererType2","parentEl","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","binding","renderValue","unit","queryIds","nodeMatchedQueries","tplDef","filterId","checkAndUpdateQuery","queryList","directiveInstance","newValues","calcQueryValues","notify","boundValue","bindingType","queryDef","getQueryValue","embeddedView","dvc","projectedView","queryValueType","appendNgContent","staticText","prefix","_addInterpolationPart","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","validateNode","isComponent","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","anchorDef","createView","initView","createViewNodes","parentView","compRenderer","rendererType","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","changed","checkAndUpdateElementInline","checkAndUpdateTextInline","ngOnChanges","checkAndUpdateDirectiveInline","transform","checkAndUpdatePureExpressionInline","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkAndUpdateNodeDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","createProdRootView","elInjector","createRootData","debugCreateRootView","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","debugCreateEmbeddedView","debugCreateComponentView","viewDefOverrides","debugCreateNgModuleRef","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","calcHasOverrides","moduleSet_1","applyProviderOverrides","applyProviderOverridesToNgModule","debugOverrideProvider","debugOverrideComponentView","comp","compFactory","hostViewDef","debugClearOverrides","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","findElementIndicesWithOverwrittenProviders","applyProviderOverridesToElement","elIndex","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","_currentAction","_currentView","_currentNodeIndex","debugSetCurrentNode","debugHandleEvent","debugUpdateDirectives","nextDirectiveWithBinding","debugCheckAndUpdateNode","debugCheckNoChangesNode","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","attr","core_DebugContext_","DebugContext_","elView","elOrCompView","childDef","collectReferences","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldNodeIndex","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","debugCtx","debugEl","debugChildEl","debugRefEl","ngModuleType","defFactory","core_NgModuleFactory_","NgModuleFactory_","_ngModuleDefFactory","services","initServicesIfNeeded","cloneNgModuleDefinition","webpackEmptyAsyncContext","req","code"],"mappings":"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","file":"main.js","sourcesContent":["import { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@Component({ selector: 'hello-world', template: 'Hello World!' })\nexport class AppComponent { }\n\n@NgModule({ declarations: [AppComponent], imports: [BrowserModule], bootstrap: [AppComponent] })\nexport class AppModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license Angular v8.0.0-beta.10+123.sha-a6809e0.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, Injectable, EventEmitter, Optional, Inject, LOCALE_ID, …µisListLikeIterable, …µstringify, IterableDiffers, KeyValueDiffers, ElementRef, Renderer2, …µdefineDirective, …µelementHostStyling, …µelementHostStylingMap, …µelementHostStylingApply, Input, Directive, NgModuleRef, ComponentFactoryResolver, Type, Injector, NgModuleFactory, ViewContainerRef, isDevMode, TemplateRef, Host, Attribute, Pipe, WrappedValue, …µisPromise, …µisObservable, ChangeDetectorRef, NgModule, Version, defineInjectable, inject, ErrorHandler } from '@angular/core';\nimport { __decorate, __metadata, __extends, __param, __read, __values, __assign } from 'tslib';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * @publicApi\n */\nvar PlatformLocation = /** @class */ (function () {\n    function PlatformLocation() {\n    }\n    return PlatformLocation;\n}());\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nvar LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {@link HashLocationStrategy} and {@link PathLocationStrategy}.\n *\n * This is used under the hood of the {@link Location} service.\n *\n * Applications should use the {@link Router} or {@link Location} services to\n * interact with application route state.\n *\n * For instance, {@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\nvar LocationStrategy = /** @class */ (function () {\n    function LocationStrategy() {\n    }\n    return LocationStrategy;\n}());\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nvar APP_BASE_HREF = new InjectionToken('appBaseHref');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the {@link LocationStrategy} used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the {@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nvar Location = /** @class */ (function () {\n    function Location(platformStrategy) {\n        var _this = this;\n        /** @internal */\n        this._subject = new EventEmitter();\n        this._platformStrategy = platformStrategy;\n        var browserBaseHref = this._platformStrategy.getBaseHref();\n        this._baseHref = Location_1.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n        this._platformStrategy.onPopState(function (ev) {\n            _this._subject.emit({\n                'url': _this.path(true),\n                'pop': true,\n                'state': ev.state,\n                'type': ev.type,\n            });\n        });\n    }\n    Location_1 = Location;\n    /**\n     * Returns the normalized URL path.\n     *\n     * @param includeHash Whether path has an anchor fragment.\n     *\n     * @returns The normalized URL path.\n     */\n    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n    // removed.\n    Location.prototype.path = function (includeHash) {\n        if (includeHash === void 0) { includeHash = false; }\n        return this.normalize(this._platformStrategy.path(includeHash));\n    };\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     *\n     * @param path The given URL path\n     * @param query Query parameters\n     *\n     * @returns `true` if the given URL path is equal to the current normalized path, `false`\n     * otherwise.\n     */\n    Location.prototype.isCurrentPathEqualTo = function (path, query) {\n        if (query === void 0) { query = ''; }\n        return this.path() == this.normalize(path + Location_1.normalizeQueryParams(query));\n    };\n    /**\n     * Given a string representing a URL, returns the URL path after stripping the\n     * trailing slashes.\n     *\n     * @param url String representing a URL.\n     *\n     * @returns Normalized URL string.\n     */\n    Location.prototype.normalize = function (url) {\n        return Location_1.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n    };\n    /**\n     * Given a string representing a URL, returns the platform-specific external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n     * before normalizing. This method also adds a hash if `HashLocationStrategy` is\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     *\n     *\n     * @param url String representing a URL.\n     *\n     * @returns  A normalized platform-specific URL.\n     */\n    Location.prototype.prepareExternalUrl = function (url) {\n        if (url && url[0] !== '/') {\n            url = '/' + url;\n        }\n        return this._platformStrategy.prepareExternalUrl(url);\n    };\n    // TODO: rename this method to pushState\n    /**\n     * Changes the browsers URL to a normalized version of the given URL, and pushes a\n     * new item onto the platform's history.\n     *\n     * @param path  URL path to normalizze\n     * @param query Query parameters\n     * @param state Location history state\n     *\n     */\n    Location.prototype.go = function (path, query, state) {\n        if (query === void 0) { query = ''; }\n        if (state === void 0) { state = null; }\n        this._platformStrategy.pushState(state, '', path, query);\n    };\n    /**\n     * Changes the browser's URL to a normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     *\n     * @param path  URL path to normalizze\n     * @param query Query parameters\n     * @param state Location history state\n     */\n    Location.prototype.replaceState = function (path, query, state) {\n        if (query === void 0) { query = ''; }\n        if (state === void 0) { state = null; }\n        this._platformStrategy.replaceState(state, '', path, query);\n    };\n    /**\n     * Navigates forward in the platform's history.\n     */\n    Location.prototype.forward = function () { this._platformStrategy.forward(); };\n    /**\n     * Navigates back in the platform's history.\n     */\n    Location.prototype.back = function () { this._platformStrategy.back(); };\n    /**\n     * Subscribe to the platform's `popState` events.\n     *\n     * @param value Event that is triggered when the state history changes.\n     * @param exception The exception to throw.\n     *\n     * @returns Subscribed events.\n     */\n    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    };\n    /**\n     * Given a string of url parameters, prepend with `?` if needed, otherwise return the\n     * parameters as is.\n     *\n     *  @param  params String of URL parameters\n     *\n     *  @returns URL parameters prepended with `?` or the parameters as is.\n     */\n    Location.normalizeQueryParams = function (params) {\n        return params && params[0] !== '?' ? '?' + params : params;\n    };\n    /**\n     * Given 2 parts of a URL, join them with a slash if needed.\n     *\n     * @param start  URL string\n     * @param end    URL string\n     *\n     *\n     * @returns Given URL strings joined with a slash, if needed.\n     */\n    Location.joinWithSlash = function (start, end) {\n        if (start.length == 0) {\n            return end;\n        }\n        if (end.length == 0) {\n            return start;\n        }\n        var slashes = 0;\n        if (start.endsWith('/')) {\n            slashes++;\n        }\n        if (end.startsWith('/')) {\n            slashes++;\n        }\n        if (slashes == 2) {\n            return start + end.substring(1);\n        }\n        if (slashes == 1) {\n            return start + end;\n        }\n        return start + '/' + end;\n    };\n    /**\n     * If URL has a trailing slash, remove it, otherwise return the URL as is. The\n     * method looks for the first occurrence of either `#`, `?`, or the end of the\n     * line as `/` characters and removes the trailing slash if one exists.\n     *\n     * @param url URL string\n     *\n     * @returns Returns a URL string after removing the trailing slash if one exists, otherwise\n     * returns the string as is.\n     */\n    Location.stripTrailingSlash = function (url) {\n        var match = url.match(/#|\\?|$/);\n        var pathEndIdx = match && match.index || url.length;\n        var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n    };\n    var Location_1;\n    Location = Location_1 = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [LocationStrategy])\n    ], Location);\n    return Location;\n}());\nfunction _stripBaseHref(baseHref, url) {\n    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\nfunction _stripIndexHtml(url) {\n    return url.replace(/\\/index.html$/, '');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nvar HashLocationStrategy = /** @class */ (function (_super) {\n    __extends(HashLocationStrategy, _super);\n    function HashLocationStrategy(_platformLocation, _baseHref) {\n        var _this = _super.call(this) || this;\n        _this._platformLocation = _platformLocation;\n        _this._baseHref = '';\n        if (_baseHref != null) {\n            _this._baseHref = _baseHref;\n        }\n        return _this;\n    }\n    HashLocationStrategy.prototype.onPopState = function (fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    };\n    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };\n    HashLocationStrategy.prototype.path = function (includeHash) {\n        if (includeHash === void 0) { includeHash = false; }\n        // the hash value is always prefixed with a `#`\n        // and if it is empty then it will stay empty\n        var path = this._platformLocation.hash;\n        if (path == null)\n            path = '#';\n        return path.length > 0 ? path.substring(1) : path;\n    };\n    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n        var url = Location.joinWithSlash(this._baseHref, internal);\n        return url.length > 0 ? ('#' + url) : url;\n    };\n    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {\n        var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.pushState(state, title, url);\n    };\n    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {\n        var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.replaceState(state, title, url);\n    };\n    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };\n    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };\n    HashLocationStrategy = __decorate([\n        Injectable(),\n        __param(1, Optional()), __param(1, Inject(APP_BASE_HREF)),\n        __metadata(\"design:paramtypes\", [PlatformLocation, String])\n    ], HashLocationStrategy);\n    return HashLocationStrategy;\n}(LocationStrategy));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nvar PathLocationStrategy = /** @class */ (function (_super) {\n    __extends(PathLocationStrategy, _super);\n    function PathLocationStrategy(_platformLocation, href) {\n        var _this = _super.call(this) || this;\n        _this._platformLocation = _platformLocation;\n        if (href == null) {\n            href = _this._platformLocation.getBaseHrefFromDOM();\n        }\n        if (href == null) {\n            throw new Error(\"No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.\");\n        }\n        _this._baseHref = href;\n        return _this;\n    }\n    PathLocationStrategy.prototype.onPopState = function (fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    };\n    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };\n    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n        return Location.joinWithSlash(this._baseHref, internal);\n    };\n    PathLocationStrategy.prototype.path = function (includeHash) {\n        if (includeHash === void 0) { includeHash = false; }\n        var pathname = this._platformLocation.pathname +\n            Location.normalizeQueryParams(this._platformLocation.search);\n        var hash = this._platformLocation.hash;\n        return hash && includeHash ? \"\" + pathname + hash : pathname;\n    };\n    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {\n        var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.pushState(state, title, externalUrl);\n    };\n    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {\n        var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.replaceState(state, title, externalUrl);\n    };\n    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };\n    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };\n    PathLocationStrategy = __decorate([\n        Injectable(),\n        __param(1, Optional()), __param(1, Inject(APP_BASE_HREF)),\n        __metadata(\"design:paramtypes\", [PlatformLocation, String])\n    ], PathLocationStrategy);\n    return PathLocationStrategy;\n}(LocationStrategy));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\nvar u = undefined;\nfunction plural(n) {\n    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', '√ó', '‚Ä∞', '‚àû', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', '¬§#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar LOCALE_DATA = {};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * @publicApi\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[0 /* LocaleId */];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][19 /* ExtraData */] = extraData;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @internal */\nvar CURRENCIES_EN = {\n    'ADP': [undefined, undefined, 0],\n    'AFN': [undefined, undefined, 0],\n    'ALL': [undefined, undefined, 0],\n    'AMD': [undefined, undefined, 0],\n    'AOA': [undefined, 'Kz'],\n    'ARS': [undefined, '$'],\n    'AUD': ['A$', '$'],\n    'BAM': [undefined, 'KM'],\n    'BBD': [undefined, '$'],\n    'BDT': [undefined, '‡ß≥'],\n    'BHD': [undefined, undefined, 3],\n    'BIF': [undefined, undefined, 0],\n    'BMD': [undefined, '$'],\n    'BND': [undefined, '$'],\n    'BOB': [undefined, 'Bs'],\n    'BRL': ['R$'],\n    'BSD': [undefined, '$'],\n    'BWP': [undefined, 'P'],\n    'BYN': [undefined, '—Ä.', 2],\n    'BYR': [undefined, undefined, 0],\n    'BZD': [undefined, '$'],\n    'CAD': ['CA$', '$', 2],\n    'CHF': [undefined, undefined, 2],\n    'CLF': [undefined, undefined, 4],\n    'CLP': [undefined, '$', 0],\n    'CNY': ['CN¬•', '¬•'],\n    'COP': [undefined, '$', 0],\n    'CRC': [undefined, '‚Ç°', 2],\n    'CUC': [undefined, '$'],\n    'CUP': [undefined, '$'],\n    'CZK': [undefined, 'Kƒç', 2],\n    'DJF': [undefined, undefined, 0],\n    'DKK': [undefined, 'kr', 2],\n    'DOP': [undefined, '$'],\n    'EGP': [undefined, 'E¬£'],\n    'ESP': [undefined, '‚Çß', 0],\n    'EUR': ['‚Ç¨'],\n    'FJD': [undefined, '$'],\n    'FKP': [undefined, '¬£'],\n    'GBP': ['¬£'],\n    'GEL': [undefined, '‚Çæ'],\n    'GIP': [undefined, '¬£'],\n    'GNF': [undefined, 'FG', 0],\n    'GTQ': [undefined, 'Q'],\n    'GYD': [undefined, '$', 0],\n    'HKD': ['HK$', '$'],\n    'HNL': [undefined, 'L'],\n    'HRK': [undefined, 'kn'],\n    'HUF': [undefined, 'Ft', 2],\n    'IDR': [undefined, 'Rp', 0],\n    'ILS': ['‚Ç™'],\n    'INR': ['‚Çπ'],\n    'IQD': [undefined, undefined, 0],\n    'IRR': [undefined, undefined, 0],\n    'ISK': [undefined, 'kr', 0],\n    'ITL': [undefined, undefined, 0],\n    'JMD': [undefined, '$'],\n    'JOD': [undefined, undefined, 3],\n    'JPY': ['¬•', undefined, 0],\n    'KHR': [undefined, '·üõ'],\n    'KMF': [undefined, 'CF', 0],\n    'KPW': [undefined, '‚Ç©', 0],\n    'KRW': ['‚Ç©', undefined, 0],\n    'KWD': [undefined, undefined, 3],\n    'KYD': [undefined, '$'],\n    'KZT': [undefined, '‚Ç∏'],\n    'LAK': [undefined, '‚Ç≠', 0],\n    'LBP': [undefined, 'L¬£', 0],\n    'LKR': [undefined, 'Rs'],\n    'LRD': [undefined, '$'],\n    'LTL': [undefined, 'Lt'],\n    'LUF': [undefined, undefined, 0],\n    'LVL': [undefined, 'Ls'],\n    'LYD': [undefined, undefined, 3],\n    'MGA': [undefined, 'Ar', 0],\n    'MGF': [undefined, undefined, 0],\n    'MMK': [undefined, 'K', 0],\n    'MNT': [undefined, '‚ÇÆ', 0],\n    'MRO': [undefined, undefined, 0],\n    'MUR': [undefined, 'Rs', 0],\n    'MXN': ['MX$', '$'],\n    'MYR': [undefined, 'RM'],\n    'NAD': [undefined, '$'],\n    'NGN': [undefined, '‚Ç¶'],\n    'NIO': [undefined, 'C$'],\n    'NOK': [undefined, 'kr', 2],\n    'NPR': [undefined, 'Rs'],\n    'NZD': ['NZ$', '$'],\n    'OMR': [undefined, undefined, 3],\n    'PHP': [undefined, '‚Ç±'],\n    'PKR': [undefined, 'Rs', 0],\n    'PLN': [undefined, 'z≈Ç'],\n    'PYG': [undefined, '‚Ç≤', 0],\n    'RON': [undefined, 'lei'],\n    'RSD': [undefined, undefined, 0],\n    'RUB': [undefined, '‚ÇΩ'],\n    'RUR': [undefined, '—Ä.'],\n    'RWF': [undefined, 'RF', 0],\n    'SBD': [undefined, '$'],\n    'SEK': [undefined, 'kr', 2],\n    'SGD': [undefined, '$'],\n    'SHP': [undefined, '¬£'],\n    'SLL': [undefined, undefined, 0],\n    'SOS': [undefined, undefined, 0],\n    'SRD': [undefined, '$'],\n    'SSP': [undefined, '¬£'],\n    'STD': [undefined, undefined, 0],\n    'STN': [undefined, 'Db'],\n    'SYP': [undefined, '¬£', 0],\n    'THB': [undefined, '‡∏ø'],\n    'TMM': [undefined, undefined, 0],\n    'TND': [undefined, undefined, 3],\n    'TOP': [undefined, 'T$'],\n    'TRL': [undefined, undefined, 0],\n    'TRY': [undefined, '‚Ç∫'],\n    'TTD': [undefined, '$'],\n    'TWD': ['NT$', '$', 2],\n    'TZS': [undefined, undefined, 0],\n    'UAH': [undefined, '‚Ç¥'],\n    'UGX': [undefined, undefined, 0],\n    'USD': ['$'],\n    'UYI': [undefined, undefined, 0],\n    'UYU': [undefined, '$'],\n    'UZS': [undefined, undefined, 0],\n    'VEF': [undefined, 'Bs'],\n    'VND': ['‚Ç´', undefined, 0],\n    'VUV': [undefined, undefined, 0],\n    'XAF': ['FCFA', undefined, 0],\n    'XCD': ['EC$', '$'],\n    'XOF': ['CFA', undefined, 0],\n    'XPF': ['CFPF', undefined, 0],\n    'YER': [undefined, undefined, 0],\n    'ZAR': [undefined, 'R'],\n    'ZMK': [undefined, undefined, 0],\n    'ZMW': [undefined, 'ZK'],\n    'ZWD': [undefined, undefined, 0]\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Format styles that can be used to represent numbers.\n * @see `getLocaleNumberFormat()`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nvar NumberFormatStyle;\n(function (NumberFormatStyle) {\n    NumberFormatStyle[NumberFormatStyle[\"Decimal\"] = 0] = \"Decimal\";\n    NumberFormatStyle[NumberFormatStyle[\"Percent\"] = 1] = \"Percent\";\n    NumberFormatStyle[NumberFormatStyle[\"Currency\"] = 2] = \"Currency\";\n    NumberFormatStyle[NumberFormatStyle[\"Scientific\"] = 3] = \"Scientific\";\n})(NumberFormatStyle || (NumberFormatStyle = {}));\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see `NgPlural`\n * @see `NgPluralCase`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi */\nvar Plural;\n(function (Plural) {\n    Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n    Plural[Plural[\"One\"] = 1] = \"One\";\n    Plural[Plural[\"Two\"] = 2] = \"Two\";\n    Plural[Plural[\"Few\"] = 3] = \"Few\";\n    Plural[Plural[\"Many\"] = 4] = \"Many\";\n    Plural[Plural[\"Other\"] = 5] = \"Other\";\n})(Plural || (Plural = {}));\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nvar FormStyle;\n(function (FormStyle) {\n    FormStyle[FormStyle[\"Format\"] = 0] = \"Format\";\n    FormStyle[FormStyle[\"Standalone\"] = 1] = \"Standalone\";\n})(FormStyle || (FormStyle = {}));\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nvar TranslationWidth;\n(function (TranslationWidth) {\n    /** 1 character for `en-US`. For example: 'S' */\n    TranslationWidth[TranslationWidth[\"Narrow\"] = 0] = \"Narrow\";\n    /** 3 characters for `en-US`. For example: 'Sun' */\n    TranslationWidth[TranslationWidth[\"Abbreviated\"] = 1] = \"Abbreviated\";\n    /** Full length for `en-US`. For example: \"Sunday\" */\n    TranslationWidth[TranslationWidth[\"Wide\"] = 2] = \"Wide\";\n    /** 2 characters for `en-US`, For example: \"Su\" */\n    TranslationWidth[TranslationWidth[\"Short\"] = 3] = \"Short\";\n})(TranslationWidth || (TranslationWidth = {}));\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see `getLocaleDateFormat()`\n * @see `getLocaleTimeFormat()``\n * @see `getLocaleDateTimeFormat()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @publicApi\n */\nvar FormatWidth;\n(function (FormatWidth) {\n    /**\n     * For `en-US`, 'M/d/yy, h:mm a'`\n     * (Example: `6/15/15, 9:03 AM`)\n     */\n    FormatWidth[FormatWidth[\"Short\"] = 0] = \"Short\";\n    /**\n     * For `en-US`, `'MMM d, y, h:mm:ss a'`\n     * (Example: `Jun 15, 2015, 9:03:01 AM`)\n     */\n    FormatWidth[FormatWidth[\"Medium\"] = 1] = \"Medium\";\n    /**\n     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n     */\n    FormatWidth[FormatWidth[\"Long\"] = 2] = \"Long\";\n    /**\n     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n     */\n    FormatWidth[FormatWidth[\"Full\"] = 3] = \"Full\";\n})(FormatWidth || (FormatWidth = {}));\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see `getLocaleNumberSymbol()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nvar NumberSymbol;\n(function (NumberSymbol) {\n    /**\n     * Decimal separator.\n     * For `en-US`, the dot character.\n     * Example : 2,345`.`67\n     */\n    NumberSymbol[NumberSymbol[\"Decimal\"] = 0] = \"Decimal\";\n    /**\n     * Grouping separator, typically for thousands.\n     * For `en-US`, the comma character.\n     * Example: 2`,`345.67\n     */\n    NumberSymbol[NumberSymbol[\"Group\"] = 1] = \"Group\";\n    /**\n     * List-item separator.\n     * Example: \"one, two, and three\"\n     */\n    NumberSymbol[NumberSymbol[\"List\"] = 2] = \"List\";\n    /**\n     * Sign for percentage (out of 100).\n     * Example: 23.4%\n     */\n    NumberSymbol[NumberSymbol[\"PercentSign\"] = 3] = \"PercentSign\";\n    /**\n     * Sign for positive numbers.\n     * Example: +23\n     */\n    NumberSymbol[NumberSymbol[\"PlusSign\"] = 4] = \"PlusSign\";\n    /**\n     * Sign for negative numbers.\n     * Example: -23\n     */\n    NumberSymbol[NumberSymbol[\"MinusSign\"] = 5] = \"MinusSign\";\n    /**\n     * Computer notation for exponential value (n times a power of 10).\n     * Example: 1.2E3\n     */\n    NumberSymbol[NumberSymbol[\"Exponential\"] = 6] = \"Exponential\";\n    /**\n     * Human-readable format of exponential.\n     * Example: 1.2x103\n     */\n    NumberSymbol[NumberSymbol[\"SuperscriptingExponent\"] = 7] = \"SuperscriptingExponent\";\n    /**\n     * Sign for permille (out of 1000).\n     * Example: 23.4‚Ä∞\n     */\n    NumberSymbol[NumberSymbol[\"PerMille\"] = 8] = \"PerMille\";\n    /**\n     * Infinity, can be used with plus and minus.\n     * Example: ‚àû, +‚àû, -‚àû\n     */\n    NumberSymbol[NumberSymbol[\"Infinity\"] = 9] = \"Infinity\";\n    /**\n     * Not a number.\n     * Example: NaN\n     */\n    NumberSymbol[NumberSymbol[\"NaN\"] = 10] = \"NaN\";\n    /**\n     * Symbol used between time units.\n     * Example: 10:52\n     */\n    NumberSymbol[NumberSymbol[\"TimeSeparator\"] = 11] = \"TimeSeparator\";\n    /**\n     * Decimal separator for currency values (fallback to `Decimal`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyDecimal\"] = 12] = \"CurrencyDecimal\";\n    /**\n     * Group separator for currency values (fallback to `Group`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyGroup\"] = 13] = \"CurrencyGroup\";\n})(NumberSymbol || (NumberSymbol = {}));\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nvar WeekDay;\n(function (WeekDay) {\n    WeekDay[WeekDay[\"Sunday\"] = 0] = \"Sunday\";\n    WeekDay[WeekDay[\"Monday\"] = 1] = \"Monday\";\n    WeekDay[WeekDay[\"Tuesday\"] = 2] = \"Tuesday\";\n    WeekDay[WeekDay[\"Wednesday\"] = 3] = \"Wednesday\";\n    WeekDay[WeekDay[\"Thursday\"] = 4] = \"Thursday\";\n    WeekDay[WeekDay[\"Friday\"] = 5] = \"Friday\";\n    WeekDay[WeekDay[\"Saturday\"] = 6] = \"Saturday\";\n})(WeekDay || (WeekDay = {}));\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleId(locale) {\n    return findLocaleData(locale)[0 /* LocaleId */];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var amPmData = [data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]];\n    var amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleDayNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var daysData = [data[3 /* DaysFormat */], data[4 /* DaysStandalone */]];\n    var days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleMonthNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var monthsData = [data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]];\n    var months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleEraNames(locale, width) {\n    var data = findLocaleData(locale);\n    var erasData = data[7 /* Eras */];\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleFirstDayOfWeek(locale) {\n    var data = findLocaleData(locale);\n    return data[8 /* FirstDayOfWeek */];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleWeekEndRange(locale) {\n    var data = findLocaleData(locale);\n    return data[9 /* WeekendRange */];\n}\n/**\n * Retrieves a localized date-value formating string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formating string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleDateFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[10 /* DateFormat */], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n\n * @publicApi\n */\nfunction getLocaleTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[11 /* TimeFormat */], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleDateTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    var dateTimeFormatData = data[12 /* DateTimeFormat */];\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see `NumberSymbol`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleNumberSymbol(locale, symbol) {\n    var data = findLocaleData(locale);\n    var res = data[13 /* NumberSymbols */][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¬§ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see `NumberFormatStyle`\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleNumberFormat(locale, type) {\n    var data = findLocaleData(locale);\n    return data[14 /* NumberFormats */][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleCurrencySymbol(locale) {\n    var data = findLocaleData(locale);\n    return data[15 /* CurrencySymbol */] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleCurrencyName(locale) {\n    var data = findLocaleData(locale);\n    return data[16 /* CurrencyName */] || null;\n}\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nfunction getLocaleCurrencies(locale) {\n    var data = findLocaleData(locale);\n    return data[17 /* Currencies */];\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocalePluralCase(locale) {\n    var data = findLocaleData(locale);\n    return data[18 /* PluralCase */];\n}\nfunction checkFullData(data) {\n    if (!data[19 /* ExtraData */]) {\n        throw new Error(\"Missing extra locale data for the locale \\\"\" + data[0 /* LocaleId */] + \"\\\". Use \\\"registerLocaleData\\\" to load new data. See the \\\"I18n guide\\\" on angular.io to know more.\");\n    }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see `getLocaleExtraDayPeriods()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleExtraDayPeriodRules(locale) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var rules = data[19 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map(function (rule) {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    });\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see `getLocaleExtraDayPeriodRules()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var dayPeriodsData = [\n        data[19 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\n        data[19 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\n    ];\n    var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLastDefinedValue(data, index) {\n    for (var i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time) {\n    var _a = __read(time.split(':'), 2), h = _a[0], m = _a[1];\n    return { hours: +h, minutes: +m };\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction findLocaleData(locale) {\n    var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    var match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    var parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.0\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getCurrencySymbol(code, format, locale) {\n    if (locale === void 0) { locale = 'en'; }\n    var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    var symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\nvar DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getNumberOfCurrencyDigits(code) {\n    var digits;\n    var currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nvar NAMED_FORMATS = {};\nvar DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\nvar ZoneWidth;\n(function (ZoneWidth) {\n    ZoneWidth[ZoneWidth[\"Short\"] = 0] = \"Short\";\n    ZoneWidth[ZoneWidth[\"ShortGMT\"] = 1] = \"ShortGMT\";\n    ZoneWidth[ZoneWidth[\"Long\"] = 2] = \"Long\";\n    ZoneWidth[ZoneWidth[\"Extended\"] = 3] = \"Extended\";\n})(ZoneWidth || (ZoneWidth = {}));\nvar DateType;\n(function (DateType) {\n    DateType[DateType[\"FullYear\"] = 0] = \"FullYear\";\n    DateType[DateType[\"Month\"] = 1] = \"Month\";\n    DateType[DateType[\"Date\"] = 2] = \"Date\";\n    DateType[DateType[\"Hours\"] = 3] = \"Hours\";\n    DateType[DateType[\"Minutes\"] = 4] = \"Minutes\";\n    DateType[DateType[\"Seconds\"] = 5] = \"Seconds\";\n    DateType[DateType[\"FractionalSeconds\"] = 6] = \"FractionalSeconds\";\n    DateType[DateType[\"Day\"] = 7] = \"Day\";\n})(DateType || (DateType = {}));\nvar TranslationType;\n(function (TranslationType) {\n    TranslationType[TranslationType[\"DayPeriods\"] = 0] = \"DayPeriods\";\n    TranslationType[TranslationType[\"Days\"] = 1] = \"Days\";\n    TranslationType[TranslationType[\"Months\"] = 2] = \"Months\";\n    TranslationType[TranslationType[\"Eras\"] = 3] = \"Eras\";\n})(TranslationType || (TranslationType = {}));\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param format The date-time components to include. See `DatePipe` for details.\n * @param locale A locale code for the locale format rules to use.\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),\n * or a standard UTC/GMT or continental US time zone abbreviation.\n * If not specified, uses host system settings.\n *\n * @returns The formatted date string.\n *\n * @see `DatePipe`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction formatDate(value, format, locale, timezone) {\n    var date = toDate(value);\n    var namedFormat = getNamedFormat(locale, format);\n    format = namedFormat || format;\n    var parts = [];\n    var match;\n    while (format) {\n        match = DATE_FORMATS_SPLIT.exec(format);\n        if (match) {\n            parts = parts.concat(match.slice(1));\n            var part = parts.pop();\n            if (!part) {\n                break;\n            }\n            format = part;\n        }\n        else {\n            parts.push(format);\n            break;\n        }\n    }\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n        date = convertTimezoneToLocal(date, timezone, true);\n    }\n    var text = '';\n    parts.forEach(function (value) {\n        var dateFormatter = getDateFormatter(value);\n        text += dateFormatter ?\n            dateFormatter(date, locale, dateTimezoneOffset) :\n            value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    });\n    return text;\n}\nfunction getNamedFormat(locale, format) {\n    var localeId = getLocaleId(locale);\n    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n    if (NAMED_FORMATS[localeId][format]) {\n        return NAMED_FORMATS[localeId][format];\n    }\n    var formatValue = '';\n    switch (format) {\n        case 'shortDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n            break;\n        case 'shortTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n            break;\n        case 'short':\n            var shortTime = getNamedFormat(locale, 'shortTime');\n            var shortDate = getNamedFormat(locale, 'shortDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n            break;\n        case 'medium':\n            var mediumTime = getNamedFormat(locale, 'mediumTime');\n            var mediumDate = getNamedFormat(locale, 'mediumDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n            break;\n        case 'long':\n            var longTime = getNamedFormat(locale, 'longTime');\n            var longDate = getNamedFormat(locale, 'longDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n            break;\n        case 'full':\n            var fullTime = getNamedFormat(locale, 'fullTime');\n            var fullDate = getNamedFormat(locale, 'fullDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n            break;\n    }\n    if (formatValue) {\n        NAMED_FORMATS[localeId][format] = formatValue;\n    }\n    return formatValue;\n}\nfunction formatDateTime(str, opt_values) {\n    if (opt_values) {\n        str = str.replace(/\\{([^}]+)}/g, function (match, key) {\n            return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n        });\n    }\n    return str;\n}\nfunction padNumber(num, digits, minusSign, trim, negWrap) {\n    if (minusSign === void 0) { minusSign = '-'; }\n    var neg = '';\n    if (num < 0 || (negWrap && num <= 0)) {\n        if (negWrap) {\n            num = -num + 1;\n        }\n        else {\n            num = -num;\n            neg = minusSign;\n        }\n    }\n    var strNum = String(num);\n    while (strNum.length < digits) {\n        strNum = '0' + strNum;\n    }\n    if (trim) {\n        strNum = strNum.substr(strNum.length - digits);\n    }\n    return neg + strNum;\n}\nfunction formatFractionalSeconds(milliseconds, digits) {\n    var strMs = padNumber(milliseconds, 3);\n    return strMs.substr(0, digits);\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(name, size, offset, trim, negWrap) {\n    if (offset === void 0) { offset = 0; }\n    if (trim === void 0) { trim = false; }\n    if (negWrap === void 0) { negWrap = false; }\n    return function (date, locale) {\n        var part = getDatePart(name, date);\n        if (offset > 0 || part > -offset) {\n            part += offset;\n        }\n        if (name === DateType.Hours) {\n            if (part === 0 && offset === -12) {\n                part = 12;\n            }\n        }\n        else if (name === DateType.FractionalSeconds) {\n            return formatFractionalSeconds(part, size);\n        }\n        var localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        return padNumber(part, size, localeMinus, trim, negWrap);\n    };\n}\nfunction getDatePart(part, date) {\n    switch (part) {\n        case DateType.FullYear:\n            return date.getFullYear();\n        case DateType.Month:\n            return date.getMonth();\n        case DateType.Date:\n            return date.getDate();\n        case DateType.Hours:\n            return date.getHours();\n        case DateType.Minutes:\n            return date.getMinutes();\n        case DateType.Seconds:\n            return date.getSeconds();\n        case DateType.FractionalSeconds:\n            return date.getMilliseconds();\n        case DateType.Day:\n            return date.getDay();\n        default:\n            throw new Error(\"Unknown DateType value \\\"\" + part + \"\\\".\");\n    }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(name, width, form, extended) {\n    if (form === void 0) { form = FormStyle.Format; }\n    if (extended === void 0) { extended = false; }\n    return function (date, locale) {\n        return getDateTranslation(date, locale, name, width, form, extended);\n    };\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(date, locale, name, width, form, extended) {\n    switch (name) {\n        case TranslationType.Months:\n            return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n        case TranslationType.Days:\n            return getLocaleDayNames(locale, form, width)[date.getDay()];\n        case TranslationType.DayPeriods:\n            var currentHours_1 = date.getHours();\n            var currentMinutes_1 = date.getMinutes();\n            if (extended) {\n                var rules = getLocaleExtraDayPeriodRules(locale);\n                var dayPeriods_1 = getLocaleExtraDayPeriods(locale, form, width);\n                var result_1;\n                rules.forEach(function (rule, index) {\n                    if (Array.isArray(rule)) {\n                        // morning, afternoon, evening, night\n                        var _a = rule[0], hoursFrom = _a.hours, minutesFrom = _a.minutes;\n                        var _b = rule[1], hoursTo = _b.hours, minutesTo = _b.minutes;\n                        if (currentHours_1 >= hoursFrom && currentMinutes_1 >= minutesFrom &&\n                            (currentHours_1 < hoursTo ||\n                                (currentHours_1 === hoursTo && currentMinutes_1 < minutesTo))) {\n                            result_1 = dayPeriods_1[index];\n                        }\n                    }\n                    else { // noon or midnight\n                        var hours = rule.hours, minutes = rule.minutes;\n                        if (hours === currentHours_1 && minutes === currentMinutes_1) {\n                            result_1 = dayPeriods_1[index];\n                        }\n                    }\n                });\n                if (result_1) {\n                    return result_1;\n                }\n            }\n            // if no rules for the day periods, we use am/pm by default\n            return getLocaleDayPeriods(locale, form, width)[currentHours_1 < 12 ? 0 : 1];\n        case TranslationType.Eras:\n            return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            var unexpected = name;\n            throw new Error(\"unexpected translation type \" + unexpected);\n    }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width) {\n    return function (date, locale, offset) {\n        var zone = -1 * offset;\n        var minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n        switch (width) {\n            case ZoneWidth.Short:\n                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.ShortGMT:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n            case ZoneWidth.Long:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.Extended:\n                if (offset === 0) {\n                    return 'Z';\n                }\n                else {\n                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                        padNumber(Math.abs(zone % 60), 2, minusSign);\n                }\n            default:\n                throw new Error(\"Unknown zone width \\\"\" + width + \"\\\"\");\n        }\n    };\n}\nvar JANUARY = 0;\nvar THURSDAY = 4;\nfunction getFirstThursdayOfYear(year) {\n    var firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\nfunction weekGetter(size, monthBased) {\n    if (monthBased === void 0) { monthBased = false; }\n    return function (date, locale) {\n        var result;\n        if (monthBased) {\n            var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n            var today = date.getDate();\n            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n        }\n        else {\n            var firstThurs = getFirstThursdayOfYear(date.getFullYear());\n            var thisThurs = getThursdayThisWeek(date);\n            var diff = thisThurs.getTime() - firstThurs.getTime();\n            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n        }\n        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    };\n}\nvar DATE_FORMATS = {};\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format) {\n    if (DATE_FORMATS[format]) {\n        return DATE_FORMATS[format];\n    }\n    var formatter;\n    switch (format) {\n        // Era name (AD/BC)\n        case 'G':\n        case 'GG':\n        case 'GGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n            break;\n        case 'GGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n            break;\n        case 'GGGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n            break;\n        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n        case 'y':\n            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n            break;\n        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yy':\n            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n            break;\n        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yyy':\n            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n            break;\n        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n        case 'yyyy':\n            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n            break;\n        // Month of the year (1-12), numeric\n        case 'M':\n        case 'L':\n            formatter = dateGetter(DateType.Month, 1, 1);\n            break;\n        case 'MM':\n        case 'LL':\n            formatter = dateGetter(DateType.Month, 2, 1);\n            break;\n        // Month of the year (January, ...), string, format\n        case 'MMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n            break;\n        case 'MMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n            break;\n        case 'MMMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n            break;\n        // Month of the year (January, ...), string, standalone\n        case 'LLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n            break;\n        case 'LLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n            break;\n        case 'LLLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n            break;\n        // Week of the year (1, ... 52)\n        case 'w':\n            formatter = weekGetter(1);\n            break;\n        case 'ww':\n            formatter = weekGetter(2);\n            break;\n        // Week of the month (1, ...)\n        case 'W':\n            formatter = weekGetter(1, true);\n            break;\n        // Day of the month (1-31)\n        case 'd':\n            formatter = dateGetter(DateType.Date, 1);\n            break;\n        case 'dd':\n            formatter = dateGetter(DateType.Date, 2);\n            break;\n        // Day of the Week\n        case 'E':\n        case 'EE':\n        case 'EEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n            break;\n        case 'EEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n            break;\n        case 'EEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n            break;\n        case 'EEEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n            break;\n        // Generic period of the day (am-pm)\n        case 'a':\n        case 'aa':\n        case 'aaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n            break;\n        case 'aaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n            break;\n        case 'aaaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n            break;\n        // Extended period of the day (midnight, at night, ...), standalone\n        case 'b':\n        case 'bb':\n        case 'bbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n            break;\n        case 'bbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n            break;\n        case 'bbbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n            break;\n        // Extended period of the day (midnight, night, ...), standalone\n        case 'B':\n        case 'BB':\n        case 'BBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n            break;\n        case 'BBBB':\n            formatter =\n                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n            break;\n        case 'BBBBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n            break;\n        // Hour in AM/PM, (1-12)\n        case 'h':\n            formatter = dateGetter(DateType.Hours, 1, -12);\n            break;\n        case 'hh':\n            formatter = dateGetter(DateType.Hours, 2, -12);\n            break;\n        // Hour of the day (0-23)\n        case 'H':\n            formatter = dateGetter(DateType.Hours, 1);\n            break;\n        // Hour in day, padded (00-23)\n        case 'HH':\n            formatter = dateGetter(DateType.Hours, 2);\n            break;\n        // Minute of the hour (0-59)\n        case 'm':\n            formatter = dateGetter(DateType.Minutes, 1);\n            break;\n        case 'mm':\n            formatter = dateGetter(DateType.Minutes, 2);\n            break;\n        // Second of the minute (0-59)\n        case 's':\n            formatter = dateGetter(DateType.Seconds, 1);\n            break;\n        case 'ss':\n            formatter = dateGetter(DateType.Seconds, 2);\n            break;\n        // Fractional second\n        case 'S':\n            formatter = dateGetter(DateType.FractionalSeconds, 1);\n            break;\n        case 'SS':\n            formatter = dateGetter(DateType.FractionalSeconds, 2);\n            break;\n        case 'SSS':\n            formatter = dateGetter(DateType.FractionalSeconds, 3);\n            break;\n        // Timezone ISO8601 short format (-0430)\n        case 'Z':\n        case 'ZZ':\n        case 'ZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Short);\n            break;\n        // Timezone ISO8601 extended format (-04:30)\n        case 'ZZZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Extended);\n            break;\n        // Timezone GMT short format (GMT+4)\n        case 'O':\n        case 'OO':\n        case 'OOO':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'z':\n        case 'zz':\n        case 'zzz':\n            formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n            break;\n        // Timezone GMT long format (GMT+0430)\n        case 'OOOO':\n        case 'ZZZZ':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'zzzz':\n            formatter = timeZoneGetter(ZoneWidth.Long);\n            break;\n        default:\n            return null;\n    }\n    DATE_FORMATS[format] = formatter;\n    return formatter;\n}\nfunction timezoneToOffset(timezone, fallback) {\n    // Support: IE 9-11 only, Edge 13-15+\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\n    timezone = timezone.replace(/:/g, '');\n    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\nfunction addDateMinutes(date, minutes) {\n    date = new Date(date.getTime());\n    date.setMinutes(date.getMinutes() + minutes);\n    return date;\n}\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n    var reverseValue = reverse ? -1 : 1;\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nfunction toDate(value) {\n    if (isDate(value)) {\n        return value;\n    }\n    if (typeof value === 'number' && !isNaN(value)) {\n        return new Date(value);\n    }\n    if (typeof value === 'string') {\n        value = value.trim();\n        var parsedNb = parseFloat(value);\n        // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n        if (!isNaN(value - parsedNb)) {\n            return new Date(parsedNb);\n        }\n        if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n            before Date creation to avoid time offset and errors in the new Date.\n            If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n            date, some browsers (e.g. IE 9) will throw an invalid Date error.\n            If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n            is applied.\n            Note: ISO months are 0 for January, 1 for February, ... */\n            var _a = __read(value.split('-').map(function (val) { return +val; }), 3), y = _a[0], m = _a[1], d = _a[2];\n            return new Date(y, m - 1, d);\n        }\n        var match = void 0;\n        if (match = value.match(ISO8601_DATE_REGEX)) {\n            return isoStringToDate(match);\n        }\n    }\n    var date = new Date(value);\n    if (!isDate(date)) {\n        throw new Error(\"Unable to convert \\\"\" + value + \"\\\" into a date\");\n    }\n    return date;\n}\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nfunction isoStringToDate(match) {\n    var date = new Date(0);\n    var tzHour = 0;\n    var tzMin = 0;\n    // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n    var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n    var timeSetter = match[8] ? date.setUTCHours : date.setHours;\n    // if there is a timezone defined like \"+01:00\" or \"+0100\"\n    if (match[9]) {\n        tzHour = Number(match[9] + match[10]);\n        tzMin = Number(match[9] + match[11]);\n    }\n    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n    var h = Number(match[4] || 0) - tzHour;\n    var m = Number(match[5] || 0) - tzMin;\n    var s = Number(match[6] || 0);\n    var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n    timeSetter.call(date, h, m, s, ms);\n    return date;\n}\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nvar MAX_DIGITS = 22;\nvar DECIMAL_SEP = '.';\nvar ZERO_CHAR = '0';\nvar PATTERN_SEP = ';';\nvar GROUP_SEP = ',';\nvar DIGIT_CHAR = '#';\nvar CURRENCY_CHAR = '¬§';\nvar PERCENT_CHAR = '%';\n/**\n * Transforms a number to a locale string based on a style and a format.\n */\nfunction formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent) {\n    if (isPercent === void 0) { isPercent = false; }\n    var formattedText = '';\n    var isZero = false;\n    if (!isFinite(value)) {\n        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n    }\n    else {\n        var parsedNumber = parseNumber(value);\n        if (isPercent) {\n            parsedNumber = toPercent(parsedNumber);\n        }\n        var minInt = pattern.minInt;\n        var minFraction = pattern.minFrac;\n        var maxFraction = pattern.maxFrac;\n        if (digitsInfo) {\n            var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(digitsInfo + \" is not a valid digit info\");\n            }\n            var minIntPart = parts[1];\n            var minFractionPart = parts[3];\n            var maxFractionPart = parts[5];\n            if (minIntPart != null) {\n                minInt = parseIntAutoRadix(minIntPart);\n            }\n            if (minFractionPart != null) {\n                minFraction = parseIntAutoRadix(minFractionPart);\n            }\n            if (maxFractionPart != null) {\n                maxFraction = parseIntAutoRadix(maxFractionPart);\n            }\n            else if (minFractionPart != null && minFraction > maxFraction) {\n                maxFraction = minFraction;\n            }\n        }\n        roundNumber(parsedNumber, minFraction, maxFraction);\n        var digits = parsedNumber.digits;\n        var integerLen = parsedNumber.integerLen;\n        var exponent = parsedNumber.exponent;\n        var decimals = [];\n        isZero = digits.every(function (d) { return !d; });\n        // pad zeros for small numbers\n        for (; integerLen < minInt; integerLen++) {\n            digits.unshift(0);\n        }\n        // pad zeros for small numbers\n        for (; integerLen < 0; integerLen++) {\n            digits.unshift(0);\n        }\n        // extract decimals digits\n        if (integerLen > 0) {\n            decimals = digits.splice(integerLen, digits.length);\n        }\n        else {\n            decimals = digits;\n            digits = [0];\n        }\n        // format the integer digits with grouping separators\n        var groups = [];\n        if (digits.length >= pattern.lgSize) {\n            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n        }\n        while (digits.length > pattern.gSize) {\n            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n        }\n        if (digits.length) {\n            groups.unshift(digits.join(''));\n        }\n        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n        // append the decimal digits\n        if (decimals.length) {\n            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n        }\n        if (exponent) {\n            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n        }\n    }\n    if (value < 0 && !isZero) {\n        formattedText = pattern.negPre + formattedText + pattern.negSuf;\n    }\n    else {\n        formattedText = pattern.posPre + formattedText + pattern.posSuf;\n    }\n    return formattedText;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code to use in the result string, such as `USD` for the US dollar and `EUR` for the euro.\n * @param digitInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted currency value.\n *\n * @see `formatNumber()`\n * @see `DecimalPipe`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction formatCurrency(value, locale, currency, currencyCode, digitsInfo) {\n    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);\n    pattern.maxFrac = pattern.minFrac;\n    var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n    return res\n        .replace(CURRENCY_CHAR, currency)\n        // if we have 2 time the currency character, the second one is ignored\n        .replace(CURRENCY_CHAR, '');\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted percentage value.\n *\n * @see `formatNumber()`\n * @see `DecimalPipe`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @publicApi\n *\n */\nfunction formatPercent(value, locale, digitsInfo) {\n    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted text string.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction formatNumber(value, locale, digitsInfo) {\n    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\nfunction parseNumberFormat(format, minusSign) {\n    if (minusSign === void 0) { minusSign = '-'; }\n    var p = {\n        minInt: 1,\n        minFrac: 0,\n        maxFrac: 0,\n        posPre: '',\n        posSuf: '',\n        negPre: '',\n        negSuf: '',\n        gSize: 0,\n        lgSize: 0\n    };\n    var patternParts = format.split(PATTERN_SEP);\n    var positive = patternParts[0];\n    var negative = patternParts[1];\n    var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n        positive.split(DECIMAL_SEP) :\n        [\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n        ], integer = positiveParts[0], fraction = positiveParts[1] || '';\n    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n    for (var i = 0; i < fraction.length; i++) {\n        var ch = fraction.charAt(i);\n        if (ch === ZERO_CHAR) {\n            p.minFrac = p.maxFrac = i + 1;\n        }\n        else if (ch === DIGIT_CHAR) {\n            p.maxFrac = i + 1;\n        }\n        else {\n            p.posSuf += ch;\n        }\n    }\n    var groups = integer.split(GROUP_SEP);\n    p.gSize = groups[1] ? groups[1].length : 0;\n    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n    if (negative) {\n        var trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);\n        p.negPre = negative.substr(0, pos).replace(/'/g, '');\n        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n    }\n    else {\n        p.negPre = minusSign + p.posPre;\n        p.negSuf = p.posSuf;\n    }\n    return p;\n}\n// Transforms a parsed number into a percentage by multiplying it by 100\nfunction toPercent(parsedNumber) {\n    // if the number is 0, don't do anything\n    if (parsedNumber.digits[0] === 0) {\n        return parsedNumber;\n    }\n    // Getting the current number of decimals\n    var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n    if (parsedNumber.exponent) {\n        parsedNumber.exponent += 2;\n    }\n    else {\n        if (fractionLen === 0) {\n            parsedNumber.digits.push(0, 0);\n        }\n        else if (fractionLen === 1) {\n            parsedNumber.digits.push(0);\n        }\n        parsedNumber.integerLen += 2;\n    }\n    return parsedNumber;\n}\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n */\nfunction parseNumber(num) {\n    var numStr = Math.abs(num) + '';\n    var exponent = 0, digits, integerLen;\n    var i, j, zeros;\n    // Decimal point?\n    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n        numStr = numStr.replace(DECIMAL_SEP, '');\n    }\n    // Exponential form?\n    if ((i = numStr.search(/e/i)) > 0) {\n        // Work out the exponent.\n        if (integerLen < 0)\n            integerLen = i;\n        integerLen += +numStr.slice(i + 1);\n        numStr = numStr.substring(0, i);\n    }\n    else if (integerLen < 0) {\n        // There was no decimal point or exponent so it is an integer.\n        integerLen = numStr.length;\n    }\n    // Count the number of leading zeros.\n    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n    }\n    if (i === (zeros = numStr.length)) {\n        // The digits are all zero.\n        digits = [0];\n        integerLen = 1;\n    }\n    else {\n        // Count the number of trailing zeros\n        zeros--;\n        while (numStr.charAt(zeros) === ZERO_CHAR)\n            zeros--;\n        // Trailing zeros are insignificant so ignore them\n        integerLen -= i;\n        digits = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for (j = 0; i <= zeros; i++, j++) {\n            digits[j] = Number(numStr.charAt(i));\n        }\n    }\n    // If the number overflows the maximum allowed digits then use an exponent.\n    if (integerLen > MAX_DIGITS) {\n        digits = digits.splice(0, MAX_DIGITS - 1);\n        exponent = integerLen - 1;\n        integerLen = 1;\n    }\n    return { digits: digits, exponent: exponent, integerLen: integerLen };\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\n    if (minFrac > maxFrac) {\n        throw new Error(\"The minimum number of digits after fraction (\" + minFrac + \") is higher than the maximum (\" + maxFrac + \").\");\n    }\n    var digits = parsedNumber.digits;\n    var fractionLen = digits.length - parsedNumber.integerLen;\n    var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n    // The index of the digit to where rounding is to occur\n    var roundAt = fractionSize + parsedNumber.integerLen;\n    var digit = digits[roundAt];\n    if (roundAt > 0) {\n        // Drop fractional digits beyond `roundAt`\n        digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n        // Set non-fractional digits beyond `roundAt` to 0\n        for (var j = roundAt; j < digits.length; j++) {\n            digits[j] = 0;\n        }\n    }\n    else {\n        // We rounded to zero so reset the parsedNumber\n        fractionLen = Math.max(0, fractionLen);\n        parsedNumber.integerLen = 1;\n        digits.length = Math.max(1, roundAt = fractionSize + 1);\n        digits[0] = 0;\n        for (var i = 1; i < roundAt; i++)\n            digits[i] = 0;\n    }\n    if (digit >= 5) {\n        if (roundAt - 1 < 0) {\n            for (var k = 0; k > roundAt; k--) {\n                digits.unshift(0);\n                parsedNumber.integerLen++;\n            }\n            digits.unshift(1);\n            parsedNumber.integerLen++;\n        }\n        else {\n            digits[roundAt - 1]++;\n        }\n    }\n    // Pad out with zeros to get the required fraction length\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)\n        digits.push(0);\n    var dropTrailingZeros = fractionSize !== 0;\n    // Minimal length = nb of decimals required + current nb of integers\n    // Any number besides that is optional and can be removed if it's a trailing 0\n    var minLen = minFrac + parsedNumber.integerLen;\n    // Do any carrying, e.g. a digit was rounded up to 10\n    var carry = digits.reduceRight(function (carry, d, i, digits) {\n        d = d + carry;\n        digits[i] = d < 10 ? d : d - 10; // d % 10\n        if (dropTrailingZeros) {\n            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n            if (digits[i] === 0 && i >= minLen) {\n                digits.pop();\n            }\n            else {\n                dropTrailingZeros = false;\n            }\n        }\n        return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n    }, 0);\n    if (carry) {\n        digits.unshift(carry);\n        parsedNumber.integerLen++;\n    }\n}\nfunction parseIntAutoRadix(text) {\n    var result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated from v5\n */\nvar DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * @publicApi\n */\nvar NgLocalization = /** @class */ (function () {\n    function NgLocalization() {\n    }\n    return NgLocalization;\n}());\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\n    var key = \"=\" + value;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(\"No plural message found for value \\\"\" + value + \"\\\"\");\n}\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\nvar NgLocaleLocalization = /** @class */ (function (_super) {\n    __extends(NgLocaleLocalization, _super);\n    function NgLocaleLocalization(locale, \n    /** @deprecated from v5 */\n    deprecatedPluralFn) {\n        var _this = _super.call(this) || this;\n        _this.locale = locale;\n        _this.deprecatedPluralFn = deprecatedPluralFn;\n        return _this;\n    }\n    NgLocaleLocalization.prototype.getPluralCategory = function (value, locale) {\n        var plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    };\n    NgLocaleLocalization = __decorate([\n        Injectable(),\n        __param(0, Inject(LOCALE_ID)),\n        __param(1, Optional()), __param(1, Inject(DEPRECATED_PLURAL_FN)),\n        __metadata(\"design:paramtypes\", [String, Object])\n    ], NgLocaleLocalization);\n    return NgLocaleLocalization;\n}(NgLocalization));\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @publicApi\n */\nfunction getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt(nLike, 10);\n    }\n    var n = nLike;\n    var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    var i = Math.floor(Math.abs(n));\n    var v = nDecimal.length;\n    var f = parseInt(nDecimal, 10);\n    var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    var lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required‚Äîgeneral plural form ‚Äî also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction parseCookieValue(cookieStr, name) {\n    var e_1, _a;\n    name = encodeURIComponent(name);\n    try {\n        for (var _b = __values(cookieStr.split(';')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var cookie = _c.value;\n            var eqIndex = cookie.indexOf('=');\n            var _d = __read(eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], 2), cookieName = _d[0], cookieValue = _d[1];\n            if (cookieName.trim() === name) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to diff and convert ngStyle/ngClass instructions into [style] and [class] bindings.\n *\n * ngStyle and ngClass both accept various forms of input and behave differently than that\n * of how [style] and [class] behave in Angular.\n *\n * The differences are:\n *  - ngStyle and ngClass both **watch** their binding values for changes each time CD runs\n *    while [style] and [class] bindings do not (they check for identity changes)\n *  - ngStyle allows for unit-based keys (e.g. `{'max-width.px':value}`) and [style] does not\n *  - ngClass supports arrays of class values and [class] only accepts map and string values\n *  - ngClass allows for multiple className keys (space-separated) within an array or map\n *     (as the * key) while [class] only accepts a simple key/value map object\n *\n * Having Angular understand and adapt to all the different forms of behavior is complicated\n * and unnecessary. Instead, ngClass and ngStyle should have their input values be converted\n * into something that the core-level [style] and [class] bindings understand.\n *\n * This [StylingDiffer] class handles this conversion by creating a new input value each time\n * the inner representation of the binding value have changed.\n *\n * ## Why do we care about ngStyle/ngClass?\n * The styling algorithm code (documented inside of `render3/interfaces/styling.ts`) needs to\n * respect and understand the styling values emitted through ngStyle and ngClass (when they\n * are present and used in a template).\n *\n * Instead of having these directives manage styling on their own, they should be included\n * into the Angular styling algorithm that exists for [style] and [class] bindings.\n *\n * Here's why:\n *\n * - If ngStyle/ngClass is used in combination with [style]/[class] bindings then the\n *   styles and classes would fall out of sync and be applied and updated at\n *   inconsistent times\n * - Both ngClass/ngStyle do not respect [class.name] and [style.prop] bindings\n *   (they will write over them given the right combination of events)\n *\n *   ```\n *   <!-- if `w1` is updated then it will always override `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w1` wins -->\n *   <div [ngStyle]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *\n *   <!-- if `w1` is updated then it will always lose to `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w2` wins -->\n *   <div [style]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *   ```\n * - ngClass/ngStyle were written as a directives and made use of maps, closures and other\n *   expensive data structures which were evaluated each time CD runs\n */\nvar StylingDiffer = /** @class */ (function () {\n    function StylingDiffer(_name, _options) {\n        this._name = _name;\n        this._options = _options;\n        this.value = null;\n        this._lastSetValue = null;\n        this._lastSetValueType = 0 /* Null */;\n        this._lastSetValueIdentityChange = false;\n    }\n    /**\n     * Sets (updates) the styling value within the differ.\n     *\n     * Only when `hasValueChanged` is called then this new value will be evaluted\n     * and checked against the previous value.\n     *\n     * @param value the new styling value provided from the ngClass/ngStyle binding\n     */\n    StylingDiffer.prototype.setValue = function (value) {\n        if (Array.isArray(value)) {\n            this._lastSetValueType = 4 /* Array */;\n        }\n        else if (value instanceof Set) {\n            this._lastSetValueType = 8 /* Set */;\n        }\n        else if (value && typeof value === 'string') {\n            if (!(this._options & 4 /* AllowStringValue */)) {\n                throw new Error(this._name + ' string values are not allowed');\n            }\n            this._lastSetValueType = 1 /* String */;\n        }\n        else {\n            this._lastSetValueType = value ? 2 /* Map */ : 0 /* Null */;\n        }\n        this._lastSetValueIdentityChange = true;\n        this._lastSetValue = value || null;\n    };\n    /**\n     * Determines whether or not the value has changed.\n     *\n     * This function can be called right after `setValue()` is called, but it can also be\n     * called incase the existing value (if it's a collection) changes internally. If the\n     * value is indeed a collection it will do the necessary diffing work and produce a\n     * new object value as assign that to `value`.\n     *\n     * @returns whether or not the value has changed in some way.\n     */\n    StylingDiffer.prototype.hasValueChanged = function () {\n        var valueHasChanged = this._lastSetValueIdentityChange;\n        if (!valueHasChanged && !(this._lastSetValueType & 14 /* Collection */))\n            return false;\n        var finalValue = null;\n        var trimValues = (this._options & 1 /* TrimProperties */) ? true : false;\n        var parseOutUnits = (this._options & 8 /* AllowUnits */) ? true : false;\n        var allowSubKeys = (this._options & 2 /* AllowSubKeys */) ? true : false;\n        switch (this._lastSetValueType) {\n            // case 1: [input]=\"string\"\n            case 1 /* String */:\n                var tokens = this._lastSetValue.split(/\\s+/g);\n                if (this._options & 16 /* ForceAsMap */) {\n                    finalValue = {};\n                    tokens.forEach(function (token, i) { return finalValue[token] = true; });\n                }\n                else {\n                    finalValue = tokens.reduce(function (str, token, i) { return str + (i ? ' ' : '') + token; });\n                }\n                break;\n            // case 2: [input]=\"{key:value}\"\n            case 2 /* Map */:\n                var map = this._lastSetValue;\n                var keys = Object.keys(map);\n                if (!valueHasChanged) {\n                    if (this.value) {\n                        // we know that the classExp value exists and that it is\n                        // a map (otherwise an identity change would have occurred)\n                        valueHasChanged = mapHasChanged(keys, this.value, map);\n                    }\n                    else {\n                        valueHasChanged = true;\n                    }\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, map, keys);\n                }\n                break;\n            // case 3a: [input]=\"[str1, str2, ...]\"\n            // case 3b: [input]=\"Set\"\n            case 4 /* Array */:\n            case 8 /* Set */:\n                var values = Array.from(this._lastSetValue);\n                if (!valueHasChanged) {\n                    var keys_1 = Object.keys(this.value);\n                    valueHasChanged = !arrayEqualsArray(keys_1, values);\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, values);\n                }\n                break;\n            // case 4: [input]=\"null|undefined\"\n            default:\n                finalValue = null;\n                break;\n        }\n        if (valueHasChanged) {\n            this.value = finalValue;\n        }\n        return valueHasChanged;\n    };\n    return StylingDiffer;\n}());\n/**\n * builds and returns a map based on the values input value\n *\n * If the `keys` param is provided then the `values` param is treated as a\n * string map. Otherwise `values` is treated as a string array.\n */\nfunction bulidMapFromValues(errorPrefix, trim, parseOutUnits, allowSubKeys, values, keys) {\n    var map = {};\n    if (keys) {\n        // case 1: map\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            key = trim ? key.trim() : key;\n            var value = values[key];\n            setMapValues(map, key, value, parseOutUnits, allowSubKeys);\n        }\n    }\n    else {\n        // case 2: array\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            assertValidValue(errorPrefix, value);\n            value = trim ? value.trim() : value;\n            setMapValues(map, value, true, false, allowSubKeys);\n        }\n    }\n    return map;\n}\nfunction assertValidValue(errorPrefix, value) {\n    if (typeof value !== 'string') {\n        throw new Error(errorPrefix + \" can only toggle CSS classes expressed as strings, got \" + value);\n    }\n}\nfunction setMapValues(map, key, value, parseOutUnits, allowSubKeys) {\n    if (allowSubKeys && key.indexOf(' ') > 0) {\n        var innerKeys = key.split(/\\s+/g);\n        for (var j = 0; j < innerKeys.length; j++) {\n            setIndividualMapValue(map, innerKeys[j], value, parseOutUnits);\n        }\n    }\n    else {\n        setIndividualMapValue(map, key, value, parseOutUnits);\n    }\n}\nfunction setIndividualMapValue(map, key, value, parseOutUnits) {\n    if (parseOutUnits) {\n        var values = normalizeStyleKeyAndValue(key, value);\n        value = values.value;\n        key = values.key;\n    }\n    map[key] = value;\n}\nfunction normalizeStyleKeyAndValue(key, value) {\n    var index = key.indexOf('.');\n    if (index > 0) {\n        var unit = key.substr(index + 1); // ignore the . ([width.px]=\"'40'\" => \"40px\")\n        key = key.substring(0, index);\n        if (value != null) { // we should not convert null values to string\n            value += unit;\n        }\n    }\n    return { key: key, value: value };\n}\nfunction mapHasChanged(keys, a, b) {\n    var oldKeys = Object.keys(a);\n    var newKeys = keys;\n    // the keys are different which means the map changed\n    if (!arrayEqualsArray(oldKeys, newKeys)) {\n        return true;\n    }\n    for (var i = 0; i < newKeys.length; i++) {\n        var key = newKeys[i];\n        if (a[key] !== b[key]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction arrayEqualsArray(a, b) {\n    if (a && b) {\n        if (a.length !== b.length)\n            return false;\n        for (var i = 0; i < a.length; i++) {\n            if (b.indexOf(a[i]) === -1)\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * Used as a token for an injected service within the NgClass directive.\n *\n * NgClass behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[class]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n */\nvar NgClassImpl = /** @class */ (function () {\n    function NgClassImpl() {\n    }\n    return NgClassImpl;\n}());\nvar NgClassR2Impl = /** @class */ (function () {\n    function NgClassR2Impl(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n        this._iterableDiffers = _iterableDiffers;\n        this._keyValueDiffers = _keyValueDiffers;\n        this._ngEl = _ngEl;\n        this._renderer = _renderer;\n        this._initialClasses = [];\n    }\n    NgClassR2Impl.prototype.getValue = function () { return null; };\n    NgClassR2Impl.prototype.setClass = function (value) {\n        this._removeClasses(this._initialClasses);\n        this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n        this._applyClasses(this._initialClasses);\n        this._applyClasses(this._rawClass);\n    };\n    NgClassR2Impl.prototype.setNgClass = function (value) {\n        this._removeClasses(this._rawClass);\n        this._applyClasses(this._initialClasses);\n        this._iterableDiffer = null;\n        this._keyValueDiffer = null;\n        this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n        if (this._rawClass) {\n            if (…µisListLikeIterable(this._rawClass)) {\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n            }\n            else {\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n            }\n        }\n    };\n    NgClassR2Impl.prototype.applyChanges = function () {\n        if (this._iterableDiffer) {\n            var iterableChanges = this._iterableDiffer.diff(this._rawClass);\n            if (iterableChanges) {\n                this._applyIterableChanges(iterableChanges);\n            }\n        }\n        else if (this._keyValueDiffer) {\n            var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);\n            if (keyValueChanges) {\n                this._applyKeyValueChanges(keyValueChanges);\n            }\n        }\n    };\n    NgClassR2Impl.prototype._applyKeyValueChanges = function (changes) {\n        var _this = this;\n        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });\n        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });\n        changes.forEachRemovedItem(function (record) {\n            if (record.previousValue) {\n                _this._toggleClass(record.key, false);\n            }\n        });\n    };\n    NgClassR2Impl.prototype._applyIterableChanges = function (changes) {\n        var _this = this;\n        changes.forEachAddedItem(function (record) {\n            if (typeof record.item === 'string') {\n                _this._toggleClass(record.item, true);\n            }\n            else {\n                throw new Error(\"NgClass can only toggle CSS classes expressed as strings, got \" + …µstringify(record.item));\n            }\n        });\n        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });\n    };\n    /**\n     * Applies a collection of CSS classes to the DOM element.\n     *\n     * For argument of type Set and Array CSS class names contained in those collections are always\n     * added.\n     * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n     * for truthy and removed for falsy).\n     */\n    NgClassR2Impl.prototype._applyClasses = function (rawClassVal) {\n        var _this = this;\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, true); });\n            }\n            else {\n                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, !!rawClassVal[klass]); });\n            }\n        }\n    };\n    /**\n     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n     * purposes.\n     */\n    NgClassR2Impl.prototype._removeClasses = function (rawClassVal) {\n        var _this = this;\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, false); });\n            }\n            else {\n                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, false); });\n            }\n        }\n    };\n    NgClassR2Impl.prototype._toggleClass = function (klass, enabled) {\n        var _this = this;\n        klass = klass.trim();\n        if (klass) {\n            klass.split(/\\s+/g).forEach(function (klass) {\n                if (enabled) {\n                    _this._renderer.addClass(_this._ngEl.nativeElement, klass);\n                }\n                else {\n                    _this._renderer.removeClass(_this._ngEl.nativeElement, klass);\n                }\n            });\n        }\n    };\n    NgClassR2Impl = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [IterableDiffers, KeyValueDiffers,\n            ElementRef, Renderer2])\n    ], NgClassR2Impl);\n    return NgClassR2Impl;\n}());\nvar NgClassR3Impl = /** @class */ (function () {\n    function NgClassR3Impl() {\n        this._value = null;\n        this._ngClassDiffer = new StylingDiffer('NgClass', 1 /* TrimProperties */ |\n            2 /* AllowSubKeys */ |\n            4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer = null;\n    }\n    NgClassR3Impl.prototype.getValue = function () { return this._value; };\n    NgClassR3Impl.prototype.setClass = function (value) {\n        // early exit incase the binding gets emitted as an empty value which\n        // means there is no reason to instantiate and diff the values...\n        if (!value && !this._classStringDiffer)\n            return;\n        this._classStringDiffer = this._classStringDiffer ||\n            new StylingDiffer('class', 4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer.setValue(value);\n    };\n    NgClassR3Impl.prototype.setNgClass = function (value) {\n        this._ngClassDiffer.setValue(value);\n    };\n    NgClassR3Impl.prototype.applyChanges = function () {\n        var classChanged = this._classStringDiffer ? this._classStringDiffer.hasValueChanged() : false;\n        var ngClassChanged = this._ngClassDiffer.hasValueChanged();\n        if (classChanged || ngClassChanged) {\n            var value = this._ngClassDiffer.value;\n            if (this._classStringDiffer) {\n                var classValue = this._classStringDiffer.value;\n                if (classValue) {\n                    value = value ? __assign({}, classValue, value) : classValue;\n                }\n            }\n            this._value = value;\n        }\n    };\n    NgClassR3Impl = __decorate([\n        Injectable()\n    ], NgClassR3Impl);\n    return NgClassR3Impl;\n}());\n// the implementation for both NgStyleR2Impl and NgStyleR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\nvar NgClassImplProvider__PRE_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR2Impl\n};\nvar NgClassImplProvider__POST_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR3Impl\n};\nvar NgClassImplProvider = NgClassImplProvider__PRE_R3__;\n\n/*\n * NgClass (as well as NgStyle) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgClass will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\nvar ngClassDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nvar ngClassDirectiveDef__POST_R3__ = …µdefineDirective({\n    type: function () { },\n    selectors: null,\n    factory: function () { },\n    hostBindings: function (rf, ctx, elIndex) {\n        if (rf & 1 /* Create */) {\n            …µelementHostStyling();\n        }\n        if (rf & 2 /* Update */) {\n            …µelementHostStylingMap(ctx.getValue());\n            …µelementHostStylingApply();\n        }\n    }\n});\nvar ngClassDirectiveDef = ngClassDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgClass.\n *\n * While this is a base class that NgClass extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[class]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * @publicApi\n */\nvar NgClassBase = /** @class */ (function () {\n    function NgClassBase(_delegate) {\n        this._delegate = _delegate;\n    }\n    NgClassBase.prototype.getValue = function () { return this._delegate.getValue(); };\n    NgClassBase.ngDirectiveDef = ngClassDirectiveDef;\n    return NgClassBase;\n}());\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * @publicApi\n */\nvar NgClass = /** @class */ (function (_super) {\n    __extends(NgClass, _super);\n    function NgClass(delegate) {\n        return _super.call(this, delegate) || this;\n    }\n    Object.defineProperty(NgClass.prototype, \"klass\", {\n        set: function (value) { this._delegate.setClass(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgClass.prototype, \"ngClass\", {\n        set: function (value) {\n            this._delegate.setNgClass(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgClass.prototype.ngDoCheck = function () { this._delegate.applyChanges(); };\n    __decorate([\n        Input('class'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], NgClass.prototype, \"klass\", null);\n    __decorate([\n        Input('ngClass'),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgClass.prototype, \"ngClass\", null);\n    NgClass = __decorate([\n        Directive({ selector: '[ngClass]', providers: [NgClassImplProvider] }),\n        __metadata(\"design:paramtypes\", [NgClassImpl])\n    ], NgClass);\n    return NgClass;\n}(NgClassBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Instantiates a single {@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\nvar NgComponentOutlet = /** @class */ (function () {\n    function NgComponentOutlet(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._componentRef = null;\n        this._moduleRef = null;\n    }\n    NgComponentOutlet.prototype.ngOnChanges = function (changes) {\n        this._viewContainerRef.clear();\n        this._componentRef = null;\n        if (this.ngComponentOutlet) {\n            var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n            if (changes['ngComponentOutletNgModuleFactory']) {\n                if (this._moduleRef)\n                    this._moduleRef.destroy();\n                if (this.ngComponentOutletNgModuleFactory) {\n                    var parentModule = elInjector.get(NgModuleRef);\n                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n                }\n                else {\n                    this._moduleRef = null;\n                }\n            }\n            var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);\n        }\n    };\n    NgComponentOutlet.prototype.ngOnDestroy = function () {\n        if (this._moduleRef)\n            this._moduleRef.destroy();\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Type)\n    ], NgComponentOutlet.prototype, \"ngComponentOutlet\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Injector)\n    ], NgComponentOutlet.prototype, \"ngComponentOutletInjector\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], NgComponentOutlet.prototype, \"ngComponentOutletContent\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", NgModuleFactory)\n    ], NgComponentOutlet.prototype, \"ngComponentOutletNgModuleFactory\", void 0);\n    NgComponentOutlet = __decorate([\n        Directive({ selector: '[ngComponentOutlet]' }),\n        __metadata(\"design:paramtypes\", [ViewContainerRef])\n    ], NgComponentOutlet);\n    return NgComponentOutlet;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar NgForOfContext = /** @class */ (function () {\n    function NgForOfContext($implicit, ngForOf, index, count) {\n        this.$implicit = $implicit;\n        this.ngForOf = ngForOf;\n        this.index = index;\n        this.count = count;\n    }\n    Object.defineProperty(NgForOfContext.prototype, \"first\", {\n        get: function () { return this.index === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForOfContext.prototype, \"last\", {\n        get: function () { return this.index === this.count - 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForOfContext.prototype, \"even\", {\n        get: function () { return this.index % 2 === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForOfContext.prototype, \"odd\", {\n        get: function () { return !this.even; },\n        enumerable: true,\n        configurable: true\n    });\n    return NgForOfContext;\n}());\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-structural-directive-per-host-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For futher discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * @usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * @ngModule CommonModule\n * @publicApi\n */\nvar NgForOf = /** @class */ (function () {\n    function NgForOf(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._ngForOfDirty = true;\n        this._differ = null;\n    }\n    Object.defineProperty(NgForOf.prototype, \"ngForOf\", {\n        /**\n         * The value of the iterable expression, which can be used as a\n         * [template input variable](guide/structural-directives#template-input-variable).\n         */\n        set: function (ngForOf) {\n            this._ngForOf = ngForOf;\n            this._ngForOfDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForOf.prototype, \"ngForTrackBy\", {\n        get: function () { return this._trackByFn; },\n        /**\n         * A function that defines how to track changes for items in the iterable.\n         *\n         * When items are added, moved, or removed in the iterable,\n         * the directive must re-render the appropriate DOM nodes.\n         * To minimize churn in the DOM, only nodes that have changed\n         * are re-rendered.\n         *\n         * By default, the change detector assumes that\n         * the object instance identifies the node in the iterable.\n         * When this function is supplied, the directive uses\n         * the result of calling this function to identify the item node,\n         * rather than the identity of the object itself.\n         *\n         * The function receives two inputs,\n         * the iteration index and the node object ID.\n         */\n        set: function (fn) {\n            if (isDevMode() && fn != null && typeof fn !== 'function') {\n                // TODO(vicb): use a log service once there is a public one available\n                if (console && console.warn) {\n                    console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \". \" +\n                        \"See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.\");\n                }\n            }\n            this._trackByFn = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForOf.prototype, \"ngForTemplate\", {\n        /**\n         * A reference to the template that is stamped out for each item in the iterable.\n         * @see [template reference variable](guide/template-syntax#template-reference-variables--var-)\n         */\n        set: function (value) {\n            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n            // The current type is too restrictive; a template that just uses index, for example,\n            // should be acceptable.\n            if (value) {\n                this._template = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the changes when needed.\n     */\n    NgForOf.prototype.ngDoCheck = function () {\n        if (this._ngForOfDirty) {\n            this._ngForOfDirty = false;\n            // React on ngForOf changes only once all inputs have been initialized\n            var value = this._ngForOf;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.ngForTrackBy);\n                }\n                catch (_a) {\n                    throw new Error(\"Cannot find a differ supporting object '\" + value + \"' of type '\" + getTypeName(value) + \"'. NgFor only supports binding to Iterables such as Arrays.\");\n                }\n            }\n        }\n        if (this._differ) {\n            var changes = this._differ.diff(this._ngForOf);\n            if (changes)\n                this._applyChanges(changes);\n        }\n    };\n    NgForOf.prototype._applyChanges = function (changes) {\n        var _this = this;\n        var insertTuples = [];\n        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n            if (item.previousIndex == null) {\n                var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this._ngForOf, -1, -1), currentIndex);\n                var tuple = new RecordViewTuple(item, view);\n                insertTuples.push(tuple);\n            }\n            else if (currentIndex == null) {\n                _this._viewContainer.remove(adjustedPreviousIndex);\n            }\n            else {\n                var view = _this._viewContainer.get(adjustedPreviousIndex);\n                _this._viewContainer.move(view, currentIndex);\n                var tuple = new RecordViewTuple(item, view);\n                insertTuples.push(tuple);\n            }\n        });\n        for (var i = 0; i < insertTuples.length; i++) {\n            this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n        }\n        for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n            var viewRef = this._viewContainer.get(i);\n            viewRef.context.index = i;\n            viewRef.context.count = ilen;\n            viewRef.context.ngForOf = this._ngForOf;\n        }\n        changes.forEachIdentityChange(function (record) {\n            var viewRef = _this._viewContainer.get(record.currentIndex);\n            viewRef.context.$implicit = record.item;\n        });\n    };\n    NgForOf.prototype._perViewChange = function (view, record) {\n        view.context.$implicit = record.item;\n    };\n    /**\n     * Asserts the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     */\n    NgForOf.ngTemplateContextGuard = function (dir, ctx) {\n        return true;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgForOf.prototype, \"ngForOf\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function])\n    ], NgForOf.prototype, \"ngForTrackBy\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", TemplateRef),\n        __metadata(\"design:paramtypes\", [TemplateRef])\n    ], NgForOf.prototype, \"ngForTemplate\", null);\n    NgForOf = __decorate([\n        Directive({ selector: '[ngFor][ngForOf]' }),\n        __metadata(\"design:paramtypes\", [ViewContainerRef, TemplateRef,\n            IterableDiffers])\n    ], NgForOf);\n    return NgForOf;\n}());\nvar RecordViewTuple = /** @class */ (function () {\n    function RecordViewTuple(record, view) {\n        this.record = record;\n        this.view = view;\n    }\n    return RecordViewTuple;\n}());\nfunction getTypeName(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n */\nvar NgIf = /** @class */ (function () {\n    function NgIf(_viewContainer, templateRef) {\n        this._viewContainer = _viewContainer;\n        this._context = new NgIfContext();\n        this._thenTemplateRef = null;\n        this._elseTemplateRef = null;\n        this._thenViewRef = null;\n        this._elseViewRef = null;\n        this._thenTemplateRef = templateRef;\n    }\n    Object.defineProperty(NgIf.prototype, \"ngIf\", {\n        /**\n         * The Boolean expression to evaluate as the condition for showing a template.\n         */\n        set: function (condition) {\n            this._context.$implicit = this._context.ngIf = condition;\n            this._updateView();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgIf.prototype, \"ngIfThen\", {\n        /**\n         * A template to show if the condition expression evaluates to true.\n         */\n        set: function (templateRef) {\n            assertTemplate('ngIfThen', templateRef);\n            this._thenTemplateRef = templateRef;\n            this._thenViewRef = null; // clear previous view if any.\n            this._updateView();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgIf.prototype, \"ngIfElse\", {\n        /**\n         * A template to show if the condition expression evaluates to false.\n         */\n        set: function (templateRef) {\n            assertTemplate('ngIfElse', templateRef);\n            this._elseTemplateRef = templateRef;\n            this._elseViewRef = null; // clear previous view if any.\n            this._updateView();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgIf.prototype._updateView = function () {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this._viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef =\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        }\n        else {\n            if (!this._elseViewRef) {\n                this._viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                }\n            }\n        }\n    };\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\n     */\n    NgIf.ngTemplateGuard_ngIf = function (dir, expr) { return true; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgIf.prototype, \"ngIf\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgIf.prototype, \"ngIfThen\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgIf.prototype, \"ngIfElse\", null);\n    NgIf = __decorate([\n        Directive({ selector: '[ngIf]' }),\n        __metadata(\"design:paramtypes\", [ViewContainerRef, TemplateRef])\n    ], NgIf);\n    return NgIf;\n}());\n/**\n * @publicApi\n */\nvar NgIfContext = /** @class */ (function () {\n    function NgIfContext() {\n        this.$implicit = null;\n        this.ngIf = null;\n    }\n    return NgIfContext;\n}());\nfunction assertTemplate(property, templateRef) {\n    var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n    if (!isTemplateRefOrNull) {\n        throw new Error(property + \" must be a TemplateRef, but received '\" + …µstringify(templateRef) + \"'.\");\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SwitchView = /** @class */ (function () {\n    function SwitchView(_viewContainerRef, _templateRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n        this._created = false;\n    }\n    SwitchView.prototype.create = function () {\n        this._created = true;\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n    };\n    SwitchView.prototype.destroy = function () {\n        this._created = false;\n        this._viewContainerRef.clear();\n    };\n    SwitchView.prototype.enforceState = function (created) {\n        if (created && !this._created) {\n            this.create();\n        }\n        else if (!created && this._created) {\n            this.destroy();\n        }\n    };\n    return SwitchView;\n}());\n/**\n * @ngModule CommonModule\n *\n * @description A structural directive that adds or removes templates (displaying or hiding views)\n * when the next match expression matches the switch expression.\n *\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Stuctural Directives](guide/structural-directives)\n *\n */\nvar NgSwitch = /** @class */ (function () {\n    function NgSwitch() {\n        this._defaultUsed = false;\n        this._caseCount = 0;\n        this._lastCaseCheckIndex = 0;\n        this._lastCasesMatched = false;\n    }\n    Object.defineProperty(NgSwitch.prototype, \"ngSwitch\", {\n        set: function (newValue) {\n            this._ngSwitch = newValue;\n            if (this._caseCount === 0) {\n                this._updateDefaultCases(true);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    NgSwitch.prototype._addCase = function () { return this._caseCount++; };\n    /** @internal */\n    NgSwitch.prototype._addDefault = function (view) {\n        if (!this._defaultViews) {\n            this._defaultViews = [];\n        }\n        this._defaultViews.push(view);\n    };\n    /** @internal */\n    NgSwitch.prototype._matchCase = function (value) {\n        var matched = value == this._ngSwitch;\n        this._lastCasesMatched = this._lastCasesMatched || matched;\n        this._lastCaseCheckIndex++;\n        if (this._lastCaseCheckIndex === this._caseCount) {\n            this._updateDefaultCases(!this._lastCasesMatched);\n            this._lastCaseCheckIndex = 0;\n            this._lastCasesMatched = false;\n        }\n        return matched;\n    };\n    NgSwitch.prototype._updateDefaultCases = function (useDefault) {\n        if (this._defaultViews && useDefault !== this._defaultUsed) {\n            this._defaultUsed = useDefault;\n            for (var i = 0; i < this._defaultViews.length; i++) {\n                var defaultView = this._defaultViews[i];\n                defaultView.enforceState(useDefault);\n            }\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgSwitch.prototype, \"ngSwitch\", null);\n    NgSwitch = __decorate([\n        Directive({ selector: '[ngSwitch]' })\n    ], NgSwitch);\n    return NgSwitch;\n}());\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\nvar NgSwitchCase = /** @class */ (function () {\n    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {\n        this.ngSwitch = ngSwitch;\n        ngSwitch._addCase();\n        this._view = new SwitchView(viewContainer, templateRef);\n    }\n    /**\n     * Performs case matching. For internal use only.\n     */\n    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NgSwitchCase.prototype, \"ngSwitchCase\", void 0);\n    NgSwitchCase = __decorate([\n        Directive({ selector: '[ngSwitchCase]' }),\n        __param(2, Host()),\n        __metadata(\"design:paramtypes\", [ViewContainerRef, TemplateRef,\n            NgSwitch])\n    ], NgSwitchCase);\n    return NgSwitchCase;\n}());\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\nvar NgSwitchDefault = /** @class */ (function () {\n    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    }\n    NgSwitchDefault = __decorate([\n        Directive({ selector: '[ngSwitchDefault]' }),\n        __param(2, Host()),\n        __metadata(\"design:paramtypes\", [ViewContainerRef, TemplateRef,\n            NgSwitch])\n    ], NgSwitchDefault);\n    return NgSwitchDefault;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @publicApi\n */\nvar NgPlural = /** @class */ (function () {\n    function NgPlural(_localization) {\n        this._localization = _localization;\n        this._caseViews = {};\n    }\n    Object.defineProperty(NgPlural.prototype, \"ngPlural\", {\n        set: function (value) {\n            this._switchValue = value;\n            this._updateView();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };\n    NgPlural.prototype._updateView = function () {\n        this._clearViews();\n        var cases = Object.keys(this._caseViews);\n        var key = getPluralCategory(this._switchValue, cases, this._localization);\n        this._activateView(this._caseViews[key]);\n    };\n    NgPlural.prototype._clearViews = function () {\n        if (this._activeView)\n            this._activeView.destroy();\n    };\n    NgPlural.prototype._activateView = function (view) {\n        if (view) {\n            this._activeView = view;\n            this._activeView.create();\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], NgPlural.prototype, \"ngPlural\", null);\n    NgPlural = __decorate([\n        Directive({ selector: '[ngPlural]' }),\n        __metadata(\"design:paramtypes\", [NgLocalization])\n    ], NgPlural);\n    return NgPlural;\n}());\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @publicApi\n */\nvar NgPluralCase = /** @class */ (function () {\n    function NgPluralCase(value, template, viewContainer, ngPlural) {\n        this.value = value;\n        var isANumber = !isNaN(Number(value));\n        ngPlural.addCase(isANumber ? \"=\" + value : value, new SwitchView(viewContainer, template));\n    }\n    NgPluralCase = __decorate([\n        Directive({ selector: '[ngPluralCase]' }),\n        __param(0, Attribute('ngPluralCase')),\n        __param(3, Host()),\n        __metadata(\"design:paramtypes\", [String, TemplateRef,\n            ViewContainerRef, NgPlural])\n    ], NgPluralCase);\n    return NgPluralCase;\n}());\n\n/**\n * Used as a token for an injected service within the NgStyle directive.\n *\n * NgStyle behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[style]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n */\nvar NgStyleImpl = /** @class */ (function () {\n    function NgStyleImpl() {\n    }\n    return NgStyleImpl;\n}());\nvar NgStyleR2Impl = /** @class */ (function () {\n    function NgStyleR2Impl(_ngEl, _differs, _renderer) {\n        this._ngEl = _ngEl;\n        this._differs = _differs;\n        this._renderer = _renderer;\n    }\n    NgStyleR2Impl.prototype.getValue = function () { return null; };\n    /**\n     * A map of style properties, specified as colon-separated\n     * key-value pairs.\n     * * The key is a style name, with an optional `.<unit>` suffix\n     *    (such as 'top.px', 'font-style.em').\n     * * The value is an expression to be evaluated.\n     */\n    NgStyleR2Impl.prototype.setNgStyle = function (values) {\n        this._ngStyle = values;\n        if (!this._differ && values) {\n            this._differ = this._differs.find(values).create();\n        }\n    };\n    /**\n     * Applies the new styles if needed.\n     */\n    NgStyleR2Impl.prototype.applyChanges = function () {\n        if (this._differ) {\n            var changes = this._differ.diff(this._ngStyle);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    };\n    NgStyleR2Impl.prototype._applyChanges = function (changes) {\n        var _this = this;\n        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });\n        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });\n        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });\n    };\n    NgStyleR2Impl.prototype._setStyle = function (nameAndUnit, value) {\n        var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];\n        value = value != null && unit ? \"\" + value + unit : value;\n        if (value != null) {\n            this._renderer.setStyle(this._ngEl.nativeElement, name, value);\n        }\n        else {\n            this._renderer.removeStyle(this._ngEl.nativeElement, name);\n        }\n    };\n    NgStyleR2Impl = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [ElementRef, KeyValueDiffers, Renderer2])\n    ], NgStyleR2Impl);\n    return NgStyleR2Impl;\n}());\nvar NgStyleR3Impl = /** @class */ (function () {\n    function NgStyleR3Impl() {\n        this._differ = new StylingDiffer('NgStyle', 8 /* AllowUnits */);\n        this._value = null;\n    }\n    NgStyleR3Impl.prototype.getValue = function () { return this._value; };\n    NgStyleR3Impl.prototype.setNgStyle = function (value) { this._differ.setValue(value); };\n    NgStyleR3Impl.prototype.applyChanges = function () {\n        if (this._differ.hasValueChanged()) {\n            this._value = this._differ.value;\n        }\n    };\n    NgStyleR3Impl = __decorate([\n        Injectable()\n    ], NgStyleR3Impl);\n    return NgStyleR3Impl;\n}());\n// the implementation for both NgClassR2Impl and NgClassR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\nvar NgStyleImplProvider__PRE_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR2Impl\n};\nvar NgStyleImplProvider__POST_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR3Impl\n};\nvar NgStyleImplProvider = NgStyleImplProvider__PRE_R3__;\n\n/*\n * NgStyle (as well as NgClass) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgStyle will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\nvar ngStyleDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nvar ngStyleDirectiveDef__POST_R3__ = …µdefineDirective({\n    type: function () { },\n    selectors: null,\n    factory: function () { },\n    hostBindings: function (rf, ctx, elIndex) {\n        if (rf & 1 /* Create */) {\n            …µelementHostStyling();\n        }\n        if (rf & 2 /* Update */) {\n            …µelementHostStylingMap(null, ctx.getValue());\n            …µelementHostStylingApply();\n        }\n    }\n});\nvar ngStyleDirectiveDef = ngStyleDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgStyle.\n *\n * While this is a base class that NgStyle extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[style]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * @publicApi\n */\nvar NgStyleBase = /** @class */ (function () {\n    function NgStyleBase(_delegate) {\n        this._delegate = _delegate;\n    }\n    NgStyleBase.prototype.getValue = function () { return this._delegate.getValue(); };\n    NgStyleBase.ngDirectiveDef = ngStyleDirectiveDef;\n    return NgStyleBase;\n}());\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * @publicApi\n */\nvar NgStyle = /** @class */ (function (_super) {\n    __extends(NgStyle, _super);\n    function NgStyle(delegate) {\n        return _super.call(this, delegate) || this;\n    }\n    Object.defineProperty(NgStyle.prototype, \"ngStyle\", {\n        set: function (value) { this._delegate.setNgStyle(value); },\n        enumerable: true,\n        configurable: true\n    });\n    NgStyle.prototype.ngDoCheck = function () { this._delegate.applyChanges(); };\n    __decorate([\n        Input('ngStyle'),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NgStyle.prototype, \"ngStyle\", null);\n    NgStyle = __decorate([\n        Directive({ selector: '[ngStyle]', providers: [NgStyleImplProvider] }),\n        __metadata(\"design:paramtypes\", [NgStyleImpl])\n    ], NgStyle);\n    return NgStyle;\n}(NgStyleBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\nvar NgTemplateOutlet = /** @class */ (function () {\n    function NgTemplateOutlet(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._viewRef = null;\n        /**\n         * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n         * object, the object's keys will be available for binding by the local template `let`\n         * declarations.\n         * Using the key `$implicit` in the context object will set its value as default.\n         */\n        this.ngTemplateOutletContext = null;\n        /**\n         * A string defining the template reference and optionally the context object for the template.\n         */\n        this.ngTemplateOutlet = null;\n    }\n    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {\n        var recreateView = this._shouldRecreateView(changes);\n        if (recreateView) {\n            if (this._viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            if (this.ngTemplateOutlet) {\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\n            }\n        }\n        else {\n            if (this._viewRef && this.ngTemplateOutletContext) {\n                this._updateExistingContext(this.ngTemplateOutletContext);\n            }\n        }\n    };\n    /**\n     * We need to re-create existing embedded view if:\n     * - templateRef has changed\n     * - context has changes\n     *\n     * We mark context object as changed when the corresponding object\n     * shape changes (new properties are added or existing properties are removed).\n     * In other words we consider context with the same properties as \"the same\" even\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\n     */\n    NgTemplateOutlet.prototype._shouldRecreateView = function (changes) {\n        var ctxChange = changes['ngTemplateOutletContext'];\n        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    };\n    NgTemplateOutlet.prototype._hasContextShapeChanged = function (ctxChange) {\n        var e_1, _a;\n        var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            try {\n                for (var currCtxKeys_1 = __values(currCtxKeys), currCtxKeys_1_1 = currCtxKeys_1.next(); !currCtxKeys_1_1.done; currCtxKeys_1_1 = currCtxKeys_1.next()) {\n                    var propName = currCtxKeys_1_1.value;\n                    if (prevCtxKeys.indexOf(propName) === -1) {\n                        return true;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (currCtxKeys_1_1 && !currCtxKeys_1_1.done && (_a = currCtxKeys_1.return)) _a.call(currCtxKeys_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    NgTemplateOutlet.prototype._updateExistingContext = function (ctx) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(Object.keys(ctx)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propName = _c.value;\n                this._viewRef.context[propName] = this.ngTemplateOutletContext[propName];\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NgTemplateOutlet.prototype, \"ngTemplateOutletContext\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], NgTemplateOutlet.prototype, \"ngTemplateOutlet\", void 0);\n    NgTemplateOutlet = __decorate([\n        Directive({ selector: '[ngTemplateOutlet]' }),\n        __metadata(\"design:paramtypes\", [ViewContainerRef])\n    ], NgTemplateOutlet);\n    return NgTemplateOutlet;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nvar COMMON_DIRECTIVES = [\n    NgClass,\n    NgComponentOutlet,\n    NgForOf,\n    NgIf,\n    NgTemplateOutlet,\n    NgStyle,\n    NgSwitch,\n    NgSwitchCase,\n    NgSwitchDefault,\n    NgPlural,\n    NgPluralCase,\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction invalidPipeArgumentError(type, value) {\n    return Error(\"InvalidPipeArgument: '\" + value + \"' for pipe '\" + …µstringify(type) + \"'\");\n}\n\nvar NumberFormatter = /** @class */ (function () {\n    function NumberFormatter() {\n    }\n    NumberFormatter.format = function (num, locale, style, opts) {\n        if (opts === void 0) { opts = {}; }\n        var minimumIntegerDigits = opts.minimumIntegerDigits, minimumFractionDigits = opts.minimumFractionDigits, maximumFractionDigits = opts.maximumFractionDigits, currency = opts.currency, _a = opts.currencyAsSymbol, currencyAsSymbol = _a === void 0 ? false : _a;\n        var options = {\n            minimumIntegerDigits: minimumIntegerDigits,\n            minimumFractionDigits: minimumFractionDigits,\n            maximumFractionDigits: maximumFractionDigits,\n            style: NumberFormatStyle[style].toLowerCase()\n        };\n        if (style == NumberFormatStyle.Currency) {\n            options.currency = typeof currency == 'string' ? currency : undefined;\n            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n        }\n        return new Intl.NumberFormat(locale, options).format(num);\n    };\n    return NumberFormatter;\n}());\nvar DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\nvar PATTERN_ALIASES = {\n    // Keys are quoted so they do not get renamed during closure compilation.\n    'yMMMdjms': datePartGetterFactory(combine([\n        digitCondition('year', 1),\n        nameCondition('month', 3),\n        digitCondition('day', 1),\n        digitCondition('hour', 1),\n        digitCondition('minute', 1),\n        digitCondition('second', 1),\n    ])),\n    'yMdjm': datePartGetterFactory(combine([\n        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n        digitCondition('hour', 1), digitCondition('minute', 1)\n    ])),\n    'yMMMMEEEEd': datePartGetterFactory(combine([\n        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n        digitCondition('day', 1)\n    ])),\n    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\nvar DATE_FORMATS$1 = {\n    // Keys are quoted so they do not get renamed.\n    'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n    'yy': datePartGetterFactory(digitCondition('year', 2)),\n    'y': datePartGetterFactory(digitCondition('year', 1)),\n    'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n    'MMM': datePartGetterFactory(nameCondition('month', 3)),\n    'MM': datePartGetterFactory(digitCondition('month', 2)),\n    'M': datePartGetterFactory(digitCondition('month', 1)),\n    'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n    'L': datePartGetterFactory(nameCondition('month', 1)),\n    'dd': datePartGetterFactory(digitCondition('day', 2)),\n    'd': datePartGetterFactory(digitCondition('day', 1)),\n    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'jj': datePartGetterFactory(digitCondition('hour', 2)),\n    'j': datePartGetterFactory(digitCondition('hour', 1)),\n    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n    'm': datePartGetterFactory(digitCondition('minute', 1)),\n    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n    's': datePartGetterFactory(digitCondition('second', 1)),\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit\n    // fractions\n    'sss': datePartGetterFactory(digitCondition('second', 3)),\n    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n    'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n    'E': datePartGetterFactory(nameCondition('weekday', 1)),\n    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'Z': timeZoneGetter$1('short'),\n    'z': timeZoneGetter$1('long'),\n    'ww': datePartGetterFactory({}),\n    // first Thursday of the year. not support ?\n    'w': datePartGetterFactory({}),\n    // of the year not support ?\n    'G': datePartGetterFactory(nameCondition('era', 1)),\n    'GG': datePartGetterFactory(nameCondition('era', 2)),\n    'GGG': datePartGetterFactory(nameCondition('era', 3)),\n    'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\nfunction digitModifier(inner) {\n    return function (date, locale) {\n        var result = inner(date, locale);\n        return result.length == 1 ? '0' + result : result;\n    };\n}\nfunction hourClockExtractor(inner) {\n    return function (date, locale) { return inner(date, locale).split(' ')[1]; };\n}\nfunction hourExtractor(inner) {\n    return function (date, locale) { return inner(date, locale).split(' ')[0]; };\n}\nfunction intlDateFormat(date, locale, options) {\n    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\nfunction timeZoneGetter$1(timezone) {\n    // To workaround `Intl` API restriction for single timezone let format with 24 hours\n    var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n    return function (date, locale) {\n        var result = intlDateFormat(date, locale, options);\n        // Then extract first 3 letters that related to hours\n        return result ? result.substring(3) : '';\n    };\n}\nfunction hour12Modify(options, value) {\n    options.hour12 = value;\n    return options;\n}\nfunction digitCondition(prop, len) {\n    var result = {};\n    result[prop] = len === 2 ? '2-digit' : 'numeric';\n    return result;\n}\nfunction nameCondition(prop, len) {\n    var result = {};\n    if (len < 4) {\n        result[prop] = len > 1 ? 'short' : 'narrow';\n    }\n    else {\n        result[prop] = 'long';\n    }\n    return result;\n}\nfunction combine(options) {\n    return options.reduce(function (merged, opt) { return (__assign({}, merged, opt)); }, {});\n}\nfunction datePartGetterFactory(ret) {\n    return function (date, locale) { return intlDateFormat(date, locale, ret); };\n}\nvar DATE_FORMATTER_CACHE = new Map();\nfunction dateFormatter(format, date, locale) {\n    var fn = PATTERN_ALIASES[format];\n    if (fn)\n        return fn(date, locale);\n    var cacheKey = format;\n    var parts = DATE_FORMATTER_CACHE.get(cacheKey);\n    if (!parts) {\n        parts = [];\n        var match = void 0;\n        DATE_FORMATS_SPLIT$1.exec(format);\n        var _format = format;\n        while (_format) {\n            match = DATE_FORMATS_SPLIT$1.exec(_format);\n            if (match) {\n                parts = parts.concat(match.slice(1));\n                _format = parts.pop();\n            }\n            else {\n                parts.push(_format);\n                _format = null;\n            }\n        }\n        DATE_FORMATTER_CACHE.set(cacheKey, parts);\n    }\n    return parts.reduce(function (text, part) {\n        var fn = DATE_FORMATS$1[part];\n        return text + (fn ? fn(date, locale) : partToTime(part));\n    }, '');\n}\nfunction partToTime(part) {\n    return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nvar DateFormatter = /** @class */ (function () {\n    function DateFormatter() {\n    }\n    DateFormatter.format = function (date, locale, pattern) {\n        return dateFormatter(pattern, date, locale);\n    };\n    return DateFormatter;\n}());\n\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n  */\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n * @publicApi\n */\nvar DeprecatedDatePipe = /** @class */ (function () {\n    function DeprecatedDatePipe(_locale) {\n        this._locale = _locale;\n    }\n    DeprecatedDatePipe_1 = DeprecatedDatePipe;\n    DeprecatedDatePipe.prototype.transform = function (value, pattern) {\n        if (pattern === void 0) { pattern = 'mediumDate'; }\n        if (value == null || value === '' || value !== value)\n            return null;\n        var date;\n        if (typeof value === 'string') {\n            value = value.trim();\n        }\n        if (isDate$1(value)) {\n            date = value;\n        }\n        else if (!isNaN(value - parseFloat(value))) {\n            date = new Date(parseFloat(value));\n        }\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /**\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\n             * before Date creation to avoid time offset and errors in the new Date.\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n             * timeoffset\n             * is applied\n             * Note: ISO months are 0 for January, 1 for February, ...\n             */\n            var _a = __read(value.split('-').map(function (val) { return parseInt(val, 10); }), 3), y = _a[0], m = _a[1], d = _a[2];\n            date = new Date(y, m - 1, d);\n        }\n        else {\n            date = new Date(value);\n        }\n        if (!isDate$1(date)) {\n            var match = void 0;\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n                date = isoStringToDate(match);\n            }\n            else {\n                throw invalidPipeArgumentError(DeprecatedDatePipe_1, value);\n            }\n        }\n        return DateFormatter.format(date, this._locale, DeprecatedDatePipe_1._ALIASES[pattern] || pattern);\n    };\n    var DeprecatedDatePipe_1;\n    /** @internal */\n    DeprecatedDatePipe._ALIASES = {\n        'medium': 'yMMMdjms',\n        'short': 'yMdjm',\n        'fullDate': 'yMMMMEEEEd',\n        'longDate': 'yMMMMd',\n        'mediumDate': 'yMMMd',\n        'shortDate': 'yMd',\n        'mediumTime': 'jms',\n        'shortTime': 'jm'\n    };\n    DeprecatedDatePipe = DeprecatedDatePipe_1 = __decorate([\n        Pipe({ name: 'date', pure: true }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DeprecatedDatePipe);\n    return DeprecatedDatePipe;\n}());\nfunction isDate$1(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction formatNumber$1(pipe, locale, value, style, digits, currency, currencyAsSymbol) {\n    if (currency === void 0) { currency = null; }\n    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }\n    if (value == null)\n        return null;\n    // Convert strings to numbers\n    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n    if (typeof value !== 'number') {\n        throw invalidPipeArgumentError(pipe, value);\n    }\n    var minInt;\n    var minFraction;\n    var maxFraction;\n    if (style !== NumberFormatStyle.Currency) {\n        // rely on Intl default for currency\n        minInt = 1;\n        minFraction = 0;\n        maxFraction = 3;\n    }\n    if (digits) {\n        var parts = digits.match(NUMBER_FORMAT_REGEXP);\n        if (parts === null) {\n            throw new Error(digits + \" is not a valid digit info for number pipes\");\n        }\n        if (parts[1] != null) { // min integer digits\n            minInt = parseIntAutoRadix(parts[1]);\n        }\n        if (parts[3] != null) { // min fraction digits\n            minFraction = parseIntAutoRadix(parts[3]);\n        }\n        if (parts[5] != null) { // max fraction digits\n            maxFraction = parseIntAutoRadix(parts[5]);\n        }\n    }\n    return NumberFormatter.format(value, locale, style, {\n        minimumIntegerDigits: minInt,\n        minimumFractionDigits: minFraction,\n        maximumFractionDigits: maxFraction,\n        currency: currency,\n        currencyAsSymbol: currencyAsSymbol,\n    });\n}\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\nvar DeprecatedDecimalPipe = /** @class */ (function () {\n    function DeprecatedDecimalPipe(_locale) {\n        this._locale = _locale;\n    }\n    DeprecatedDecimalPipe_1 = DeprecatedDecimalPipe;\n    DeprecatedDecimalPipe.prototype.transform = function (value, digits) {\n        return formatNumber$1(DeprecatedDecimalPipe_1, this._locale, value, NumberFormatStyle.Decimal, digits);\n    };\n    var DeprecatedDecimalPipe_1;\n    DeprecatedDecimalPipe = DeprecatedDecimalPipe_1 = __decorate([\n        Pipe({ name: 'number' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DeprecatedDecimalPipe);\n    return DeprecatedDecimalPipe;\n}());\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n * @publicApi\n */\nvar DeprecatedPercentPipe = /** @class */ (function () {\n    function DeprecatedPercentPipe(_locale) {\n        this._locale = _locale;\n    }\n    DeprecatedPercentPipe_1 = DeprecatedPercentPipe;\n    DeprecatedPercentPipe.prototype.transform = function (value, digits) {\n        return formatNumber$1(DeprecatedPercentPipe_1, this._locale, value, NumberFormatStyle.Percent, digits);\n    };\n    var DeprecatedPercentPipe_1;\n    DeprecatedPercentPipe = DeprecatedPercentPipe_1 = __decorate([\n        Pipe({ name: 'percent' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DeprecatedPercentPipe);\n    return DeprecatedPercentPipe;\n}());\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n * @publicApi\n */\nvar DeprecatedCurrencyPipe = /** @class */ (function () {\n    function DeprecatedCurrencyPipe(_locale) {\n        this._locale = _locale;\n    }\n    DeprecatedCurrencyPipe_1 = DeprecatedCurrencyPipe;\n    DeprecatedCurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {\n        if (currencyCode === void 0) { currencyCode = 'USD'; }\n        if (symbolDisplay === void 0) { symbolDisplay = false; }\n        return formatNumber$1(DeprecatedCurrencyPipe_1, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n    };\n    var DeprecatedCurrencyPipe_1;\n    DeprecatedCurrencyPipe = DeprecatedCurrencyPipe_1 = __decorate([\n        Pipe({ name: 'currency' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DeprecatedCurrencyPipe);\n    return DeprecatedCurrencyPipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A collection of deprecated i18n pipes that require intl api\n *\n * @deprecated from v5\n */\nvar COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ObservableStrategy = /** @class */ (function () {\n    function ObservableStrategy() {\n    }\n    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {\n        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });\n    };\n    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };\n    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };\n    return ObservableStrategy;\n}());\nvar PromiseStrategy = /** @class */ (function () {\n    function PromiseStrategy() {\n    }\n    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {\n        return async.then(updateLatestValue, function (e) { throw e; });\n    };\n    PromiseStrategy.prototype.dispose = function (subscription) { };\n    PromiseStrategy.prototype.onDestroy = function (subscription) { };\n    return PromiseStrategy;\n}());\nvar _promiseStrategy = new PromiseStrategy();\nvar _observableStrategy = new ObservableStrategy();\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\nvar AsyncPipe = /** @class */ (function () {\n    function AsyncPipe(_ref) {\n        this._ref = _ref;\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n        this._strategy = null;\n    }\n    AsyncPipe_1 = AsyncPipe;\n    AsyncPipe.prototype.ngOnDestroy = function () {\n        if (this._subscription) {\n            this._dispose();\n        }\n    };\n    AsyncPipe.prototype.transform = function (obj) {\n        if (!this._obj) {\n            if (obj) {\n                this._subscribe(obj);\n            }\n            this._latestReturnedValue = this._latestValue;\n            return this._latestValue;\n        }\n        if (obj !== this._obj) {\n            this._dispose();\n            return this.transform(obj);\n        }\n        if (this._latestValue === this._latestReturnedValue) {\n            return this._latestReturnedValue;\n        }\n        this._latestReturnedValue = this._latestValue;\n        return WrappedValue.wrap(this._latestValue);\n    };\n    AsyncPipe.prototype._subscribe = function (obj) {\n        var _this = this;\n        this._obj = obj;\n        this._strategy = this._selectStrategy(obj);\n        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });\n    };\n    AsyncPipe.prototype._selectStrategy = function (obj) {\n        if (…µisPromise(obj)) {\n            return _promiseStrategy;\n        }\n        if (…µisObservable(obj)) {\n            return _observableStrategy;\n        }\n        throw invalidPipeArgumentError(AsyncPipe_1, obj);\n    };\n    AsyncPipe.prototype._dispose = function () {\n        this._strategy.dispose(this._subscription);\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n    };\n    AsyncPipe.prototype._updateLatestValue = function (async, value) {\n        if (async === this._obj) {\n            this._latestValue = value;\n            this._ref.markForCheck();\n        }\n    };\n    var AsyncPipe_1;\n    AsyncPipe = AsyncPipe_1 = __decorate([\n        Pipe({ name: 'async', pure: false }),\n        __metadata(\"design:paramtypes\", [ChangeDetectorRef])\n    ], AsyncPipe);\n    return AsyncPipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\nvar LowerCasePipe = /** @class */ (function () {\n    function LowerCasePipe() {\n    }\n    LowerCasePipe_1 = LowerCasePipe;\n    /**\n     * @param value The string to transform to lower case.\n     */\n    LowerCasePipe.prototype.transform = function (value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(LowerCasePipe_1, value);\n        }\n        return value.toLowerCase();\n    };\n    var LowerCasePipe_1;\n    LowerCasePipe = LowerCasePipe_1 = __decorate([\n        Pipe({ name: 'lowercase' })\n    ], LowerCasePipe);\n    return LowerCasePipe;\n}());\n//\n// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result\n// can be achieved by using /\\p{L}\\S*/gu and also known as Unicode Property Escapes\n// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\n//\nvar unicodeWordMatch = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])\\S*/g;\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\nvar TitleCasePipe = /** @class */ (function () {\n    function TitleCasePipe() {\n    }\n    TitleCasePipe_1 = TitleCasePipe;\n    /**\n     * @param value The string to transform to title case.\n     */\n    TitleCasePipe.prototype.transform = function (value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(TitleCasePipe_1, value);\n        }\n        return value.replace(unicodeWordMatch, (function (txt) { return txt[0].toUpperCase() + txt.substr(1).toLowerCase(); }));\n    };\n    var TitleCasePipe_1;\n    TitleCasePipe = TitleCasePipe_1 = __decorate([\n        Pipe({ name: 'titlecase' })\n    ], TitleCasePipe);\n    return TitleCasePipe;\n}());\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * @ngModule CommonModule\n * @publicApi\n */\nvar UpperCasePipe = /** @class */ (function () {\n    function UpperCasePipe() {\n    }\n    UpperCasePipe_1 = UpperCasePipe;\n    /**\n     * @param value The string to transform to upper case.\n     */\n    UpperCasePipe.prototype.transform = function (value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(UpperCasePipe_1, value);\n        }\n        return value.toUpperCase();\n    };\n    var UpperCasePipe_1;\n    UpperCasePipe = UpperCasePipe_1 = __decorate([\n        Pipe({ name: 'uppercase' })\n    ], UpperCasePipe);\n    return UpperCasePipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// clang-format off\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\n// clang-format on\nvar DatePipe = /** @class */ (function () {\n    function DatePipe(locale) {\n        this.locale = locale;\n    }\n    DatePipe_1 = DatePipe;\n    /**\n     * @param value The date expression: a `Date` object,  a number\n     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n     * @param format The date/time components to include, using predefined options or a\n     * custom format string.\n     * @param timezone A timezone offset (such as `'+0430'`), or a standard\n     * UTC/GMT or continental US timezone abbreviation. Default is\n     * the local system timezone of the end-user's machine.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @returns A date string in the desired format.\n     */\n    DatePipe.prototype.transform = function (value, format, timezone, locale) {\n        if (format === void 0) { format = 'mediumDate'; }\n        if (value == null || value === '' || value !== value)\n            return null;\n        try {\n            return formatDate(value, format, locale || this.locale, timezone);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DatePipe_1, error.message);\n        }\n    };\n    var DatePipe_1;\n    DatePipe = DatePipe_1 = __decorate([\n        Pipe({ name: 'date', pure: true }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DatePipe);\n    return DatePipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _INTERPOLATION_REGEXP = /#/g;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @publicApi\n */\nvar I18nPluralPipe = /** @class */ (function () {\n    function I18nPluralPipe(_localization) {\n        this._localization = _localization;\n    }\n    I18nPluralPipe_1 = I18nPluralPipe;\n    /**\n     * @param value the number to be formatted\n     * @param pluralMap an object that mimics the ICU format, see\n     * http://userguide.icu-project.org/formatparse/messages.\n     * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n     * default).\n     */\n    I18nPluralPipe.prototype.transform = function (value, pluralMap, locale) {\n        if (value == null)\n            return '';\n        if (typeof pluralMap !== 'object' || pluralMap === null) {\n            throw invalidPipeArgumentError(I18nPluralPipe_1, pluralMap);\n        }\n        var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n    };\n    var I18nPluralPipe_1;\n    I18nPluralPipe = I18nPluralPipe_1 = __decorate([\n        Pipe({ name: 'i18nPlural', pure: true }),\n        __metadata(\"design:paramtypes\", [NgLocalization])\n    ], I18nPluralPipe);\n    return I18nPluralPipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @publicApi\n */\nvar I18nSelectPipe = /** @class */ (function () {\n    function I18nSelectPipe() {\n    }\n    I18nSelectPipe_1 = I18nSelectPipe;\n    /**\n     * @param value a string to be internationalized.\n     * @param mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     */\n    I18nSelectPipe.prototype.transform = function (value, mapping) {\n        if (value == null)\n            return '';\n        if (typeof mapping !== 'object' || typeof value !== 'string') {\n            throw invalidPipeArgumentError(I18nSelectPipe_1, mapping);\n        }\n        if (mapping.hasOwnProperty(value)) {\n            return mapping[value];\n        }\n        if (mapping.hasOwnProperty('other')) {\n            return mapping['other'];\n        }\n        return '';\n    };\n    var I18nSelectPipe_1;\n    I18nSelectPipe = I18nSelectPipe_1 = __decorate([\n        Pipe({ name: 'i18nSelect', pure: true })\n    ], I18nSelectPipe);\n    return I18nSelectPipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * @publicApi\n */\nvar JsonPipe = /** @class */ (function () {\n    function JsonPipe() {\n    }\n    /**\n     * @param value A value of any type to convert into a JSON-format string.\n     */\n    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };\n    JsonPipe = __decorate([\n        Pipe({ name: 'json', pure: false })\n    ], JsonPipe);\n    return JsonPipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction makeKeyValuePair(key, value) {\n    return { key: key, value: value };\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\nvar KeyValuePipe = /** @class */ (function () {\n    function KeyValuePipe(differs) {\n        this.differs = differs;\n        this.keyValues = [];\n    }\n    KeyValuePipe.prototype.transform = function (input, compareFn) {\n        var _this = this;\n        if (compareFn === void 0) { compareFn = defaultComparator; }\n        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n            return null;\n        }\n        if (!this.differ) {\n            // make a differ for whatever type we've been passed in\n            this.differ = this.differs.find(input).create();\n        }\n        var differChanges = this.differ.diff(input);\n        if (differChanges) {\n            this.keyValues = [];\n            differChanges.forEachItem(function (r) {\n                _this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));\n            });\n            this.keyValues.sort(compareFn);\n        }\n        return this.keyValues;\n    };\n    KeyValuePipe = __decorate([\n        Pipe({ name: 'keyvalue', pure: false }),\n        __metadata(\"design:paramtypes\", [KeyValueDiffers])\n    ], KeyValuePipe);\n    return KeyValuePipe;\n}());\nfunction defaultComparator(keyValueA, keyValueB) {\n    var a = keyValueA.key;\n    var b = keyValueB.key;\n    // if same exit with 0;\n    if (a === b)\n        return 0;\n    // make sure that undefined are at the end of the sort.\n    if (a === undefined)\n        return 1;\n    if (b === undefined)\n        return -1;\n    // make sure that nulls are at the end of the sort.\n    if (a === null)\n        return 1;\n    if (b === null)\n        return -1;\n    if (typeof a == 'string' && typeof b == 'string') {\n        return a < b ? -1 : 1;\n    }\n    if (typeof a == 'number' && typeof b == 'number') {\n        return a - b;\n    }\n    if (typeof a == 'boolean' && typeof b == 'boolean') {\n        return a < b ? -1 : 1;\n    }\n    // `a` and `b` are of different types. Compare their string values.\n    var aString = String(a);\n    var bString = String(b);\n    return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * @publicApi\n */\nvar DecimalPipe = /** @class */ (function () {\n    function DecimalPipe(_locale) {\n        this._locale = _locale;\n    }\n    DecimalPipe_1 = DecimalPipe;\n    /**\n     * @param value The number to be formatted.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    DecimalPipe.prototype.transform = function (value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            var num = strToNumber(value);\n            return formatNumber(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DecimalPipe_1, error.message);\n        }\n    };\n    var DecimalPipe_1;\n    DecimalPipe = DecimalPipe_1 = __decorate([\n        Pipe({ name: 'number' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], DecimalPipe);\n    return DecimalPipe;\n}());\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * @publicApi\n */\nvar PercentPipe = /** @class */ (function () {\n    function PercentPipe(_locale) {\n        this._locale = _locale;\n    }\n    PercentPipe_1 = PercentPipe;\n    /**\n     *\n     * @param value The number to be formatted as a percentage.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `0`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    PercentPipe.prototype.transform = function (value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            var num = strToNumber(value);\n            return formatPercent(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(PercentPipe_1, error.message);\n        }\n    };\n    var PercentPipe_1;\n    PercentPipe = PercentPipe_1 = __decorate([\n        Pipe({ name: 'percent' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], PercentPipe);\n    return PercentPipe;\n}());\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * @publicApi\n */\nvar CurrencyPipe = /** @class */ (function () {\n    function CurrencyPipe(_locale) {\n        this._locale = _locale;\n    }\n    CurrencyPipe_1 = CurrencyPipe;\n    /**\n     *\n     * @param value The number to be formatted as currency.\n     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n     * such as `USD` for the US dollar and `EUR` for the euro.\n     * @param display The format for the currency indicator. One of the following:\n     *   - `code`: Show the code (such as `USD`).\n     *   - `symbol`(default): Show the symbol (such as `$`).\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n     * currency.\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n     * locale has no narrow symbol, uses the standard symbol for the locale.\n     *   - String: Use the given string value instead of a code or a symbol.\n     * For example, an empty string will suppress the currency & symbol.\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n     *\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `2`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `2`.\n     * If not provided, the number will be formatted with the proper amount of digits,\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     */\n    CurrencyPipe.prototype.transform = function (value, currencyCode, display, digitsInfo, locale) {\n        if (display === void 0) { display = 'symbol'; }\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        if (typeof display === 'boolean') {\n            if (console && console.warn) {\n                console.warn(\"Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \\\"code\\\", \\\"symbol\\\" or \\\"symbol-narrow\\\".\");\n            }\n            display = display ? 'symbol' : 'code';\n        }\n        var currency = currencyCode || 'USD';\n        if (display !== 'code') {\n            if (display === 'symbol' || display === 'symbol-narrow') {\n                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n            }\n            else {\n                currency = display;\n            }\n        }\n        try {\n            var num = strToNumber(value);\n            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(CurrencyPipe_1, error.message);\n        }\n    };\n    var CurrencyPipe_1;\n    CurrencyPipe = CurrencyPipe_1 = __decorate([\n        Pipe({ name: 'currency' }),\n        __param(0, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [String])\n    ], CurrencyPipe);\n    return CurrencyPipe;\n}());\nfunction isEmpty(value) {\n    return value == null || value === '' || value !== value;\n}\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value) {\n    // Convert strings to numbers\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n        return Number(value);\n    }\n    if (typeof value !== 'number') {\n        throw new Error(value + \" is not a number\");\n    }\n    return value;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @ngModule CommonModule\n * @description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * @usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * @publicApi\n */\nvar SlicePipe = /** @class */ (function () {\n    function SlicePipe() {\n    }\n    SlicePipe_1 = SlicePipe;\n    /**\n     * @param value a list or a string to be sliced.\n     * @param start the starting index of the subset to return:\n     *   - **a positive integer**: return the item at `start` index and all items after\n     *     in the list or string expression.\n     *   - **a negative integer**: return the item at `start` index from the end and all items after\n     *     in the list or string expression.\n     *   - **if positive and greater than the size of the expression**: return an empty list or\n     * string.\n     *   - **if negative and greater than the size of the expression**: return entire list or string.\n     * @param end the ending index of the subset to return:\n     *   - **omitted**: return all items until the end.\n     *   - **if positive**: return all items before `end` index of the list or string.\n     *   - **if negative**: return all items before `end` index from the end of the list or string.\n     */\n    SlicePipe.prototype.transform = function (value, start, end) {\n        if (value == null)\n            return value;\n        if (!this.supports(value)) {\n            throw invalidPipeArgumentError(SlicePipe_1, value);\n        }\n        return value.slice(start, end);\n    };\n    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };\n    var SlicePipe_1;\n    SlicePipe = SlicePipe_1 = __decorate([\n        Pipe({ name: 'slice', pure: false })\n    ], SlicePipe);\n    return SlicePipe;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nvar COMMON_PIPES = [\n    AsyncPipe,\n    UpperCasePipe,\n    LowerCasePipe,\n    JsonPipe,\n    SlicePipe,\n    DecimalPipe,\n    PercentPipe,\n    TitleCasePipe,\n    CurrencyPipe,\n    DatePipe,\n    I18nPluralPipe,\n    I18nSelectPipe,\n    KeyValuePipe,\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\nvar CommonModule = /** @class */ (function () {\n    function CommonModule() {\n    }\n    CommonModule = __decorate([\n        NgModule({\n            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n            exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n            providers: [\n                { provide: NgLocalization, useClass: NgLocaleLocalization },\n            ],\n        })\n    ], CommonModule);\n    return CommonModule;\n}());\nvar …µ0 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * @publicApi\n */\nvar DeprecatedI18NPipesModule = /** @class */ (function () {\n    function DeprecatedI18NPipesModule() {\n    }\n    DeprecatedI18NPipesModule = __decorate([\n        NgModule({\n            declarations: [COMMON_DEPRECATED_I18N_PIPES],\n            exports: [COMMON_DEPRECATED_I18N_PIPES],\n            providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: …µ0 }],\n        })\n    ], DeprecatedI18NPipesModule);\n    return DeprecatedI18NPipesModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @publicApi\n */\nvar DOCUMENT = new InjectionToken('DocumentToken');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar PLATFORM_BROWSER_ID = 'browser';\nvar PLATFORM_SERVER_ID = 'server';\nvar PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nvar PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nfunction isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nfunction isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nfunction isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nfunction isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('8.0.0-beta.10+123.sha-a6809e0.with-local-changes');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * @publicApi\n */\nvar ViewportScroller = /** @class */ (function () {\n    function ViewportScroller() {\n    }\n    // De-sugared tree-shakable injection\n    // See #23917\n    /** @nocollapse */\n    ViewportScroller.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new BrowserViewportScroller(inject(DOCUMENT), window, inject(ErrorHandler)); }\n    });\n    return ViewportScroller;\n}());\n/**\n * Manages the scroll position for a browser window.\n */\nvar BrowserViewportScroller = /** @class */ (function () {\n    function BrowserViewportScroller(document, window, errorHandler) {\n        this.document = document;\n        this.window = window;\n        this.errorHandler = errorHandler;\n        this.offset = function () { return [0, 0]; };\n    }\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     * @param offset A position in screen coordinates (a tuple with x and y values)\n     * or a function that returns the top offset position.\n     *\n     */\n    BrowserViewportScroller.prototype.setOffset = function (offset) {\n        if (Array.isArray(offset)) {\n            this.offset = function () { return offset; };\n        }\n        else {\n            this.offset = offset;\n        }\n    };\n    /**\n     * Retrieves the current scroll position.\n     * @returns The position in screen coordinates.\n     */\n    BrowserViewportScroller.prototype.getScrollPosition = function () {\n        if (this.supportScrollRestoration()) {\n            return [this.window.scrollX, this.window.scrollY];\n        }\n        else {\n            return [0, 0];\n        }\n    };\n    /**\n     * Sets the scroll position.\n     * @param position The new position in screen coordinates.\n     */\n    BrowserViewportScroller.prototype.scrollToPosition = function (position) {\n        if (this.supportScrollRestoration()) {\n            this.window.scrollTo(position[0], position[1]);\n        }\n    };\n    /**\n     * Scrolls to an anchor element.\n     * @param anchor The ID of the anchor element.\n     */\n    BrowserViewportScroller.prototype.scrollToAnchor = function (anchor) {\n        if (this.supportScrollRestoration()) {\n            // Escape anything passed to `querySelector` as it can throw errors and stop the application\n            // from working if invalid values are passed.\n            if (this.window.CSS && this.window.CSS.escape) {\n                anchor = this.window.CSS.escape(anchor);\n            }\n            else {\n                anchor = anchor.replace(/(\\\"|\\'\\ |:|\\.|\\[|\\]|,|=)/g, '\\\\$1');\n            }\n            try {\n                var elSelectedById = this.document.querySelector(\"#\" + anchor);\n                if (elSelectedById) {\n                    this.scrollToElement(elSelectedById);\n                    return;\n                }\n                var elSelectedByName = this.document.querySelector(\"[name='\" + anchor + \"']\");\n                if (elSelectedByName) {\n                    this.scrollToElement(elSelectedByName);\n                    return;\n                }\n            }\n            catch (e) {\n                this.errorHandler.handleError(e);\n            }\n        }\n    };\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     */\n    BrowserViewportScroller.prototype.setHistoryScrollRestoration = function (scrollRestoration) {\n        if (this.supportScrollRestoration()) {\n            var history_1 = this.window.history;\n            if (history_1 && history_1.scrollRestoration) {\n                history_1.scrollRestoration = scrollRestoration;\n            }\n        }\n    };\n    BrowserViewportScroller.prototype.scrollToElement = function (el) {\n        var rect = el.getBoundingClientRect();\n        var left = rect.left + this.window.pageXOffset;\n        var top = rect.top + this.window.pageYOffset;\n        var offset = this.offset();\n        this.window.scrollTo(left - offset[0], top - offset[1]);\n    };\n    /**\n     * We only support scroll restoration when we can get a hold of window.\n     * This means that we do not support this behavior when running in a web worker.\n     *\n     * Lifting this restriction right now would require more changes in the dom adapter.\n     * Since webworkers aren't widely used, we will lift it once RouterScroller is\n     * battle-tested.\n     */\n    BrowserViewportScroller.prototype.supportScrollRestoration = function () {\n        try {\n            return !!this.window && !!this.window.scrollTo;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    return BrowserViewportScroller;\n}());\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in @angular/common as it will be used by both platform-server and platform-webworker.\n */\nvar NullViewportScroller = /** @class */ (function () {\n    function NullViewportScroller() {\n    }\n    /**\n     * Empty implementation\n     */\n    NullViewportScroller.prototype.setOffset = function (offset) { };\n    /**\n     * Empty implementation\n     */\n    NullViewportScroller.prototype.getScrollPosition = function () { return [0, 0]; };\n    /**\n     * Empty implementation\n     */\n    NullViewportScroller.prototype.scrollToPosition = function (position) { };\n    /**\n     * Empty implementation\n     */\n    NullViewportScroller.prototype.scrollToAnchor = function (anchor) { };\n    /**\n     * Empty implementation\n     */\n    NullViewportScroller.prototype.setHistoryScrollRestoration = function (scrollRestoration) { };\n    return NullViewportScroller;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COMMON_DIRECTIVES as …µangular_packages_common_common_e, NgClassImplProvider as …µangular_packages_common_common_j, NgClassImplProvider__PRE_R3__ as …µangular_packages_common_common_i, NgClassR3Impl as …µangular_packages_common_common_h, NgStyleImplProvider as …µangular_packages_common_common_m, NgStyleImplProvider__PRE_R3__ as …µangular_packages_common_common_l, NgStyleR3Impl as …µangular_packages_common_common_k, findLocaleData as …µangular_packages_common_common_d, DEPRECATED_PLURAL_FN as …µangular_packages_common_common_a, getPluralCase as …µangular_packages_common_common_b, COMMON_DEPRECATED_I18N_PIPES as …µangular_packages_common_common_g, COMMON_PIPES as …µangular_packages_common_common_f, registerLocaleData as …µregisterLocaleData, registerLocaleData, formatDate, formatCurrency, formatNumber, formatPercent, NgLocaleLocalization, NgLocalization, Plural, NumberFormatStyle, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol, parseCookieValue as …µparseCookieValue, CommonModule, DeprecatedI18NPipesModule, NgClass, NgClassBase, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgStyleBase, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet, DOCUMENT, AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, PLATFORM_BROWSER_ID as …µPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as …µPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as …µPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as …µPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, VERSION, ViewportScroller, NullViewportScroller as …µNullViewportScroller, NgClassImplProvider__POST_R3__ as …µNgClassImplProvider__POST_R3__, NgClassR2Impl as …µNgClassR2Impl, NgClassImpl as …µNgClassImpl, NgStyleImplProvider__POST_R3__ as …µNgStyleImplProvider__POST_R3__, NgStyleR2Impl as …µNgStyleR2Impl, NgStyleImpl as …µNgStyleImpl, ngStyleDirectiveDef__POST_R3__ as …µngStyleDirectiveDef__POST_R3__, ngClassDirectiveDef__POST_R3__ as …µngClassDirectiveDef__POST_R3__, PlatformLocation, LOCATION_INITIALIZED, LocationStrategy, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, Location };\n//# sourceMappingURL=common.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license Angular v8.0.0-beta.10+123.sha-a6809e0.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __extends, __spread, __decorate, __param, __metadata, __assign } from 'tslib';\nimport { …µparseCookieValue, DOCUMENT as DOCUMENT$1, PlatformLocation, isPlatformServer, …µPLATFORM_BROWSER_ID, CommonModule } from '@angular/common';\nimport { …µglobal, Injectable, Inject, InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, setTestabilityGetter, NgProbeToken, Optional, ApplicationRef, NgZone, getDebugNode, ViewEncapsulation, RendererStyleFlags2, PLATFORM_ID, …µConsole, SecurityContext, …µ_sanitizeHtml, …µ_sanitizeStyle, …µ_sanitizeUrl, PLATFORM_INITIALIZER, Sanitizer, createPlatformFactory, platformCore, ErrorHandler, …µAPP_ROOT, RendererFactory2, Testability, APP_ID, NgModule, ApplicationModule, SkipSelf, inject, defineInjectable, Version } from '@angular/core';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _DOM = null;\nfunction getDOM() {\n    return _DOM;\n}\nfunction setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar DomAdapter = /** @class */ (function () {\n    function DomAdapter() {\n        this.resourceLoaderType = null;\n    }\n    Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\n        /**\n         * Maps attribute names to their corresponding property names for cases\n         * where attribute name doesn't match property name.\n         */\n        get: function () { return this._attrToPropMap; },\n        set: function (value) { this._attrToPropMap = value; },\n        enumerable: true,\n        configurable: true\n    });\n    return DomAdapter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar GenericBrowserDomAdapter = /** @class */ (function (_super) {\n    __extends(GenericBrowserDomAdapter, _super);\n    function GenericBrowserDomAdapter() {\n        var _this = _super.call(this) || this;\n        _this._animationPrefix = null;\n        _this._transitionEnd = null;\n        try {\n            var element_1 = _this.createElement('div', document);\n            if (_this.getStyle(element_1, 'animationName') != null) {\n                _this._animationPrefix = '';\n            }\n            else {\n                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (var i = 0; i < domPrefixes.length; i++) {\n                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {\n                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            var transEndEventNames_1 = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames_1).forEach(function (key) {\n                if (_this.getStyle(element_1, key) != null) {\n                    _this._transitionEnd = transEndEventNames_1[key];\n                }\n            });\n        }\n        catch (_a) {\n            _this._animationPrefix = null;\n            _this._transitionEnd = null;\n        }\n        return _this;\n    }\n    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };\n    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    };\n    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\n    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\n        return typeof document.body.createShadowRoot === 'function';\n    };\n    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };\n    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };\n    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    };\n    return GenericBrowserDomAdapter;\n}(DomAdapter));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nvar _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nvar _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nvar nodeContains;\nif (…µglobal['Node']) {\n    nodeContains = …µglobal['Node'].prototype.contains || function (node) {\n        return !!(this.compareDocumentPosition(node) & 16);\n    };\n}\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nvar BrowserDomAdapter = /** @class */ (function (_super) {\n    __extends(BrowserDomAdapter, _super);\n    function BrowserDomAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\n    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\n    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };\n    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };\n    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };\n    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {\n        var _a;\n        (_a = el)[methodName].apply(_a, __spread(args));\n    };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.logError = function (error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    };\n    BrowserDomAdapter.prototype.log = function (error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroup = function (error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroupEnd = function () {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    };\n    Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\n        get: function () { return _attrToPropMap; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };\n    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };\n    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };\n    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };\n    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return function () { el.removeEventListener(evt, listener, false); };\n    };\n    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };\n    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.createEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.preventDefault = function (evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    };\n    BrowserDomAdapter.prototype.isPrevented = function (evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    };\n    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };\n    BrowserDomAdapter.prototype.getTemplateContent = function (el) {\n        return 'content' in el && this.isTemplateElement(el) ? el.content : null;\n    };\n    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };\n    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\n    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\n    BrowserDomAdapter.prototype.type = function (node) { return node.type; };\n    BrowserDomAdapter.prototype.content = function (node) {\n        if (this.hasProperty(node, 'content')) {\n            return node.content;\n        }\n        else {\n            return node;\n        }\n    };\n    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };\n    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };\n    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };\n    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };\n    BrowserDomAdapter.prototype.childNodesAsList = function (el) {\n        var childNodes = el.childNodes;\n        var res = new Array(childNodes.length);\n        for (var i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.clearNodes = function (el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    };\n    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };\n    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };\n    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };\n    BrowserDomAdapter.prototype.remove = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    };\n    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };\n    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {\n        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });\n    };\n    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };\n    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };\n    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };\n    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };\n    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };\n    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };\n    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };\n    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };\n    BrowserDomAdapter.prototype.createComment = function (text) { return this.getDefaultDocument().createComment(text); };\n    BrowserDomAdapter.prototype.createTemplate = function (html) {\n        var t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    };\n    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    };\n    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    };\n    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    };\n    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        var el = doc.createElement('SCRIPT');\n        el.setAttribute(attrName, attrValue);\n        return el;\n    };\n    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\n        doc = doc || this.getDefaultDocument();\n        var style = doc.createElement('style');\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    };\n    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };\n    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };\n    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };\n    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\n    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {\n        return element.getElementsByClassName(name);\n    };\n    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {\n        return element.getElementsByTagName(name);\n    };\n    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };\n    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };\n    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };\n    BrowserDomAdapter.prototype.hasClass = function (element, className) {\n        return element.classList.contains(className);\n    };\n    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    };\n    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    };\n    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };\n    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {\n        var value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    };\n    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };\n    BrowserDomAdapter.prototype.attributeMap = function (element) {\n        var res = new Map();\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {\n        return element.hasAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    };\n    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {\n        return element.getAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };\n    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    };\n    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };\n    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };\n    BrowserDomAdapter.prototype.createHtmlDocument = function () {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    };\n    BrowserDomAdapter.prototype.getDefaultDocument = function () { return document; };\n    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    };\n    BrowserDomAdapter.prototype.getTitle = function (doc) { return doc.title; };\n    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { doc.title = newTitle || ''; };\n    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    };\n    BrowserDomAdapter.prototype.isTemplateElement = function (el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    };\n    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\n    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\n    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\n    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    };\n    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };\n    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };\n    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\n    BrowserDomAdapter.prototype.getHref = function (el) { return el.getAttribute('href'); };\n    BrowserDomAdapter.prototype.getEventKey = function (event) {\n        var key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = _chromeNumKeyPadMap[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    };\n    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    };\n    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\n    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\n    BrowserDomAdapter.prototype.getBaseHref = function (doc) {\n        var href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    };\n    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\n    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\n    BrowserDomAdapter.prototype.setData = function (element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    };\n    BrowserDomAdapter.prototype.getData = function (element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    };\n    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.supportsWebAnimation = function () {\n        return typeof Element.prototype['animate'] === 'function';\n    };\n    BrowserDomAdapter.prototype.performanceNow = function () {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    };\n    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\n    BrowserDomAdapter.prototype.getCookie = function (name) { return …µparseCookieValue(document.cookie, name); };\n    BrowserDomAdapter.prototype.setCookie = function (name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    };\n    return BrowserDomAdapter;\n}(GenericBrowserDomAdapter));\nvar baseElement = null;\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = document.querySelector('base');\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\nvar urlParsingNode;\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction supportsState() {\n    return !!window.history.pushState;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nvar BrowserPlatformLocation = /** @class */ (function (_super) {\n    __extends(BrowserPlatformLocation, _super);\n    function BrowserPlatformLocation(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._init();\n        return _this;\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /** @internal */\n    BrowserPlatformLocation.prototype._init = function () {\n        this.location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    };\n    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };\n    BrowserPlatformLocation.prototype.onPopState = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    };\n    BrowserPlatformLocation.prototype.onHashChange = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    };\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\n        get: function () { return this.location.pathname; },\n        set: function (newPath) { this.location.pathname = newPath; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\n        get: function () { return this.location.search; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\n        get: function () { return this.location.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\n    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\n    BrowserPlatformLocation = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], BrowserPlatformLocation);\n    return BrowserPlatformLocation;\n}(PlatformLocation));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nvar TRANSITION_ID = new InjectionToken('TRANSITION_ID');\nfunction appInitializerFactory(transitionId, document, injector) {\n    return function () {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then(function () {\n            var dom = getDOM();\n            var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));\n            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })\n                .forEach(function (el) { return dom.remove(el); });\n        });\n    };\n}\nvar SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT$1, Injector],\n        multi: true\n    },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar BrowserGetTestability = /** @class */ (function () {\n    function BrowserGetTestability() {\n    }\n    BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };\n    BrowserGetTestability.prototype.addToWindow = function (registry) {\n        …µglobal['getAngularTestability'] = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            var testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        …µglobal['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };\n        …µglobal['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };\n        var whenAllStable = function (callback /** TODO #9100 */) {\n            var testabilities = …µglobal['getAllAngularTestabilities']();\n            var count = testabilities.length;\n            var didWork = false;\n            var decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!…µglobal['frameworkStabilizers']) {\n            …µglobal['frameworkStabilizers'] = [];\n        }\n        …µglobal['frameworkStabilizers'].push(whenAllStable);\n    };\n    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        var t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    };\n    return BrowserGetTestability;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nfunction exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        var ng = …µglobal['ng'] = …µglobal['ng'] || {};\n        ng[name] = value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CORE_TOKENS = {\n    'ApplicationRef': ApplicationRef,\n    'NgZone': NgZone,\n};\nvar INSPECT_GLOBAL_NAME = 'probe';\nvar CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nfunction inspectNativeElement(element) {\n    return getDebugNode(element);\n}\nfunction _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return function () { return inspectNativeElement; };\n}\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nvar ELEMENT_PROBE_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [NgProbeToken, new Optional()],\n        ],\n        multi: true,\n    },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nvar EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nvar EventManager = /** @class */ (function () {\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    function EventManager(plugins, _zone) {\n        var _this = this;\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach(function (p) { return p.manager = _this; });\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addEventListener = function (element, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    };\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    };\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    EventManager.prototype.getZone = function () { return this._zone; };\n    /** @internal */\n    EventManager.prototype._findPluginFor = function (eventName) {\n        var plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        var plugins = this._plugins;\n        for (var i = 0; i < plugins.length; i++) {\n            var plugin_1 = plugins[i];\n            if (plugin_1.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin_1);\n                return plugin_1;\n            }\n        }\n        throw new Error(\"No event manager plugin found for event \" + eventName);\n    };\n    EventManager = __decorate([\n        Injectable(),\n        __param(0, Inject(EVENT_MANAGER_PLUGINS)),\n        __metadata(\"design:paramtypes\", [Array, NgZone])\n    ], EventManager);\n    return EventManager;\n}());\nvar EventManagerPlugin = /** @class */ (function () {\n    function EventManagerPlugin(_doc) {\n        this._doc = _doc;\n    }\n    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n        var target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\n        }\n        return this.addEventListener(target, eventName, handler);\n    };\n    return EventManagerPlugin;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SharedStylesHost = /** @class */ (function () {\n    function SharedStylesHost() {\n        /** @internal */\n        this._stylesSet = new Set();\n    }\n    SharedStylesHost.prototype.addStyles = function (styles) {\n        var _this = this;\n        var additions = new Set();\n        styles.forEach(function (style) {\n            if (!_this._stylesSet.has(style)) {\n                _this._stylesSet.add(style);\n                additions.add(style);\n            }\n        });\n        this.onStylesAdded(additions);\n    };\n    SharedStylesHost.prototype.onStylesAdded = function (additions) { };\n    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };\n    SharedStylesHost = __decorate([\n        Injectable()\n    ], SharedStylesHost);\n    return SharedStylesHost;\n}());\nvar DomSharedStylesHost = /** @class */ (function (_super) {\n    __extends(DomSharedStylesHost, _super);\n    function DomSharedStylesHost(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._hostNodes = new Set();\n        _this._styleNodes = new Set();\n        _this._hostNodes.add(_doc.head);\n        return _this;\n    }\n    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\n        var _this = this;\n        styles.forEach(function (style) {\n            var styleEl = _this._doc.createElement('style');\n            styleEl.textContent = style;\n            _this._styleNodes.add(host.appendChild(styleEl));\n        });\n    };\n    DomSharedStylesHost.prototype.addHost = function (hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    };\n    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\n    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\n        var _this = this;\n        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });\n    };\n    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };\n    DomSharedStylesHost = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], DomSharedStylesHost);\n    return DomSharedStylesHost;\n}(SharedStylesHost));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\nvar COMPONENT_REGEX = /%COMP%/g;\nvar COMPONENT_VARIABLE = '%COMP%';\nvar HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nvar CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction flattenStyles(compId, styles, target) {\n    for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\nfunction decoratePreventDefault(eventHandler) {\n    return function (event) {\n        var allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    };\n}\nvar DomRendererFactory2 = /** @class */ (function () {\n    function DomRendererFactory2(eventManager, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    DomRendererFactory2.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                var renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer =\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                renderer.applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    var styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    };\n    DomRendererFactory2.prototype.begin = function () { };\n    DomRendererFactory2.prototype.end = function () { };\n    DomRendererFactory2 = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [EventManager, DomSharedStylesHost])\n    ], DomRendererFactory2);\n    return DomRendererFactory2;\n}());\nvar DefaultDomRenderer2 = /** @class */ (function () {\n    function DefaultDomRenderer2(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    DefaultDomRenderer2.prototype.destroy = function () { };\n    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {\n        if (namespace) {\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n            // will result in undefined, so we just return the namespace here.\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    };\n    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };\n    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };\n    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\n    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n        var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    };\n    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\n    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\n    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + \":\" + name;\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        if (namespace) {\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n                // which is wrong.\n                el.removeAttribute(namespace + \":\" + name);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    };\n    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\n    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\n    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    };\n    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    };\n    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    };\n    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };\n    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n        }\n        return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n    };\n    return DefaultDomRenderer2;\n}());\nvar AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\n    }\n}\nvar EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {\n    __extends(EmulatedEncapsulationDomRenderer2, _super);\n    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.component = component;\n        var styles = flattenStyles(component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        _this.contentAttr = shimContentAttribute(component.id);\n        _this.hostAttr = shimHostAttribute(component.id);\n        return _this;\n    }\n    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\n    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {\n        var el = _super.prototype.createElement.call(this, parent, name);\n        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\n        return el;\n    };\n    return EmulatedEncapsulationDomRenderer2;\n}(DefaultDomRenderer2));\nvar ShadowDomRenderer = /** @class */ (function (_super) {\n    __extends(ShadowDomRenderer, _super);\n    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.sharedStylesHost = sharedStylesHost;\n        _this.hostEl = hostEl;\n        _this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        }\n        else {\n            _this.shadowRoot = hostEl.createShadowRoot();\n        }\n        _this.sharedStylesHost.addHost(_this.shadowRoot);\n        var styles = flattenStyles(component.id, component.styles, []);\n        for (var i = 0; i < styles.length; i++) {\n            var styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            _this.shadowRoot.appendChild(styleEl);\n        }\n        return _this;\n    }\n    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };\n    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };\n    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {\n        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);\n    };\n    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\n    };\n    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {\n        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);\n    };\n    ShadowDomRenderer.prototype.parentNode = function (node) {\n        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));\n    };\n    return ShadowDomRenderer;\n}(DefaultDomRenderer2));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar …µ0 = function (v) {\n    return '__zone_symbol__' + v;\n};\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nvar __symbol__ = (typeof Zone !== 'undefined') && Zone['__symbol__'] || …µ0;\nvar ADD_EVENT_LISTENER = __symbol__('addEventListener');\nvar REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\nvar symbolNames = {};\nvar FALSE = 'FALSE';\nvar ANGULAR = 'ANGULAR';\nvar NATIVE_ADD_LISTENER = 'addEventListener';\nvar NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\nvar stopSymbol = '__zone_symbol__propagationStopped';\nvar stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\nvar blackListedEvents = (typeof Zone !== 'undefined') && Zone[__symbol__('BLACK_LISTED_EVENTS')];\nvar blackListedMap;\nif (blackListedEvents) {\n    blackListedMap = {};\n    blackListedEvents.forEach(function (eventName) { blackListedMap[eventName] = eventName; });\n}\nvar isBlackListedEvent = function (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n};\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nvar globalListener = function (event) {\n    var symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    var taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    var args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        var taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        var copiedTasks = taskDatas.slice();\n        for (var i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (event[stopSymbol] === true) {\n                break;\n            }\n            var taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n};\nvar DomEventsPlugin = /** @class */ (function (_super) {\n    __extends(DomEventsPlugin, _super);\n    function DomEventsPlugin(doc, ngZone, platformId) {\n        var _this = _super.call(this, doc) || this;\n        _this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            _this.patchEvent();\n        }\n        return _this;\n    }\n    DomEventsPlugin.prototype.patchEvent = function () {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (Event.prototype[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        var delegate = Event.prototype[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // should call native delegate in case\n            // in some environment part of the application\n            // will not use the patched Event\n            delegate && delegate.apply(this, arguments);\n        };\n    };\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    DomEventsPlugin.prototype.supports = function (eventName) { return true; };\n    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        var zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        var callback = handler;\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            var symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            var taskDatas = element[symbolName];\n            var globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = element[symbolName] = [];\n            }\n            var zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                var callbackRegistered = false;\n                for (var i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return function () { return _this.removeEventListener(element, eventName, callback); };\n    };\n    DomEventsPlugin.prototype.removeEventListener = function (target, eventName, callback) {\n        var underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        var symbolName = symbolNames[eventName];\n        var taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        var found = false;\n        for (var i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    };\n    DomEventsPlugin = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __param(2, Optional()), __param(2, Inject(PLATFORM_ID)),\n        __metadata(\"design:paramtypes\", [Object, NgZone, Object])\n    ], DomEventsPlugin);\n    return DomEventsPlugin;\n}(EventManagerPlugin));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Supported HammerJS recognizer event names.\n */\nvar EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nvar HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nvar HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nvar HammerGestureConfig = /** @class */ (function () {\n    function HammerGestureConfig() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n        * Maps gesture event names to a set of configuration options\n        * that specify overrides to the default values for specific properties.\n        *\n        * The key is a supported event name to be configured,\n        * and the options object contains a set of properties, with override values\n        * to be applied to the named recognizer event.\n        * For example, to disable recognition of the rotate event, specify\n        *  `{\"rotate\": {\"enable\": false}}`.\n        *\n        * Properties that are not present take the HammerJS default values.\n        * For information about which properties are supported for which events,\n        * and their allowed and default values, see\n        * [HammerJS documentation](http://hammerjs.github.io/).\n        *\n        */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    HammerGestureConfig.prototype.buildHammer = function (element) {\n        var mc = new Hammer(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (var eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    };\n    HammerGestureConfig = __decorate([\n        Injectable()\n    ], HammerGestureConfig);\n    return HammerGestureConfig;\n}());\nvar HammerGesturesPlugin = /** @class */ (function (_super) {\n    __extends(HammerGesturesPlugin, _super);\n    function HammerGesturesPlugin(doc, _config, console, loader) {\n        var _this = _super.call(this, doc) || this;\n        _this._config = _config;\n        _this.console = console;\n        _this.loader = loader;\n        return _this;\n    }\n    HammerGesturesPlugin.prototype.supports = function (eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!window.Hammer && !this.loader) {\n            this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because Hammer.JS is not \" +\n                \"loaded and no custom loader has been specified.\");\n            return false;\n        }\n        return true;\n    };\n    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        var zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!window.Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            var cancelRegistration_1 = false;\n            var deregister_1 = function () { cancelRegistration_1 = true; };\n            this.loader()\n                .then(function () {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!window.Hammer) {\n                    _this.console.warn(\"The custom HAMMER_LOADER completed, but Hammer.JS is not present.\");\n                    deregister_1 = function () { };\n                    return;\n                }\n                if (!cancelRegistration_1) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister_1 = _this.addEventListener(element, eventName, handler);\n                }\n            })\n                .catch(function () {\n                _this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because the custom \" +\n                    \"Hammer.JS loader failed.\");\n                deregister_1 = function () { };\n            });\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return function () { deregister_1(); };\n        }\n        return zone.runOutsideAngular(function () {\n            // Creating the manager bind events, must be done outside of angular\n            var mc = _this._config.buildHammer(element);\n            var callback = function (eventObj) {\n                zone.runGuarded(function () { handler(eventObj); });\n            };\n            mc.on(eventName, callback);\n            return function () {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            };\n        });\n    };\n    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\n    HammerGesturesPlugin = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __param(1, Inject(HAMMER_GESTURE_CONFIG)),\n        __param(3, Optional()), __param(3, Inject(HAMMER_LOADER)),\n        __metadata(\"design:paramtypes\", [Object, HammerGestureConfig, …µConsole, Object])\n    ], HammerGesturesPlugin);\n    return HammerGesturesPlugin;\n}(EventManagerPlugin));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines supported modifiers for key events.\n */\nvar MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nvar …µ0$1 = function (event) { return event.altKey; }, …µ1 = function (event) { return event.ctrlKey; }, …µ2 = function (event) { return event.metaKey; }, …µ3 = function (event) { return event.shiftKey; };\n/**\n * Retrieves modifiers from key-event objects.\n */\nvar MODIFIER_KEY_GETTERS = {\n    'alt': …µ0$1,\n    'control': …µ1,\n    'meta': …µ2,\n    'shift': …µ3\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nvar KeyEventsPlugin = /** @class */ (function (_super) {\n    __extends(KeyEventsPlugin, _super);\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    function KeyEventsPlugin(doc) {\n        return _super.call(this, doc) || this;\n    }\n    KeyEventsPlugin_1 = KeyEventsPlugin;\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin_1.parseEventName(eventName) != null; };\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var parsedEvent = KeyEventsPlugin_1.parseEventName(eventName);\n        var outsideHandler = KeyEventsPlugin_1.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(function () {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    };\n    KeyEventsPlugin.parseEventName = function (eventName) {\n        var parts = eventName.toLowerCase().split('.');\n        var domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        var key = KeyEventsPlugin_1._normalizeKey(parts.pop());\n        var fullKey = '';\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            var index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        var result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    };\n    KeyEventsPlugin.getEventFullKey = function (event) {\n        var fullKey = '';\n        var key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            if (modifierName != key) {\n                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        });\n        fullKey += key;\n        return fullKey;\n    };\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {\n        return function (event /** TODO #9100 */) {\n            if (KeyEventsPlugin_1.getEventFullKey(event) === fullKey) {\n                zone.runGuarded(function () { return handler(event); });\n            }\n        };\n    };\n    /** @internal */\n    KeyEventsPlugin._normalizeKey = function (keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    };\n    var KeyEventsPlugin_1;\n    KeyEventsPlugin = KeyEventsPlugin_1 = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], KeyEventsPlugin);\n    return KeyEventsPlugin;\n}(EventManagerPlugin));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nvar DomSanitizer = /** @class */ (function () {\n    function DomSanitizer() {\n    }\n    return DomSanitizer;\n}());\nvar DomSanitizerImpl = /** @class */ (function (_super) {\n    __extends(DomSanitizerImpl, _super);\n    function DomSanitizerImpl(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return value;\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return …µ_sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return …µ_sanitizeStyle(value);\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return …µ_sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +\n                \"(see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\n        return new SafeResourceUrlImpl(value);\n    };\n    DomSanitizerImpl = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], DomSanitizerImpl);\n    return DomSanitizerImpl;\n}(DomSanitizer));\nvar SafeValueImpl = /** @class */ (function () {\n    function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    SafeValueImpl.prototype.toString = function () {\n        return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\n            \" (see http://g.co/ng/security#xss)\";\n    };\n    return SafeValueImpl;\n}());\nvar SafeHtmlImpl = /** @class */ (function (_super) {\n    __extends(SafeHtmlImpl, _super);\n    function SafeHtmlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\n    return SafeHtmlImpl;\n}(SafeValueImpl));\nvar SafeStyleImpl = /** @class */ (function (_super) {\n    __extends(SafeStyleImpl, _super);\n    function SafeStyleImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\n    return SafeStyleImpl;\n}(SafeValueImpl));\nvar SafeScriptImpl = /** @class */ (function (_super) {\n    __extends(SafeScriptImpl, _super);\n    function SafeScriptImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\n    return SafeScriptImpl;\n}(SafeValueImpl));\nvar SafeUrlImpl = /** @class */ (function (_super) {\n    __extends(SafeUrlImpl, _super);\n    function SafeUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\n    return SafeUrlImpl;\n}(SafeValueImpl));\nvar SafeResourceUrlImpl = /** @class */ (function (_super) {\n    __extends(SafeResourceUrlImpl, _super);\n    function SafeResourceUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\n    return SafeResourceUrlImpl;\n}(SafeValueImpl));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: …µPLATFORM_BROWSER_ID },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT$1] },\n    { provide: DOCUMENT$1, useFactory: _document, deps: [] },\n];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nvar BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT$1] },\n];\n/**\n * @publicApi\n */\nvar platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\nfunction errorHandler() {\n    return new ErrorHandler();\n}\nfunction _document() {\n    return document;\n}\nvar BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: …µAPP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT$1, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT$1] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT$1, HAMMER_GESTURE_CONFIG, …µConsole, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT$1] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nvar BrowserModule = /** @class */ (function () {\n    function BrowserModule(parentModule) {\n        if (parentModule) {\n            throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\n        }\n    }\n    BrowserModule_1 = BrowserModule;\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    BrowserModule.withServerTransition = function (params) {\n        return {\n            ngModule: BrowserModule_1,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    };\n    var BrowserModule_1;\n    BrowserModule = BrowserModule_1 = __decorate([\n        NgModule({ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] }),\n        __param(0, Optional()), __param(0, SkipSelf()), __param(0, Inject(BrowserModule_1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], BrowserModule);\n    return BrowserModule;\n}());\n\n/**\n * Factory to create Meta service.\n */\nfunction createMeta() {\n    return new Meta(inject(DOCUMENT$1));\n}\n/**\n * A service that can be used to get and add meta tags.\n *\n * @publicApi\n */\nvar Meta = /** @class */ (function () {\n    function Meta(_doc) {\n        this._doc = _doc;\n        this._dom = getDOM();\n    }\n    Meta.prototype.addTag = function (tag, forceCreation) {\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    };\n    Meta.prototype.addTags = function (tags, forceCreation) {\n        var _this = this;\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!tags)\n            return [];\n        return tags.reduce(function (result, tag) {\n            if (tag) {\n                result.push(_this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }, []);\n    };\n    Meta.prototype.getTag = function (attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._dom.querySelector(this._doc, \"meta[\" + attrSelector + \"]\") || null;\n    };\n    Meta.prototype.getTags = function (attrSelector) {\n        if (!attrSelector)\n            return [];\n        var list /*NodeList*/ = this._dom.querySelectorAll(this._doc, \"meta[\" + attrSelector + \"]\");\n        return list ? [].slice.call(list) : [];\n    };\n    Meta.prototype.updateTag = function (tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        var meta = this.getTag(selector);\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    };\n    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };\n    Meta.prototype.removeTagElement = function (meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    };\n    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!forceCreation) {\n            var selector = this._parseSelector(meta);\n            var elem = this.getTag(selector);\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            if (elem && this._containsAttributes(meta, elem))\n                return elem;\n        }\n        var element = this._dom.createElement('meta');\n        this._setMetaElementAttributes(meta, element);\n        var head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n        this._dom.appendChild(head, element);\n        return element;\n    };\n    Meta.prototype._setMetaElementAttributes = function (tag, el) {\n        var _this = this;\n        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });\n        return el;\n    };\n    Meta.prototype._parseSelector = function (tag) {\n        var attr = tag.name ? 'name' : 'property';\n        return attr + \"=\\\"\" + tag[attr] + \"\\\"\";\n    };\n    Meta.prototype._containsAttributes = function (tag, elem) {\n        var _this = this;\n        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });\n    };\n    Meta.ngInjectableDef = defineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\n    Meta = __decorate([\n        Injectable({ providedIn: 'root', useFactory: createMeta, deps: [] }),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], Meta);\n    return Meta;\n}());\n\n/**\n * Factory to create Title service.\n */\nfunction createTitle() {\n    return new Title(inject(DOCUMENT$1));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nvar Title = /** @class */ (function () {\n    function Title(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     */\n    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };\n    Title.ngInjectableDef = defineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\n    Title = __decorate([\n        Injectable({ providedIn: 'root', useFactory: createTitle, deps: [] }),\n        __param(0, Inject(DOCUMENT$1)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], Title);\n    return Title;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar win = typeof window !== 'undefined' && window || {};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ChangeDetectionPerfRecord = /** @class */ (function () {\n    function ChangeDetectionPerfRecord(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n    return ChangeDetectionPerfRecord;\n}());\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nvar AngularProfiler = /** @class */ (function () {\n    function AngularProfiler(ref) {\n        this.appRef = ref.injector.get(ApplicationRef);\n    }\n    // tslint:disable:no-console\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     */\n    AngularProfiler.prototype.timeChangeDetection = function (config) {\n        var record = config && config['record'];\n        var profileName = 'Change Detection';\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n        var isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        var start = getDOM().performanceNow();\n        var numTicks = 0;\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        var end = getDOM().performanceNow();\n        if (record && isProfilerAvailable) {\n            win.console.profileEnd(profileName);\n        }\n        var msPerTick = (end - start) / numTicks;\n        win.console.log(\"ran \" + numTicks + \" change detection cycles\");\n        win.console.log(msPerTick.toFixed(2) + \" ms per check\");\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    };\n    return AngularProfiler;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction escapeHtml(text) {\n    var escapedText = {\n        '&': '&a;',\n        '\"': '&q;',\n        '\\'': '&s;',\n        '<': '&l;',\n        '>': '&g;',\n    };\n    return text.replace(/[&\"'<>]/g, function (s) { return escapedText[s]; });\n}\nfunction unescapeHtml(text) {\n    var unescapedText = {\n        '&a;': '&',\n        '&q;': '\"',\n        '&s;': '\\'',\n        '&l;': '<',\n        '&g;': '>',\n    };\n    return text.replace(/&[^;]+;/g, function (s) { return unescapedText[s]; });\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nfunction makeStateKey(key) {\n    return key;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @publicApi\n */\nvar TransferState = /** @class */ (function () {\n    function TransferState() {\n        this.store = {};\n        this.onSerializeCallbacks = {};\n    }\n    TransferState_1 = TransferState;\n    /** @internal */\n    TransferState.init = function (initState) {\n        var transferState = new TransferState_1();\n        transferState.store = initState;\n        return transferState;\n    };\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    TransferState.prototype.get = function (key, defaultValue) {\n        return this.store[key] !== undefined ? this.store[key] : defaultValue;\n    };\n    /**\n     * Set the value corresponding to a key.\n     */\n    TransferState.prototype.set = function (key, value) { this.store[key] = value; };\n    /**\n     * Remove a key from the store.\n     */\n    TransferState.prototype.remove = function (key) { delete this.store[key]; };\n    /**\n     * Test whether a key exists in the store.\n     */\n    TransferState.prototype.hasKey = function (key) { return this.store.hasOwnProperty(key); };\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    TransferState.prototype.onSerialize = function (key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    };\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    TransferState.prototype.toJson = function () {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (var key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        return JSON.stringify(this.store);\n    };\n    var TransferState_1;\n    TransferState = TransferState_1 = __decorate([\n        Injectable()\n    ], TransferState);\n    return TransferState;\n}());\nfunction initTransferState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    var script = doc.getElementById(appId + '-state');\n    var initialState = {};\n    if (script && script.textContent) {\n        try {\n            initialState = JSON.parse(unescapeHtml(script.textContent));\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return TransferState.init(initialState);\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\nvar BrowserTransferStateModule = /** @class */ (function () {\n    function BrowserTransferStateModule() {\n    }\n    BrowserTransferStateModule = __decorate([\n        NgModule({\n            providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT$1, APP_ID] }],\n        })\n    ], BrowserTransferStateModule);\n    return BrowserTransferStateModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nvar By = /** @class */ (function () {\n    function By() {\n    }\n    /**\n     * Match all elements.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    By.all = function () { return function (debugElement) { return true; }; };\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    By.css = function (selector) {\n        return function (debugElement) {\n            return debugElement.nativeElement != null ?\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\n                false;\n        };\n    };\n    /**\n     * Match elements that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    By.directive = function (type) {\n        return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };\n    };\n    return By;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n * @publicApi\n */\nvar DOCUMENT = DOCUMENT$1;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('8.0.0-beta.10+123.sha-a6809e0.with-local-changes');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BROWSER_MODULE_PROVIDERS as …µangular_packages_platform_browser_platform_browser_c, _document as …µangular_packages_platform_browser_platform_browser_b, errorHandler as …µangular_packages_platform_browser_platform_browser_a, GenericBrowserDomAdapter as …µangular_packages_platform_browser_platform_browser_k, createMeta as …µangular_packages_platform_browser_platform_browser_d, SERVER_TRANSITION_PROVIDERS as …µangular_packages_platform_browser_platform_browser_i, appInitializerFactory as …µangular_packages_platform_browser_platform_browser_h, createTitle as …µangular_packages_platform_browser_platform_browser_e, initTransferState as …µangular_packages_platform_browser_platform_browser_f, _createNgProbe as …µangular_packages_platform_browser_platform_browser_j, EventManagerPlugin as …µangular_packages_platform_browser_platform_browser_g, BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, DOCUMENT, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, DomSanitizer, VERSION, BROWSER_SANITIZATION_PROVIDERS as …µBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as …µINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as …µinitDomAdapter, BrowserDomAdapter as …µBrowserDomAdapter, BrowserPlatformLocation as …µBrowserPlatformLocation, TRANSITION_ID as …µTRANSITION_ID, BrowserGetTestability as …µBrowserGetTestability, escapeHtml as …µescapeHtml, ELEMENT_PROBE_PROVIDERS as …µELEMENT_PROBE_PROVIDERS, DomAdapter as …µDomAdapter, getDOM as …µgetDOM, setRootDomAdapter as …µsetRootDomAdapter, DomRendererFactory2 as …µDomRendererFactory2, NAMESPACE_URIS as …µNAMESPACE_URIS, flattenStyles as …µflattenStyles, shimContentAttribute as …µshimContentAttribute, shimHostAttribute as …µshimHostAttribute, DomEventsPlugin as …µDomEventsPlugin, HammerGesturesPlugin as …µHammerGesturesPlugin, KeyEventsPlugin as …µKeyEventsPlugin, DomSharedStylesHost as …µDomSharedStylesHost, SharedStylesHost as …µSharedStylesHost, DomSanitizerImpl as …µDomSanitizerImpl };\n//# sourceMappingURL=platform-browser.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.module\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/platform-browser\";\nvar AppModuleNgFactory = i0.…µcmf(i1.AppModule, [i1.AppComponent], function (_l) { return i0.…µmod([i0.…µmpd(512, i0.ComponentFactoryResolver, i0.…µCodegenComponentFactoryResolver, [[8, [AppComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.…µmpd(5120, i0.LOCALE_ID, i0.…µangular_packages_core_core_q, [[3, i0.LOCALE_ID]]), i0.…µmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.…µangular_packages_common_common_a]]), i0.…µmpd(5120, i0.…µangular_packages_core_core_bb, i0.…µangular_packages_core_core_s, [i0.NgZone]), i0.…µmpd(4608, i0.Compiler, i0.Compiler, []), i0.…µmpd(5120, i0.APP_ID, i0.…µangular_packages_core_core_f, []), i0.…µmpd(5120, i0.IterableDiffers, i0.…µangular_packages_core_core_o, []), i0.…µmpd(5120, i0.KeyValueDiffers, i0.…µangular_packages_core_core_p, []), i0.…µmpd(4608, i3.DomSanitizer, i3.…µDomSanitizerImpl, [i2.DOCUMENT]), i0.…µmpd(6144, i0.Sanitizer, null, [i3.DomSanitizer]), i0.…µmpd(4608, i3.HAMMER_GESTURE_CONFIG, i3.HammerGestureConfig, []), i0.…µmpd(5120, i3.EVENT_MANAGER_PLUGINS, function (p0_0, p0_1, p0_2, p1_0, p2_0, p2_1, p2_2, p2_3) { return [new i3.…µDomEventsPlugin(p0_0, p0_1, p0_2), new i3.…µKeyEventsPlugin(p1_0), new i3.…µHammerGesturesPlugin(p2_0, p2_1, p2_2, p2_3)]; }, [i2.DOCUMENT, i0.NgZone, i0.PLATFORM_ID, i2.DOCUMENT, i2.DOCUMENT, i3.HAMMER_GESTURE_CONFIG, i0.…µConsole, [2, i3.HAMMER_LOADER]]), i0.…µmpd(4608, i3.EventManager, i3.EventManager, [i3.EVENT_MANAGER_PLUGINS, i0.NgZone]), i0.…µmpd(135680, i3.…µDomSharedStylesHost, i3.…µDomSharedStylesHost, [i2.DOCUMENT]), i0.…µmpd(4608, i3.…µDomRendererFactory2, i3.…µDomRendererFactory2, [i3.EventManager, i3.…µDomSharedStylesHost]), i0.…µmpd(6144, i0.RendererFactory2, null, [i3.…µDomRendererFactory2]), i0.…µmpd(6144, i3.…µSharedStylesHost, null, [i3.…µDomSharedStylesHost]), i0.…µmpd(4608, i0.Testability, i0.Testability, [i0.NgZone]), i0.…µmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.…µmpd(1024, i0.ErrorHandler, i3.…µangular_packages_platform_browser_platform_browser_a, []), i0.…µmpd(1024, i0.APP_INITIALIZER, function (p0_0) { return [i3.…µangular_packages_platform_browser_platform_browser_j(p0_0)]; }, [[2, i0.NgProbeToken]]), i0.…µmpd(512, i0.ApplicationInitStatus, i0.ApplicationInitStatus, [[2, i0.APP_INITIALIZER]]), i0.…µmpd(131584, i0.ApplicationRef, i0.ApplicationRef, [i0.NgZone, i0.…µConsole, i0.Injector, i0.ErrorHandler, i0.ComponentFactoryResolver, i0.ApplicationInitStatus]), i0.…µmpd(1073742336, i0.ApplicationModule, i0.ApplicationModule, [i0.ApplicationRef]), i0.…µmpd(1073742336, i3.BrowserModule, i3.BrowserModule, [[3, i3.BrowserModule]]), i0.…µmpd(1073742336, i1.AppModule, i1.AppModule, []), i0.…µmpd(256, i0.…µAPP_ROOT, true, [])]); });\nexport { AppModuleNgFactory as AppModuleNgFactory };\nvar styles_AppComponent = [];\nvar RenderType_AppComponent = i0.…µcrt({ encapsulation: 2, styles: styles_AppComponent, data: {} });\nexport { RenderType_AppComponent as RenderType_AppComponent };\nexport function View_AppComponent_0(_l) { return i0.…µvid(0, [(_l()(), i0.…µted(-1, null, [\"Hello World!\"]))], null, null); }\nexport function View_AppComponent_Host_0(_l) { return i0.…µvid(0, [(_l()(), i0.…µeld(0, 0, null, null, 1, \"hello-world\", [], null, null, null, View_AppComponent_0, RenderType_AppComponent)), i0.…µdid(1, 49152, null, 0, i1.AppComponent, [], null, null)], null, null); }\nvar AppComponentNgFactory = i0.…µccf(\"hello-world\", i1.AppComponent, View_AppComponent_Host_0, {}, {}, []);\nexport { AppComponentNgFactory as AppComponentNgFactory };\n","Hello World!","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nenableProdMode();\n\nplatformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));\n\nimport('lazy');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/ (function () {\n    function Subscription(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function') {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport var config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = typeof Symbol === 'function'\n    ? /*@__PURE__*/ Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        _this._parentSubscription = null;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        destinationOrNext.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        this._parentSubscription = null;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nvar Observable = /*@__PURE__*/ (function () {\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;\n        if (closed_1 || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {\n    if (destination === void 0) {\n        destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    }\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n//# sourceMappingURL=share.js.map\n","/**\n * @license Angular v8.0.0-beta.10+123.sha-a6809e0.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __spread, __assign, __values, __extends, __read, __decorate, __param, __metadata } from 'tslib';\nimport { Subscription, Subject, Observable, merge as merge$1 } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ANNOTATIONS = '__annotations__';\nvar PARAMETERS = '__parameters__';\nvar PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    var metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, __spread([this], args));\n            return this;\n        }\n        var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, __spread([cls], args));\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            var values = props.apply(void 0, __spread(args));\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    var metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    var metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n        function PropDecorator(target, name) {\n            var constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, __spread([target, name], args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Optional = makeParamDecorator('Optional');\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Self = makeParamDecorator('Self');\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar SkipSelf = makeParamDecorator('SkipSelf');\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Host = makeParamDecorator('Host');\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nfunction defineInjectable(opts) {\n    return {\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\n    };\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nfunction defineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nfunction getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nfunction getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nvar NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nvar NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () { return stringify(this()); };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n    var fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getGlobal() {\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    return __globalThis || __global || __window || __self;\n}\nvar _global = getGlobal();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar R3ResolvedDependencyType;\n(function (R3ResolvedDependencyType) {\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getCompilerFacade() {\n    var globalNg = _global['ng'];\n    if (!globalNg || !globalNg.…µcompilerFacade) {\n        throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n            \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n            \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n            \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n    }\n    return globalNg.…µcompilerFacade;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nvar _currentInjector = undefined;\nfunction setCurrentInjector(injector) {\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nvar _injectImplementation;\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n    var previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\nfunction injectInjectorOnly(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\nfunction inject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n}\nfunction injectArgs(types) {\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            var type = undefined;\n            var flags = InjectFlags.Default;\n            for (var j = 0; j < arg.length; j++) {\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(type, flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nvar angularCoreDiEnv = {\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'inject': inject,\n    '…µgetFactoryOf': getFactoryOf,\n};\nfunction getFactoryOf(type) {\n    var typeAny = type;\n    var def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nvar Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nvar DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nvar INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\nvar INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nvar INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || _global['Reflect'];\n    }\n    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n    ReflectionCapabilities.prototype.factory = function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, __spread([void 0], args)))();\n    }; };\n    /** @internal */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n        var result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n        var typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        var tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        // API for metadata created by invoking the decorators.\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(type.length).fill(undefined);\n    };\n    ReflectionCapabilities.prototype.parameters = function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        var parentCtor = getParentCtor(type);\n        var parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            var annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    };\n    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        var parentCtor = getParentCtor(typeOrFunc);\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            var propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            var propDecorators_1 = typeOrFunc.propDecorators;\n            var propMetadata_1 = {};\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    };\n    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        var parentCtor = getParentCtor(typeOrFunc);\n        var propMetadata = {};\n        if (parentCtor !== Object) {\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                var decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, __spread(propMetadata[propName]));\n                }\n                decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    ReflectionCapabilities.prototype.ownPropMetadata = function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    };\n    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    ReflectionCapabilities.prototype.guards = function (type) { return {}; };\n    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\n    ReflectionCapabilities.prototype.setter = function (name) {\n        return new Function('o', 'v', 'return o.' + name + ' = v;');\n    };\n    ReflectionCapabilities.prototype.method = function (name) {\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return new Function('o', 'args', functionBody);\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    ReflectionCapabilities.prototype.importUri = function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\n    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        var decoratorType = decoratorInvocation.type;\n        var annotationCls = decoratorType.annotationCls;\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();\n    });\n}\nfunction getParentCtor(ctor) {\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    var parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _reflect = null;\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n    var compiler = getCompilerFacade();\n    return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n}\nfunction reflectDependency(compiler, dep) {\n    var meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (var j = 0; j < dep.length; j++) {\n            var param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(\"Attribute name must be defined.\");\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nfunction compileInjectable(type, srcMeta) {\n    var def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: function () {\n            if (def === null) {\n                // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                var meta = srcMeta || { providedIn: null };\n                var hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                var compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    typeArgumentCount: 0,\n                    providedIn: meta.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined,\n                };\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta.useClass;\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta.useValue;\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta.useFactory;\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(\"Unreachable state.\");\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreDiEnv, \"ng://\" + type.name + \"/ngInjectableDef.js\", compilerMeta);\n            }\n            return def;\n        },\n    });\n}\nvar …µ0 = getClosureSafeProperty;\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: …µ0 });\nfunction isUseClassProvider(meta) {\n    return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n    return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n    return meta.useExisting !== undefined;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar …µ0$1 = getClosureSafeProperty;\nvar USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: …µ0$1 });\nvar EMPTY_ARRAY = [];\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        var reflectionCapabilities = new ReflectionCapabilities();\n        var deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_1))))(); };\n    }\n    if (USE_VALUE$1 in provider) {\n        var valueProvider_1 = provider;\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if (provider.useExisting) {\n        var existingProvider_1 = provider;\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if (provider.useFactory) {\n        var factoryProvider_1 = provider;\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, __spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY))); };\n    }\n    else if (provider.useClass) {\n        var classProvider_1 = provider;\n        var deps_2 = provider.deps;\n        if (!deps_2) {\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            var _a;\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, __spread([void 0], injectArgs(deps_2))))();\n        };\n    }\n    else {\n        var deps_3 = provider.deps;\n        if (!deps_3) {\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_3))))(); };\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(type, meta); });\n/**\n * Supports @Injectable() in JIT mode for Render2.\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\nvar SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\nvar SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\nvar SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nvar InjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SOURCE = '__source';\nvar _THROW_IF_NOT_FOUND = new Object();\nvar THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nvar INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n);\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    NullInjector.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    Injector.create = function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */\n    Injector.ngInjectableDef = defineInjectable({\n        providedIn: 'any',\n        factory: function () { return inject(INJECTOR); },\n    });\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Injector.__NG_ELEMENT_ID__ = -1;\n    return Injector;\n}());\nvar IDENT = function (value) {\n    return value;\n};\nvar EMPTY = [];\nvar CIRCULAR = IDENT;\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nvar NG_TOKEN_PATH = 'ngTokenPath';\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nvar NULL_INJECTOR = Injector.NULL;\nvar NEW_LINE = /\\n/gm;\nvar NO_NEW_LINE = '…µ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        var records = this._records = new Map();\n        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        recursivelyProcessProviders(records, providers);\n    }\n    StaticInjector.prototype.get = function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    };\n    StaticInjector.prototype.toString = function () {\n        var tokens = [], records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nfunction resolveProvider(provider) {\n    var deps = computeDeps(provider);\n    var fn = IDENT;\n    var value = EMPTY;\n    var useNew = false;\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE$2 in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = provider.useValue;\n    }\n    else if (provider.useFactory) {\n        fn = provider.useFactory;\n    }\n    else if (provider.useExisting) ;\n    else if (provider.useClass) {\n        useNew = true;\n        fn = resolveForwardRef(provider.useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            var token = resolveForwardRef(provider.provide);\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = {\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    var value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            var obj = undefined;\n            var useNew = record.useNew;\n            var fn = record.fn;\n            var depRecords = record.deps;\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    var depRecord = depRecords[i];\n                    var options = depRecord.options;\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\nfunction computeDeps(provider) {\n    var deps = EMPTY;\n    var providerDeps = provider.deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            var options = 6 /* Default */;\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = annotation.token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if (provider.useExisting) {\n        var token = resolveForwardRef(provider.useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE$2 in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    var tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        var parts = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nvar ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nvar ERROR_LOGGER = 'ngErrorLogger';\nfunction wrappedError(message, originalError) {\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    var error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction findFirstClosedCycle(keys) {\n    var res = [];\n    for (var i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    var keys = [key];\n    var errMsg = constructResolvingMessage(keys);\n    var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        var first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        var first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nfunction invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n        var parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nfunction outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nvar ReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    ReflectiveKey.get = function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    KeyRegistry.prototype.get = function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return this._allKeys.get(token);\n        }\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nvar _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar Reflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n    Reflector.prototype.parameters = function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    Reflector.prototype.annotations = function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    Reflector.prototype.propMetadata = function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    Reflector.prototype.resolveEnum = function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The {@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nvar reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar ReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    ReflectiveDependency.fromKey = function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\nvar _EMPTY_LIST = [];\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nvar ResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory, \n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider) {\n    var factoryFn;\n    var resolvedDeps;\n    if (provider.useClass) {\n        var useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\nfunction resolveReflectiveProviders(providers) {\n    var normalized = _normalizeProviders(providers, []);\n    var resolved = normalized.map(resolveReflectiveProvider);\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var i = 0; i < providers.length; i++) {\n        var provider = providers[i];\n        var existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            var resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && b.provide !== undefined) {\n            res.push(b);\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        var params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\nfunction _dependenciesFor(typeOrFunc) {\n    var params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\nfunction _extractToken(typeOrFunc, metadata, params) {\n    var token = null;\n    var optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    var visibility = null;\n    for (var i = 0; i < metadata.length; ++i) {\n        var paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Threshold for the dynamic version\nvar UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nvar ReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    ReflectiveInjector.resolve = function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /** @internal */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        var len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n        var inj = new ReflectiveInjector_(providers);\n        inj.parent = this;\n        return inj;\n    };\n    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    ReflectiveInjector_.prototype._new = function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n        if (provider.multiProvider) {\n            var res = new Array(provider.resolvedFactories.length);\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        var factory = ResolvedReflectiveFactory.factory;\n        var deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        var obj;\n        try {\n            obj = factory.apply(void 0, __spread(deps));\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n        for (var i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n        var obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n        var inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            var inj_ = inj;\n            var obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: function () {\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nfunction _mapProviders(injector, fn) {\n    var res = new Array(injector._providers.length);\n    for (var i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n */\nvar ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nvar Query = /** @class */ (function () {\n    function Query() {\n    }\n    return Query;\n}());\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nvar ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n}, Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nvar ContentChild = makePropDecorator('ContentChild', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n}, Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n}, Query);\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar ViewChild = makePropDecorator('ViewChild', function (selector, data) {\n    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n}, Query);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nvar ChangeDetectorStatus;\n(function (ChangeDetectorStatus) {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\nvar NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\nvar NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\nvar NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\nvar NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nvar NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    var componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    var urlMap = new Map();\n    function cachedResourceResolve(url) {\n        var promise = urlMap.get(url);\n        if (!promise) {\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component, type) {\n        var promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n            }));\n        }\n        var styleUrls = component.styleUrls;\n        var styles = component.styles || (component.styles = []);\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(function () { return undefined; });\n}\nvar componentResourceResolutionQueue = new Map();\n// Track when existing ngComponentDef for a Type is waiting on resources.\nvar componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.template) ||\n        component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    var old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ngDevModeResetPerfCounters() {\n    var newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        window['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        global['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        self['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nvar EMPTY_OBJ = {};\nvar EMPTY_ARRAY$1 = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY_OBJ);\n    Object.freeze(EMPTY_ARRAY$1);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nfunction isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n */\nfunction renderStringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\nvar defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(_global);\nfunction resolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\nfunction resolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\nfunction resolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nvar INTERPOLATION_DELIMITER = \"\\uFFFD\";\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n */\nfunction isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (actual === expected) {\n        throwError(msg);\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(\"ASSERTION ERROR: \" + msg);\n}\nfunction assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n        (typeof node === 'object' && node.constructor.name === 'WebWorkerRenderNode'), true, 'The provided value must be an instance of a DOM Node');\n}\nfunction assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nfunction defineComponent(componentDefinition) {\n    var type = componentDefinition.type;\n    var typePrototype = type.prototype;\n    var declaredInputs = {};\n    var def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || null,\n        ngContentSelectors: componentDefinition.ngContentSelectors,\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        declaredInputs: declaredInputs,\n        inputs: null,\n        outputs: null,\n        exportAs: componentDefinition.exportAs || null,\n        onChanges: null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: null,\n        pipeDefs: null,\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY$1,\n        _: null,\n        setInput: null,\n        schemas: componentDefinition.schemas || null,\n    };\n    def._ = noSideEffects(function () {\n        var directiveTypes = componentDefinition.directives;\n        var feature = componentDefinition.features;\n        var pipeTypes = componentDefinition.pipes;\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach(function (fn) { return fn(def); });\n        def.directiveDefs = directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null;\n        def.pipeDefs = pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null;\n    });\n    return def;\n}\nfunction setComponentScope(type, directives, pipes) {\n    var def = type.ngComponentDef;\n    def.directiveDefs = function () { return directives.map(extractDirectiveDef); };\n    def.pipeDefs = function () { return pipes.map(extractPipeDef); };\n}\nfunction extractDirectiveDef(type) {\n    var def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return def;\n}\nfunction extractPipeDef(type) {\n    var def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return def;\n}\nfunction defineNgModule(def) {\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY$1,\n        declarations: def.declarations || EMPTY_ARRAY$1,\n        imports: def.imports || EMPTY_ARRAY$1,\n        exports: def.exports || EMPTY_ARRAY$1,\n        transitiveCompileScopes: null,\n        schemas: def.schemas || null,\n    };\n    return res;\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n */\nfunction setNgModuleScope(type, scope) {\n    var ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY$1;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY$1;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY$1;\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            var publicName = obj[minifiedKey];\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @param baseDefinition The base definition parameters\n */\nfunction defineBase(baseDefinition) {\n    var declaredInputs = {};\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nvar defineDirective = defineComponent;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nfunction definePipe(pipeDef) {\n    return {\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    };\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef(type) {\n    return type[NG_COMPONENT_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n    return type[NG_DIRECTIVE_DEF] || null;\n}\nfunction getPipeDef(type) {\n    return type[NG_PIPE_DEF] || null;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n    var ngModuleDef = type[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(\"Type \" + stringify(type) + \" does not have 'ngModuleDef' property.\");\n    }\n    return ngModuleDef;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nvar HOST = 0;\nvar TVIEW = 1;\nvar FLAGS = 2;\nvar PARENT = 3;\nvar NEXT = 4;\nvar QUERIES = 5;\nvar T_HOST = 6;\nvar BINDING_INDEX = 7;\nvar CLEANUP = 8;\nvar CONTEXT = 9;\nvar INJECTOR$1 = 10;\nvar RENDERER_FACTORY = 11;\nvar RENDERER = 12;\nvar SANITIZER = 13;\nvar CHILD_HEAD = 14;\nvar CHILD_TAIL = 15;\nvar CONTENT_QUERIES = 16;\nvar DECLARATION_VIEW = 17;\nvar PREORDER_HOOK_FLAGS = 18;\n/** Size of LView's header. Necessary to adjust for it when setting slots.  */\nvar HEADER_OFFSET = 20;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nvar TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\nvar ACTIVE_INDEX = 2;\n// PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n// As we already have these constants in LView, we don't need to re-create them.\nvar NATIVE = 7;\nvar VIEWS = 8;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n */\nvar MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n * space for it because the storage is sparse. This file contains utilities for dealing with such\n * data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n *      - This happens when we have style/class binding at a given location.\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = value[HOST];\n    }\n    return value;\n}\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\n/**\n * True if `value` is `StylingContext`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nfunction isStylingContext(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'number';\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n    return unwrapRNode(lView[index + HEADER_OFFSET]);\n}\nfunction getNativeByTNode(tNode, hostView) {\n    return unwrapRNode(hostView[tNode.index]);\n}\nfunction getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return view[TVIEW].data[index + HEADER_OFFSET];\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    var slotValue = hostView[nodeIndex];\n    var lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\nfunction isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\nfunction isComponentDef(def) {\n    return def.template !== null;\n}\nfunction isRootView(target) {\n    return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\nfunction readPatchedLView(target) {\n    var value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : value.lView;\n    }\n    return null;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertComponentType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertNgModuleType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n    assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\nfunction assertLContainerOrUndefined(value) {\n    value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n}\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TNODE = 8;\nvar PARENT_INJECTOR = 8;\nvar INJECTOR_BLOOM_PARENT_SIZE = 9;\nvar NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n* Factory for creating instances of injectors in the NodeInjector.\n*\n* This factory is complicated by the fact that it can resolve `multi` factories as well.\n*\n* NOTE: Some of the fields are optional which means that this class has two hidden classes.\n* - One without `multi` support (most common)\n* - One with `multi` values, (rare).\n*\n* Since VMs can cache up to 4 inline hidden classes this is OK.\n*\n* - Single factory: Only `resolving` and `factory` is defined.\n* - `providers` factory: `componentProviders` is a number and `index = -1`.\n* - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n*/\nvar NodeInjectorFactory = /** @class */ (function () {\n    function NodeInjectorFactory(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n    return NodeInjectorFactory;\n}());\nvar FactoryPrototype = NodeInjectorFactory.prototype;\nfunction isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj !== null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n}\nfunction assertNodeOfPossibleTypes(tNode) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertDefined(tNode, 'should be called with a TNode');\n    var found = types.some(function (type) { return tNode.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n}\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n * @param nodeIndex The index of the node to which the directive is attached\n * @param initialPreOrderHooksLength the number of pre-order hooks already registered before the\n * current process, used to know if the node index has to be added to the array. If it is -1,\n * the node index is never added.\n * @param initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;\n    if (initialPreOrderHooksLength >= 0 &&\n        (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n        (onChanges || onInit || doCheck)) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n    }\n    if (initialPreOrderCheckHooksLength >= 0 &&\n        (!tView.preOrderCheckHooks ||\n            initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n        (onChanges || doCheck)) {\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n    }\n    if (onChanges) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n    }\n    if (onInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n    }\n    if (doCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            var directiveDef = tView.data[i];\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * @param lView The current view\n * @param tView Static data for the view containing the hooks to be executed\n * @param checkNoChangesMode Whether or not we're in checkNoChanges mode.\n * @param @param currentNodeIndex 2 cases depending the the value:\n * - undefined: execute hooks only from the saved index until the end of the array (pre-order case,\n * when flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n    }\n}\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param currentView The view instance data to run the hooks against\n * @param firstPassHooks An array of hooks to run if we're in the first view pass\n * @param checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param checkNoChangesMode Whether or not we're in no changes mode.\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n    if (checkNoChangesMode)\n        return;\n    var hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n        firstPassHooks :\n        checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n    }\n    // The init phase state must be always checked here as it may have been recursively updated\n    if (currentNodeIndex == null &&\n        (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n        initPhaseState !== 3 /* InitPhaseCompleted */) {\n        currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n        currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    var startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    var lastNodeIndexFound = 0;\n    for (var i = startIndex; i < arr.length; i++) {\n        var hook = arr[i + 1];\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = arr[i];\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            var isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    var isInitHook = arr[i] < 0;\n    var hook = arr[i + 1];\n    var directiveIndex = isInitHook ? -arr[i] : arr[i];\n    var directive = currentView[directiveIndex];\n    if (isInitHook) {\n        var indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively\n        // updated\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n            hook.call(directive);\n        }\n    }\n    else {\n        hook.call(directive);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n */\nvar elementDepthCount;\nfunction getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n    elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n    elementDepthCount--;\n}\nvar currentDirectiveDef = null;\nfunction getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\nfunction setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n */\nvar bindingsEnabled;\nfunction getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nfunction enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nfunction disableBindings() {\n    bindingsEnabled = false;\n}\nfunction getLView() {\n    return lView;\n}\nvar activeHostContext = null;\nvar activeHostElementIndex = null;\n/**\n * Sets the active host context (the directive/component instance) and its host element index.\n *\n * @param host the directive/component instance\n * @param index the element index value for the host element where the directive/component instance\n * lives\n */\nfunction setActiveHost(host, index) {\n    if (index === void 0) { index = null; }\n    activeHostContext = host;\n    activeHostElementIndex = index;\n}\nfunction getActiveHostContext() {\n    return activeHostContext;\n}\nfunction getActiveHostElementIndex() {\n    return activeHostElementIndex;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nfunction restoreView(viewToRestore) {\n    contextLView = viewToRestore;\n}\n/** Used to set the parent property when nodes are created and track query results. */\nvar previousOrParentTNode;\nfunction getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\nfunction setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\nfunction setTNodeAndViewData(tNode, view) {\n    ngDevMode && assertLViewOrUndefined(view);\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n */\nvar isParent;\nfunction getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\nfunction setIsParent(value) {\n    isParent = value;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n    if (view === void 0) { view = lView; }\n    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nvar lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n */\nvar contextLView = null;\nfunction getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nvar checkNoChangesMode = false;\nfunction getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\nfunction setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n */\nvar bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n    return bindingRootIndex;\n}\nfunction setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Current index of a View or Content Query which needs to be processed next.\n * We iterate over the list of Queries and increment current query index at every step.\n */\nvar currentQueryIndex = 0;\nfunction getCurrentQueryIndex() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n    currentQueryIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nfunction enterView(newView, hostTNode) {\n    ngDevMode && assertLViewOrUndefined(newView);\n    var oldView = lView;\n    if (newView) {\n        var tView = newView[TVIEW];\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = hostTNode;\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\nfunction nextContextImpl(level) {\n    if (level === void 0) { level = 1; }\n    contextLView = walkUpViews(level, contextLView);\n    return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = currentView[DECLARATION_VIEW];\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n */\nfunction resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = null;\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n */\nfunction leaveView(newView) {\n    var tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    else {\n        try {\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n        }\n        finally {\n            // Views are clean and in update mode after being checked, so these bits are cleared\n            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            lView[BINDING_INDEX] = tView.bindingStartIndex;\n        }\n    }\n    enterView(newView, null);\n}\nvar _currentNamespace = null;\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n */\nfunction namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n */\nfunction namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * Sets the namespace used to create elements no `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTML() {\n    _currentNamespace = null;\n}\nfunction getNamespace() {\n    return _currentNamespace;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: cleanup once the code is merged in angular/angular\nvar RendererStyleFlags3;\n(function (RendererStyleFlags3) {\n    RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\n    RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nfunction isProceduralRenderer(renderer) {\n    return !!(renderer.listen);\n}\nvar domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n    var mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            var lView = mpValue;\n            var nodeIndex = void 0;\n            var component = undefined;\n            var directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, target);\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            var native = unwrapRNode(lView[nodeIndex]);\n            var existingCtx = readPatchedData(native);\n            var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (var i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        var rElement = target;\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        var parent_1 = rElement;\n        while (parent_1 = parent_1.parentNode) {\n            var parentContext = readPatchedData(parent_1);\n            if (parentContext) {\n                var lView = void 0;\n                if (Array.isArray(parentContext)) {\n                    lView = parentContext;\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                var index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    var native = unwrapRNode(lView[index]);\n                    var context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView: lView,\n        nodeIndex: nodeIndex,\n        native: native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    var lView = readPatchedData(componentInstance);\n    var view;\n    if (Array.isArray(lView)) {\n        var nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        var context = createLContext(lView, nodeIndex, view[HOST]);\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        var context = lView;\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        var native = getNativeByTNode(tNode, lView);\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n    var componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (var i = 0; i < componentIndices.length; i++) {\n            var elementComponentIndex = componentIndices[i];\n            var componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        var rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        var directiveIndexStart = tNode.directiveStart;\n        var directiveIndexEnd = tNode.directiveEnd;\n        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    var directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY$1;\n    var directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    var directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode && tNode.localNames) {\n        var result = {};\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\nvar CorePlayerHandler = /** @class */ (function () {\n    function CorePlayerHandler() {\n        this._players = [];\n    }\n    CorePlayerHandler.prototype.flushPlayers = function () {\n        for (var i = 0; i < this._players.length; i++) {\n            var player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    };\n    CorePlayerHandler.prototype.queuePlayer = function (player) { this._players.push(player); };\n    return CorePlayerHandler;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ANIMATION_PROP_PREFIX = '@';\nfunction createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n    var context = [\n        wrappedElement || null,\n        0,\n        [],\n        initialStyles || [null, null],\n        initialClasses || [null, null],\n        [0, 0],\n        [0],\n        [0],\n        null,\n    ];\n    // whenever a context is created there is always a `null` directive\n    // that is registered (which is a placeholder for the \"template\").\n    allocateDirectiveIntoContext(context, null);\n    return context;\n}\n/**\n * Allocates (registers) a directive into the directive registry within the provided styling\n * context.\n *\n * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n * (as well as static style and class attributes) a directive, component or template\n * is marked as the owner. When an owner is determined (this happens when the template\n * is first passed over) the directive owner is allocated into the styling context. When\n * this happens, each owner gets its own index value. This then ensures that once any\n * style and/or class binding are assigned into the context then they are marked to\n * that directive's index value.\n *\n * @param context the target StylingContext\n * @param directiveRef the directive that will be allocated into the context\n * @returns the index where the directive was inserted into\n */\nfunction allocateDirectiveIntoContext(context, directiveRef) {\n    // this is a new directive which we have not seen yet.\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var i = dirs.length;\n    // we preemptively make space into the directives array and then\n    // assign values slot-by-slot to ensure that if the directive ordering\n    // changes then it will still function\n    dirs.push(null, null, null, null);\n    dirs[i + 0 /* DirectiveValueOffset */] = directiveRef;\n    dirs[i + 2 /* DirtyFlagOffset */] = false;\n    dirs[i + 3 /* StyleSanitizerOffset */] = null;\n    // -1 is used to signal that the directive has been allocated, but\n    // no actual style or class bindings have been registered yet...\n    dirs[i + 1 /* SinglePropValuesIndexOffset */] = -1;\n    return i;\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nfunction allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    var context = templateStyleContext.slice();\n    // the HEADER values contain arrays which also need\n    // to be copied over into the new context\n    for (var i = 0; i < 9 /* SingleStylesStartPosition */; i++) {\n        var value = templateStyleContext[i];\n        if (Array.isArray(value)) {\n            context[i] = value.slice();\n        }\n    }\n    context[0 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nfunction getStylingContext(index, viewData) {\n    var storageIndex = index;\n    var slotValue = viewData[storageIndex];\n    var wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = slotValue[HOST];\n    }\n    if (isStylingContext(wrapper)) {\n        return wrapper;\n    }\n    else {\n        // This is an LView or an LContainer\n        var stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\nfunction isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 8 /* hasClassInput */) !== 0;\n}\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n}\nfunction forceClassesAsString(classes) {\n    if (classes && typeof classes !== 'string') {\n        classes = Object.keys(classes).join(' ');\n    }\n    return classes || '';\n}\nfunction forceStylesAsString(styles) {\n    var str = '';\n    if (styles) {\n        var props = Object.keys(styles);\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            str += (i ? ';' : '') + (prop + \":\" + styles[prop]);\n        }\n    }\n    return str;\n}\nfunction addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, function () {\n            var index = playerContext.indexOf(player);\n            var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\nfunction getPlayersInternal(playerContext) {\n    var players = [];\n    var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        var player = playerContext[i];\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push(playerContext[i]);\n    }\n    return players;\n}\nfunction getOrCreatePlayerContext(target, context) {\n    context = context || getLContext(target);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    var lView = context.lView, nodeIndex = context.nodeIndex;\n    var stylingContext = getStylingContext(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\nfunction getPlayerContext(stylingContext) {\n    return stylingContext[8 /* PlayerContext */];\n}\nfunction allocPlayerContext(data) {\n    return data[8 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\nfunction throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n *\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(native, attrs) {\n    var renderer = getLView()[RENDERER];\n    var isProc = isProceduralRenderer(renderer);\n    var i = 0;\n    while (i < attrs.length) {\n        var value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            var namespaceURI = attrs[i++];\n            var attrName = attrs[i++];\n            var attrVal = attrs[i++];\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProc ?\n                renderer.setAttribute(native, attrName, attrVal, namespaceURI) :\n                native.setAttributeNS(namespaceURI, attrName, attrVal);\n        }\n        else {\n            /// attrName is string;\n            var attrName = value;\n            var attrVal = attrs[++i];\n            if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        renderer.setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        renderer\n                            .setAttribute(native, attrName, attrVal) :\n                        native.setAttribute(attrName, attrVal);\n                }\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\nfunction attrsStylingIndexOf(attrs, startIndex) {\n    for (var i = startIndex; i < attrs.length; i++) {\n        var val = attrs[i];\n        if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings` or `Template`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* Bindings */ || marker === 4 /* Template */;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n    return parentLocation & 32767 /* InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n    return parentLocation >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    var viewOffset = getParentInjectorViewOffset(location);\n    var parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = parentView[DECLARATION_VIEW];\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    var parent = lView[PARENT];\n    return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n        lView = getLViewParent(lView);\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param lView LView for which we want a host element node\n * @returns The host node\n */\nfunction findComponentView(lView) {\n    var rootTNode = lView[T_HOST];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = lView[DECLARATION_VIEW];\n        rootTNode = lView[T_HOST];\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n    var rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return rootView[CONTEXT];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nvar includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n    var oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nvar BLOOM_SIZE = 256;\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** Counter used to generate unique IDs for directives. */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    var bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    var b7 = bloomBit & 0x80;\n    var b6 = bloomBit & 0x40;\n    var b5 = bloomBit & 0x20;\n    var tData = tView.data;\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param hostView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n    var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    var tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    var parentLoc = getParentInjectorLocation(tNode, hostView);\n    var parentIndex = getParentInjectorIndex(parentLoc);\n    var parentLView = getParentInjectorView(parentLoc, hostView);\n    var injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        var parentData = parentLView[TVIEW].data;\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (var i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n */\nfunction getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return tNode.parent.injectorIndex; // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    var hostTNode = view[T_HOST];\n    var viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = view[DECLARATION_VIEW];\n        hostTNode = view ? view[T_HOST] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        -1;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    var attrs = tNode.attrs;\n    if (attrs) {\n        var attrsLength = attrs.length;\n        var i = 0;\n        while (i < attrsLength) {\n            var value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                if (value === 1 /* Classes */ && attrNameToInject === 'class') {\n                    var accumulatedClasses = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedClasses += ' ' + attrs[i++];\n                    }\n                    return accumulatedClasses.trim();\n                }\n                else if (value === 2 /* Styles */ && attrNameToInject === 'style') {\n                    var accumulatedStyles = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedStyles += attrs[i++] + \": \" + attrs[i++] + \"; \";\n                    }\n                    return accumulatedStyles.trim();\n                }\n                else {\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        i++;\n                    }\n                }\n            }\n            else if (value === attrNameToInject) {\n                return attrs[i + 1];\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (tNode) {\n        var bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            var savePreviousOrParentTNode = getPreviousOrParentTNode();\n            var saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                var value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(\"No provider for \" + renderStringify(token) + \"!\");\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            if (bloomHash === -1) {\n                // `-1` is a special value used to identify `Injector` types.\n                return new NodeInjector(tNode, lView);\n            }\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            var previousTView = null;\n            var injectorIndex = getInjectorIndex(tNode, lView);\n            var parentLocation = NO_PARENT_INJECTOR;\n            var hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                var tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        var moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        var previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(\"NodeInjector: NOT_FOUND [\" + renderStringify(token) + \"]\");\n    }\n}\nvar NOT_FOUND = {};\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    var currentTView = lView[TVIEW];\n    var tNode = currentTView.data[injectorIndex + TNODE];\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    var canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    var isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    var injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, tNode);\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param lView The view we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    var tView = lView[TVIEW];\n    var nodeProviderIndexes = tNode.providerIndexes;\n    var tInjectables = tView.data;\n    var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    var directivesStart = tNode.directiveStart;\n    var directiveEnd = tNode.directiveEnd;\n    var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (var i = startingIndex; i < endIndex; i++) {\n        var providerTokenOrDef = tInjectables[i];\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && providerTokenOrDef.type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        var dirDef = tInjectables[directivesStart];\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n* Retrieve or instantiate the injectable from the `lData` at particular `index`.\n*\n* This function checks to see if the value has already been instantiated and if so returns the\n* cached `injectable`. Otherwise if it detects that the value is still a factory it\n* instantiates the `injectable` and caches the value.\n*/\nfunction getNodeInjectable(tData, lData, index, tNode) {\n    var value = lData[index];\n    if (isFactory(value)) {\n        var factory = value;\n        if (factory.resolving) {\n            throw new Error(\"Circular dep for \" + renderStringify(tData[index]));\n        }\n        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        var previousInjectImplementation = void 0;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        var saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    var tokenId = token[NG_ELEMENT_ID];\n    // Negative token IDs are used for special objects such as `Injector`\n    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var mask = 1 << bloomHash;\n    var b7 = bloomHash & 0x80;\n    var b6 = bloomHash & 0x40;\n    var b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    var value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    NodeInjector.prototype.get = function (token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    };\n    return NodeInjector;\n}());\nfunction getFactoryOf$1(type) {\n    var typeAny = type;\n    var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\nfunction getInheritedFactory(type) {\n    var proto = Object.getPrototypeOf(type.prototype).constructor;\n    var factory = getFactoryOf$1(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getDebugContext(error) {\n    return error[ERROR_DEBUG_CONTEXT];\n}\nfunction getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\nfunction getErrorLogger(error) {\n    return error[ERROR_LOGGER] || defaultErrorLogger;\n}\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, __spread(values));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    ErrorHandler.prototype.handleError = function (error) {\n        var originalError = this._findOriginalError(error);\n        var context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    ErrorHandler.prototype._findContext = function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    ErrorHandler.prototype._findOriginalError = function (error) {\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This file contains conditionally attached classes which provide human readable (debug) level\n * information for `LView`, `LContainer` and other internal data structures. These data structures\n * are stored internally as array which makes it very difficult during debugging to reason about the\n * current state of the system.\n *\n * Patching the array with extra property does change the array's hidden class' but it does not\n * change the cost of access, therefore this patching should not have significant if any impact in\n * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n *\n * So instead of seeing:\n * ```\n * Array(30) [Object, 659, null, ‚Ä¶]\n * ```\n *\n * You get to see:\n * ```\n * LViewDebug {\n *   views: [...],\n *   flags: {attached: true, ...}\n *   nodes: [\n *     {html: '<div id=\"123\">', ..., nodes: [\n *       {html: '<span>', ..., nodes: null}\n *     ]}\n *   ]\n * }\n * ```\n */\nfunction attachLViewDebug(lView) {\n    lView.debug = new LViewDebug(lView);\n}\nfunction attachLContainerDebug(lContainer) {\n    lContainer.debug = new LContainerDebug(lContainer);\n}\nfunction toDebug(obj) {\n    if (obj) {\n        var debug = obj.debug;\n        assertDefined(debug, 'Object does not have a debug representation.');\n        return debug;\n    }\n    else {\n        return obj;\n    }\n}\n/**\n * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n * reading.\n *\n * @param value possibly wrapped native DOM node.\n * @param includeChildren If `true` then the serialized HTML form will include child elements (same\n * as `outerHTML`). If `false` then the serialized HTML form will only contain the element itself\n * (will not serialize child elements).\n */\nfunction toHtml(value, includeChildren) {\n    if (includeChildren === void 0) { includeChildren = false; }\n    var node = unwrapRNode(value);\n    if (node) {\n        var isTextNode = node.nodeType === Node.TEXT_NODE;\n        var outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n        if (includeChildren || isTextNode) {\n            return outerHTML;\n        }\n        else {\n            var innerHTML = node.innerHTML;\n            return outerHTML.split(innerHTML)[0] || null;\n        }\n    }\n    else {\n        return null;\n    }\n}\nvar LViewDebug = /** @class */ (function () {\n    function LViewDebug(_raw_lView) {\n        this._raw_lView = _raw_lView;\n    }\n    Object.defineProperty(LViewDebug.prototype, \"flags\", {\n        /**\n         * Flags associated with the `LView` unpacked into a more readable state.\n         */\n        get: function () {\n            var flags = this._raw_lView[FLAGS];\n            return {\n                __raw__flags__: flags,\n                initPhaseState: flags & 3 /* InitPhaseStateMask */,\n                creationMode: !!(flags & 4 /* CreationMode */),\n                firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n                checkAlways: !!(flags & 16 /* CheckAlways */),\n                dirty: !!(flags & 64 /* Dirty */),\n                attached: !!(flags & 128 /* Attached */),\n                destroyed: !!(flags & 256 /* Destroyed */),\n                isRoot: !!(flags & 512 /* IsRoot */),\n                indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"parent\", {\n        get: function () { return toDebug(this._raw_lView[PARENT]); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"host\", {\n        get: function () { return toHtml(this._raw_lView[HOST], true); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"context\", {\n        get: function () { return this._raw_lView[CONTEXT]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"nodes\", {\n        /**\n         * The tree of nodes associated with the current `LView`. The nodes have been normalized into a\n         * tree structure with relevant details pulled out for readability.\n         */\n        get: function () {\n            var lView = this._raw_lView;\n            var tNode = lView[TVIEW].firstChild;\n            return toDebugNodes(tNode, lView);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"__other__\", {\n        /**\n         * Additional information which is hidden behind a property. The extra level of indirection is\n         * done so that the debug view would not be cluttered with properties which are only rarely\n         * relevant to the developer.\n         */\n        get: function () {\n            return {\n                tView: this._raw_lView[TVIEW],\n                cleanup: this._raw_lView[CLEANUP],\n                injector: this._raw_lView[INJECTOR$1],\n                rendererFactory: this._raw_lView[RENDERER_FACTORY],\n                renderer: this._raw_lView[RENDERER],\n                sanitizer: this._raw_lView[SANITIZER],\n                childHead: toDebug(this._raw_lView[CHILD_HEAD]),\n                next: toDebug(this._raw_lView[NEXT]),\n                childTail: toDebug(this._raw_lView[CHILD_TAIL]),\n                declarationView: toDebug(this._raw_lView[DECLARATION_VIEW]),\n                contentQueries: this._raw_lView[CONTENT_QUERIES],\n                queries: this._raw_lView[QUERIES],\n                tHost: this._raw_lView[T_HOST],\n                bindingIndex: this._raw_lView[BINDING_INDEX],\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LViewDebug.prototype, \"childViews\", {\n        /**\n         * Normalized view of child views (and containers) attached at this location.\n         */\n        get: function () {\n            var childViews = [];\n            var child = this.__other__.childHead;\n            while (child) {\n                childViews.push(child);\n                child = child.__other__.next;\n            }\n            return childViews;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LViewDebug;\n}());\n/**\n * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n *\n * @param tNode\n * @param lView\n */\nfunction toDebugNodes(tNode, lView) {\n    if (tNode) {\n        var debugNodes = [];\n        var tNodeCursor = tNode;\n        while (tNodeCursor) {\n            var rawValue = lView[tNode.index];\n            var native = unwrapRNode(rawValue);\n            var componentLViewDebug = toDebug(readLViewValue(rawValue));\n            debugNodes.push({\n                html: toHtml(native),\n                native: native,\n                nodes: toDebugNodes(tNode.child, lView),\n                component: componentLViewDebug\n            });\n            tNodeCursor = tNodeCursor.next;\n        }\n        return debugNodes;\n    }\n    else {\n        return null;\n    }\n}\nvar LContainerDebug = /** @class */ (function () {\n    function LContainerDebug(_raw_lContainer) {\n        this._raw_lContainer = _raw_lContainer;\n    }\n    Object.defineProperty(LContainerDebug.prototype, \"activeIndex\", {\n        get: function () { return this._raw_lContainer[ACTIVE_INDEX]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"views\", {\n        get: function () {\n            return this._raw_lContainer[VIEWS].map(toDebug);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"parent\", {\n        get: function () { return toDebug(this._raw_lContainer[PARENT]); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"queries\", {\n        get: function () { return this._raw_lContainer[QUERIES]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"host\", {\n        get: function () { return this._raw_lContainer[HOST]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"native\", {\n        get: function () { return this._raw_lContainer[NATIVE]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LContainerDebug.prototype, \"__other__\", {\n        get: function () {\n            return {\n                next: toDebug(this._raw_lContainer[NEXT]),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LContainerDebug;\n}());\n/**\n * Return an `LView` value if found.\n *\n * @param value `LView` if any\n */\nfunction readLViewValue(value) {\n    while (Array.isArray(value)) {\n        // This check is not quite right, as it does not take into account `StylingContext`\n        // This is why it is in debug, not in util.ts\n        if (value.length >= HEADER_OFFSET - 1)\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (creationMode) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** A special value which designates that a value has not changed. */\nvar NO_CHANGE = {};\n\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @param factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n */\nfunction bindPlayerFactory(factoryFn, value) {\n    return new BoundPlayerFactory(factoryFn, value);\n}\nvar BoundPlayerFactory = /** @class */ (function () {\n    function BoundPlayerFactory(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n    return BoundPlayerFactory;\n}());\n\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * It also includes code that will allow style binding code to operate within host\n * bindings for components/directives.\n *\n * There are many different ways in which these functions below are called. Please see\n * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n */\nfunction initializeStaticContext(attrs, stylingStartIndex, directiveRef) {\n    var context = createEmptyStylingContext();\n    patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveRef);\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param context the existing styling context\n * @param attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param attrsStylingStartIndex what index to start iterating within the\n *              provided `attrs` array to start reading style and class values\n * @param directiveRef the directive instance with which static data is associated with.\n */\nfunction patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveRef) {\n    // this means the context has already been set and instantiated\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // If the styling context has already been patched with the given directive's bindings,\n    // then there is no point in doing it again. The reason why this may happen (the directive\n    // styling being patched twice) is because the `stylingBinding` function is called each time\n    // an element is created (both within a template function and within directive host bindings).\n    var directives = context[2 /* DirectiveRegistryPosition */];\n    var detectedIndex = getDirectiveRegistryValuesIndexOf(directives, directiveRef || null);\n    if (detectedIndex === -1) {\n        // this is a new directive which we have not seen yet.\n        detectedIndex = allocateDirectiveIntoContext(context, directiveRef);\n    }\n    var directiveIndex = detectedIndex / 4 /* Size */;\n    var initialClasses = null;\n    var initialStyles = null;\n    var mode = -1;\n    for (var i = attrsStylingStartIndex; i < attrs.length; i++) {\n        var attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode == 1 /* Classes */) {\n            initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n            patchInitialStylingValue(initialClasses, attr, true, directiveIndex);\n        }\n        else if (mode == 2 /* Styles */) {\n            initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n            patchInitialStylingValue(initialStyles, attr, attrs[++i], directiveIndex);\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is\n * present (allocated) then the code below will set the new value depending on the\n * following cases:\n *\n *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n *     `[style.prop]` binding was set, but there wasn't a matching static style\n *     or class present on the context)\n *  2) if the value was set already by the template, component or directive, but the\n *     new value is set on a higher level (i.e. a sub component which extends a parent\n *     component sets its value after the parent has already set the same one)\n *  3) if the same directive provides a new set of styling values to set\n *\n * @param initialStyling the initial styling array where the new styling entry will be added to\n * @param prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n * @param value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n */\nfunction patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n    for (var i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n        var key = initialStyling[i + 0 /* PropOffset */];\n        if (key === prop) {\n            var existingValue = initialStyling[i + 1 /* ValueOffset */];\n            var existingOwner = initialStyling[i + 2 /* DirectiveOwnerOffset */];\n            if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n            }\n            return;\n        }\n    }\n    // We did not find existing key, add a new one.\n    addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n}\n/**\n * Runs through the initial class values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param element the element the styling will be applied to\n * @param context the source styling context which contains the initial class values\n * @param renderer the renderer instance that will be used to apply the class\n * @returns the index that the classes were applied up until\n */\nfunction renderInitialClasses(element, context, renderer, startIndex) {\n    var initialClasses = context[4 /* InitialClassValuesPosition */];\n    var i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialClasses.length) {\n        var value = initialClasses[i + 1 /* ValueOffset */];\n        if (value) {\n            setClass(element, initialClasses[i + 0 /* PropOffset */], true, renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\n/**\n * Runs through the initial styles values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param element the element the styling will be applied to\n * @param context the source styling context which contains the initial class values\n * @param renderer the renderer instance that will be used to apply the class\n * @returns the index that the styles were applied up until\n */\nfunction renderInitialStyles(element, context, renderer, startIndex) {\n    var initialStyles = context[3 /* InitialStyleValuesPosition */];\n    var i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialStyles.length) {\n        var value = initialStyles[i + 1 /* ValueOffset */];\n        if (value) {\n            setStyle(element, initialStyles[i + 0 /* PropOffset */], value, renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param context the existing styling context\n * @param directiveRef the directive that the new bindings will reference\n * @param classBindingNames an array of class binding names that will be added to the context\n * @param styleBindingNames an array of style binding names that will be added to the context\n * @param styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n */\nfunction updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer) {\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    var directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n    if (directiveIndex === -1) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    if (styleBindingNames) {\n        styleBindingNames = hyphenateEntries(styleBindingNames);\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    var singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n    var totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    var totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    var cachedClassMapValues = context[6 /* CachedMultiClasses */];\n    var cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n    var classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    var stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    var singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n    var singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    var multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    var multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    var currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    var insertionOffset = 0;\n    var filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (var i_1 = 0; i_1 < styleBindingNames.length; i_1++) {\n            var name_1 = styleBindingNames[i_1];\n            var singlePropIndex = getMatchingBindingIndex(context, name_1, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name_1);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    var filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (var i_2 = 0; i_2 < classBindingNames.length; i_2++) {\n            var name_2 = classBindingNames[i_2];\n            var singlePropIndex = getMatchingBindingIndex(context, name_2, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name_2);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    var i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            var totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            var totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                var start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (var j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            var total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    var totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (var i_3 = singleStylesStartIndex; i_3 < context.length; i_3 += 4 /* Size */) {\n        var isMultiBased = i_3 >= multiStylesStartIndex;\n        var isClassBased = i_3 >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        var flag = getPointers(context, i_3);\n        var staticIndex = getInitialIndex(flag);\n        var singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i_3, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (var i_4 = 0; i_4 < filteredStyleBindingNames.length * 4 /* Size */; i_4++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (var i_5 = 0; i_5 < filteredClassBindingNames.length * 4 /* Size */; i_5++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    var initialClasses = context[4 /* InitialClassValuesPosition */];\n    var initialStyles = context[3 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (var i_6 = 0; i_6 < totalNewEntries; i_6++) {\n        var entryIsClassBased = i_6 >= filteredStyleBindingNames.length;\n        var adjustedIndex = entryIsClassBased ? (i_6 - filteredStyleBindingNames.length) : i_6;\n        var propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        var multiIndex = void 0, singleIndex = void 0;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added in case a follow-up directive introduces the same initial\n        // style/class value later on.\n        var initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        var indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                1 /* ValueOffset */;\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        var initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // the map-based values also need to know how many entries got inserted\n    cachedClassMapValues[0 /* EntriesCountPosition */] +=\n        filteredClassBindingNames.length;\n    cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n        filteredStyleBindingNames.length;\n    var newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n    var newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n    // update the multi styles cache with a reference for the directive that was just inserted\n    var directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n    var cachedStyleMapIndex = cachedStyleMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n    for (var i_7 = 1 /* ValuesStartPosition */; i_7 < cachedStyleMapIndex; i_7 += 4 /* Size */) {\n        // multi values start after all the single values (which is also where classes are) in the\n        // context therefore the new class allocation size should be taken into account\n        cachedStyleMapValues[i_7 + 1 /* PositionStartOffset */] +=\n            newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n    }\n    // update the multi classes cache with a reference for the directive that was just inserted\n    var directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n    var cachedClassMapIndex = cachedClassMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n    for (var i_8 = 1 /* ValuesStartPosition */; i_8 < cachedClassMapIndex; i_8 += 4 /* Size */) {\n        // the reason why both the styles + classes space is allocated to the existing offsets is\n        // because the styles show up before the classes in the context and any new inserted\n        // styles will offset any existing class entries in the context (even if there are no\n        // new class entries added) also the reason why it's *2 is because both single + multi\n        // entries for each new style have been added in the context before the multi class values\n        // actually start\n        cachedClassMapValues[i_8 + 1 /* PositionStartOffset */] +=\n            (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    var masterFlag = pointers(0, 0, multiStylesStartIndex);\n    setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n */\nfunction findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n    var directiveRefs = context[2 /* DirectiveRegistryPosition */];\n    var nextOffsetInsertionIndex = context[5 /* SinglePropOffsetPositions */].length;\n    var directiveIndex;\n    var detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n    if (detectedIndex === -1) {\n        detectedIndex = directiveRefs.length;\n        directiveIndex = directiveRefs.length / 4 /* Size */;\n        allocateDirectiveIntoContext(context, directiveRef);\n        directiveRefs[detectedIndex + 1 /* SinglePropValuesIndexOffset */] =\n            nextOffsetInsertionIndex;\n        directiveRefs[detectedIndex + 3 /* StyleSanitizerOffset */] =\n            styleSanitizer || null;\n    }\n    else {\n        var singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        if (directiveRefs[singlePropStartPosition] >= 0) {\n            // the directive has already been patched into the context\n            return -1;\n        }\n        directiveIndex = detectedIndex / 4 /* Size */;\n        // because the directive already existed this means that it was set during elementHostAttrs or\n        // elementStart which means that the binding values were not here. Therefore, the values below\n        // need to be applied so that single class and style properties can be assigned later.\n        var singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n        // the sanitizer is also apart of the binding process and will be used when bindings are\n        // applied.\n        var styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n        directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n    }\n    return directiveIndex;\n}\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (var j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Registers the provided multi styling (`[style]` and `[class]`) values to the context.\n *\n * This function will iterate over the provided `classesInput` and `stylesInput` map\n * values and insert/update or remove them from the context at exactly the right\n * spot.\n *\n * This function also takes in a directive which implies that the styling values will\n * be evaluated for that directive with respect to any other styling that already exists\n * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n * both update the `width` property at the same time) then the styling algorithm code below\n * will decide which one wins based on the directive styling prioritization mechanism. This\n * mechanism is better explained in render3/interfaces/styling.ts#directives).\n *\n * This function will not render any styling values on screen, but is rather designed to\n * prepare the context for that. `renderStyling` must be called afterwards to render any\n * styling data that was set in this function (note that `updateClassProp` and\n * `updateStyleProp` are designed to be run after this function is run).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style values.\n * @param classesInput The key/value map of CSS class names that will be used for the update.\n * @param stylesInput The key/value map of CSS styles that will be used for the update.\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n */\nfunction updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n    var directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    classesInput = classesInput || null;\n    stylesInput = stylesInput || null;\n    var ignoreAllClassUpdates = isMultiValueCacheHit(context, true, directiveIndex, classesInput);\n    var ignoreAllStyleUpdates = isMultiValueCacheHit(context, false, directiveIndex, stylesInput);\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    classesInput =\n        classesInput === NO_CHANGE ? readCachedMapValue(context, true, directiveIndex) : classesInput;\n    stylesInput =\n        stylesInput === NO_CHANGE ? readCachedMapValue(context, false, directiveIndex) : stylesInput;\n    var element = context[0 /* ElementPosition */];\n    var classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(classesInput, element, 1 /* Class */) :\n        null;\n    var stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(stylesInput, element, 2 /* Style */) :\n        null;\n    var classesValue = classesPlayerBuilder ?\n        classesInput.value :\n        classesInput;\n    var stylesValue = stylesPlayerBuilder ? stylesInput['value'] : stylesInput;\n    var classNames = EMPTY_ARRAY$1;\n    var applyAllClasses = false;\n    var playerBuildersAreDirty = false;\n    var classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    var stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY$1;\n        }\n    }\n    var multiStylesStartIndex = getMultiStylesStartIndex(context);\n    var multiClassesStartIndex = getMultiClassesStartIndex(context);\n    var multiClassesEndIndex = context.length;\n    if (!ignoreAllStyleUpdates) {\n        var styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY$1;\n        var styles = stylesValue || EMPTY_OBJ;\n        var totalNewEntries = patchStylingMapIntoContext(context, directiveIndex, stylesPlayerBuilderIndex, multiStylesStartIndex, multiClassesStartIndex, styleProps, styles, stylesInput, false);\n        if (totalNewEntries) {\n            multiClassesStartIndex += totalNewEntries * 4 /* Size */;\n            multiClassesEndIndex += totalNewEntries * 4 /* Size */;\n        }\n    }\n    if (!ignoreAllClassUpdates) {\n        var classes = (classesValue || EMPTY_OBJ);\n        patchStylingMapIntoContext(context, directiveIndex, classesPlayerBuilderIndex, multiClassesStartIndex, multiClassesEndIndex, classNames, applyAllClasses || classes, classesInput, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * Applies the given multi styling (styles or classes) values to the context.\n *\n * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n * values) resides here.\n *\n * Because this function understands that multiple directives may all write to the `[style]` and\n * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n * value in order. This means that a directive like `classADirective` will always fire before\n * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n * in the same order. Because of this consistent ordering, the first directive has a higher priority\n * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n * to merge and apply redudant styling properties.\n *\n * The function itself applies the key/value entries (or an array of keys) to\n * the context in the following steps.\n *\n * STEP 1:\n *    First check to see what properties are already set and in use by another directive in the\n *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n *    attempting to set it as well).\n *\n * STEP 2:\n *    All remaining properties (that were not set prior to this directive) are now updated in\n *    the context. Any new properties are inserted exactly at their spot in the context and any\n *    previously set properties are shifted to exactly where the cursor sits while iterating over\n *    the context. The end result is a balanced context that includes the exact ordering of the\n *    styling properties/values for the provided input from the directive.\n *\n * STEP 3:\n *    Any unmatched properties in the context that belong to the directive are set to null\n *\n * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n * follow-up directives (the directives that will pass in their styling values) depending on if\n * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n * directives will not run (so long as their binding values stay the same).\n *\n * @returns the total amount of new slots that were allocated into the context due to new styling\n *          properties that were detected.\n */\nfunction patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n    var dirty = false;\n    var cacheIndex = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // the cachedValues array is the registry of all multi style values (map values). Each\n    // value is stored (cached) each time is updated.\n    var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    // this is the index in which this directive has ownership access to write to this\n    // value (anything before is owned by a previous directive that is more important)\n    var ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n    var existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n    var existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n    var existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n    // A shape change means the provided map value has either removed or added new properties\n    // compared to what were in the last time. If a shape change occurs then it means that all\n    // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n    // them. If a shape change has not occurred then there is no reason to check any other\n    // directive values if their identity has not changed. If a previous directive set this\n    // value as dirty (because its own shape changed) then this means that the object has been\n    // offset to a different area in the context. Because its value has been offset then it\n    // can't write to a region that it wrote to before (which may have been apart of another\n    // directive) and therefore its shape changes too.\n    var valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n    var totalUniqueValues = 0;\n    var totalNewAllocatedSlots = 0;\n    // this is a trick to avoid building {key:value} map where all the values\n    // are `true` (this happens when a className string is provided instead of a\n    // map as an input value to this styling algorithm)\n    var applyAllProps = values === true;\n    // STEP 1:\n    // loop through the earlier directives and figure out if any properties here will be placed\n    // in their area (this happens when the value is null because the earlier directive erased it).\n    var ctxIndex = ctxStart;\n    var totalRemainingProperties = props.length;\n    while (ctxIndex < ownershipValuesStartIndex) {\n        var currentProp = getProp(context, ctxIndex);\n        if (totalRemainingProperties) {\n            for (var i = 0; i < props.length; i++) {\n                var mapProp = props[i];\n                var normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                if (normalizedProp && currentProp === normalizedProp) {\n                    var currentValue = getValue(context, ctxIndex);\n                    var currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                    var value = applyAllProps ? true : values[normalizedProp];\n                    var currentFlag = getPointers(context, ctxIndex);\n                    if (hasValueChanged(currentFlag, currentValue, value) &&\n                        allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                        setValue(context, ctxIndex, value);\n                        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        if (hasInitialValueChanged(context, currentFlag, value)) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                    props[i] = null;\n                    totalRemainingProperties--;\n                    break;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // STEP 2:\n    // apply the left over properties to the context in the correct order.\n    if (totalRemainingProperties) {\n        var sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n        propertiesLoop: for (var i = 0; i < props.length; i++) {\n            var mapProp = props[i];\n            if (!mapProp) {\n                // this is an early exit in case a value was already encountered above in the\n                // previous loop (which means that the property was applied or rejected)\n                continue;\n            }\n            var value = applyAllProps ? true : values[mapProp];\n            var normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n            var isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n            for (var j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                var distantCtxProp = getProp(context, j);\n                if (distantCtxProp === normalizedProp) {\n                    var distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                    var distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                    var distantCtxValue = getValue(context, j);\n                    var distantCtxFlag = getPointers(context, j);\n                    if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                        // even if the entry isn't updated (by value or directiveIndex) then\n                        // it should still be moved over to the correct spot in the array so\n                        // the iteration loop is tighter.\n                        if (isInsideOwnershipArea) {\n                            swapMultiContextEntries(context, ctxIndex, j);\n                            totalUniqueValues++;\n                        }\n                        if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                            if (value === null || value === undefined && value !== distantCtxValue) {\n                                valuesEntryShapeChange = true;\n                            }\n                            setValue(context, ctxIndex, value);\n                            // SKIP IF INITIAL CHECK\n                            // If the former `value` is `null` then it means that an initial value\n                            // could be being rendered on screen. If that is the case then there is\n                            // no point in updating the value in case it matches. In other words if the\n                            // new value is the exact same as the previously rendered value (which\n                            // happens to be the initial value) then do nothing.\n                            if (distantCtxValue !== null ||\n                                hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        if (distantCtxDirectiveIndex !== directiveIndex ||\n                            playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        }\n                    }\n                    ctxIndex += 4 /* Size */;\n                    continue propertiesLoop;\n                }\n            }\n            // fallback case ... value not found at all in the context\n            if (value != null) {\n                valuesEntryShapeChange = true;\n                totalUniqueValues++;\n                var flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                    1 /* Dirty */;\n                var insertionIndex = isInsideOwnershipArea ?\n                    ctxIndex :\n                    (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                totalNewAllocatedSlots++;\n                ctxEnd += 4 /* Size */;\n                ctxIndex += 4 /* Size */;\n                dirty = true;\n            }\n        }\n    }\n    // STEP 3:\n    // Remove (nullify) any existing entries in the context that were not apart of the\n    // map input value that was passed into this algorithm for this directive.\n    while (ctxIndex < ctxEnd) {\n        valuesEntryShapeChange = true; // some values are missing\n        var ctxValue = getValue(context, ctxIndex);\n        var ctxFlag = getPointers(context, ctxIndex);\n        var ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n        if (ctxValue != null) {\n            valuesEntryShapeChange = true;\n        }\n        if (hasValueChanged(ctxFlag, ctxValue, null)) {\n            setValue(context, ctxIndex, null);\n            // only if the initial value is falsy then\n            if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                setDirty(context, ctxIndex, true);\n                dirty = true;\n            }\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // Because the object shape has changed, this means that all follow-up directives will need to\n    // reapply their values into the object. For this to happen, the cached array needs to be updated\n    // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n    // the reapplication of styling code within the context will reshape it and update the offset\n    // values (also follow-up directives can write new values in case earlier directives set anything\n    // to null due to removals or falsy values).\n    valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n    updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n    if (dirty) {\n        setContextDirty(context, true);\n        setDirectiveDirty(context, directiveIndex, true);\n    }\n    return totalNewAllocatedSlots;\n}\n/**\n * Sets and resolves a single class value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * @param context The styling context that will be updated with the\n *    newly provided class value.\n * @param offset The index of the CSS class which is being updated.\n * @param addOrRemove Whether or not to add or remove the CSS class\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n */\nfunction updateClassProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, true, directiveRef, forceOverride);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style value.\n * @param offset The index of the property which is being updated.\n * @param value The CSS style value that will be assigned\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n */\nfunction updateStyleProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, false, directiveRef, forceOverride);\n}\nfunction updateSingleStylingValue(context, offset, input, isClassBased, directiveRef, forceOverride) {\n    var directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    var singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    var currValue = getValue(context, singleIndex);\n    var currFlag = getPointers(context, singleIndex);\n    var currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n        var isClassBased_1 = (currFlag & 2 /* Class */) === 2 /* Class */;\n        var element = context[0 /* ElementPosition */];\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(input, element, isClassBased_1 ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        var value_1 = (playerBuilder ? input.value : input);\n        var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        var playerBuildersAreDirty = false;\n        var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            var prop = getProp(context, singleIndex);\n            var sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value_1);\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n            var multiDirty = false;\n            var singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value_1, isClassBased_1) && valueExists(valueForMulti, isClassBased_1)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setDirectiveDirty(context, directiveIndex, true);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param lElement the element that the styles will be rendered on\n * @param context The styling context that will be used to determine\n *      what styles will be rendered\n * @param renderer the renderer that will be used to apply the styling\n * @param classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @returns number the total amount of players that got queued for animation (if any)\n */\nfunction renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n    var totalPlayersQueued = 0;\n    var targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n        var flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        var native = context[0 /* ElementPosition */];\n        var multiStartIndex = getMultiStylesStartIndex(context);\n        var stillDirty = false;\n        for (var i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                var flag = getPointers(context, i);\n                var directiveIndex = getDirectiveIndexFromEntry(context, i);\n                if (targetDirectiveIndex !== directiveIndex) {\n                    stillDirty = true;\n                    continue;\n                }\n                var prop = getProp(context, i);\n                var value = getValue(context, i);\n                var styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                var playerBuilder = getPlayerBuilder(context, i);\n                var isClassBased = flag & 2 /* Class */ ? true : false;\n                var isInSingleRegion = i < multiStartIndex;\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                    // single values ALWAYS have a reference to a multi index\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it in case there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                // Note that we ignore class-based deferals because otherwise a class can never\n                // be removed in the case that it exists as true in the initial classes list...\n                if (!valueExists(valueToApply, isClassBased)) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                // if the first render is true then we do not want to start applying falsy\n                // values to the DOM element's styling. Otherwise then we know there has\n                // been a change and even if it's falsy then it's removing something that\n                // was truthy before.\n                var doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        setStyle(native, prop, valueToApply, renderer, styleSanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : rootOrView;\n            var playerContext = getPlayerContext(context);\n            var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                var builder = playerContext[i];\n                var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                var oldPlayer = playerContext[playerInsertionIndex];\n                if (builder) {\n                    var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            var wasQueued = addPlayerInternal(playerContext, rootContext, native, player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setDirectiveDirty(context, targetDirectiveIndex, false);\n        setContextDirty(context, stillDirty);\n    }\n    return totalPlayersQueued;\n}\n/**\n * Assigns a style value to a style property for the given element.\n *\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native.style.setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native.style.removeProperty(prop);\n    }\n}\n/**\n * Adds/removes the provided className value to the provided element.\n *\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n        // DOMTokenList will throw if we try to add or remove an empty string.\n    }\n    else if (className !== '') {\n        if (add) {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                native['classList'].add(className);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                native['classList'].remove(className);\n        }\n    }\n}\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        context[index] |= 4 /* Sanitize */;\n    }\n    else {\n        context[index] &= ~4 /* Sanitize */;\n    }\n}\nfunction setDirty(context, index, isDirtyYes) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        context[adjustedIndex] |= 1 /* Dirty */;\n    }\n    else {\n        context[adjustedIndex] &= ~1 /* Dirty */;\n    }\n}\nfunction isDirty(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 1 /* Dirty */) == 1 /* Dirty */;\n}\nfunction isClassBasedValue(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 2 /* Class */) == 2 /* Class */;\n}\nfunction isSanitizable(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\nfunction getInitialValue(context, flag) {\n    var index = getInitialIndex(flag);\n    var entryIsClassBased = flag & 2 /* Class */;\n    var initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n        context[3 /* InitialStyleValuesPosition */];\n    return initialValues[index];\n}\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\nfunction getMultiOrSingleIndex(flag) {\n    var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\nfunction getMultiClassesStartIndex(context) {\n    var classCache = context[6 /* CachedMultiClasses */];\n    return classCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\nfunction getMultiStylesStartIndex(context) {\n    var stylesCache = context[7 /* CachedMultiStyles */];\n    return stylesCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    var playerContext = context[8 /* PlayerContext */];\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    var playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\nfunction directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    var value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\nfunction getPlayerBuilderIndex(context, index) {\n    var flag = context[index + 3 /* PlayerBuilderIndexOffset */];\n    var playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\nfunction getPlayerBuilder(context, index) {\n    var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        var playerContext = context[8 /* PlayerContext */];\n        if (playerContext) {\n            return playerContext[playerBuilderIndex];\n        }\n    }\n    return null;\n}\nfunction setFlag(context, index, flag) {\n    var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\nfunction getPointers(context, index) {\n    var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return context[adjustedIndex];\n}\nfunction getValue(context, index) {\n    return context[index + 2 /* ValueOffset */];\n}\nfunction getProp(context, index) {\n    return context[index + 1 /* PropertyOffset */];\n}\nfunction isContextDirty(context) {\n    return isDirty(context, 1 /* MasterFlagPosition */);\n}\nfunction setContextDirty(context, isDirtyYes) {\n    setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n}\nfunction setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        context[1 /* MasterFlagPosition */] |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        context[1 /* MasterFlagPosition */] &= ~8 /* PlayerBuildersDirty */;\n    }\n}\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    if (indexA === indexB)\n        return;\n    var tmpValue = getValue(context, indexA);\n    var tmpProp = getProp(context, indexA);\n    var tmpFlag = getPointers(context, indexA);\n    var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    var tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n    var flagA = tmpFlag;\n    var flagB = getPointers(context, indexB);\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        var _flag = getPointers(context, singleIndexA);\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        var _flag = getPointers(context, singleIndexB);\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    var playerIndexA = getPlayerBuilderIndex(context, indexB);\n    var directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n}\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        var multiFlag = getPointers(context, i);\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            var singleFlag = getPointers(context, singleIndex);\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\nfunction valueExists(value, isClassBased) {\n    return value !== null;\n}\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    var flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    var initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\nfunction hasInitialValueChanged(context, flag, newValue) {\n    var initialValue = getInitialValue(context, flag);\n    return !initialValue || hasValueChanged(flag, initialValue, newValue);\n}\nfunction hasValueChanged(flag, a, b) {\n    var isClassBased = flag & 2 /* Class */;\n    var hasValues = a && b;\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return a.toString() !== b.toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\nvar ClassAndStylePlayerBuilder = /** @class */ (function () {\n    function ClassAndStylePlayerBuilder(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = factory;\n    }\n    ClassAndStylePlayerBuilder.prototype.setValue = function (prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    };\n    ClassAndStylePlayerBuilder.prototype.buildPlayer = function (currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            var player = this._factory.fn(this._element, this._type, this._values, isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    };\n    return ClassAndStylePlayerBuilder;\n}());\nfunction getDirectiveIndexFromEntry(context, index) {\n    var value = context[index + 3 /* PlayerBuilderIndexOffset */];\n    return value & 65535 /* BitMask */;\n}\nfunction getDirectiveIndexFromRegistry(context, directiveRef) {\n    var directiveIndex;\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var index = getDirectiveRegistryValuesIndexOf(dirs, directiveRef);\n    if (index === -1) {\n        // if the directive was not allocated then this means that styling is\n        // being applied in a dynamic way AFTER the element was already instantiated\n        index = dirs.length;\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n        dirs.push(null, null, null, null);\n        dirs[index + 0 /* DirectiveValueOffset */] = directiveRef;\n        dirs[index + 2 /* DirtyFlagOffset */] = false;\n        dirs[index + 1 /* SinglePropValuesIndexOffset */] = -1;\n        var classesStartIndex = getMultiClassesStartIndex(context) || 9 /* SingleStylesStartPosition */;\n        registerMultiMapEntry(context, directiveIndex, true, context.length);\n        registerMultiMapEntry(context, directiveIndex, false, classesStartIndex);\n    }\n    else {\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n    }\n    return directiveIndex;\n}\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n    for (var i = 0; i < directives.length; i += 4 /* Size */) {\n        if (directives[i] === directive) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (var i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    var singlePropOffsetRegistryIndex = context[2 /* DirectiveRegistryPosition */][(directiveIndex * 4 /* Size */) +\n        1 /* SinglePropValuesIndexOffset */];\n    var offsets = context[5 /* SinglePropOffsetPositions */];\n    var indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\nfunction getStyleSanitizer(context, directiveIndex) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var value = dirs[directiveIndex * 4 /* Size */ +\n        3 /* StyleSanitizerOffset */] ||\n        dirs[3 /* StyleSanitizerOffset */] || null;\n    return value;\n}\nfunction isDirectiveDirty(context, directiveIndex) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    return dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */];\n}\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */] = dirtyYes;\n}\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced in case an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // this decides what to do if and when there is a collision.\n    if (currentValue != null) {\n        if (newValue != null) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value in case it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * Returns the className string of all the initial classes for the element.\n *\n * This function is designed to populate and cache all the static class\n * values into a className string. The caching mechanism works by placing\n * the completed className string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @returns the className string (e.g. `on active red`)\n */\nfunction getInitialClassNameValue(context) {\n    var initialClassValues = context[4 /* InitialClassValuesPosition */];\n    var className = initialClassValues[1 /* CachedStringValuePosition */];\n    if (className === null) {\n        className = '';\n        for (var i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n            var isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        initialClassValues[1 /* CachedStringValuePosition */] = className;\n    }\n    return className;\n}\n/**\n * Returns the style string of all the initial styles for the element.\n *\n * This function is designed to populate and cache all the static style\n * values into a style string. The caching mechanism works by placing\n * the completed style string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @returns the style string (e.g. `width:100px;height:200px`)\n */\nfunction getInitialStyleStringValue(context) {\n    var initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n    var styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n    if (styleString === null) {\n        styleString = '';\n        for (var i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n            var value = initialStyleValues[i + 1];\n            if (value !== null) {\n                styleString += (styleString.length ? ';' : '') + (initialStyleValues[i] + \":\" + value);\n            }\n        }\n        initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n    }\n    return styleString;\n}\n/**\n * Returns the current cached mutli-value for a given directiveIndex within the provided context.\n */\nfunction readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n    var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    return values[index + 2 /* ValueOffset */] || null;\n}\n/**\n * Determines whether the provided multi styling value should be updated or not.\n *\n * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n * applying new values, the styling algorithm may not update an existing entry into\n * the context if a previous directive's entry changed shape.\n *\n * This function will decide whether or not a value should be applied (if there is a\n * cache miss) to the context based on the following rules:\n *\n * - If there is an identity change between the existing value and new value\n * - If there is no existing value cached (first write)\n * - If a previous directive flagged the existing cached value as dirty\n */\nfunction isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n    var indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n    var cachedValues = context[indexOfCachedValues];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    if (cachedValues[index + 0 /* DirtyFlagOffset */])\n        return false;\n    return newValue === NO_CHANGE ||\n        readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n}\n/**\n * Updates the cached status of a multi-styling value in the context.\n *\n * The cached map array (which exists in the context) contains a manifest of\n * each multi-styling entry (`[style]` and `[class]` entries) for the template\n * as well as all directives.\n *\n * This function will update the cached status of the provided multi-style\n * entry within the cache.\n *\n * When called, this function will update the following information:\n * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n * - The total amount of unique styling entries that this value has written into the context\n * - The exact position of where the multi styling entries start in the context for this binding\n * - The dirty flag will be set to true\n *\n * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n * entries that exist as apart of other directives) to be dirty as well. This will force the\n * styling algorithm to reapply those values once change detection checks them (which will in\n * turn cause the styling context to update itself and the correct styling values will be\n * rendered on screen).\n */\nfunction updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n    var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // in the event that this is true we assume that future values are dirty and therefore\n    // will be checked again in the next CD cycle\n    if (dirtyFutureValues) {\n        var nextStartPosition = startPosition + totalValues * 4 /* Size */;\n        for (var i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n            values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n            values[i + 0 /* DirtyFlagOffset */] = 1;\n        }\n    }\n    values[index + 0 /* DirtyFlagOffset */] = 0;\n    values[index + 1 /* PositionStartOffset */] = startPosition;\n    values[index + 2 /* ValueOffset */] = cacheValue;\n    values[index + 3 /* ValueCountOffset */] = totalValues;\n    // the code below counts the total amount of styling values that exist in\n    // the context up until this directive. This value will be later used to\n    // update the cached value map's total counter value.\n    var totalStylingEntries = totalValues;\n    for (var i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n        totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n    }\n    // because style values come before class values in the context this means\n    // that if any new values were inserted then the cache values array for\n    // classes is out of sync. The code below will update the offsets to point\n    // to their new values.\n    if (!entryIsClassBased) {\n        var classCache = context[6 /* CachedMultiClasses */];\n        var classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n        var diffInStartPosition = endPosition - classesStartPosition;\n        for (var i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n            classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n        }\n    }\n    values[0 /* EntriesCountPosition */] = totalStylingEntries;\n}\nfunction hyphenateEntries(entries) {\n    var newEntries = [];\n    for (var i = 0; i < entries.length; i++) {\n        newEntries.push(hyphenate(entries[i]));\n    }\n    return newEntries;\n}\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, function (match) { return match.charAt(0) + \"-\" + match.charAt(1).toLowerCase(); });\n}\nfunction registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count) {\n    if (count === void 0) { count = 0; }\n    var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    if (directiveIndex > 0) {\n        var limit = 1 /* ValuesStartPosition */ +\n            (directiveIndex * 4 /* Size */);\n        while (cachedValues.length < limit) {\n            // this means that ONLY directive class styling (like ngClass) was used\n            // therefore the root directive will still need to be filled in as well\n            // as any other directive spaces in case they only used static values\n            cachedValues.push(0, startPosition, null, 0);\n        }\n    }\n    cachedValues.push(0, startPosition, null, count);\n}\n/**\n * Inserts or updates an existing entry in the provided `staticStyles` collection.\n *\n * @param index the index representing an existing styling entry in the collection:\n *  if provided (numeric): then it will update the existing entry at the given position\n *  if null: then it will insert a new entry within the collection\n * @param staticStyles a collection of style or class entries where the value will\n *  be inserted or patched\n * @param prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n * @param value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @returns the index of the updated or new entry within the collection\n */\nfunction addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n    if (index === null) {\n        index = staticStyles.length;\n        staticStyles.push(null, null, null);\n        staticStyles[index + 0 /* PropOffset */] = prop;\n    }\n    staticStyles[index + 1 /* ValueOffset */] = value;\n    staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n    return index;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NG_TEMPLATE_SELECTOR = 'ng-template';\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    var nodeClassesLen = nodeClassAttrVal.length;\n    var matchIndex = nodeClassAttrVal.indexOf(cssClassToMatch);\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    var tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n        NG_TEMPLATE_SELECTOR :\n        tNode.tagName;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    var mode = 4 /* ELEMENT */;\n    var nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    var skipToNextSelector = false;\n    for (var i = 0; i < selector.length; i++) {\n        var current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = current | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* CLASS */) && tNode.stylingTemplate) {\n                if (!isCssClassMatching(readClassValueFromTNode(tNode), selectorAttrValue)) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            var isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n            var attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                var nodeAttrValue = void 0;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = nodeAttrs[attrIndexInNode + 1];\n                }\n                var compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    !isCssClassMatching(compareAgainstClassName, selectorAttrValue) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\nfunction readClassValueFromTNode(tNode) {\n    // comparing against CSS class values is complex because the compiler doesn't place them as\n    // regular attributes when an element is created. Instead, the classes (and styles for\n    // that matter) are placed in a special styling context that is used for resolving all\n    // class/style values across static attributes, [style]/[class] and [style.prop]/[class.name]\n    // bindings. Therefore if and when the styling context exists then the class values are to be\n    // extracted by the context helper code below...\n    return tNode.stylingTemplate ? getInitialClassNameValue(tNode.stylingTemplate) : '';\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * =========================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes\n * =========================================================================================\n * Inline + Projection     | YES               | YES                 | NO\n * -----------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES\n * -----------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO\n * -----------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO\n * =========================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    var i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        var bindingsMode = false;\n        while (i < attrs.length) {\n            var maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* Bindings */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 4 /* Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode) {\n    if (isProjectionMode === void 0) { isProjectionMode = false; }\n    for (var i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n    var nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching projection selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be\n * compared to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n */\nfunction matchingProjectionSelectorIndex(tNode, selectors, textSelectors) {\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null &&\n                isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */ true)) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (var i = 0; i < nodeAttrs.length; i++) {\n        var nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n    var i = attrs.indexOf(4 /* Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            if (attrs[i] === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n */\nfunction refreshDescendantViews(lView) {\n    var tView = lView[TVIEW];\n    var creationMode = isCreationMode(lView);\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!creationMode) {\n        var checkNoChangesMode = getCheckNoChangesMode();\n        executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView, lView);\n        resetPreOrderHookFlags(lView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n        setHostBindings(tView, lView);\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (creationMode && tView.staticContentQueries) {\n        refreshContentQueries(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/** Sets the host bindings for the current view. */\nfunction setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        var currentDirectiveIndex = -1;\n        var currentElementIndex = -1;\n        for (var i = 0; i < tView.expandoInstructions.length; i++) {\n            var instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    // Injector block and providers are taken into account.\n                    var providerCount = tView.expandoInstructions[++i];\n                    bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    var hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                    setActiveHost(hostCtx, currentElementIndex);\n                    instruction(2 /* Update */, hostCtx, currentElementIndex);\n                    setActiveHost(null);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/** Refreshes content queries for all directives in the given view. */\nfunction refreshContentQueries(tView, lView) {\n    if (tView.contentQueries != null) {\n        setCurrentQueryIndex(0);\n        for (var i = 0; i < tView.contentQueries.length; i++) {\n            var directiveDefIdx = tView.contentQueries[i];\n            var directiveDef = tView.data[directiveDefIdx];\n            ngDevMode &&\n                assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n            directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n    }\n}\n/** Refreshes child components in the current view. */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param name the tag name\n * @param overriddenRenderer Optional A renderer to override the default one\n * @returns the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n    var native;\n    var rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    var namespace = getNamespace();\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, namespace);\n    }\n    else {\n        if (namespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(namespace, name);\n        }\n    }\n    return native;\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n    var lView = tView.blueprint.slice();\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n    resetPreOrderHookFlags(lView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n    lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\nfunction createNodeAtIndex(index, type, native, name, attrs) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    var adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, \"Slot should have been initialized with null\");\n    lView[adjustedIndex] = native;\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    var isParent = getIsParent();\n    var tNode = tView.data[adjustedIndex];\n    if (tNode == null) {\n        var parent_1 = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        var parentInSameView = parent_1 && parent_1 !== lView[T_HOST];\n        var tParentNode = parentInSameView ? parent_1 : null;\n        tNode = tView.data[adjustedIndex] = createTNode(tParentNode, type, adjustedIndex, name, attrs);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return tNode;\n}\nfunction assignTViewNodeToLView(tView, tParentNode, index, lView) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    var tNode = tView.node;\n    if (tNode == null) {\n        ngDevMode && tParentNode &&\n            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n        tView.node = tNode = createTNode(tParentNode, //\n        2 /* View */, index, null, null);\n    }\n    return lView[T_HOST] = tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n */\nfunction allocExpando(view, numSlotsToAlloc) {\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        for (var i = 0; i < numSlotsToAlloc; i++) {\n            tView.blueprint.push(null);\n            tView.data.push(null);\n            view.push(null);\n        }\n        // We should only increment the expando start index if there aren't already directives\n        // and injectors saved in the \"expando\" section\n        if (!tView.expandoInstructions) {\n            tView.expandoStartIndex += numSlotsToAlloc;\n        }\n        else {\n            // Since we're adding the dynamic nodes into the expando section, we need to let the host\n            // bindings know that they should skip x slots\n            tView.expandoInstructions.push(numSlotsToAlloc);\n        }\n    }\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n    var _isParent = getIsParent();\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(null);\n    var lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    assignTViewNodeToLView(tView, null, -1, lView);\n    if (tView.firstTemplatePass) {\n        tView.node.injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n    var _isParent = getIsParent();\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    var oldView;\n    if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode(null);\n            oldView = enterView(viewToRender, viewToRender[T_HOST]);\n            resetPreOrderHookFlags(viewToRender);\n            namespaceHTML();\n            tView.template(getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView(oldView);\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    var rendererFactory = hostView[RENDERER_FACTORY];\n    var oldView = enterView(hostView, hostView[T_HOST]);\n    var normalExecutionPath = !getCheckNoChangesMode();\n    var creationModeIsActive = isCreationMode(hostView);\n    try {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (creationModeIsActive) {\n            // creation mode pass\n            if (templateFn) {\n                namespaceHTML();\n                templateFn(1 /* Create */, context);\n            }\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        // update mode pass\n        resetPreOrderHookFlags(hostView);\n        templateFn && templateFn(2 /* Update */, context);\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Appropriately sets `stylingTemplate` on a TNode\n *\n * Does not apply styles to DOM nodes\n *\n * @param tNode The node whose `stylingTemplate` to set\n * @param attrs The attribute array source to set the attributes from\n * @param attrsStartIndex Optional start index to start processing the `attrs` from\n */\nfunction setNodeStylingTemplate(tView, tNode, attrs, attrsStartIndex) {\n    if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n        var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, attrsStartIndex);\n        if (stylingAttrsStartIndex >= 0) {\n            tNode.stylingTemplate = initializeStaticContext(attrs, stylingAttrsStartIndex);\n        }\n    }\n}\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            var def = tView.data[directiveIndex];\n            if (def.contentQueries) {\n                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param localRefs Local refs of the node in question\n * @param localRefExtractor mapping function that extracts local ref value from TNode\n */\nfunction createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n    if (!getBindingsEnabled())\n        return;\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, lView, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n    saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    var localNames = tNode.localNames;\n    if (localNames) {\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            var index = localNames[i + 1];\n            var value = index === -1 ?\n                localRefExtractor(tNode, viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param templateFn The template from which to get static data\n * @param consts The number of nodes, local refs, and pipes in this view\n * @param vars The number of bindings and pure function bindings in this view\n * @param directives Directive defs that should be saved on TView\n * @param pipes Pipe defs that should be saved on TView\n * @param viewQuery View query that should be saved on TView\n * @param schemas Schemas that should be saved on TView\n * @returns TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery, schemas));\n}\n/**\n * Creates a TView instance\n *\n * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param templateFn Template function\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    ngDevMode && ngDevMode.tView++;\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    var initialViewLength = bindingStartIndex + vars;\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[TVIEW] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: null,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        viewQueryStartIndex: initialViewLength,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n    };\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    var blueprint = new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex);\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\nfunction createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + renderStringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param elementOrSelector Render element or CSS selector to locate the element.\n */\nfunction locateHostElement(factory, elementOrSelector) {\n    var defaultRenderer = factory.createRenderer(null, null);\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n    var lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n */\nfunction storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(view[CLEANUP].length - 1, null);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param type The type of the node\n * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nfunction createTNode(tParent, type, adjustedIndex, tagName, attrs) {\n    ngDevMode && ngDevMode.tNode++;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        propertyMetadataStartIndex: -1,\n        propertyMetadataEndIndex: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: null,\n        next: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        stylingTemplate: null,\n        projection: null,\n        onElementCreationFns: null,\n    };\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param tNodeFlags node flags\n * @param direction whether to consider inputs or outputs\n * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    var tView = getLView()[TVIEW];\n    var propStore = null;\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    if (end > start) {\n        var isInput = direction === 0 /* Input */;\n        var defs = tView.data;\n        for (var i = start; i < end; i++) {\n            var directiveDef = defs[i];\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    var internalName = propertyAliasMap[publicName];\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                        (propStore[publicName] = [i, publicName, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n//////////////////////////\n//// Text\n//////////////////////////\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, rootTNode);\n    postProcessBaseDirective(viewData, rootTNode, directive);\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    var exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (var i = 0; i < directives.length; i++) {\n            var def = directives[i];\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        var initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n        var initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n        var nodeIndex = tNode.index - HEADER_OFFSET;\n        for (var i = 0; i < directives.length; i++) {\n            var def = directives[i];\n            var directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap(tView.data.length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    if (!tView.firstTemplatePass && start < end) {\n        getOrCreateNodeInjectorForNode(tNode, lView);\n    }\n    for (var i = start; i < end; i++) {\n        var def = tView.data[i];\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, def);\n        }\n        var directive = getNodeInjectable(tView.data, lView, i, tNode);\n        postProcessDirective(lView, directive, def, i);\n    }\n}\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    var expando = tView.expandoInstructions;\n    var firstTemplatePass = tView.firstTemplatePass;\n    for (var i = start; i < end; i++) {\n        var def = tView.data[i];\n        var directive = viewData[i];\n        if (def.hostBindings) {\n            invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\nfunction invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n    var previousExpandoLength = expando.length;\n    setCurrentDirectiveDef(def);\n    var elementIndex = tNode.index - HEADER_OFFSET;\n    setActiveHost(directive, elementIndex);\n    def.hostBindings(1 /* Create */, directive, elementIndex);\n    setActiveHost(null);\n    setCurrentDirectiveDef(null);\n    // `hostBindings` function may or may not contain `allocHostVars` call\n    // (e.g. it may not if it only contains host listeners), so we need to check whether\n    // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n    // expando block, to make sure we execute it for DI cycle\n    if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n    }\n}\n/**\n* Generates a new block in TView.expandoInstructions for this node.\n*\n* Each expando block starts with the element index (turned negative so we can distinguish\n* it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n*/\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    var elementIndex = -(tNode.index - HEADER_OFFSET);\n    var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    var providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * Process a directive on the current node after its creation.\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n    }\n    if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    if (isComponentDef(def)) {\n        var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n}\n/**\n* Matches the current node against all available selectors.\n* If a component is matched (at most one), it is returned in first position in the array.\n*/\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    var registry = tView.directiveRegistry;\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            var def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(getPreviousOrParentTNode(), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/** Stores index of component's host element so it will be queued for view refresh during CD. */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n    var tView = getLView()[TVIEW];\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n* Builds up an export map as directives are created, so local refs can be quickly mapped\n* to their directive instances.\n*/\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (var i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = index;\n            }\n        }\n        if (def.template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n    var flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    var rendererFactory = lView[RENDERER_FACTORY];\n    var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], previousOrParentTNode, rendererFactory, lView[RENDERER_FACTORY].createRenderer(native, def)));\n    componentView[T_HOST] = previousOrParentTNode;\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[previousOrParentTNode.index] = componentView;\n    if (lView[TVIEW].firstTemplatePass) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n    var initialInputData = tNode.initialInputs;\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n    }\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        var setInput = def.setInput;\n        for (var i = 0; i < initialInputs.length;) {\n            var publicName = initialInputs[i++];\n            var privateName = initialInputs[i++];\n            var value = initialInputs[i++];\n            if (setInput) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param directiveIndex Index to store the initial input data\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data on this node\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    var attrs = tNode.attrs;\n    var i = 0;\n    while (i < attrs.length) {\n        var attrName = attrs[i];\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        var minifiedInputName = inputs[attrName];\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(attrName, minifiedInputName, attrValue);\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n    ngDevMode && assertDomNode(native);\n    ngDevMode && assertLView(currentView);\n    var lContainer = [\n        hostNative,\n        true,\n        isForViewContainerRef ? -1 : 0,\n        currentView,\n        null,\n        null,\n        tNode,\n        native,\n        [],\n    ];\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (var current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            var container = current;\n            for (var i = 0; i < container[VIEWS].length; i++) {\n                var dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], dynamicViewData[CONTEXT]);\n            }\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction componentRefresh(adjustedElementIndex) {\n    var lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    var hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType(lView[TVIEW].data[adjustedElementIndex], 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttachedToChangeDetector(hostView) &&\n        hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param componentView The view to sync\n */\nfunction syncViewWithBlueprint(componentView) {\n    var componentTView = componentView[TVIEW];\n    for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer to\n    // the end of the queue, which means if the developer retrieves the LContainers from RNodes out of\n    // order, the change detection will run out of order, as the act of retrieving the the LContainer\n    // from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 64 /* Dirty */;\n        var parent_2 = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent_2) {\n            return lView;\n        }\n        // continue otherwise\n        lView = parent_2;\n    }\n    return null;\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nfunction scheduleTick(rootContext, flags) {\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        var res_1;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                var playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            res_1(null);\n        });\n    }\n}\nfunction tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        var rootComponent = rootContext.components[i];\n        renderComponentOrTemplate(readPatchedLView(rootComponent), rootComponent);\n    }\n}\nfunction detectChangesInternal(view, context) {\n    var rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        if (isCreationMode(view)) {\n            checkView(view, context); // creation mode pass\n        }\n        checkView(view, context); // update mode pass\n    }\n    catch (error) {\n        handleError(view, error);\n        throw error;\n    }\n    finally {\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lView The view which the change detection should be performed on.\n */\nfunction detectChangesInRootView(lView) {\n    tickRootContext(lView[CONTEXT]);\n}\nfunction checkNoChangesInternal(view, context) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(view, context);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lView The view which the change detection should be checked on.\n */\nfunction checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */\nfunction checkView(hostView, component) {\n    var hostTView = hostView[TVIEW];\n    var oldView = enterView(hostView, hostView[T_HOST]);\n    var templateFn = hostTView.template;\n    var creationMode = isCreationMode(hostView);\n    try {\n        resetPreOrderHookFlags(hostView);\n        namespaceHTML();\n        creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        // Only check view queries again in creation mode if there are static view queries\n        if (!creationMode || hostTView.staticViewQueries) {\n            executeViewQueryFn(2 /* Update */, hostTView, component);\n        }\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\nfunction executeViewQueryFn(flags, tView, component) {\n    var viewQuery = tView.viewQuery;\n    if (viewQuery) {\n        setCurrentQueryIndex(tView.viewQueryStartIndex);\n        viewQuery(flags, component);\n    }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates binding metadata for a particular binding and stores it in\n * TView.data. These are generated in order to support DebugElement.properties.\n *\n * Each binding / interpolation will have one (including attribute bindings)\n * because at the time of binding, we don't know to which instruction the binding\n * belongs. It is always stored in TView.data at the index of the last binding\n * value in LView (e.g. for interpolation8, it would be stored at the index of\n * the 8th value).\n *\n * @param lView The LView that contains the current binding index.\n * @param prefix The static prefix string\n * @param suffix The static suffix string\n *\n * @returns Newly created binding metadata string for this binding or null\n */\nfunction storeBindingMetadata(lView, prefix, suffix) {\n    if (prefix === void 0) { prefix = ''; }\n    if (suffix === void 0) { suffix = ''; }\n    var tData = lView[TVIEW].data;\n    var lastBindingIndex = lView[BINDING_INDEX] - 1;\n    var value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n    return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n}\nvar CLEAN_PROMISE = _CLEAN_PROMISE;\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(tNode, lView) {\n    var componentLView = lView[tNode.index];\n    return componentLView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n    var injector = lView[INJECTOR$1];\n    var errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param lView the `LView` which contains the directives.\n * @param inputAliases mapping between the public \"input\" name and privately-known,\n * possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    var tView = lView[TVIEW];\n    for (var i = 0; i < inputs.length;) {\n        var index = inputs[i++];\n        var publicName = inputs[i++];\n        var privateName = inputs[i++];\n        var instance = lView[index];\n        ngDevMode && assertDataInRange(lView, index);\n        var def = tView.data[index];\n        var setInput = def.setInput;\n        if (setInput) {\n            def.setInput(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction applyOnCreateInstructions(tNode) {\n    // there may be some instructions that need to run in a specific\n    // order because the CREATE block in a directive runs before the\n    // CREATE block in a template. To work around this instructions\n    // can get access to the function array below and defer any code\n    // to run after the element is created.\n    var fns;\n    if (fns = tNode.onElementCreationFns) {\n        for (var i = 0; i < fns.length; i++) {\n            fns[i]();\n        }\n        tNode.onElementCreationFns = null;\n    }\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @param startTNode The TNode instance of the starting element\n * @returns The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        var injectorIndex = startTNode.parent.injectorIndex;\n        var parentTNode_1 = startTNode.parent;\n        while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n            parentTNode_1 = parentTNode_1.parent;\n        }\n        return parentTNode_1;\n    }\n    var viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    var parentView = startView;\n    var parentTNode = startView[T_HOST];\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = parentView[DECLARATION_VIEW];\n        parentTNode = parentView[T_HOST];\n        viewOffset--;\n    }\n    return parentTNode;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param count Amount of vars to be allocated\n */\nfunction allocHostVars(count) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    if (!tView.firstTemplatePass)\n        return;\n    queueHostBindingForCheck(tView, getCurrentDirectiveDef(), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    var expando = tView.expandoInstructions;\n    var length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = expando[length - 1] + hostVars;\n    }\n    else {\n        expando.push(def.hostBindings, hostVars);\n    }\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    for (var i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n    var view = getComponentViewByInstance(component);\n    detectChangesInternal(view, component);\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @param component Component to mark as dirty.\n *\n * @publicApi\n */\nfunction markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    var rootView = markViewDirty(getComponentViewByInstance(component));\n    ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n    scheduleTick(rootView[CONTEXT], 1 /* DetectChanges */);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getLContainer(tNode, embeddedView) {\n    ngDevMode && assertLView(embeddedView);\n    var container = embeddedView[PARENT];\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n        return isLContainer(container) ? container : null;\n    }\n    else {\n        ngDevMode && assertLContainer(container);\n        // This is a inline view node (e.g. embeddedViewStart)\n        return container;\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    var container = getLContainer(tViewNode, view);\n    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param viewToWalk the view to walk\n * @param action identifies the action to be performed on the elements\n * @param renderer the current renderer.\n * @param renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    var e_1, _a;\n    var rootTNode = viewToWalk[TVIEW].node;\n    var projectionNodeIndex = -1;\n    var currentView = viewToWalk;\n    var tNode = rootTNode.child;\n    while (tNode) {\n        var nextTNode = null;\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), tNode, beforeNode);\n            var nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], tNode, beforeNode);\n                if (nodeOrContainer[VIEWS].length) {\n                    currentView = nodeOrContainer[VIEWS][0];\n                    nextTNode = currentView[TVIEW].node;\n                    // When the walker enters a container, then the beforeNode has to become the local native\n                    // comment node.\n                    beforeNode = nodeOrContainer[NATIVE];\n                }\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            var lContainer = currentView[tNode.index];\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], tNode, beforeNode);\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            var componentView = findComponentView(currentView);\n            var componentHost = componentView[T_HOST];\n            var head = componentHost.projection[tNode.projection];\n            if (Array.isArray(head)) {\n                try {\n                    for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                        var nativeNode = head_1_1.value;\n                        executeNodeAction(action, renderer, renderParent, nativeNode, tNode, beforeNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else {\n                // Must store both the TNode and the view because this projection node could be nested\n                // deeply inside embedded views, and we need to get back down to this particular nested\n                // view.\n                projectionNodeStack[++projectionNodeIndex] = tNode;\n                projectionNodeStack[++projectionNodeIndex] = currentView;\n                if (head) {\n                    currentView = componentView[PARENT];\n                    nextTNode = currentView[TVIEW].data[head.index];\n                }\n            }\n        }\n        else {\n            // Otherwise, this is a View\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.projectionNext === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = projectionNodeStack[projectionNodeIndex--];\n                tNode = projectionNodeStack[projectionNodeIndex--];\n            }\n            if (tNode.flags & 2 /* isProjected */) {\n                nextTNode = tNode.projectionNext;\n            }\n            else if (tNode.type === 4 /* ElementContainer */) {\n                nextTNode = tNode.child || tNode.next;\n            }\n            else {\n                nextTNode = tNode.next;\n            }\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[T_HOST];\n                if (tNode === null || tNode === rootTNode)\n                    return;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = getLViewParent(currentView);\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */) {\n                    /**\n                     * If current lView doesn't have next pointer, we try to find it by going up parents\n                     * chain until:\n                     * - we find an lView with a next pointer\n                     * - or find a tNode with a parent that has a next pointer\n                     * - or find a lContainer\n                     * - or reach root TNode (in which case we exit, since we traversed all nodes)\n                     */\n                    while (!currentView[NEXT] && currentView[PARENT] &&\n                        !(tNode.parent && tNode.parent.next)) {\n                        if (tNode === rootTNode)\n                            return;\n                        currentView = currentView[PARENT];\n                        if (isLContainer(currentView)) {\n                            tNode = currentView[T_HOST];\n                            currentView = currentView[PARENT];\n                            beforeNode = currentView[tNode.index][NATIVE];\n                            break;\n                        }\n                        tNode = currentView[T_HOST];\n                    }\n                    if (currentView[NEXT]) {\n                        currentView = currentView[NEXT];\n                        nextTNode = currentView[T_HOST];\n                    }\n                    else {\n                        nextTNode = tNode.type === 4 /* ElementContainer */ && tNode.child || tNode.next;\n                    }\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction executeNodeAction(action, renderer, parent, node, tNode, beforeNode) {\n    if (action === 0 /* Insert */) {\n        nativeInsertBefore(renderer, parent, node, beforeNode || null);\n    }\n    else if (action === 1 /* Detach */) {\n        nativeRemoveNode(renderer, node, isComponent(tNode));\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        renderer.destroyNode(node);\n    }\n}\nfunction createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n        renderer.createTextNode(renderStringify(value));\n}\nfunction addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    var renderParent = getContainerRenderParent(viewToWalk[TVIEW].node, viewToWalk);\n    ngDevMode && assertNodeType(viewToWalk[TVIEW].node, 2 /* View */);\n    if (renderParent) {\n        var renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param lView the `LView` to be detached.\n */\nfunction renderDetachView(lView) {\n    walkTNodeTree(lView, 1 /* Detach */, lView[RENDERER], null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    var lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView);\n    }\n    while (lViewOrLContainer) {\n        var next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            var views = lViewOrLContainer[VIEWS];\n            if (views.length > 0)\n                next = views[0];\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                cleanUpView(lViewOrLContainer);\n                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n            }\n            cleanUpView(lViewOrLContainer || rootView);\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    var views = lContainer[VIEWS];\n    ngDevMode && assertDefined(views, 'Container must have views');\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        lView[QUERIES].insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    var views = lContainer[VIEWS];\n    var viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = viewToDetach[NEXT];\n    }\n    views.splice(removeIndex, 1);\n    addRemoveViewFromContainer(viewToDetach, false);\n    if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n        !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n        viewToDetach[QUERIES].removeView();\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* Attached */;\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param lContainer The container from which to remove a view\n * @param removeIndex The index of the view to remove\n */\nfunction removeView(lContainer, removeIndex) {\n    var view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex);\n    destroyLView(view);\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param view The view to be destroyed.\n */\nfunction destroyLView(view) {\n    if (!(view[FLAGS] & 256 /* Destroyed */)) {\n        var renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n            walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n        }\n        destroyViewTree(view);\n    }\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state\n * @param rootView The rootView, so we don't propagate too far up the view tree\n * @returns The correct parent LViewOrLContainer\n */\nfunction getParentState(lViewOrLContainer, rootView) {\n    var tNode;\n    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return getLContainer(tNode, lViewOrLContainer);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param view The LView to clean up\n */\nfunction cleanUpView(view) {\n    if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        view[FLAGS] &= ~128 /* Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        view[FLAGS] |= 256 /* Destroyed */;\n        executeOnDestroys(view);\n        removeListeners(view);\n        var hostTNode = view[T_HOST];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            view[RENDERER].destroy();\n        }\n        // For embedded views still attached to a container: remove query result from this view.\n        if (viewAttachedToContainer(view) && view[QUERIES]) {\n            view[QUERIES].removeView();\n        }\n    }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction removeListeners(lView) {\n    var tCleanup = lView[TVIEW].cleanup;\n    if (tCleanup != null) {\n        var lCleanup = lView[CLEANUP];\n        for (var i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a listener with the native renderer\n                var idxOrTargetGetter = tCleanup[i + 1];\n                var target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                var listener = lCleanup[tCleanup[i + 2]];\n                var useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // DOM listener\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else if (typeof tCleanup[i] === 'number') {\n                // This is a listener with renderer2 (cleanup fn can be found by index)\n                var cleanupFn = lCleanup[tCleanup[i]];\n                cleanupFn();\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                var context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(view) {\n    var tView = view[TVIEW];\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (var i = 0; i < destroyHooks.length; i += 2) {\n            var context = view[destroyHooks[i]];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                destroyHooks[i + 1].call(context);\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n */\nfunction getRenderParent(tNode, currentView) {\n    // Nodes of the top-most view can be inserted eagerly.\n    if (isRootView(currentView)) {\n        return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    var parent = getHighestElementOrICUContainer(tNode).parent;\n    // If the parent is null, then we are inserting across views: either into an embedded view or a\n    // component view.\n    if (parent == null) {\n        var hostTNode = currentView[T_HOST];\n        if (hostTNode.type === 2 /* View */) {\n            // We are inserting a root element of an embedded view We might delay insertion of children\n            // for a given view if it is disconnected. This might happen for 2 main reasons:\n            // - view is not inserted into any container(view was created but not inserted yet)\n            // - view is inserted into a container but the container itself is not inserted into the DOM\n            // (container might be part of projection or child of a view that is not inserted yet).\n            // In other words we can insert children of a given view if this view was inserted into a\n            // container and the container itself has its render parent determined.\n            return getContainerRenderParent(hostTNode, currentView);\n        }\n        else {\n            // We are inserting a root element of the component view into the component host element and\n            // it should always be eager.\n            return getHostNative(currentView);\n        }\n    }\n    else {\n        ngDevMode && assertNodeType(parent, 3 /* Element */);\n        if (parent.flags & 1 /* isComponent */) {\n            var tData = currentView[TVIEW].data;\n            var tNode_1 = tData[parent.index];\n            var encapsulation = tData[tNode_1.directiveStart].encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation !== ViewEncapsulation.ShadowDom &&\n                encapsulation !== ViewEncapsulation.Native) {\n                return null;\n            }\n        }\n        return getNativeByTNode(parent, currentView);\n    }\n}\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n */\nfunction getHostNative(currentView) {\n    ngDevMode && assertLView(currentView);\n    var hostTNode = currentView[T_HOST];\n    return hostTNode && hostTNode.type === 3 /* Element */ ?\n        getNativeByTNode(hostTNode, getLViewParent(currentView)) :\n        null;\n}\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\nfunction nativeAppendChild(renderer, parent, child) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.appendChild(parent, child);\n    }\n    else {\n        parent.appendChild(child);\n    }\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n    if (beforeNode) {\n        nativeInsertBefore(renderer, parent, child, beforeNode);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.removeChild(parent, child, isHostElement);\n    }\n    else {\n        parent.removeChild(child);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n    return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Finds a native \"anchor\" node for cases where we can't append a native child directly\n * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n * @param parentTNode\n * @param lView\n */\nfunction getNativeAnchorNode(parentTNode, lView) {\n    if (parentTNode.type === 2 /* View */) {\n        var lContainer = getLContainer(parentTNode, lView);\n        var views = lContainer[VIEWS];\n        var index = views.indexOf(lView);\n        return getBeforeNodeForView(index, views, lContainer[NATIVE]);\n    }\n    else if (parentTNode.type === 4 /* ElementContainer */ ||\n        parentTNode.type === 5 /* IcuContainer */) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * The element insertion might be delayed {@link canInsertNativeNode}.\n *\n * @param childEl The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n * @param currentView The current LView\n * @returns Whether or not the child was appended\n */\nfunction appendChild(childEl, childTNode, currentView) {\n    var e_2, _a;\n    var renderParent = getRenderParent(childTNode, currentView);\n    if (renderParent != null) {\n        var renderer = currentView[RENDERER];\n        var parentTNode = childTNode.parent || currentView[T_HOST];\n        var anchorNode = getNativeAnchorNode(parentTNode, currentView);\n        if (Array.isArray(childEl)) {\n            try {\n                for (var childEl_1 = __values(childEl), childEl_1_1 = childEl_1.next(); !childEl_1_1.done; childEl_1_1 = childEl_1.next()) {\n                    var nativeNode = childEl_1_1.value;\n                    nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (childEl_1_1 && !childEl_1_1.done && (_a = childEl_1.return)) _a.call(childEl_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n        }\n    }\n}\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param tNode The starting TNode for which we should skip element and ICU containers\n * @returns The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode) {\n    while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n        tNode.parent.type === 5 /* IcuContainer */)) {\n        tNode = tNode.parent;\n    }\n    return tNode;\n}\nfunction getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        var view = views[index + 1];\n        var viewTNode = view[T_HOST];\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    var nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n * stored on a component host level.\n * @param lView A LView where nodes are inserted (target VLview)\n * @param tProjectionNode A projection node where previously re-distribution should be appended\n * (target insertion place)\n * @param selectorIndex A bucket from where nodes to project should be taken\n * @param componentView A where projectable nodes were initially created (source view)\n */\nfunction appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n    var projectedView = componentView[PARENT];\n    var componentNode = componentView[T_HOST];\n    var nodeToProject = componentNode.projection[selectorIndex];\n    if (Array.isArray(nodeToProject)) {\n        appendChild(nodeToProject, tProjectionNode, lView);\n    }\n    else {\n        while (nodeToProject) {\n            if (nodeToProject.type === 1 /* Projection */) {\n                appendProjectedNodes(lView, tProjectionNode, nodeToProject.projection, findComponentView(projectedView));\n            }\n            else {\n                // This flag must be set now or we won't know that this node is projected\n                // if the nodes are inserted into a container later.\n                nodeToProject.flags |= 2 /* isProjected */;\n                appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n            }\n            nodeToProject = nodeToProject.projectionNext;\n        }\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param projectedTNode The TNode to be projected\n * @param tProjectionNode The projection (ng-content) TNode\n * @param currentView Current LView\n * @param projectionView Projection view (view above current)\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    var native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    var nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        var views = nodeOrContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            var ngContainerChildTNode = projectedTNode.child;\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param index The index of the container in the data array\n */\nfunction container(index) {\n    var tNode = containerInternal(index, null, null);\n    var lView = getLView();\n    if (lView[TVIEW].firstTemplatePass) {\n        tNode.tViews = [];\n    }\n    addTContainerToQueries(lView, tNode);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param consts The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrs The attrs attached to the container, if applicable\n * @param localRefs A set of local reference bindings on the element.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nfunction template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    var tContainerNode = containerInternal(index, tagName || null, attrs || null);\n    if (tView.firstTemplatePass) {\n        tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    addTContainerToQueries(lView, tContainerNode);\n    attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n    registerPostOrderHooks(tView, tContainerNode);\n    setIsParent(false);\n}\n/**\n * Sets a container up to receive views.\n *\n * @param index The index of the container in the data array\n */\nfunction containerRefreshStart(index) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    var previousOrParentTNode = loadInternal(tView.data, index);\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n */\nfunction containerRefreshEnd() {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = previousOrParentTNode.parent;\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    var lContainer = getLView()[previousOrParentTNode.index];\n    var nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, nextIndex);\n    }\n}\n/**\n* Reporting a TContainer node queries is a 2-step process as we need to:\n* - check if the container node itself is matching (query might match a <ng-template> node);\n* - prepare room for nodes from views that might be created based on the TemplateRef linked to this\n* container.\n*\n* Those 2 operations need to happen in the specific order (match the container node itself, then\n* prepare space for nodes from views).\n*/\nfunction addTContainerToQueries(lView, tContainerNode) {\n    var queries = lView[QUERIES];\n    if (queries) {\n        queries.addNode(tContainerNode);\n        var lContainer = lView[tContainerNode.index];\n        lContainer[QUERIES] = queries.container();\n    }\n}\nfunction containerInternal(index, tagName, attrs) {\n    var lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    var adjustedIndex = index + HEADER_OFFSET;\n    var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    var tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    var lContainer = lView[adjustedIndex] =\n        createLContainer(lView[adjustedIndex], lView, comment, tNode);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, lContainer);\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Store a value in the `data` at a given `index`. */\nfunction store(index, value) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n        tView.blueprint[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n */\nfunction reference(index) {\n    var contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/** Retrieves a value from current `viewData`. */\nfunction load(index) {\n    return loadInternal(getLView(), index);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction directiveInject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    token = resolveForwardRef(token);\n    return getOrCreateInjectable(getPreviousOrParentTNode(), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n */\nfunction injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\nfunction allowSanitizationBypass(value, type) {\n    return (value instanceof String && value[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    var trusted = new String(trustedString);\n    trusted[BRAND] = mode;\n    return trusted;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nvar _devMode = true;\nvar _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nfunction isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nfunction enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar InertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        var body = xhr.response.body;\n        body.removeChild(body.firstChild);\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            var body = new window\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body;\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n        // Prefer using <template> element if supported.\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (this.defaultDoc.documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            var attrib = elAttrs.item(i);\n            var attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        var childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(childNode);\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!window.DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction tagSet(tags) {\n    var e_1, _a;\n    var res = {};\n    try {\n        for (var _b = __values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var t = _c.value;\n            res[t] = true;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return res;\n}\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var e_2, _a;\n    var res = {};\n    try {\n        for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n            var s = sets_1_1.value;\n            for (var v in s) {\n                if (s.hasOwnProperty(v))\n                    res[v] = true;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nvar VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nvar SRCSET_ATTRS = tagSet('srcset');\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nvar VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nvar SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar SanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var current = el.firstChild;\n        var traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                var next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    SanitizingHtmlSerializer.prototype.startElement = function (element) {\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var elAttr = elAttrs.item(i);\n            var attrName = elAttr.name;\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            var value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    };\n    SanitizingHtmlSerializer.prototype.endElement = function (current) {\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var hi = match.charCodeAt(0);\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var mXSSAttempts = 5;\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        var sanitizer = new SanitizingHtmlSerializer();\n        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\nfunction getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nvar Sanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nvar COLOR_FNS = '(?:rgb|hsl)a?';\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nvar CSS3_FNS = '(?:calc|attr)';\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n */\nfunction hasBalancedQuotes(value) {\n    var outsideSingle = true;\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nfunction _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nfunction sanitizeHtml(unsafeHtml) {\n    var sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nfunction sanitizeStyle(unsafeStyle) {\n    var sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(renderStringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nfunction sanitizeUrl(unsafeUrl) {\n    var sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\n    var sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nfunction sanitizeScript(unsafeScript) {\n    var sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n        tag === 'media' || tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return sanitizeResourceUrl;\n    }\n    return sanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n */\nfunction sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n */\nvar defaultStyleSanitizer = function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n};\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        var msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n            (\"please use (\" + name.slice(2) + \")=...\") +\n            (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n            \" current module.\";\n        throw new Error(msg);\n    }\n}\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        var msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n            (\"please use (\" + name.slice(2) + \")=...\");\n        throw new Error(msg);\n    }\n}\nfunction getSanitizer() {\n    var lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n */\nfunction elementStart(index, name, attrs, localRefs) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    var native = elementCreate(name);\n    var renderer = lView[RENDERER];\n    ngDevMode && assertDataInRange(lView, index - 1);\n    var tNode = createNodeAtIndex(index, 3 /* Element */, native, name, attrs || null);\n    var initialStylesIndex = 0;\n    var initialClassesIndex = 0;\n    if (attrs) {\n        var lastAttrIndex = setUpAttributes(native, attrs);\n        // it's important to only prepare styling-related datastructures once for a given\n        // tNode and not each time an element is created. Also, the styling code is designed\n        // to be patched and constructed at various points, but only up until the styling\n        // template is first allocated (which happens when the very first style/class binding\n        // value is evaluated). When the template is allocated (when it turns into a context)\n        // then the styling template is locked and cannot be further extended (it can only be\n        // instantiated into a context per element)\n        setNodeStylingTemplate(tView, tNode, attrs, lastAttrIndex);\n        if (tNode.stylingTemplate) {\n            // the initial style/class values are rendered immediately after having been\n            // initialized into the context so the element styling is ready when directives\n            // are initialized (since they may read style/class values in their constructor)\n            initialStylesIndex = renderInitialStyles(native, tNode.stylingTemplate, renderer);\n            initialClassesIndex = renderInitialClasses(native, tNode.stylingTemplate, renderer);\n        }\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        var inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n        if (inputData && inputData.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* hasStyleInput */;\n        }\n    }\n    // we render the styling again below in case any directives have set any `style` and/or\n    // `class` host attribute values...\n    if (tNode.stylingTemplate) {\n        renderInitialClasses(native, tNode.stylingTemplate, renderer, initialClassesIndex);\n        renderInitialStyles(native, tNode.stylingTemplate, renderer, initialStylesIndex);\n    }\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/** Mark the end of the element. */\nfunction elementEnd() {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = previousOrParentTNode.parent;\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    // this is required for all host-level styling-related instructions to run\n    // in the correct order\n    previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    var lView = getLView();\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    registerPostOrderHooks(getLView()[TVIEW], previousOrParentTNode);\n    decreaseElementDepthCount();\n    // this is fired at the end of elementEnd because ALL of the stylingBindings code\n    // (for directives and the template) have now executed which means the styling\n    // context can be instantiated properly.\n    if (hasClassInput(previousOrParentTNode)) {\n        var stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, previousOrParentTNode.inputs['class'], getInitialClassNameValue(stylingContext));\n    }\n    if (hasStyleInput(previousOrParentTNode)) {\n        var stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, previousOrParentTNode.inputs['style'], getInitialStyleStringValue(stylingContext));\n    }\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param localRefs A set of local reference bindings on the element.\n */\nfunction element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param number index The index of the element in the data array\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n */\nfunction elementAttribute(index, name, value, sanitizer, namespace) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && validateAgainstEventAttributes(name);\n        var lView = getLView();\n        var renderer = lView[RENDERER];\n        var element_1 = getNativeByIndex(index, lView);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1, name, namespace) :\n                element_1.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            var tNode = getTNode(index, lView);\n            var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element_1, name, strValue, namespace);\n            }\n            else {\n                namespace ? element_1.setAttributeNS(namespace, name, strValue) :\n                    element_1.setAttribute(name, strValue);\n            }\n        }\n    }\n}\n/**\n * Assign static attribute values to a host element.\n *\n * This instruction will assign static attribute values as well as class and style\n * values to an element within the host bindings function. Since attribute values\n * can consist of different types of values, the `attrs` array must include the values in\n * the following format:\n *\n * attrs = [\n *   // static attributes (like `title`, `name`, `id`...)\n *   attr1, value1, attr2, value,\n *\n *   // a single namespace value (like `x:id`)\n *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n *\n *   // another single namespace value (like `x:name`)\n *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n *\n *   // a series of CSS classes that will be applied to the element (no spaces)\n *   CLASSES_MARKER, class1, class2, class3,\n *\n *   // a series of CSS styles (property + value) that will be applied to the element\n *   STYLES_MARKER, prop1, value1, prop2, value2\n * ]\n *\n * All non-class and non-style attributes must be defined at the start of the list\n * first before all class and style values are set. When there is a change in value\n * type (like when classes and styles are introduced) a marker must be used to separate\n * the entries. The marker values themselves are set via entries found in the\n * [AttributeMarker] enum.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * @param directive A directive instance the styling is associated with.\n * @param attrs An array of static values (attributes, classes and styles) with the correct marker\n * values.\n *\n * @publicApi\n */\nfunction elementHostAttrs(attrs) {\n    var tNode = getPreviousOrParentTNode();\n    var lView = getLView();\n    var native = getNativeByTNode(tNode, lView);\n    var lastAttrIndex = setUpAttributes(native, attrs);\n    var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n    if (stylingAttrsStartIndex >= 0) {\n        var directive = getActiveHostContext();\n        if (tNode.stylingTemplate) {\n            patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, stylingAttrsStartIndex, directive);\n        }\n        else {\n            tNode.stylingTemplate = initializeStaticContext(attrs, stylingAttrsStartIndex, directive);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrs Set of attributes to be used when matching directives.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n */\nfunction elementContainerStart(index, attrs, localRefs) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    var renderer = lView[RENDERER];\n    var tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    var native = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    var tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n    if (attrs) {\n        // While ng-container doesn't necessarily support styling, we use the style context to identify\n        // and execute directives on the ng-container.\n        setNodeStylingTemplate(tView, tNode, attrs, 0);\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    attachPatchData(native, lView);\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/** Mark the end of the <ng-container>. */\nfunction elementContainerEnd() {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = previousOrParentTNode.parent;\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    registerPostOrderHooks(tView, previousOrParentTNode);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marks the start of an embedded view.\n *\n * @param viewBlockId The ID of this view\n * @return boolean Whether or not this view is in creation mode\n */\nfunction embeddedViewStart(viewBlockId, consts, vars) {\n    var lView = getLView();\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    var containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        previousOrParentTNode.parent :\n        previousOrParentTNode;\n    var lContainer = lView[containerTNode.index];\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    var viewToRender = scanForView(lContainer, lContainer[ACTIVE_INDEX], viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, containerTNode), null, 16 /* CheckAlways */, null, null);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = lContainer[QUERIES].createView();\n        }\n        var tParentNode = getIsParent() ? previousOrParentTNode :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, lContainer[ACTIVE_INDEX]);\n        }\n        lContainer[ACTIVE_INDEX]++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param viewIndex The index of the TView in TNode.tViews\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param vars The number of bindings and pure function bindings in this template\n * @param container The parent container in which to look for the view's static data\n * @returns TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    var containerTViews = parent.tViews;\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param lContainer to search for views\n * @param startIdx starting index in the views array to search from\n * @param viewBlockId exact view block id to look for\n * @returns index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, startIdx, viewBlockId) {\n    var views = lContainer[VIEWS];\n    for (var i = startIdx; i < views.length; i++) {\n        var viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/** Marks the end of an embedded view. */\nfunction embeddedViewEnd() {\n    var lView = getLView();\n    var viewHost = lView[T_HOST];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    resetPreOrderHookFlags(lView);\n    refreshDescendantViews(lView); // update mode pass\n    var lContainer = lView[PARENT];\n    ngDevMode && assertLContainerOrUndefined(lContainer);\n    leaveView(lContainer[PARENT]);\n    setPreviousOrParentTNode(viewHost);\n    setIsParent(false);\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n */\nfunction getCurrentView() {\n    return getLView();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n */\nfunction isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n */\nfunction listener(eventName, listenerFn, useCapture, eventTargetResolver) {\n    if (useCapture === void 0) { useCapture = false; }\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n}\n/**\n* Registers a synthetic host listener (e.g. `(@foo.start)`) on a component.\n*\n* This instruction is for compatibility purposes and is designed to ensure that a\n* synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n* in the component's renderer. Normally all host listeners are evaluated with the\n* parent component's renderer, but, in the case of animation @triggers, they need\n* to be evaluated with the sub component's renderer (because that's where the\n* animation triggers are defined).\n*\n* Do not use this instruction as a replacement for `listener`. This instruction\n* only exists to ensure compatibility with the ViewEngine's host binding behavior.\n*\n* @param eventName Name of the event\n* @param listenerFn The function to be called when event emits\n* @param useCapture Whether or not to use capture in event listener\n* @param eventTargetResolver Function that returns global target information in case this listener\n* should be attached to a global object like window, document or body\n*/\nfunction componentHostSyntheticListener(eventName, listenerFn, useCapture, eventTargetResolver) {\n    if (useCapture === void 0) { useCapture = false; }\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n}\nfunction listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadRendererFn) {\n    if (useCapture === void 0) { useCapture = false; }\n    var lView = getLView();\n    var tNode = getPreviousOrParentTNode();\n    var tView = lView[TVIEW];\n    var firstTemplatePass = tView.firstTemplatePass;\n    var tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        var native = getNativeByTNode(tNode, lView);\n        var resolved = eventTargetResolver ? eventTargetResolver(native) : {};\n        var target = resolved.target || native;\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        var lCleanup = getCleanup(lView);\n        var lCleanupIndex = lCleanup.length;\n        var useCaptureOrSubIdx = useCapture;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            // The first argument of `listen` function in Procedural Renderer is:\n            // - either a target name (as a string) in case of global target (window, document, body)\n            // - or element reference (in all other cases)\n            listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n            var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n            lCleanup.push(listenerFn, cleanupFn);\n            useCaptureOrSubIdx = lCleanupIndex + 1;\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n            target.addEventListener(eventName, listenerFn, useCapture);\n            lCleanup.push(listenerFn);\n        }\n        var idxOrTargetGetter = eventTargetResolver ?\n            function (_lView) { return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target; } :\n            tNode.index;\n        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCaptureOrSubIdx);\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    var outputs = tNode.outputs;\n    var props;\n    if (outputs && (props = outputs[eventName])) {\n        var propsLength = props.length;\n        if (propsLength) {\n            var lCleanup = getCleanup(lView);\n            for (var i = 0; i < propsLength; i += 3) {\n                var index = props[i];\n                ngDevMode && assertDataInRange(lView, index);\n                var minifiedName = props[i + 2];\n                var directiveInstance = lView[index];\n                var output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(\"@Output \" + minifiedName + \" not initialized in '\" + directiveInstance.constructor.name + \"'.\");\n                }\n                var subscription = output.subscribe(listenerFn);\n                var idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        var startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n        // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n        if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n            markViewDirty(startView);\n        }\n        try {\n            var result = listenerFn(e);\n            if (wrapWithPreventDefault && result === false) {\n                e.preventDefault();\n                // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n                e.returnValue = false;\n            }\n            return result;\n        }\n        catch (error) {\n            handleError(lView, error);\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n */\nfunction nextContext(level) {\n    if (level === void 0) { level = 1; }\n    return nextContextImpl(level);\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param selectors A collection of parsed CSS selectors\n * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\n */\nfunction projectionDef(selectors, textSelectors) {\n    var componentNode = findComponentView(getLView())[T_HOST];\n    if (!componentNode.projection) {\n        var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        var projectionHeads = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        var tails = projectionHeads.slice();\n        var componentChild = componentNode.child;\n        while (componentChild !== null) {\n            var bucketIndex = selectors ?\n                matchingProjectionSelectorIndex(componentChild, selectors, textSelectors) :\n                0;\n            if (tails[bucketIndex]) {\n                tails[bucketIndex].projectionNext = componentChild;\n            }\n            else {\n                projectionHeads[bucketIndex] = componentChild;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = componentChild.next;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n */\nfunction projection(nodeIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    var lView = getLView();\n    var tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    // re-distribution of projectable nodes is stored on a component's view level\n    appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nvar CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * @publicApi\n */\nvar NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// JS has NaN !== NaN\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction devModeEqual(a, b) {\n    var isListLikeIterableA = isListLikeIterable(a);\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n */\nvar WrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n    var iterator1 = a[getSymbolIterator()]();\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        var item1 = iterator1.next();\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var iterator = obj[getSymbolIterator()]();\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/** Updates binding if changed, then returns whether it was updated. */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, \"Slot should have been initialized to NO_CHANGE\");\n    var oldValue = lView[bindingIndex];\n    if (isDifferent(oldValue, value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n            }\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n    return false;\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    var different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a single value binding.\n *\n * @param value Value to diff\n */\nfunction bind(value) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX]++;\n    storeBindingMetadata(lView);\n    return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n}\n/**\n* **TODO: Remove this function after `property` is in use**\n* Update a property on an element.\n*\n* If the property name also exists as an input property on one of the element's directives,\n* the component property will be set instead of the element property. This check must\n* be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\n*\n* @param index The index of the element to update in the data array\n* @param propName Name of property. Because it is going to DOM, this is not subject to\n*        renaming as part of minification.\n* @param value New value to write.\n* @param sanitizer An optional function used to sanitize the value.\n* @param nativeOnly Whether or not we should only set native properties and skip input check\n* (this is necessary for host property bindings)\n*/\nfunction elementProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @param nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n */\nfunction componentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n/**\n* Mapping between attributes names that don't correspond to their element property names.\n*/\nvar ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    if (value === NO_CHANGE)\n        return;\n    var lView = getLView();\n    var element = getNativeByIndex(index, lView);\n    var tNode = getTNode(index, lView);\n    var inputData;\n    var dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        propName = ATTR_TO_PROP[propName] || propName;\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            validateAgainstUnknownProperties(lView, element, propName, tNode);\n            ngDevMode.rendererSetProperty++;\n        }\n        savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n        var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? sanitizer(value, tNode.tagName || '', propName) : value;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty(element, propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            element.setProperty ? element.setProperty(propName, value) :\n                element[propName] = value;\n        }\n    }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    var childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 64 /* Dirty */;\n    }\n}\nfunction setNgReflectProperties(lView, element, type, inputs, value) {\n    var _a;\n    for (var i = 0; i < inputs.length; i += 3) {\n        var renderer = lView[RENDERER];\n        var attrName = normalizeDebugBindingName(inputs[i + 2]);\n        var debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(element, attrName, debugValue) :\n                element.setAttribute(attrName, debugValue);\n        }\n        else if (value !== undefined) {\n            var value_1 = \"bindings=\" + JSON.stringify((_a = {}, _a[attrName] = debugValue, _a), null, 2);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(element, value_1);\n            }\n            else {\n                element.textContent = value_1;\n            }\n        }\n    }\n}\nfunction validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n    // If the tag matches any of the schemas we shouldn't throw.\n    if (matchingSchemas(hostView, tNode.tagName)) {\n        return;\n    }\n    // If prop is not a known property of the HTML element...\n    if (!(propName in element) &&\n        // and we are in a browser context... (web worker nodes should be skipped)\n        typeof Node === 'function' && element instanceof Node &&\n        // and isn't a synthetic animation property...\n        propName[0] !== ANIMATION_PROP_PREFIX) {\n        // ... it is probably a user error and we should throw.\n        throw new Error(\"Template error: Can't bind to '\" + propName + \"' since it isn't a known property of '\" + tNode.tagName + \"'.\");\n    }\n}\nfunction matchingSchemas(hostView, tagName) {\n    var schemas = hostView[TVIEW].schemas;\n    if (schemas !== null) {\n        for (var i = 0; i < schemas.length; i++) {\n            var schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Stores debugging data for this property binding on first template pass.\n * This enables features like DebugElement.properties.\n */\nfunction savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n    var lastBindingIndex = lView[BINDING_INDEX] - 1;\n    // Bind/interpolation functions save binding metadata in the last binding index,\n    // but leave the property name blank. If the interpolation delimiter is at the 0\n    // index, we know that this is our first pass and the property name still needs to\n    // be set.\n    var bindingMetadata = tData[lastBindingIndex];\n    if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n        tData[lastBindingIndex] = propName + bindingMetadata;\n        // We don't want to store indices for host bindings because they are stored in a\n        // different part of LView (the expando section).\n        if (!nativeOnly) {\n            if (tNode.propertyMetadataStartIndex == -1) {\n                tNode.propertyMetadataStartIndex = lastBindingIndex;\n            }\n            tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    var different = false;\n    var lView = getLView();\n    var tData = lView[TVIEW].data;\n    var bindingIndex = lView[BINDING_INDEX];\n    if (tData[bindingIndex] == null) {\n        // 2 is the index of the first static interstitial value (ie. not prefix)\n        for (var i = 2; i < values.length; i += 2) {\n            tData[bindingIndex++] = values[i];\n        }\n        bindingIndex = lView[BINDING_INDEX];\n    }\n    for (var i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    storeBindingMetadata(lView, values[0], values[values.length - 1]);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    var content = values[0];\n    for (var i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(prefix, v0, suffix) {\n    var lView = getLView();\n    var different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n    storeBindingMetadata(lView, prefix, suffix);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/** Creates an interpolation binding with 2 expressions. */\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    lView[BINDING_INDEX] += 2;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        lView[TVIEW].data[bindingIndex] = i0;\n    }\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/** Creates an interpolation binding with 3 expressions. */\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/** Create an interpolation binding with 4 expressions. */\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/** Creates an interpolation binding with 5 expressions. */\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/** Creates an interpolation binding with 6 expressions. */\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/** Creates an interpolation binding with 7 expressions. */\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/** Creates an interpolation binding with 8 expressions. */\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    var lView = getLView();\n    var bindingIndex = lView[BINDING_INDEX];\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    // Only set static strings the first time (data will be null subsequent runs).\n    var data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        var tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n        tData[bindingIndex + 6] = i6;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Selects an index of an item to act on and flushes lifecycle hooks up to this point\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n  *  if (rf & 1) {\n  *    element(0, 'div');\n  *  }\n  *  if (rf & 2) {\n  *    select(0); // Select the <div/> created above.\n  *    property('title', 'test');\n  *  }\n  * }\n  * ```\n  * @param index the index of the item to act on with the following instructions\n  */\nfunction select(index) {\n    ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n    ngDevMode &&\n        assertLessThan(index, getLView().length - HEADER_OFFSET, 'Should be within range for the view data');\n    var lView = getLView();\n    executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n}\n\n/*\n * The contents of this file include the instructions for all styling-related\n * operations in Angular.\n *\n * The instructions present in this file are:\n *\n * Template level styling instructions:\n * - elementStyling\n * - elementStylingMap\n * - elementStyleProp\n * - elementClassProp\n * - elementStylingApply\n *\n * Host bindings level styling instructions:\n * - elementHostStyling\n * - elementHostStylingMap\n * - elementHostStyleProp\n * - elementHostClassProp\n * - elementHostStylingApply\n */\n/**\n * Allocates style and class binding properties on the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note that this is only used\n * for binding values (see `elementStart` to learn how to assign static styling\n * values to an element).\n *\n * @param classBindingNames An array containing bindable class names.\n *        The `elementClassProp` instruction refers to the class name by index in\n *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` instruction refers to the class name by index in\n *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        style values that are applied to the element (during rendering).\n *\n * @publicApi\n */\nfunction elementStyling(classBindingNames, styleBindingNames, styleSanitizer) {\n    var tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    // calling the function below ensures that the template's binding values\n    // are applied as the first set of bindings into the context. If any other\n    // styling bindings are set on the same element (by directives and/or\n    // components) then they will be applied at the end of the `elementEnd`\n    // instruction (because directives are created first before styling is\n    // executed for a new element).\n    initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, null);\n}\n/**\n * Allocates style and class binding properties on the host element during creation mode\n * within the host bindings function of a directive or component.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class host bindings on the host element of a directive or\n * component. Note that this is only used for binding values (see `elementHostAttrs`\n * to learn how to assign static styling values to the host element).\n *\n * @param classBindingNames An array containing bindable class names.\n *        The `elementHostClassProp` instruction refers to the class name by index in\n *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param styleBindingNames An array containing bindable style properties.\n *        The `elementHostStyleProp` instruction refers to the class name by index in\n *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        style values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the provided `directive` and\n *        will not be used if the same property is assigned in another directive or\n *        on the element directly.\n *\n * @publicApi\n */\nfunction elementHostStyling(classBindingNames, styleBindingNames, styleSanitizer) {\n    var tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    var directive = getActiveHostContext();\n    // despite the binding being applied in a queue (below), the allocation\n    // of the directive into the context happens right away. The reason for\n    // this is to retain the ordering of the directives (which is important\n    // for the prioritization of bindings).\n    allocateDirectiveIntoContext(tNode.stylingTemplate, directive);\n    var fns = tNode.onElementCreationFns = tNode.onElementCreationFns || [];\n    fns.push(function () { return initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directive); });\n}\nfunction initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directive) {\n    updateContextWithBindings(tNode.stylingTemplate, directive || null, classBindingNames, styleBindingNames, styleSanitizer);\n}\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStylingMap` or any static styles that are\n * present from when the element was created with `elementStyling`).\n *\n * Note that the styling element is updated as part of `elementStylingApply`.\n *\n * @param index Index of the element's with which styling is associated.\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStyling`.\n * @param value New value to write (falsy to remove). Note that if a directive also\n *        attempts to write to the same binding value (via `elementHostStyleProp`)\n *        then it will only be able to do so if the binding value assigned via\n *        `elementStyleProp` is falsy (or doesn't exist at all).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param forceOverride Whether or not to update the styling value immediately\n *        (despite the other bindings possibly having priority)\n *\n * @publicApi\n */\nfunction elementStyleProp(index, styleIndex, value, suffix, forceOverride) {\n    elementStylePropInternal(null, index, styleIndex, value, suffix, forceOverride);\n}\n/**\n * Update a host style binding value on the host element within a component/directive.\n *\n * If the style value is falsy then it will be removed from the host element\n * (or assigned a different value depending if there are any styles placed\n * on the same element with `elementHostStylingMap` or any static styles that\n * are present from when the element was patched with `elementHostStyling`).\n *\n * Note that the styling applied to the host element once\n * `elementHostStylingApply` is called.\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementHostStyling`.\n * @param value New value to write (falsy to remove). The value may or may not\n *        be applied to the element depending on the template/component/directive\n *        prioritization (see `interfaces/styling.ts`)\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param forceOverride Whether or not to update the styling value immediately\n *        (despite the other bindings possibly having priority)\n *\n * @publicApi\n */\nfunction elementHostStyleProp(styleIndex, value, suffix, forceOverride) {\n    elementStylePropInternal(getActiveHostContext(), getActiveHostElementIndex(), styleIndex, value, suffix, forceOverride);\n}\nfunction elementStylePropInternal(directive, index, styleIndex, value, suffix, forceOverride) {\n    var valueToAdd = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = renderStringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = value;\n        }\n    }\n    updateStyleProp(getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive, forceOverride);\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `elementStyling` within the creation block.\n *\n * @param index Index of the element's with which styling is associated.\n * @param classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStyling` (which is meant to be called before this\n *        function is).\n * @param value A true/false value which will turn the class on or off.\n * @param forceOverride Whether or not this value will be applied regardless\n *        of where it is being set within the styling priority structure.\n *\n * @publicApi\n */\nfunction elementClassProp(index, classIndex, value, forceOverride) {\n    elementClassPropInternal(null, index, classIndex, value, forceOverride);\n}\n/**\n * Update a class host binding for a directive's/component's host element within\n * the host bindings function.\n *\n * This instruction is meant to handle the `@HostBinding('class.foo')` case and,\n * therefore, the class binding itself must already be allocated using\n * `elementHostStyling` within the creation block.\n *\n * @param classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementHostStlying` (which is meant to be called before this\n *        function is).\n * @param value A true/false value which will turn the class on or off.\n * @param forceOverride Whether or not this value will be applied regardless\n *        of where it is being set within the stylings priority structure.\n *\n * @publicApi\n */\nfunction elementHostClassProp(classIndex, value, forceOverride) {\n    elementClassPropInternal(getActiveHostContext(), getActiveHostElementIndex(), classIndex, value, forceOverride);\n}\nfunction elementClassPropInternal(directive, index, classIndex, value, forceOverride) {\n    var input = (value instanceof BoundPlayerFactory) ?\n        value :\n        booleanOrNull(value);\n    updateClassProp(getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, input, directive, forceOverride);\n}\nfunction booleanOrNull(value) {\n    if (typeof value === 'boolean')\n        return value;\n    return value ? true : null;\n}\n/**\n * Update style and/or class bindings using object literals on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles/classes are applied to the element they will then be updated with\n * respect to any styles/classes set with `elementStyleProp` or `elementClassProp`. If any\n * styles or classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `elementStylingApply` is called.\n *\n * @param index Index of the element's with which styling is associated.\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * @publicApi\n */\nfunction elementStylingMap(index, classes, styles) {\n    elementStylingMapInternal(null, index, classes, styles);\n}\n/**\n * Update style and/or class host bindings using object literals on an element within the host\n * bindings function for a directive/component.\n *\n * This instruction is meant to apply styling via the `@HostBinding('style')` and\n * `@HostBinding('class')` bindings for a component's or directive's host element.\n * When styles/classes are applied to the host element they will then be updated\n * with respect to any styles/classes set with `elementHostStyleProp` or\n * `elementHostClassProp`. If any styles or classes are set to falsy then they\n * will be removed from the element.\n *\n * Note that the styling instruction will not be applied until\n * `elementHostStylingApply` is called.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * @publicApi\n */\nfunction elementHostStylingMap(classes, styles) {\n    elementStylingMapInternal(getActiveHostContext(), getActiveHostElementIndex(), classes, styles);\n}\nfunction elementStylingMapInternal(directive, index, classes, styles) {\n    var lView = getLView();\n    var tNode = getTNode(index, lView);\n    var stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n    // inputs are only evaluated from a template binding into a directive, therefore,\n    // there should not be a situation where a directive host bindings function\n    // evaluates the inputs (this should only happen in the template function)\n    if (!directive) {\n        if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n            var initialClasses = getInitialClassNameValue(stylingContext);\n            var classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + forceClassesAsString(classes);\n            setInputsForProperty(lView, tNode.inputs['class'], classInputVal);\n            classes = NO_CHANGE;\n        }\n        if (hasStyleInput(tNode) && styles !== NO_CHANGE) {\n            var initialStyles = getInitialClassNameValue(stylingContext);\n            var styleInputVal = (initialStyles.length ? (initialStyles + ' ') : '') + forceStylesAsString(styles);\n            setInputsForProperty(lView, tNode.inputs['style'], styleInputVal);\n            styles = NO_CHANGE;\n        }\n    }\n    updateStylingMap(stylingContext, classes, styles, directive);\n}\n/**\n * Apply all style and class binding values to the element.\n *\n * This instruction is meant to be run after `elementStylingMap`, `elementStyleProp`\n * or `elementClassProp` instructions have been run and will only apply styling to\n * the element if any styling bindings have been updated.\n *\n * @param index Index of the element's with which styling is associated.\n *\n * @publicApi\n */\nfunction elementStylingApply(index) {\n    elementStylingApplyInternal(null, index);\n}\n/**\n * Apply all style and class host binding values to the element.\n *\n * This instruction is meant to be run after `elementHostStylingMap`,\n * `elementHostStyleProp` or `elementHostClassProp` instructions have\n * been run and will only apply styling to the host element if any\n * styling bindings have been updated.\n *\n * @publicApi\n */\nfunction elementHostStylingApply() {\n    elementStylingApplyInternal(getActiveHostContext(), getActiveHostElementIndex());\n}\nfunction elementStylingApplyInternal(directive, index) {\n    var lView = getLView();\n    var isFirstRender = (lView[FLAGS] & 8 /* FirstLViewPass */) !== 0;\n    var totalPlayersQueued = renderStyling(getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null, null, directive);\n    if (totalPlayersQueued > 0) {\n        var rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Value to write. This value will be stringified.\n */\nfunction text(index, value) {\n    var lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    var textNative = createTextNode(value, lView[RENDERER]);\n    var tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @param index Index of the node in the data array.\n * @param value Stringified value to write.\n */\nfunction textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        var lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var element = getNativeByIndex(index, lView);\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, renderStringify(value)) :\n            element.textContent = renderStringify(value);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param ref The element, directive or component that the player will be placed on.\n * @param player The player that will be triggered to play once change detection has run.\n */\nfunction addPlayer(ref, player) {\n    var context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    var element = context.native;\n    var lView = context.lView;\n    var playerContext = getOrCreatePlayerContext(element, context);\n    var rootContext = getRootContext(lView);\n    addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * @publicApi\n */\nfunction getPlayers(ref) {\n    var context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    var stylingContext = getStylingContext(context.nodeIndex, context.lView);\n    var playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nfunction getComponent(element) {\n    var context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return context.component;\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nfunction getContext(element) {\n    var context = loadLContextFromNode(element);\n    return context.lView[CONTEXT];\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * @param element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @publicApi\n */\nfunction getViewComponent(element) {\n    var context = loadLContext(element);\n    var lView = context.lView;\n    var parent;\n    ngDevMode && assertLView(lView);\n    while (lView[HOST] === null && (parent = getLViewParent(lView))) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = parent;\n    }\n    return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nfunction getRootComponents(target) {\n    return __spread(getRootContext(target).components);\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nfunction getInjector(target) {\n    var context = loadLContext(target);\n    var tNode = context.lView[TVIEW].data[context.nodeIndex];\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n * @publicApi\n */\nfunction getInjectionTokens(element) {\n    var context = loadLContext(element, false);\n    if (!context)\n        return [];\n    var lView = context.lView;\n    var tView = lView[TVIEW];\n    var tNode = tView.data[context.nodeIndex];\n    var providerTokens = [];\n    var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    var endIndex = tNode.directiveEnd;\n    for (var i = startIndex; i < endIndex; i++) {\n        var value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nfunction getDirectives(target) {\n    var context = loadLContext(target);\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\nfunction loadLContext(target, throwOnNotFound) {\n    if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n    var context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? \"Unable to find context associated with \" + renderStringify(target) :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nfunction getLocalRefs(target) {\n    var context = loadLContext(target);\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param directive Component or Directive for which the host element should be retrieved.\n *\n * @publicApi\n */\nfunction getHostElement(directive) {\n    return getLContext(directive).native;\n}\nfunction loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return loadLContext(node);\n}\nfunction isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @publicApi\n */\nfunction getListeners(element) {\n    var lContext = loadLContextFromNode(element);\n    var lView = lContext.lView;\n    var tView = lView[TVIEW];\n    var lCleanup = lView[CLEANUP];\n    var tCleanup = tView.cleanup;\n    var listeners = [];\n    if (tCleanup && lCleanup) {\n        for (var i = 0; i < tCleanup.length;) {\n            var firstParam = tCleanup[i++];\n            var secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                var name_1 = firstParam;\n                var listenerElement = unwrapRNode(lView[secondParam]);\n                var callback = lCleanup[tCleanup[i++]];\n                var useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                var useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run --define=compile=aot\n *   //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nvar GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nvar _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nfunction publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('getPlayers', getPlayers);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nfunction publishGlobalUtil(name, fn) {\n    var w = _global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    var sanitizer = opts.sanitizer || null;\n    var componentDef = getComponentDef(componentType);\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    var componentTag = componentDef.selectors[0][0];\n    var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    var rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n        16 /* CheckAlways */ | 512 /* IsRoot */;\n    var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    var rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n    var oldView = enterView(rootView, null);\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        addToViewTree(rootView, componentView);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~4 /* CreationMode */;\n        resetPreOrderHookFlags(rootView);\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    var tView = rootView[TVIEW];\n    var tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    var componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    var tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    var component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    if (componentDef.contentQueries) {\n        componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n    }\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        var expando = tView.expandoInstructions;\n        invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n        rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n    }\n    if (rootTNode.stylingTemplate) {\n        var native = componentView[HOST];\n        renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n    }\n    return component;\n}\nfunction createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nfunction LifecycleHooksFeature(component, def) {\n    var rootTView = readPatchedLView(component)[TVIEW];\n    var dirIndex = rootTView.data.length - 1;\n    registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n    return getRootContext(component).clean;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nvar SimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n    return SimpleChange;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature()]\n * });\n * ```\n */\nfunction NgOnChangesFeature() {\n    // This option ensures that the ngOnChanges lifecycle hook will be inherited\n    // from superclasses (in InheritDefinitionFeature).\n    NgOnChangesFeatureImpl.ngInherit = true;\n    return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n        definition.onChanges = wrapOnChanges();\n    }\n}\nfunction wrapOnChanges() {\n    return function wrapOnChangesHook_inPreviousChangesStorage() {\n        var simpleChangesStore = getSimpleChangesStore(this);\n        var current = simpleChangesStore && simpleChangesStore.current;\n        if (current) {\n            var previous = simpleChangesStore.previous;\n            if (previous === EMPTY_OBJ) {\n                simpleChangesStore.previous = current;\n            }\n            else {\n                // New changes are copied to the previous store, so that we don't lose history for inputs\n                // which were not changed this time\n                for (var key in current) {\n                    previous[key] = current[key];\n                }\n            }\n            simpleChangesStore.current = null;\n            this.ngOnChanges(current);\n        }\n    };\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    var simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    var current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    var previous = simpleChangesStore.previous;\n    var declaredName = this.declaredInputs[publicName];\n    var previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    instance[privateName] = value;\n}\nvar SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n */\nfunction InheritDefinitionFeature(definition) {\n    var superType = getSuperType(definition.type);\n    var _loop_1 = function () {\n        var e_1, _a;\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        var baseDef = superType.ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            var writeableDef = definition;\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            var prevHostBindings_1 = definition.hostBindings;\n            var superHostBindings_1 = superDef.hostBindings;\n            if (superHostBindings_1) {\n                if (prevHostBindings_1) {\n                    definition.hostBindings = function (rf, ctx, elementIndex) {\n                        superHostBindings_1(rf, ctx, elementIndex);\n                        prevHostBindings_1(rf, ctx, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings_1;\n                }\n            }\n            // Merge View Queries\n            var prevViewQuery_1 = definition.viewQuery;\n            var superViewQuery_1 = superDef.viewQuery;\n            if (superViewQuery_1) {\n                if (prevViewQuery_1) {\n                    definition.viewQuery = function (rf, ctx) {\n                        superViewQuery_1(rf, ctx);\n                        prevViewQuery_1(rf, ctx);\n                    };\n                }\n                else {\n                    definition.viewQuery = superViewQuery_1;\n                }\n            }\n            // Merge Content Queries\n            var prevContentQueries_1 = definition.contentQueries;\n            var superContentQueries_1 = superDef.contentQueries;\n            if (superContentQueries_1) {\n                if (prevContentQueries_1) {\n                    definition.contentQueries = function (rf, ctx, directiveIndex) {\n                        superContentQueries_1(rf, ctx, directiveIndex);\n                        prevContentQueries_1(rf, ctx, directiveIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries_1;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            var features = superDef.features;\n            if (features) {\n                try {\n                    for (var features_1 = __values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {\n                        var feature = features_1_1.value;\n                        if (feature && feature.ngInherit) {\n                            feature(definition);\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (features_1_1 && !features_1_1.done && (_a = features_1.return)) _a.call(features_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            var superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.ngAfterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                if (superPrototype.ngOnChanges) {\n                    NgOnChangesFeature()(definition);\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    };\n    while (superType) {\n        _loop_1();\n    }\n}\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY$1) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nvar APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nvar NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nvar CIRCULAR$1 = {};\nvar EMPTY_ARRAY$2 = [];\n/**\n * A lazily initialized NullInjector.\n */\nvar NULL_INJECTOR$1 = undefined;\nfunction getNullInjector() {\n    if (NULL_INJECTOR$1 === undefined) {\n        NULL_INJECTOR$1 = new NullInjector();\n    }\n    return NULL_INJECTOR$1;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nfunction createInjector(defType, parent, additionalProviders, name) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent, name);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent, source) {\n        if (source === void 0) { source = null; }\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        this._destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        var dedupStack = [];\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n        additionalProviders && deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n        // Source name, used for debugging\n        this.source = source || (def instanceof Array ? null : stringify(def));\n    }\n    Object.defineProperty(R3Injector.prototype, \"destroyed\", {\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        get: function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    R3Injector.prototype.destroy = function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    R3Injector.prototype.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        this.assertNotDestroyed();\n        // Set the injection context.\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    var def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, flags & InjectFlags.Optional ? null : notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    R3Injector.prototype.assertNotDestroyed = function () {\n        if (this._destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     */\n    R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        var def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            var defName = stringify(defType);\n            throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n        }\n        // Check for multiple imports of the same module\n        var isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        var providers = (ngModule !== undefined) && defOrWrappedDef.providers ||\n            EMPTY_ARRAY$2;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents, dedupStack); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        var defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            var injectorType_1 = defOrWrappedDef;\n            deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        var ngModuleType = defOrWrappedDef.ngModule;\n        deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModuleType, providers); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        var record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider;\n            multiRecord_1.multi.push(provider);\n        }\n        else {\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    R3Injector.prototype.hydrate = function (token, record) {\n        if (record.value === CIRCULAR$1) {\n            throw new Error(\"Cannot instantiate cyclic dependency! \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR$1;\n            record.value = record.factory();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return record.value;\n    };\n    R3Injector.prototype.injectableDefInScope = function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nfunction injectableDefOrInjectorDefFactory(token) {\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef === null) {\n        var injectorDef = getInjectorDef(token);\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        else if (token instanceof Function) {\n            var paramLength = token.length;\n            if (paramLength > 0) {\n                var args = new Array(paramLength).fill('?');\n                throw new Error(\"Can't resolve all parameters for \" + stringify(token) + \": (\" + args.join(', ') + \").\");\n            }\n            return function () { return new token(); };\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\nfunction providerToRecord(provider, ngModuleType, providers) {\n    var factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = function () { return resolveForwardRef(provider.useValue); };\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(resolveForwardRef(provider.useExisting)); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };\n        }\n        else {\n            var classRef_1 = resolveForwardRef(provider &&\n                (provider.useClass || provider.provide));\n            if (!classRef_1) {\n                var ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });\n                    ngModuleDetail =\n                        \" - only instances of Provider and Type are allowed, got: [\" + providerDetail.join(', ') + \"]\";\n                }\n                throw new Error(\"Invalid provider for the NgModule '\" + stringify(ngModuleType) + \"'\" + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef_1);\n            }\n        }\n    }\n    return factory;\n}\nfunction makeRecord(factory, value, multi) {\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE$2 in value;\n}\nfunction isExistingProvider(value) {\n    return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n    return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n    return !!value.useClass;\n}\nfunction hasDeps(value) {\n    return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        var isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (var i = 0; i < provider.length; i++) {\n            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        var lView = getLView();\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        var providerFactory = providerToFactory(provider);\n        var tNode = getPreviousOrParentTNode();\n        var beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var endIndex = tNode.directiveStart;\n        var cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isClassProvider(provider) || isTypeProvider(provider)) {\n            var prototype = (provider.useClass || provider).prototype;\n            var ngOnDestroy = prototype.ngOnDestroy;\n            if (ngOnDestroy) {\n                var tView = lView[TVIEW];\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n            }\n        }\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            var factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), lView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), lView, token);\n                var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    multiFactory.multi.push(factory);\n    if (isComponentProvider) {\n        multiFactory.componentProviders++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n    for (var i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    var factories = this.multi;\n    var result;\n    if (this.providerFactory) {\n        var componentCount = this.providerFactory.componentProviders;\n        var multiProviders = getNodeInjectable(tData, lData, this.providerFactory.index, tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (var i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n    for (var i = 0; i < factories.length; i++) {\n        var factory = factories[i];\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    var factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @param definition\n */\nfunction ProvidersFeature(providers, viewProviders) {\n    if (viewProviders === void 0) { viewProviders = []; }\n    return function (definition) {\n        definition.providersResolver =\n            function (def, processProvidersFn) {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            };\n    };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nvar ComponentRef = /** @class */ (function () {\n    function ComponentRef() {\n    }\n    return ComponentRef;\n}());\n/**\n * @publicApi\n */\nvar ComponentFactory = /** @class */ (function () {\n    function ComponentFactory() {\n    }\n    return ComponentFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noComponentFactoryError(component) {\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nvar ERROR_COMPONENT = 'ngComponent';\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * @publicApi\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    __extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nvar NgModuleRef = /** @class */ (function () {\n    function NgModuleRef() {\n    }\n    return NgModuleRef;\n}());\n/**\n * @publicApi\n */\nvar NgModuleFactory = /** @class */ (function () {\n    function NgModuleFactory() {\n    }\n    return NgModuleFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ViewRef = /** @class */ (function () {\n    function ViewRef(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * @internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n        get: function () {\n            if (this._lView[HOST] == null) {\n                var tView = this._lView[T_HOST];\n                return collectNativeNodes(this._lView, tView, []);\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"context\", {\n        get: function () { return this._context ? this._context : this._lookUpContext(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: function () {\n            return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewRef.prototype.destroy = function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            var index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    };\n    ViewRef.prototype.onDestroy = function (callback) { storeCleanupFn(this._lView, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    ViewRef.prototype.markForCheck = function () { markViewDirty(this._lView); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    ViewRef.prototype.detach = function () { this._lView[FLAGS] &= ~128 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    ViewRef.prototype.reattach = function () { this._lView[FLAGS] |= 128 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    ViewRef.prototype.detectChanges = function () { detectChangesInternal(this._lView, this.context); };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    ViewRef.prototype.checkNoChanges = function () { checkNoChangesInternal(this._lView, this.context); };\n    ViewRef.prototype.attachToViewContainerRef = function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    ViewRef.prototype.detachFromAppRef = function () {\n        this._appRef = null;\n        renderDetachView(this._lView);\n    };\n    ViewRef.prototype.attachToAppRef = function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    ViewRef.prototype._lookUpContext = function () {\n        return this._context = getLViewParent(this._lView)[this._componentIndex];\n    };\n    return ViewRef;\n}());\n/** @internal */\nvar RootViewRef = /** @class */ (function (_super) {\n    __extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null, -1) || this;\n        _this._view = _view;\n        return _this;\n    }\n    RootViewRef.prototype.detectChanges = function () { detectChangesInRootView(this._view); };\n    RootViewRef.prototype.checkNoChanges = function () { checkNoChangesInRootView(this._view); };\n    Object.defineProperty(RootViewRef.prototype, \"context\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return RootViewRef;\n}(ViewRef));\nfunction collectNativeNodes(lView, parentTNode, result) {\n    var tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        var nativeNode = getNativeByTNode(tNodeChild, lView);\n        nativeNode && result.push(nativeNode);\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        else if (tNodeChild.type === 1 /* Projection */) {\n            var componentView = findComponentView(lView);\n            var componentHost = componentView[T_HOST];\n            var parentView = getLViewParent(componentView);\n            var currentProjectedNode = componentHost.projection[tNodeChild.projection];\n            while (currentProjectedNode && parentView) {\n                result.push(getNativeByTNode(currentProjectedNode, parentView));\n                currentProjectedNode = currentProjectedNode.next;\n            }\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\nvar R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = /** @class */ (function (_super) {\n            __extends(ElementRef_, _super);\n            function ElementRef_() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return ElementRef_;\n        }(ElementRefToken));\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\nvar R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = /** @class */ (function (_super) {\n            __extends(TemplateRef_, _super);\n            function TemplateRef_(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                var _this = _super.call(this) || this;\n                _this._declarationParentView = _declarationParentView;\n                _this.elementRef = elementRef;\n                _this._tView = _tView;\n                _this._hostLContainer = _hostLContainer;\n                _this._injectorIndex = _injectorIndex;\n                return _this;\n            }\n            TemplateRef_.prototype.createEmbeddedView = function (context, container, index) {\n                var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                var viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = lView[T_HOST];\n                return viewRef;\n            };\n            return TemplateRef_;\n        }(TemplateRefToken));\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        var hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews, hostContainer, hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\nvar R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    var previousTNode = getPreviousOrParentTNode();\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = /** @class */ (function (_super) {\n            __extends(ViewContainerRef_, _super);\n            function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                var _this = _super.call(this) || this;\n                _this._lContainer = _lContainer;\n                _this._hostTNode = _hostTNode;\n                _this._hostView = _hostView;\n                _this._viewRefs = [];\n                return _this;\n            }\n            Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                get: function () {\n                    return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                get: function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                /** @deprecated No replacement */\n                get: function () {\n                    var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                    var parentView = getParentInjectorView(parentLocation, this._hostView);\n                    var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                    return !hasParentInjector(parentLocation) || parentTNode == null ?\n                        new NodeInjector(null, this._hostView) :\n                        new NodeInjector(parentTNode, parentView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            ViewContainerRef_.prototype.clear = function () {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            };\n            ViewContainerRef_.prototype.get = function (index) { return this._viewRefs[index] || null; };\n            Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                get: function () { return this._lContainer[VIEWS].length; },\n                enumerable: true,\n                configurable: true\n            });\n            ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n                var adjustedIdx = this._adjustIndex(index);\n                var viewRef = templateRef\n                    .createEmbeddedView(context || {}, this._lContainer, adjustedIdx);\n                viewRef.attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                var contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(NgModuleRef, null);\n                }\n                var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            };\n            ViewContainerRef_.prototype.insert = function (viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                var lView = viewRef._lView;\n                var adjustedIdx = this._adjustIndex(index);\n                if (viewAttachedToContainer(lView)) {\n                    // If view is already attached, fall back to move() so we clean up\n                    // references appropriately.\n                    return this.move(viewRef, adjustedIdx);\n                }\n                insertView(lView, this._lContainer, adjustedIdx);\n                var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                viewRef.attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.move = function (viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                var index = this.indexOf(viewRef);\n                if (index !== -1)\n                    this.detach(index);\n                this.insert(viewRef, newIndex);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.indexOf = function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n            ViewContainerRef_.prototype.remove = function (index) {\n                var adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            };\n            ViewContainerRef_.prototype.detach = function (index) {\n                var adjustedIdx = this._adjustIndex(index, -1);\n                var view = detachView(this._lContainer, adjustedIdx);\n                var wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef(view, view[CONTEXT], -1) : null;\n            };\n            ViewContainerRef_.prototype._adjustIndex = function (index, shift) {\n                if (shift === void 0) { shift = 0; }\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            };\n            return ViewContainerRef_;\n        }(ViewContainerRefToken));\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    var lContainer;\n    var slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        var commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            var renderer = hostView[RENDERER];\n            var hostNative = getNativeByTNode(hostTNode, hostView);\n            var parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n        addToViewTree(hostView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nfunction injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        var componentIndex = hostTNode.directiveStart;\n        var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n        hostTNode.type === 4 /* ElementContainer */) {\n        var hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return null;\n}\nfunction getOrCreateRenderer2(view) {\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return renderer;\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nfunction injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // Do nothing.\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nvar SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\nvar SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * @publicApi\n */\nvar RenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nvar RenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * @publicApi\n */\nvar Renderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\nvar Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @publicApi\n */\nvar RootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nvar RendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nvar SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\nvar SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\nvar SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nvar Version = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * @publicApi\n */\nvar VERSION = new Version('8.0.0-beta.10+123.sha-a6809e0.with-local-changes');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nvar trackByIdentity = function (index, item) { return item; };\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nvar DefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n        var nextIt = this._itHead;\n        var nextRemove = this._removalsHead;\n        var addRemoveOffset = 0;\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            var record = !nextRemove ||\n                nextIt &&\n                    nextIt.currentIndex <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                nextIt :\n                nextRemove;\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = nextIt._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    var localCurrentIndex = currentIndex - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.diff = function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    DefaultIterableDiffer.prototype.onDestroy = function () { };\n    DefaultIterableDiffer.prototype.check = function (collection) {\n        var _this = this;\n        this._reset();\n        var record = this._itHead;\n        var mayBeDirty = false;\n        var index;\n        var item;\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            this.length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            this.length = index;\n        }\n        this._truncate(record);\n        this.collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._truncate = function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var prev = record._prevRemoved;\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._remove = function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._unlink = function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var prev = record._prev;\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\nvar IterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prevDup = null;\n        /** @internal */\n        this._nextDup = null;\n        /** @internal */\n        this._prevRemoved = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextMoved = null;\n        /** @internal */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\nvar _DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /** @internal */\n        this._head = null;\n        /** @internal */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    _DuplicateItemRecordList.prototype.add = function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    _DuplicateItemRecordList.prototype.remove = function (record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var prev = record._prevDup;\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nvar _DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    _DuplicateMap.prototype.put = function (record) {\n        var key = record.trackById;\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n        var key = trackById;\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    _DuplicateMap.prototype.remove = function (record) {\n        var key = record.trackById;\n        var recordList = this.map.get(key);\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n    DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\nvar DefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.diff = function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    DefaultKeyValueDiffer.prototype.check = function (map) {\n        var _this = this;\n        this._reset();\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n        if (before) {\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n        if (this._records.has(key)) {\n            var record_1 = this._records.get(key);\n            this._maybeAddToChanges(record_1, value);\n            var prev = record_1._prev;\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            this._additionsTail._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            this._changesTail._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\nvar KeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    IterableDiffers.create = function (factories, parent) {\n        if (parent != null) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    IterableDiffers.extend = function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    IterableDiffers.prototype.find = function (iterable) {\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */\n    IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nvar KeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    KeyValueDiffers.create = function (factories, parent) {\n        if (parent) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    KeyValueDiffers.extend = function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    KeyValueDiffers.prototype.find = function (kv) {\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    /** @nocollapse */\n    KeyValueDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n    });\n    return KeyValueDiffers;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nvar ChangeDetectorRef = /** @class */ (function () {\n    function ChangeDetectorRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n    return ChangeDetectorRef;\n}());\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n};\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nvar keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nvar iterableDiff = [new DefaultIterableDifferFactory()];\nvar defaultIterableDiffers = new IterableDiffers(iterableDiff);\nvar defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n    return TemplateRef;\n}());\nvar SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\nvar SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nvar ViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n    return ViewContainerRef;\n}());\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\nfunction viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\nfunction viewDebugError(msg, context) {\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\nfunction _addDebugContext(err, context) {\n    err[ERROR_DEBUG_CONTEXT] = context;\n    err[ERROR_LOGGER] = context.logError.bind(context);\n}\nfunction isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\nfunction viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\nfunction shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    var state = view.state;\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nfunction asTextData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nfunction asElementData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nfunction asProviderData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nfunction asPureExpressionData(view, index) {\n    return view.nodes[index];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n */\nfunction asQueryList(view, index) {\n    return view.nodes[index];\n}\nvar DebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nvar Services = {\n    setCurrentNode: undefined,\n    createRootView: undefined,\n    createEmbeddedView: undefined,\n    createComponentView: undefined,\n    createNgModuleRef: undefined,\n    overrideProvider: undefined,\n    overrideComponentView: undefined,\n    clearOverrides: undefined,\n    checkAndUpdateView: undefined,\n    checkNoChangesView: undefined,\n    destroyView: undefined,\n    resolveDep: undefined,\n    createDebugContext: undefined,\n    handleEvent: undefined,\n    updateDirectives: undefined,\n    updateRenderer: undefined,\n    dirtyParentQueries: undefined,\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NOOP = function () { };\nvar _tokenKeyCache = new Map();\nfunction tokenKey(token) {\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nfunction createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\nvar _renderCompCount$1 = 0;\nfunction resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount$1++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\nfunction checkBinding(view, def, bindingIdx, value) {\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\nfunction markParentViewsForCheck(view) {\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        var nodeDef = view.def.nodes[nodeIndex];\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\nfunction declaredViewContainer(view) {\n    if (view.parent) {\n        var parentView = view.parent;\n        return asElementData(parentView, view.parentNodeDef.nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n */\nfunction viewParentEl(view) {\n    var parentView = view.parent;\n    if (parentView) {\n        return view.parentNodeDef.parent;\n    }\n    else {\n        return null;\n    }\n}\nfunction renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\nfunction elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\nfunction isComponentView(view) {\n    return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\n}\nfunction isEmbeddedView(view) {\n    return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\n}\nfunction filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n    var matchedQueries = {};\n    var matchedQueryIds = 0;\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\nfunction splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        var _a;\n        var token;\n        var flags;\n        if (Array.isArray(value)) {\n            _a = __read(value, 2), flags = _a[0], token = _a[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\nfunction getParentRenderElement(view, renderHost, def) {\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (renderParent.element.componentRendererType &&\n                renderParent.element.componentRendererType.encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, def.renderParent.nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\nvar DEFINITION_CACHE = new WeakMap();\nfunction resolveDefinition(factory) {\n    var value = DEFINITION_CACHE.get(factory);\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\nfunction rootRenderNodes(view) {\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    var hostView = compView.parent;\n    var hostElDef = viewParentEl(compView);\n    var startIndex = hostElDef.nodeIndex + 1;\n    var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = hostView.def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!hostView.parent) {\n        // a root view\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n    }\n    else {\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            target.push(renderNode);\n            break;\n    }\n}\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\nfunction splitNamespace(name) {\n    if (name[0] === ':') {\n        var match = name.match(NS_PREFIX_RE);\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\nfunction calcBindingFlags(bindings) {\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\nfunction interpolate(valueCount, constAndInterp) {\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\nvar EMPTY_ARRAY$3 = [];\nvar EMPTY_MAP = {};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar UNDEFINED_VALUE = new Object();\nvar InjectorRefTokenKey = tokenKey(Injector);\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\nfunction moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\nfunction moduleDef(providers) {\n    var providersByKey = {};\n    var modules = [];\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\nfunction initNgModule(data) {\n    var def = data._def;\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\nfunction resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        var injectableDef = void 0;\n        if (providerDef) {\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\nfunction _createProviderInstance(ngModule, providerDef) {\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\nfunction _createClass(ngModule, ctor, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n    }\n}\nfunction _callFactory(ngModule, factory, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, __spread(depValues));\n    }\n}\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n    var def = ngModule._def;\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, viewIndex, view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\nfunction attachProjectedView(vcElementData, view) {\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);\n}\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\nfunction detachEmbeddedView(elementData, viewIndex) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    return view;\n}\nfunction detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    var embeddedViews = elementData.viewContainer._embeddedViews;\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :\n        elementData.renderElement;\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\nfunction renderDetachView$1(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\nfunction getComponentViewDefinitionFactory(componentFactory) {\n    return componentFactory.viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    __extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: function () {\n            var inputsArr = [];\n            var inputs = this._inputs;\n            for (var propName in inputs) {\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: function () {\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nvar ComponentRef_ = /** @class */ (function (_super) {\n    __extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: function () { return this._component.constructor; },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nfunction createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * @internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: function () {\n            var view = this._view;\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = view.parent;\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewContainerRef_.prototype.clear = function () {\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var view = detachEmbeddedView(this._data, i);\n            Services.destroyView(view);\n        }\n    };\n    ViewContainerRef_.prototype.get = function (index) {\n        var view = this._embeddedViews[index];\n        if (view) {\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n        var viewRef = templateRef.createEmbeddedView(context || {});\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    ViewContainerRef_.prototype.insert = function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        var viewRef_ = viewRef;\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    ViewContainerRef_.prototype.indexOf = function (viewRef) {\n        return this._embeddedViews.indexOf(viewRef._view);\n    };\n    ViewContainerRef_.prototype.remove = function (index) {\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    ViewContainerRef_.prototype.detach = function (index) {\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nfunction createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n    ViewRef_.prototype.detectChanges = function () {\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n    ViewRef_.prototype.onDestroy = function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(callback);\n    };\n    ViewRef_.prototype.destroy = function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    ViewRef_.prototype.detachFromAppRef = function () {\n        this._appRef = null;\n        renderDetachView$1(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    ViewRef_.prototype.attachToAppRef = function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nfunction createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    __extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    TemplateRef_.prototype.createEmbeddedView = function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nfunction createInjector$1(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    Injector_.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nfunction nodeValue(view, index) {\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        var elData = asElementData(view, def.nodeIndex);\n        return def.element.template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\nfunction createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\n        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\n    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    RendererAdapter.prototype.createText = function (parentElement, value) {\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\n        var parentElement = this.delegate.parentNode(node);\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    RendererAdapter.prototype.detachView = function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            var node = viewRootNodes[i];\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            this.delegate.destroyNode(viewAllNodes[i]);\n        }\n    };\n    RendererAdapter.prototype.listen = function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, callback);\n    };\n    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\n        return this.delegate.listen(target, name, callback);\n    };\n    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\n        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n        renderElement[methodName].apply(renderElement, args);\n    };\n    RendererAdapter.prototype.setText = function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }\n        var flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    NgModuleRef_.prototype.destroy = function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RendererV1TokenKey = tokenKey(Renderer);\nvar Renderer2TokenKey = tokenKey(Renderer2);\nvar ElementRefTokenKey = tokenKey(ElementRef);\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nvar InjectorRefTokenKey$1 = tokenKey(Injector);\nvar INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\nfunction pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nfunction createProviderInstance(view, def) {\n    return _createProviderInstance$1(view, def);\n}\nfunction createPipeInstance(view, def) {\n    // deps are looked up from component.\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n}\nfunction createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var outputObservable = instance[output.propName];\n            if (isObservable(outputObservable)) {\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nfunction _createProviderInstance$1(view, def) {\n    // private services can see other private services\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n        case 256 /* TypeValueProvider */:\n            return providerDef.value;\n    }\n}\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n    }\n}\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, __spread(depValues));\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nvar NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && elDef.element.componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = elDef.parent;\n    }\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (elDef.element.template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey$1:\n                case INJECTORRefTokenKey$1:\n                    return createInjector$1(searchView, elDef);\n                default:\n                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                        elDef.element.publicProviders)[tokenKey];\n                    if (providerDef_1) {\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = viewParentEl(searchView);\n        searchView = searchView.parent;\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\nfunction findCompView(view, elDef, allowPrivateServices) {\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        var compView = asElementData(view, def.parent.nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    var binding = def.bindings[bindingIdx];\n    var propName = binding.name;\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        var binding_1 = def.bindings[bindingIdx];\n        changes[binding_1.nonMinifiedName] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    var nodes = view.def.nodes;\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        var nodeDef = nodes[i];\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ComponentFactoryResolver$1 = /** @class */ (function (_super) {\n    __extends(ComponentFactoryResolver, _super);\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    function ComponentFactoryResolver(ngModule) {\n        var _this = _super.call(this) || this;\n        _this.ngModule = ngModule;\n        return _this;\n    }\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        ngDevMode && assertComponentType(component);\n        var componentDef = getComponentDef(component);\n        return new ComponentFactory$1(componentDef, this.ngModule);\n    };\n    return ComponentFactoryResolver;\n}(ComponentFactoryResolver));\nfunction toRefArray(map) {\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nvar ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nvar SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () { return defaultScheduler; },\n});\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: function (token, notFoundValue, flags) {\n            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        }\n    };\n}\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nvar ComponentFactory$1 = /** @class */ (function (_super) {\n    __extends(ComponentFactory, _super);\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    function ComponentFactory(componentDef, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.ngModule = ngModule;\n        _this.componentType = componentDef.type;\n        _this.selector = componentDef.selectors[0][0];\n        // The component definition does not include the wildcard ('*') selector in its list.\n        // It is implicitly expected as the first item in the projectable nodes array.\n        _this.ngContentSelectors =\n            componentDef.ngContentSelectors ? __spread(['*'], componentDef.ngContentSelectors) : [];\n        _this.isBoundToModule = !!ngModule;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n        var sanitizer = rootViewInjector.get(Sanitizer, null);\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        var oldLView = enterView(rootLView, null);\n        var component;\n        var tElementNode;\n        try {\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = getTNode(0, rootLView);\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n        }\n        var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode.child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(ComponentFactory));\nvar componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nvar ComponentRef$1 = /** @class */ (function (_super) {\n    __extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this._rootLView = _rootLView;\n        _this._tNode = _tNode;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n        _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        _this.componentType = componentType;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef.prototype, \"injector\", {\n        get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentRef.prototype.destroy = function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n        !this.hostView.destroyed && this.hostView.destroy();\n    };\n    ComponentRef.prototype.onDestroy = function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    };\n    return ComponentRef;\n}(ComponentRef));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Equivalent to ES6 spread, add each item to an array.\n*\n* @param items The items to add\n* @param arr The array to which you want to add the items\n*/\nfunction addAllToArray(items, arr) {\n    for (var i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nfunction flatten(list) {\n    var result = [];\n    var i = 0;\n    while (i < list.length) {\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nvar ELEMENT_MARKER = {\n    marker: 'element'\n};\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nvar COMMENT_MARKER = {\n    marker: 'comment'\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MARKER = \"\\uFFFD\";\nvar ICU_BLOCK_REGEXP = /^\\s*(ÔøΩ\\d+:?\\d*ÔøΩ)\\s*,\\s*(select|plural)\\s*,/;\nvar SUBTEMPLATE_REGEXP = /ÔøΩ\\/?\\*(\\d+:\\d+)ÔøΩ/gi;\nvar PH_REGEXP = /ÔøΩ(\\/?[#*]\\d+):?\\d*ÔøΩ/gi;\nvar BINDING_REGEXP = /ÔøΩ(\\d+):?\\d*ÔøΩ/gi;\nvar ICU_REGEXP = /({\\s*ÔøΩ\\d+:?\\d*ÔøΩ\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostprocess consts\nvar ROOT_TEMPLATE_ID = 0;\nvar PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(ÔøΩ.+?ÔøΩ?)\\]/;\nvar PP_PLACEHOLDERS_REGEXP = /\\[(ÔøΩ.+?ÔøΩ?)\\]|(ÔøΩ\\/?\\*\\d+:\\d+ÔøΩ)/g;\nvar PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nvar PP_ICUS_REGEXP = /ÔøΩI18N_EXP_(ICU(_\\d+)?)ÔøΩ/g;\nvar PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nvar PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n *\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    var prevPos = 0;\n    var braceStack = [];\n    var results = [];\n    var braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    var match;\n    while (match = braces.exec(pattern)) {\n        var pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                var block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                var substring_1 = pattern.substring(prevPos, pos);\n                results.push(substring_1);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    var substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n    var cases = [];\n    var values = [];\n    var icuType = 1 /* plural */;\n    var mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    });\n    var parts = extractParts(pattern);\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (var pos = 0; pos < parts.length;) {\n        var key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        var blocks = extractParts(parts[pos++]);\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases: cases, values: values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n    var match;\n    var res = '';\n    var index = 0;\n    var inTemplate = false;\n    var tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === MARKER + \"/*\" + tagMatched + MARKER) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, \"Tag mismatch: unable to find the end of the sub-template in the translation \\\"\" + message + \"\\\"\");\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        var start = message.indexOf(\":\" + subTemplateIndex + MARKER) + 2 + subTemplateIndex.toString().length;\n        var end = message.search(new RegExp(MARKER + \"\\\\/\\\\*\\\\d+:\" + subTemplateIndex + MARKER));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn) {\n    if (sanitizeFn === void 0) { sanitizeFn = null; }\n    var updateOpCodes = [null, null]; // Alloc space for mask and size\n    var textParts = str.split(BINDING_REGEXP);\n    var mask = 0;\n    for (var j = 0; j < textParts.length; j++) {\n        var textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            var bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\nfunction getBindingMask(icuExpression, mask) {\n    if (mask === void 0) { mask = 0; }\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    var match;\n    for (var i = 0; i < icuExpression.values.length; i++) {\n        var valueArr = icuExpression.values[i];\n        for (var j = 0; j < valueArr.length; j++) {\n            var value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask(value, mask);\n            }\n        }\n    }\n    return mask;\n}\nvar i18nIndexStack = [];\nvar i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\nvar parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ÔøΩ{index}(:{block})ÔøΩ`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ÔøΩ#{index}(:{block})ÔøΩ`/`ÔøΩ/#{index}(:{block})ÔøΩ`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ÔøΩ*{index}:{block}ÔøΩ`/`ÔøΩ/*{index}:{block}ÔøΩ`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nfunction i18nStart(index, message, subTemplateIndex) {\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n// Count for the number of vars that will be allocated for each i18n block.\n// It is global because this is used in multiple functions that include loops and recursive calls.\n// This is reset to 0 when `i18nStartFirstPass` is called.\nvar i18nVarsCount;\n/**\n * See `i18nStart` above.\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    var viewData = getLView();\n    var startIndex = tView.blueprint.length - HEADER_OFFSET;\n    i18nVarsCount = 0;\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    var parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    var parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n    var parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    var createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    var updateOpCodes = [];\n    var icuExpressions = [];\n    var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    var msgParts = templateTranslation.split(PH_REGEXP);\n    for (var i = 0; i < msgParts.length; i++) {\n        var value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    var phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                var phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            var parts = extractParts(value);\n            for (var j = 0; j < parts.length; j++) {\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    var icuNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? \"ICU \" + icuNodeIndex : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    var icuExpression = parts[j];\n                    var mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    var tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (parts[j] !== '') {\n                    var text = parts[j];\n                    // Even indexes are text (including bindings)\n                    var hasBinding = text.match(BINDING_REGEXP);\n                    // Create text nodes\n                    var textNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    allocExpando(viewData, i18nVarsCount);\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    var tI18n = {\n        vars: i18nVarsCount,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    var nextNode = tNode.next;\n    var viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // Re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[T_HOST]) {\n        tNode.parent = parentTNode;\n    }\n    // If tNode was moved around, we might need to fix a broken link.\n    var cursor = tNode.next;\n    while (cursor) {\n        if (cursor.next === tNode) {\n            cursor.next = nextNode;\n        }\n        cursor = cursor.next;\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    var slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [ÔøΩ*1:1ÔøΩÔøΩ#2:1ÔøΩ|ÔøΩ#4:1ÔøΩ|ÔøΩ5ÔøΩ])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like ÔøΩICU_EXP_ICU_1ÔøΩ)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @publicAPI\n */\nfunction i18nPostprocess(message, replacements) {\n    if (replacements === void 0) { replacements = {}; }\n    /**\n     * Step 1: resolve all multi-value placeholders like [ÔøΩ#5ÔøΩ|ÔøΩ*1:1ÔøΩÔøΩ#2:1ÔøΩ|ÔøΩ#4:1ÔøΩ]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [ÔøΩ#5ÔøΩ|ÔøΩ#6ÔøΩ|ÔøΩ#1:1ÔøΩ|ÔøΩ#3:2ÔøΩ] where ÔøΩ#5ÔøΩ and ÔøΩ#6ÔøΩ belong to root\n     * template, ÔøΩ#1:1ÔøΩ belong to nested template with index 1 and ÔøΩ#1:2ÔøΩ - nested template with index\n     * 3. However in real templates the order might be different: i.e. ÔøΩ#1:1ÔøΩ and/or ÔøΩ#3:2ÔøΩ may go in\n     * front of ÔøΩ#6ÔøΩ. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     */\n    var result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        var matches_1 = {};\n        var templateIdsStack_1 = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {\n            var content = phs || tmpl;\n            if (!matches_1[content]) {\n                var placeholders_1 = [];\n                content.split('|').forEach(function (placeholder) {\n                    var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders_1.push([templateId, isCloseTemplateTag, placeholder]);\n                });\n                matches_1[content] = placeholders_1;\n            }\n            if (!matches_1[content].length) {\n                throw new Error(\"i18n postprocess: unmatched placeholder - \" + content);\n            }\n            var currentTemplateId = templateIdsStack_1[templateIdsStack_1.length - 1];\n            var placeholders = matches_1[content];\n            var idx = 0;\n            // find placeholder index that matches current template id\n            for (var i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            var _a = __read(placeholders[idx], 3), templateId = _a[0], isCloseTemplateTag = _a[1], placeholder = _a[2];\n            if (isCloseTemplateTag) {\n                templateIdsStack_1.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack_1.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        });\n        // verify that we injected all values\n        var hasUnmatchedValues = Object.keys(matches_1).some(function (key) { return !!matches_1[key].length; });\n        if (hasUnmatchedValues) {\n            throw new Error(\"i18n postprocess: unmatched values - \" + JSON.stringify(matches_1));\n        }\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {\n        return replacements.hasOwnProperty(key) ? \"\" + start + replacements[key] + end : match;\n    });\n    /**\n     * Step 3: replace all ICU references with corresponding values (like ÔøΩICU_EXP_ICU_1ÔøΩ) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, function (match, key) {\n        if (replacements.hasOwnProperty(key)) {\n            var list = replacements[key];\n            if (!list.length) {\n                throw new Error(\"i18n postprocess: unmatched ICU - \" + match + \" with key: \" + key);\n            }\n            return list.shift();\n        }\n        return match;\n    });\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n */\nfunction i18nEnd() {\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    i18nEndFirstPass(tView);\n}\n/**\n * See `i18nEnd` above.\n */\nfunction i18nEndFirstPass(tView) {\n    var viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    var rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    var tI18n = tView.data[rootIndex + HEADER_OFFSET];\n    ngDevMode && assertDefined(tI18n, \"You should call i18nStart before i18nEnd\");\n    // Find the last node that was added before `i18nEnd`\n    var lastCreatedNode = getPreviousOrParentTNode();\n    // Read the instructions to insert/move/remove DOM elements\n    var visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n    // Remove deleted nodes\n    for (var i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n        if (visitedNodes.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n */\nfunction createDynamicNodeAtIndex(index, type, native, name) {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    var tNode = createNodeAtIndex(index, type, native, name, null);\n    // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n    // We will link ourselves into the tree later with `appendI18nNode`.\n    if (previousOrParentTNode.next === tNode) {\n        previousOrParentTNode.next = null;\n    }\n    return tNode;\n}\nfunction readCreateOpCodes(index, createOpCodes, icus, viewData) {\n    var renderer = getLView()[RENDERER];\n    var currentTNode = null;\n    var previousTNode = null;\n    var visitedNodes = [];\n    for (var i = 0; i < createOpCodes.length; i++) {\n        var opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            var textRNode = createTextNode(opCode, renderer);\n            var textNodeIndex = createOpCodes[++i];\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode = createDynamicNodeAtIndex(textNodeIndex, 3 /* Element */, textRNode, null);\n            visitedNodes.push(textNodeIndex);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    var destinationTNode = void 0;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = viewData[T_HOST];\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined(currentTNode, \"You need to create or select a node before you can insert it into the DOM\");\n                    previousTNode = appendI18nNode(currentTNode, destinationTNode, previousTNode);\n                    break;\n                case 0 /* Select */:\n                    var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedNodes.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    var elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    var attrName = createOpCodes[++i];\n                    var attrValue = createOpCodes[++i];\n                    elementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    var commentValue = createOpCodes[++i];\n                    var commentNodeIndex = createOpCodes[++i];\n                    ngDevMode && assertEqual(typeof commentValue, 'string', \"Expected \\\"\" + commentValue + \"\\\" to be a comment node value\");\n                    var commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                    visitedNodes.push(commentNodeIndex);\n                    attachPatchData(commentRNode, viewData);\n                    currentTNode.activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    var tagNameValue = createOpCodes[++i];\n                    var elementNodeIndex = createOpCodes[++i];\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', \"Expected \\\"\" + tagNameValue + \"\\\" to be an element node tag name\");\n                    var elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                    visitedNodes.push(elementNodeIndex);\n                    break;\n                default:\n                    throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedNodes;\n}\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit) {\n    if (bypassCheckBit === void 0) { bypassCheckBit = false; }\n    var caseCreated = false;\n    for (var i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        var checkBit = updateOpCodes[i];\n        // Number of opCodes to skip until next set of update codes\n        var skipCodes = updateOpCodes[++i];\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            var value = '';\n            for (var j = i + 1; j <= (i + skipCodes); j++) {\n                var opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        var tIcuIndex = void 0;\n                        var tIcu = void 0;\n                        var icuTNode = void 0;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                var attrName = updateOpCodes[++j];\n                                var sanitizeFn = updateOpCodes[++j];\n                                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = updateOpCodes[++j];\n                                tIcu = icus[tIcuIndex];\n                                icuTNode = getTNode(nodeIndex, viewData);\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    var removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (var k = 0; k < removeCodes.length; k++) {\n                                        var removeOpCode = removeCodes[k];\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                var nodeIndex_1 = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex_1, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                var nestedIcuNodeIndex = removeCodes[k + 1] >>> 3 /* SHIFT_REF */;\n                                                var nestedIcuTNode = getTNode(nestedIcuNodeIndex, viewData);\n                                                var activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    var nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    var nestedTIcu = icus[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                var caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = updateOpCodes[++j];\n                                tIcu = icus[tIcuIndex];\n                                icuTNode = getTNode(nodeIndex, viewData);\n                                readUpdateOpCodes(tIcu.update[icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\nfunction removeNode(index, viewData) {\n    var removedPhTNode = getTNode(index, viewData);\n    var removedPhRNode = getNativeByIndex(index, viewData);\n    if (removedPhRNode) {\n        nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n    }\n    var slotValue = load(index);\n    if (isLContainer(slotValue)) {\n        var lContainer = slotValue;\n        if (removedPhTNode.type !== 0 /* Container */) {\n            nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n        }\n    }\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ÔøΩ{index}(:{block})ÔøΩ`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ÔøΩ#{index}(:{block})ÔøΩ`/`ÔøΩ/#{index}(:{block})ÔøΩ`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ÔøΩ*{index}:{block}ÔøΩ`/`ÔøΩ/*{index}:{block}ÔøΩ`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nfunction i18n(index, message, subTemplateIndex) {\n    i18nStart(index, message, subTemplateIndex);\n    i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n */\nfunction i18nAttributes(index, values) {\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    var previousElement = getPreviousOrParentTNode();\n    var previousElementIndex = previousElement.index - HEADER_OFFSET;\n    var updateOpCodes = [];\n    for (var i = 0; i < values.length; i += 2) {\n        var attrName = values[i];\n        var message = values[i + 1];\n        var parts = message.split(ICU_REGEXP);\n        for (var j = 0; j < parts.length; j++) {\n            var value = parts[j];\n            if (j & 1) ;\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                var hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    elementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\nvar changeMask = 0;\nvar shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param expression The binding's new value or NO_CHANGE\n */\nfunction i18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n */\nfunction i18nApply(index) {\n    if (shiftsCounter) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        var tI18n = tView.data[index + HEADER_OFFSET];\n        var updateOpCodes = void 0;\n        var icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = tI18n;\n        }\n        else {\n            updateOpCodes = tI18n.update;\n            icus = tI18n.icus;\n        }\n        var bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0;\n        shiftsCounter = 0;\n    }\n}\nvar Plural;\n(function (Plural) {\n    Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n    Plural[Plural[\"One\"] = 1] = \"One\";\n    Plural[Plural[\"Two\"] = 2] = \"Two\";\n    Plural[Plural[\"Few\"] = 3] = \"Few\";\n    Plural[Plural[\"Many\"] = 4] = \"Many\";\n    Plural[Plural[\"Other\"] = 5] = \"Other\";\n})(Plural || (Plural = {}));\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt(nLike, 10);\n    }\n    var n = nLike;\n    var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    var i = Math.floor(Math.abs(n));\n    var v = nDecimal.length;\n    var f = parseInt(nDecimal, 10);\n    var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    var lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required‚Äîgeneral plural form ‚Äî also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\nfunction getPluralCategory(value, locale) {\n    var plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    var index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n                var locale = 'en-US';\n                var resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param tIcus\n * @param icuExpression\n * @param startIndex\n * @param expandoStartIndex\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    var createCodes = [];\n    var removeCodes = [];\n    var updateCodes = [];\n    var vars = [];\n    var childIcus = [];\n    for (var i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        var valueArr = icuExpression.values[i];\n        var nestedIcus = [];\n        for (var j = 0; j < valueArr.length; j++) {\n            var value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                var icuIndex = nestedIcus.push(value) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = \"<!--\\uFFFD\" + icuIndex + \"\\uFFFD-->\";\n            }\n        }\n        var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    var tIcu = {\n        type: icuExpression.type,\n        vars: vars,\n        childIcus: childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    // Adding the maximum possible of vars needed (based on the cases with the most vars)\n    i18nVarsCount += Math.max.apply(Math, __spread(vars));\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param unsafeHtml The string to parse\n * @param parentIndex\n * @param nestedIcus\n * @param tIcus\n * @param expandoStartIndex\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    var inertBodyHelper = new InertBodyHelper(document);\n    var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    var wrapper = getTemplateContent(inertBodyElement) || inertBodyElement;\n    var opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\nvar NESTED_ICU = /ÔøΩ(\\d+)ÔøΩ/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param currentNode The first node to parse\n * @param icuCase The data for the ICU expression case that contains those nodes\n * @param parentIndex Index of the current node's parent\n * @param nestedIcus Data for the nested ICU expressions that this case contains\n * @param tIcus Data for all ICU expressions of the current message\n * @param expandoStartIndex Expando start index for the current ICU expression\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        var nestedIcusToCreate = [];\n        while (currentNode) {\n            var nextNode = currentNode.nextSibling;\n            var newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    var element = currentNode;\n                    var tagName = element.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        var elAttrs = element.attributes;\n                        for (var i = 0; i < elAttrs.length; i++) {\n                            var attr = elAttrs.item(i);\n                            var lowerAttrName = attr.name.toLowerCase();\n                            var hasBinding_1 = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding_1) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(\"WARNING: ignoring unsafe attribute value \" + lowerAttrName + \" on element \" + tagName + \" (see http://g.co/ng/security#xss)\");\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    var value = currentNode.textContent || '';\n                    var hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    var match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        var nestedIcuIndex = parseInt(match[1], 10);\n                        var newLocal = ngDevMode ? \"nested ICU \" + nestedIcuIndex : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        var nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = nextNode;\n        }\n        for (var i = 0; i < nestedIcusToCreate.length; i++) {\n            var nestedIcu = nestedIcusToCreate[i][0];\n            var nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            var nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max.apply(Math, __spread(tIcus[nestTIcuIndex].vars));\n            icuCase.childIcus.push(nestTIcuIndex);\n            var mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar COMPONENT_FACTORY_RESOLVER = {\n    provide: ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver$1,\n    deps: [NgModuleRef],\n};\nvar NgModuleRef$1 = /** @class */ (function (_super) {\n    __extends(NgModuleRef$1, _super);\n    function NgModuleRef$1(ngModuleType, _parent) {\n        var _this = _super.call(this) || this;\n        _this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.injector = _this;\n        _this.destroyCbs = [];\n        var ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n        var additionalProviders = [\n            {\n                provide: NgModuleRef,\n                useValue: _this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        _this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType));\n        _this.instance = _this.get(ngModuleType);\n        return _this;\n    }\n    NgModuleRef$1.prototype.get = function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }\n        if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    };\n    Object.defineProperty(NgModuleRef$1.prototype, \"componentFactoryResolver\", {\n        get: function () {\n            return this.get(ComponentFactoryResolver);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgModuleRef$1.prototype.destroy = function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        var injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        this.destroyCbs.forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    NgModuleRef$1.prototype.onDestroy = function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    };\n    return NgModuleRef$1;\n}(NgModuleRef));\nvar NgModuleFactory$1 = /** @class */ (function (_super) {\n    __extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    NgModuleFactory.prototype.create = function (parentInjector) {\n        return new NgModuleRef$1(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(NgModuleFactory));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    var _a;\n    var clazz = type;\n    // We determine whether a class has its own metadata by taking the metadata from the parent\n    // constructor and checking whether it's the same as the subclass metadata below. We can't use\n    // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n    // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n    var parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n    var parentConstructor = parentPrototype && parentPrototype.constructor;\n    if (decorators !== null) {\n        if (clazz.decorators !== undefined &&\n            (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n            (_a = clazz.decorators).push.apply(_a, __spread(decorators));\n        }\n        else {\n            clazz.decorators = decorators;\n        }\n    }\n    if (ctorParameters !== null) {\n        // Rather than merging, clobber the existing parameters. If other projects exist which use\n        // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n        // but that is vanishingly unlikely.\n        clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n        // The property decorator objects are merged as it is possible different fields have different\n        // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n        // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n        // decorator that's also been downleveled.\n        if (clazz.propDecorators !== undefined &&\n            (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n            clazz.propDecorators = __assign({}, clazz.propDecorators, propDecorators);\n        }\n        else {\n            clazz.propDecorators = propDecorators;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n */\nfunction pureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var lView = getLView();\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var lView = getLView();\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    var bindingIndex = getBindingRoot() + slotOffset;\n    var different = false;\n    var lView = getLView();\n    for (var i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n */\nfunction pipe(index, pipeName) {\n    var tView = getLView()[TVIEW];\n    var pipeDef;\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = tView.data[adjustedIndex];\n    }\n    var pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef$1(name, registry) {\n    if (registry) {\n        for (var i = registry.length - 1; i >= 0; i--) {\n            var pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(\"The pipe '\" + name + \"' could not be found!\");\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n */\nfunction pipeBind1(index, slotOffset, v1) {\n    var pipeInstance = load(index);\n    return unwrapValue$1(isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n */\nfunction pipeBind2(index, slotOffset, v1, v2) {\n    var pipeInstance = load(index);\n    return unwrapValue$1(isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n */\nfunction pipeBind3(index, slotOffset, v1, v2, v3) {\n    var pipeInstance = load(index);\n    return unwrapValue$1(isPure(index) ? pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n */\nfunction pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    var pipeInstance = load(index);\n    return unwrapValue$1(isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n */\nfunction pipeBindV(index, slotOffset, values) {\n    var pipeInstance = load(index);\n    return unwrapValue$1(isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\nfunction isPure(index) {\n    return getLView()[TVIEW].data[index + HEADER_OFFSET].pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param newValue the pipe transformation output.\n */\nfunction unwrapValue$1(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        var lView = getLView();\n        // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n        // stored\n        var bindingToInvalidateIdx = lView[BINDING_INDEX];\n        lView[bindingToInvalidateIdx] = NO_CHANGE;\n    }\n    return newValue;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nvar EventEmitter = /** @class */ (function (_super) {\n    __extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n        var schedulerFn;\n        var errorFn = function (err) { return null; };\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nvar QueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    QueryList.prototype.filter = function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    QueryList.prototype.find = function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    QueryList.prototype.reduce = function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    QueryList.prototype.some = function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * Returns a copy of the internal results list as an Array.\n     */\n    QueryList.prototype.toArray = function () { return this._results.slice(); };\n    QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };\n    QueryList.prototype.toString = function () { return this._results.toString(); };\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param resultsTree The results tree to store\n     */\n    QueryList.prototype.reset = function (resultsTree) {\n        this._results = flatten(resultsTree);\n        this.dirty = false;\n        this.length = this._results.length;\n        this.last = this._results[this.length - 1];\n        this.first = this._results[0];\n    };\n    /**\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n     */\n    QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\n    /** internal */\n    QueryList.prototype.setDirty = function () { this.dirty = true; };\n    /** internal */\n    QueryList.prototype.destroy = function () {\n        this.changes.complete();\n        this.changes.unsubscribe();\n    };\n    return QueryList;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    LQueries_.prototype.track = function (queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    LQueries_.prototype.clone = function () { return new LQueries_(this, null, this.deep); };\n    LQueries_.prototype.container = function () {\n        var shallowResults = copyQueriesToContainer(this.shallow);\n        var deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    LQueries_.prototype.createView = function () {\n        var shallowResults = copyQueriesToView(this.shallow);\n        var deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    LQueries_.prototype.insertView = function (index) {\n        insertView$1(index, this.shallow);\n        insertView$1(index, this.deep);\n    };\n    LQueries_.prototype.addNode = function (tNode) {\n        add(this.deep, tNode);\n        add(this.shallow, tNode);\n    };\n    LQueries_.prototype.removeView = function () {\n        removeView$1(this.shallow);\n        removeView$1(this.deep);\n    };\n    return LQueries_;\n}());\nfunction copyQueriesToContainer(query) {\n    var result = null;\n    while (query) {\n        var containerValues = []; // prepare room for views\n        query.values.push(containerValues);\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\nfunction copyQueriesToView(query) {\n    var result = null;\n    while (query) {\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\nfunction insertView$1(index, query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        query.containerValues.splice(index, 0, query.values);\n        // mark a query as dirty only when inserted view had matching modes\n        if (query.values.length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\nfunction removeView$1(query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        var containerValues = query.containerValues;\n        var viewValuesIdx = containerValues.indexOf(query.values);\n        var removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\nfunction assertViewQueryhasPointerToDeclarationContainer(query) {\n    assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    var localNames = tNode.localNames;\n    if (localNames) {\n        for (var i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return localNames[i + 1];\n            }\n        }\n    }\n    return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\nfunction queryByReadToken(read, tNode, currentView) {\n    var factoryFn = read[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        var matchingIdx = locateDirectiveOrProvider(tNode, currentView, read, false, false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, tNode);\n        }\n    }\n    return null;\n}\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    return null;\n}\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    var templateRefResult = templateRefToken[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, tNode);\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\nfunction add(query, tNode) {\n    var currentView = getLView();\n    while (query) {\n        var predicate = query.predicate;\n        var type = predicate.type;\n        if (type) {\n            var result = null;\n            if (type === TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                var matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            var selector = predicate.selector;\n            for (var i = 0; i < selector.length; i++) {\n                var matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    var result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\nfunction createPredicate(predicate, read) {\n    var isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : predicate,\n        selector: isArray ? predicate : null,\n        read: read\n    };\n}\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: queryList._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * Creates and returns a QueryList.\n *\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nfunction query(\n// TODO: \"read\" should be an AbstractType (FW-486)\npredicate, descend, read) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    var lView = getLView();\n    var queryList = new QueryList();\n    var queries = lView[QUERIES] || (lView[QUERIES] = new LQueries_(null, null, null));\n    queryList._valuesTree = [];\n    queryList._static = false;\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(lView, queryList, queryList.destroy);\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n */\nfunction queryRefresh(queryList) {\n    var queryListImpl = queryList;\n    var creationMode = isCreationMode();\n    // if creation mode and static or update mode and not static\n    if (queryList.dirty && creationMode === queryListImpl._static) {\n        queryList.reset(queryListImpl._valuesTree || []);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList for a static view query.\n *\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n */\nfunction staticViewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    var queryList = viewQuery(predicate, descend, read);\n    var tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticViewQueries) {\n        tView.staticViewQueries = true;\n    }\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nfunction viewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n    }\n    var index = getCurrentQueryIndex();\n    var viewQuery = query(predicate, descend, read);\n    store(index - HEADER_OFFSET, viewQuery);\n    setCurrentQueryIndex(index + 1);\n    return viewQuery;\n}\n/**\n* Loads current View Query and moves the pointer/index to the next View Query in LView.\n*/\nfunction loadViewQuery() {\n    var index = getCurrentQueryIndex();\n    setCurrentQueryIndex(index + 1);\n    return load(index - HEADER_OFFSET);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nfunction contentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    var contentQuery = query(predicate, descend, read);\n    (lView[CONTENT_QUERIES] || (lView[CONTENT_QUERIES] = [])).push(contentQuery);\n    if (tView.firstTemplatePass) {\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 1] : -1;\n        if (directiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(directiveIndex);\n        }\n    }\n    return contentQuery;\n}\n/**\n * Registers a QueryList, associated with a static content query, for later refresh\n * (part of a view refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nfunction staticContentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    var queryList = contentQuery(directiveIndex, predicate, descend, read);\n    var tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticContentQueries) {\n        tView.staticContentQueries = true;\n    }\n}\nfunction loadContentQuery() {\n    var lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    var index = getCurrentQueryIndex();\n    ngDevMode && assertDataInRange(lView[CONTENT_QUERIES], index);\n    setCurrentQueryIndex(index + 1);\n    return lView[CONTENT_QUERIES][index];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n */\nfunction templateRefExtractor(tNode, currentView) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nvar angularCoreEnv = {\n    '…µdefineBase': defineBase,\n    '…µdefineComponent': defineComponent,\n    '…µdefineDirective': defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    '…µdefineNgModule': defineNgModule,\n    '…µdefinePipe': definePipe,\n    '…µdirectiveInject': directiveInject,\n    '…µgetFactoryOf': getFactoryOf$1,\n    '…µgetInheritedFactory': getInheritedFactory,\n    'inject': inject,\n    '…µinjectAttribute': injectAttribute,\n    '…µtemplateRefExtractor': templateRefExtractor,\n    '…µNgOnChangesFeature': NgOnChangesFeature,\n    '…µProvidersFeature': ProvidersFeature,\n    '…µInheritDefinitionFeature': InheritDefinitionFeature,\n    '…µelementAttribute': elementAttribute,\n    '…µbind': bind,\n    '…µcontainer': container,\n    '…µnextContext': nextContext,\n    '…µcontainerRefreshStart': containerRefreshStart,\n    '…µcontainerRefreshEnd': containerRefreshEnd,\n    '…µnamespaceHTML': namespaceHTML,\n    '…µnamespaceMathML': namespaceMathML,\n    '…µnamespaceSVG': namespaceSVG,\n    '…µenableBindings': enableBindings,\n    '…µdisableBindings': disableBindings,\n    '…µallocHostVars': allocHostVars,\n    '…µelementStart': elementStart,\n    '…µelementEnd': elementEnd,\n    '…µelement': element,\n    '…µelementContainerStart': elementContainerStart,\n    '…µelementContainerEnd': elementContainerEnd,\n    '…µpureFunction0': pureFunction0,\n    '…µpureFunction1': pureFunction1,\n    '…µpureFunction2': pureFunction2,\n    '…µpureFunction3': pureFunction3,\n    '…µpureFunction4': pureFunction4,\n    '…µpureFunction5': pureFunction5,\n    '…µpureFunction6': pureFunction6,\n    '…µpureFunction7': pureFunction7,\n    '…µpureFunction8': pureFunction8,\n    '…µpureFunctionV': pureFunctionV,\n    '…µgetCurrentView': getCurrentView,\n    '…µrestoreView': restoreView,\n    '…µinterpolation1': interpolation1,\n    '…µinterpolation2': interpolation2,\n    '…µinterpolation3': interpolation3,\n    '…µinterpolation4': interpolation4,\n    '…µinterpolation5': interpolation5,\n    '…µinterpolation6': interpolation6,\n    '…µinterpolation7': interpolation7,\n    '…µinterpolation8': interpolation8,\n    '…µinterpolationV': interpolationV,\n    '…µlistener': listener,\n    '…µload': load,\n    '…µprojection': projection,\n    '…µelementProperty': elementProperty,\n    '…µcomponentHostSyntheticProperty': componentHostSyntheticProperty,\n    '…µcomponentHostSyntheticListener': componentHostSyntheticListener,\n    '…µpipeBind1': pipeBind1,\n    '…µpipeBind2': pipeBind2,\n    '…µpipeBind3': pipeBind3,\n    '…µpipeBind4': pipeBind4,\n    '…µpipeBindV': pipeBindV,\n    '…µprojectionDef': projectionDef,\n    '…µpipe': pipe,\n    '…µqueryRefresh': queryRefresh,\n    '…µviewQuery': viewQuery,\n    '…µstaticViewQuery': staticViewQuery,\n    '…µstaticContentQuery': staticContentQuery,\n    '…µloadViewQuery': loadViewQuery,\n    '…µcontentQuery': contentQuery,\n    '…µloadContentQuery': loadContentQuery,\n    '…µreference': reference,\n    '…µelementHostAttrs': elementHostAttrs,\n    '…µelementStyling': elementStyling,\n    '…µelementStylingMap': elementStylingMap,\n    '…µelementStyleProp': elementStyleProp,\n    '…µelementStylingApply': elementStylingApply,\n    '…µelementClassProp': elementClassProp,\n    '…µelementHostStyling': elementHostStyling,\n    '…µelementHostStylingMap': elementHostStylingMap,\n    '…µelementHostStyleProp': elementHostStyleProp,\n    '…µelementHostStylingApply': elementHostStylingApply,\n    '…µelementHostClassProp': elementHostClassProp,\n    '…µselect': select,\n    '…µtemplate': template,\n    '…µtext': text,\n    '…µtextBinding': textBinding,\n    '…µembeddedViewStart': embeddedViewStart,\n    '…µembeddedViewEnd': embeddedViewEnd,\n    '…µi18n': i18n,\n    '…µi18nAttributes': i18nAttributes,\n    '…µi18nExp': i18nExp,\n    '…µi18nStart': i18nStart,\n    '…µi18nEnd': i18nEnd,\n    '…µi18nApply': i18nApply,\n    '…µi18nPostprocess': i18nPostprocess,\n    '…µresolveWindow': resolveWindow,\n    '…µresolveDocument': resolveDocument,\n    '…µresolveBody': resolveBody,\n    '…µsetComponentScope': setComponentScope,\n    '…µsetNgModuleScope': setNgModuleScope,\n    '…µsanitizeHtml': sanitizeHtml,\n    '…µsanitizeStyle': sanitizeStyle,\n    '…µdefaultStyleSanitizer': defaultStyleSanitizer,\n    '…µsanitizeResourceUrl': sanitizeResourceUrl,\n    '…µsanitizeScript': sanitizeScript,\n    '…µsanitizeUrl': sanitizeUrl,\n    '…µsanitizeUrlOrResourceUrl': sanitizeUrlOrResourceUrl\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * @publicApi\n */\nvar NgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n */\nvar modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @publicApi\n */\nfunction registerModuleFactory(id, factory) {\n    var existing = modules.get(id);\n    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n    modules.set(id, factory);\n}\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + stringify(type) + \" vs \" + stringify(type.name));\n    }\n}\nfunction registerNgModuleType(id, ngModuleType) {\n    var existing = modules.get(id);\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\nfunction getModuleFactory__PRE_R3__(id) {\n    var factory = modules.get(id);\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\nfunction getModuleFactory__POST_R3__(id) {\n    var type = modules.get(id);\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * @publicApi\n */\nvar getModuleFactory = getModuleFactory__PRE_R3__;\nfunction noModuleError(id) {\n    return new Error(\"No module with ID \" + id + \" loaded\");\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EMPTY_ARRAY$4 = [];\nvar moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType: moduleType, ngModule: ngModule });\n}\nvar flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (var i = moduleQueue.length - 1; i >= 0; i--) {\n                var _a = moduleQueue[i], moduleType = _a.moduleType, ngModule = _a.ngModule;\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule) {\n    if (ngModule === void 0) { ngModule = {}; }\n    compileNgModuleDefs(moduleType, ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n */\nfunction compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    var declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$4);\n    var ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: function () {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngModuleDef.js\", {\n                    type: moduleType,\n                    bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY$4, resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten$1(ngModule.imports || EMPTY_ARRAY$4, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten$1(ngModule.exports || EMPTY_ARRAY$4, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                    schemas: ngModule.schemas ? flatten$1(ngModule.schemas) : null,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    if (ngModule.id) {\n        registerNgModuleType(ngModule.id, moduleType);\n    }\n    var ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: function () {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef(moduleType);\n                var meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY$4,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngInjectorDef.js\", meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    var ngModuleDef = getNgModuleDef(moduleType, true);\n    var errors = [];\n    var declarations = maybeUnwrapFn(ngModuleDef.declarations);\n    var imports = maybeUnwrapFn(ngModuleDef.imports);\n    var exports = maybeUnwrapFn(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    var combinedDeclarations = __spread(declarations.map(resolveForwardRef), flatten$1(imports.map(computeCombinedExports), resolveForwardRef));\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach(verifyDeclarationIsUnique);\n    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    var ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten$1(ngModule.imports, unwrapModuleWithProvidersImports)\n                .forEach(verifySemanticsOfNgModuleDef);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyCorrectBootstrapType);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(\"Unexpected value '\" + renderStringify(type) + \"' declared by the module '\" + renderStringify(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\");\n        }\n    }\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(\"Can't export \" + kind + \" \" + renderStringify(type) + \" from \" + renderStringify(moduleType) + \" as it was neither declared nor imported!\");\n            }\n        }\n    }\n    function verifyDeclarationIsUnique(type) {\n        type = resolveForwardRef(type);\n        var existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            var modules = [existingModule, moduleType].map(renderStringify).sort();\n            errors.push(\"Type \" + renderStringify(type) + \" is part of the declarations of 2 modules: \" + modules[0] + \" and \" + modules[1] + \"! \" +\n                (\"Please consider moving \" + renderStringify(type) + \" to a higher module that imports \" + modules[0] + \" and \" + modules[1] + \". \") +\n                (\"You can also create a new NgModule that exports and includes \" + renderStringify(type) + \" then import that NgModule in \" + modules[0] + \" and \" + modules[1] + \".\"));\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        var existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(\"Component \" + renderStringify(type) + \" is not part of any NgModule or the module has not been imported into your module.\");\n        }\n    }\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef(type)) {\n            errors.push(renderStringify(type) + \" cannot be used as an entry component.\");\n        }\n    }\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            var component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n    var annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            var proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = decorator;\n            }\n            else if (decorator.type) {\n                var proto_1 = Object.getPrototypeOf(decorator.type);\n                if (proto_1.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nvar ownerNgModule = new Map();\nvar verifiedNgModule = new Map();\nfunction resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    var ngModuleDef = getNgModuleDef(type, true);\n    return __spread(flatten$1(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {\n        var ngModuleDef = getNgModuleDef(type);\n        if (ngModuleDef) {\n            verifySemanticsOfNgModuleDef(type);\n            return computeCombinedExports(type);\n        }\n        else {\n            return type;\n        }\n    })));\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    var declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$4);\n    var transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(function (declaration) {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            var component = declaration;\n            var componentDef = getComponentDef(component);\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            declaration.ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = function () {\n        return Array.from(transitiveScopes.compilation.directives)\n            .map(function (dir) { return dir.hasOwnProperty(NG_COMPONENT_DEF) ? getComponentDef(dir) :\n            getDirectiveDef(dir); })\n            .filter(function (def) { return !!def; });\n    };\n    componentDef.pipeDefs = function () {\n        return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return getPipeDef(pipe); });\n    };\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.template.ngPrivateData = undefined;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n */\nfunction transitiveScopesFor(moduleType, processNgModuleFn) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n    }\n    var def = getNgModuleDef(moduleType);\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    var scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn(def.declarations).forEach(function (declared) {\n        var declaredWithDefs = declared;\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    maybeUnwrapFn(def.imports).forEach(function (imported) {\n        var importedType = imported;\n        if (!isNgModule(importedType)) {\n            throw new Error(\"Importing \" + importedType.name + \" which does not have an ngModuleDef\");\n        }\n        if (processNgModuleFn) {\n            processNgModuleFn(importedType);\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        var importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n        importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n        importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n    });\n    maybeUnwrapFn(def.exports).forEach(function (exported) {\n        var exportedType = exported;\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            var exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n            exportedScope.exported.directives.forEach(function (entry) {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(function (entry) {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\nfunction flatten$1(values, mapFn) {\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, __spread(flatten$1(value, mapFn)));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\nfunction isModuleWithProviders(value) {\n    return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nfunction compileComponent(type, metadata) {\n    var ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(type, metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: function () {\n            var compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    var error = [\"Component '\" + renderStringify(type) + \"' is not resolved:\"];\n                    if (metadata.templateUrl) {\n                        error.push(\" - templateUrl: \" + renderStringify(metadata.templateUrl));\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                    }\n                    error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                    throw new Error(error.join('\\n'));\n                }\n                var templateUrl = metadata.templateUrl || \"ng:///\" + renderStringify(type) + \"/template.html\";\n                var meta = __assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', renderStringify(type), templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY$1, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    var scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction hasSelectorScope(component) {\n    return component.ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nfunction compileDirective(type, directive) {\n    var ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: function () {\n            if (ngDirectiveDef === null) {\n                var name_1 = type && type.name;\n                var sourceMapUrl = \"ng://\" + name_1 + \"/ngDirectiveDef.js\";\n                var compiler = getCompilerFacade();\n                var facade = directiveMetadata(type, directive);\n                facade.typeSourceSpan =\n                    compiler.createParseSourceSpan('Directive', renderStringify(type), sourceMapUrl);\n                ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    var propMetadata = getReflect().ownPropMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: metadata.selector,\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY$1,\n        outputs: metadata.outputs || EMPTY_ARRAY$1,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n        typeSourceSpan: null,\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: extractExportAs(metadata.exportAs),\n        providers: metadata.providers || null,\n        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    };\n}\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null,\n        static: !!ann.static\n    };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    var queriesMeta = [];\n    var _loop_1 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            var annotations_1 = propMetadata[field];\n            annotations_1.forEach(function (ann) {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(\"Can't construct a query for the property \\\"\" + field + \"\\\" of \" +\n                            (\"\\\"\" + renderStringify(type) + \"\\\" since the query selector wasn't defined.\"));\n                    }\n                    if (annotations_1.some(isInputAnn)) {\n                        throw new Error(\"Cannot combine @Input decorators with query decorators\");\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    };\n    for (var field in propMetadata) {\n        _loop_1(field);\n    }\n    return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n    if (exportAs === undefined) {\n        return null;\n    }\n    return exportAs.split(',').map(function (part) { return part.trim(); });\n}\nfunction isContentQuery(value) {\n    var name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n    var name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnn(value) {\n    return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n    return value.split(',').map(function (piece) { return piece.trim(); });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compilePipe(type, meta) {\n    var ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: function () {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, \"ng://\" + renderStringify(type) + \"/ngPipeDef.js\", {\n                    type: type,\n                    typeArgumentCount: 0,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nvar Directive = makeDecorator('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n}, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nvar Component = makeDecorator('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n}, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n/**\n * @Annotation\n * @publicApi\n */\nvar Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\nvar initializeBaseDef = function (target) {\n    var constructor = target.constructor;\n    var inheritedBaseDef = constructor.ngBaseDef;\n    var baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\n/**\n * Does the work of creating the `ngBaseDef` property for the `Input` and `Output` decorators.\n * @param key \"inputs\" or \"outputs\"\n */\nvar updateBaseDefFromIOProp = function (getProp) {\n    return function (target, name) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var constructor = target.constructor;\n        if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n            initializeBaseDef(target);\n        }\n        var baseDef = constructor.ngBaseDef;\n        var defProp = getProp(baseDef);\n        defProp[name] = args[0] || name;\n    };\n};\n/**\n * @Annotation\n * @publicApi\n */\nvar Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.inputs || {}; }));\n/**\n * @Annotation\n * @publicApi\n */\nvar Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.outputs || {}; }));\n/**\n * @Annotation\n * @publicApi\n */\nvar HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * @Annotation\n * @publicApi\n */\nvar HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\nvar SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\nvar SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\nvar SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\nvar SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\nvar SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\nvar SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\nvar SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\nvar SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\nvar SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @Annotation\n * @publicApi\n */\nvar NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\nfunction (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    var imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = __spread(imports, [metadata.exports]);\n    }\n    moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\nvar SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\nvar SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\nvar SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nvar APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    ApplicationInitStatus.prototype.runInitializers = function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        var asyncInitPromises = [];\n        var complete = function () {\n            _this.done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus = __decorate([\n        Injectable(),\n        __param(0, Inject(APP_INITIALIZER)), __param(0, Optional()),\n        __metadata(\"design:paramtypes\", [Array])\n    ], ApplicationInitStatus);\n    return ApplicationInitStatus;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nvar APP_ID = new InjectionToken('AppId');\nfunction _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nvar APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: [],\n};\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nvar PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nvar PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nvar APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nvar PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    Console.prototype.log = function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    Console.prototype.warn = function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console = __decorate([\n        Injectable()\n    ], Console);\n    return Console;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nvar ModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\nvar Compiler_compileModuleSync__PRE_R3__ = _throwError;\nvar Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactory$1(moduleType);\n};\nvar Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\nvar Compiler_compileModuleAsync__PRE_R3__ = _throwError;\nvar Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\nvar Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;\nvar Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n    var moduleDef = getNgModuleDef(moduleType);\n    var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n        .reduce(function (factories, declaration) {\n        var componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactory$1(componentDef));\n        return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n};\nvar Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\nvar Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;\nvar Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     */\n    Compiler.prototype.clearCache = function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    Compiler.prototype.clearCacheFor = function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\n    Compiler = __decorate([\n        Injectable()\n    ], Compiler);\n    return Compiler;\n}());\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nvar COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nvar CompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar trace;\nvar events;\nfunction detectWTF() {\n    var wtf = _global /** TODO #9100 */['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\nfunction createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\nfunction leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\nfunction startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\nfunction endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * True if WTF is enabled.\n */\nvar wtfEnabled = detectWTF();\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nvar wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nvar wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nvar wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nvar wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar promise = Promise.resolve(0);\nfunction scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nvar NgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        var self = this;\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (Zone['wtfZoneSpec']) {\n            self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n        }\n        if (Zone['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n        }\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n    NgZone.assertInAngularZone = function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    NgZone.assertNotInAngularZone = function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n        return this._inner.run(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n        var zone = this._inner;\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n        try {\n            return zone.runTask(task, applyThis, applyArgs);\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    NgZone.prototype.runOutsideAngular = function (fn) {\n        return this._outer.run(fn);\n    };\n    return NgZone;\n}());\nfunction noop$1() { }\nvar EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: { 'isAngularZone': true },\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar NoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    NoopNgZone.prototype.run = function (fn) { return fn(); };\n    NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\n    NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n    NoopNgZone.prototype.runTask = function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * @internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(function () {\n            _this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    Testability.prototype._watchAngularEvents = function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    Testability.prototype.increasePendingRequestCount = function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.decreasePendingRequestCount = function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    Testability.prototype.isStable = function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    Testability.prototype._runCallbacksIfReady = function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    var cb = _this._callbacks.pop();\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    Testability.prototype.getPendingTasks = function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: t.creationLocation,\n                data: t.data\n            };\n        });\n    };\n    Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n        var _this = this;\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(doneCb, timeout, updateCb);\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    Testability.prototype.findProviders = function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [NgZone])\n    ], Testability);\n    return Testability;\n}());\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /** @internal */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], TestabilityRegistry);\n    return TestabilityRegistry;\n}());\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    _NoopGetTestability.prototype.addToWindow = function (registry) { };\n    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nvar _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _platform;\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    var compilerFactory = injector.get(CompilerFactory);\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    var moduleFactory = new NgModuleFactory$1(moduleType);\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compiler = getCompilerFacade();\n    var compilerInjector = Injector.create({ providers: compilerProviders });\n    var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n        .then(function () { return moduleFactory; });\n}\nvar isBoundToModule = isBoundToModule__PRE_R3__;\nfunction isBoundToModule__PRE_R3__(cf) {\n    return cf instanceof ComponentFactoryBoundToModule;\n}\nfunction isBoundToModule__POST_R3__(cf) {\n    return cf.isBoundToModule;\n}\nvar ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nvar NgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nfunction createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    var desc = \"Platform: \" + name;\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nfunction assertPlatform(requiredToken) {\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nfunction destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nfunction getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n        var _this = this;\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        var ngZoneOption = options ? options.ngZone : undefined;\n        var ngZone = getNgZone(ngZoneOption);\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            var moduleRef = moduleFactory.create(ngZoneInjector);\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n            ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n        var appRef = moduleRef.injector.get(ApplicationRef);\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    PlatformRef.prototype.destroy = function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [Injector])\n    ], PlatformRef);\n    return PlatformRef;\n}());\nfunction getNgZone(ngZoneOption) {\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = __assign({}, dst, objs);\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        var isStable = new Observable(function (observer) {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        this.isStable =\n            merge$1(isCurrentlyStable, isStable.pipe(share()));\n    }\n    ApplicationRef_1 = ApplicationRef;\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        var ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    ApplicationRef.prototype.tick = function () {\n        var _this = this;\n        var e_1, _a, e_2, _b;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        var scope = ApplicationRef_1._tickScope();\n        try {\n            this._runningTick = true;\n            try {\n                for (var _c = __values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var view = _d.value;\n                    view.detectChanges();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this._enforceNoNewChanges) {\n                try {\n                    for (var _e = __values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                        var view = _f.value;\n                        view.checkNoChanges();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    ApplicationRef.prototype.attachView = function (viewRef) {\n        var view = viewRef;\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    ApplicationRef.prototype.detachView = function (viewRef) {\n        var view = viewRef;\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    ApplicationRef.prototype._loadComponent = function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    ApplicationRef.prototype._unloadComponent = function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    ApplicationRef.prototype.ngOnDestroy = function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    var ApplicationRef_1;\n    /** @internal */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef = ApplicationRef_1 = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [NgZone, Console, Injector,\n            ErrorHandler,\n            ComponentFactoryResolver,\n            ApplicationInitStatus])\n    ], ApplicationRef);\n    return ApplicationRef;\n}());\nfunction remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\nfunction _mergeArrays(parts) {\n    var result = [];\n    parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _SEPARATOR = '#';\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @publicApi\n */\nvar SystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\nvar DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @publicApi\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    SystemJsNgModuleLoader.prototype.load = function (path) {\n        var offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n        var _this = this;\n        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader = __decorate([\n        Injectable(),\n        __param(1, Optional()),\n        __metadata(\"design:paramtypes\", [Compiler, SystemJsNgModuleLoaderConfig])\n    ], SystemJsNgModuleLoader);\n    return SystemJsNgModuleLoader;\n}());\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nvar ViewRef$1 = /** @class */ (function (_super) {\n    __extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nvar EmbeddedViewRef = /** @class */ (function (_super) {\n    __extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef$1));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nvar DebugNode__PRE_R3__ = /** @class */ (function () {\n    function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n        get: function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n        get: function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n        get: function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n        get: function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n        get: function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__PRE_R3__;\n}());\nvar DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n    __extends(DebugElement__PRE_R3__, _super);\n    function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    DebugElement__PRE_R3__.prototype.addChild = function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n        var _this = this;\n        var _a;\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                child.parent = _this;\n            });\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n        get: function () {\n            return this\n                .childNodes //\n                .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__PRE_R3__;\n}(DebugNode__PRE_R3__));\n/**\n * @publicApi\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\nvar DebugNode__POST_R3__ = /** @class */ (function () {\n    function DebugNode__POST_R3__(nativeNode) {\n        this.nativeNode = nativeNode;\n    }\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n        get: function () {\n            var parent = this.nativeNode.parentNode;\n            return parent ? new DebugElement__POST_R3__(parent) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n        get: function () { return getInjector(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n        get: function () {\n            var nativeElement = this.nativeNode;\n            return nativeElement &&\n                (getComponent(nativeElement) || getViewComponent(nativeElement));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n        get: function () { return getContext(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n        get: function () {\n            return getListeners(this.nativeNode).filter(isBrowserEvents);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n        get: function () { return getLocalRefs(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n        get: function () { return getInjectionTokens(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__POST_R3__;\n}());\nvar DebugElement__POST_R3__ = /** @class */ (function (_super) {\n    __extends(DebugElement__POST_R3__, _super);\n    function DebugElement__POST_R3__(nativeNode) {\n        var _this = this;\n        ngDevMode && assertDomNode(nativeNode);\n        _this = _super.call(this, nativeNode) || this;\n        return _this;\n    }\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n        get: function () {\n            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n        get: function () { return this.nativeElement.nodeName; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n        /**\n         *  Gets a map of property names to property values for an element.\n         *\n         *  This map includes:\n         *  - Regular property bindings (e.g. `[id]=\"id\"`)\n         *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n         *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n         *\n         *  It does not include:\n         *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n         *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n         */\n        get: function () {\n            var context = loadLContext(this.nativeNode);\n            var lView = context.lView;\n            var tData = lView[TVIEW].data;\n            var tNode = tData[context.nodeIndex];\n            var properties = collectPropertyBindings(tNode, lView, tData);\n            var hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n            var className = collectClassNames(this);\n            var output = __assign({}, properties, hostProperties);\n            if (className) {\n                output['className'] = output['className'] ? output['className'] + (\" \" + className) : className;\n            }\n            return output;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n        get: function () {\n            var attributes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    attributes[attr.name] = attr.value;\n                }\n            }\n            return attributes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n        get: function () {\n            var classes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (isClassBasedValue(stylingContext, i)) {\n                            var className = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (typeof value == 'boolean') {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                classes[className] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eClasses = element.classList;\n                    for (var i = 0; i < eClasses.length; i++) {\n                        classes[eClasses[i]] = true;\n                    }\n                }\n            }\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n        get: function () {\n            var styles = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (!isClassBasedValue(stylingContext, i)) {\n                            var styleName = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (value !== null) {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                styles[styleName] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eStyles = element.style;\n                    for (var i = 0; i < eStyles.length; i++) {\n                        var name_1 = eStyles.item(i);\n                        styles[name_1] = eStyles.getPropertyValue(name_1);\n                    }\n                }\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n        get: function () {\n            var childNodes = this.nativeNode.childNodes;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n        get: function () {\n            var nativeElement = this.nativeElement;\n            if (!nativeElement)\n                return [];\n            var childNodes = nativeElement.children;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__POST_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, true);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, false);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__POST_R3__;\n}(DebugNode__POST_R3__));\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param parentElement the element from which the walk is started\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n    var context = loadLContext(parentElement.nativeNode);\n    var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    var e_1, _a;\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatchR3(getNativeByTNode(tNode, lView), predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponent(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            var componentView = getComponentViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild)\n                _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else {\n            // Otherwise, its children have to be processed.\n            if (tNode.child)\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        var nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        var lContainer = lView[tNode.index];\n        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type === 1 /* Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        var componentView = findComponentView(lView);\n        var componentHost = componentView[T_HOST];\n        var head = componentHost.projection[tNode.projection];\n        if (Array.isArray(head)) {\n            try {\n                for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                    var nativeNode = head_1_1.value;\n                    _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode_1 = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode_1, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    else {\n        // Case 4: the TNode is a view.\n        if (tNode.child) {\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    // To determine the next node to be processed, we need to use the next or the projectionNext link,\n    // depending on whether the current node has been projected.\n    var nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n        _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (var i = 0; i < lContainer[VIEWS].length; i++) {\n        var childView = lContainer[VIEWS][i];\n        _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        var debugNode = getDebugNode(nativeNode);\n        if (debugNode && (elementsOnly ? debugNode instanceof DebugElement__POST_R3__ : true) &&\n            predicate(debugNode)) {\n            matches.push(debugNode);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    var bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n    while (bindingIndex < tNode.propertyMetadataEndIndex) {\n        var value = '';\n        var propMetadata = tData[bindingIndex];\n        while (!isPropMetadataString(propMetadata)) {\n            // This is the first value for an interpolation. We need to build up\n            // the full interpolation by combining runtime values in LView with\n            // the static interstitial values stored in TData.\n            value += renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n            propMetadata = tData[++bindingIndex];\n        }\n        value += lView[bindingIndex];\n        // Property metadata string has 3 parts: property name, prefix, and suffix\n        var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n        var propertyName = metadataParts[0];\n        // Attr bindings don't have property names and should be skipped\n        if (propertyName) {\n            // Wrap value with prefix and suffix (will be '' for normal bindings)\n            properties[propertyName] = metadataParts[1] + value + metadataParts[2];\n        }\n        bindingIndex++;\n    }\n    return properties;\n}\n/**\n * Retrieves the first binding index that holds values for this property\n * binding.\n *\n * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n * there can be multiple binding values, so we might have to loop backwards\n * from the metadata index until we find the first one.\n *\n * @param metadataIndex The index of the first property metadata string for\n * this node.\n * @param tData The data array for the current TView\n * @returns The first binding index for this binding\n */\nfunction getFirstBindingIndex(metadataIndex, tData) {\n    var currentBindingIndex = metadataIndex - 1;\n    // If the slot before the metadata holds a string, we know that this\n    // metadata applies to an interpolation with at least 2 bindings, and\n    // we need to search further to access the first binding value.\n    var currentValue = tData[currentBindingIndex];\n    // We need to iterate until we hit either a:\n    // - TNode (it is an element slot marking the end of `consts` section), OR a\n    // - metadata string (slot is attribute metadata or a previous node's property metadata)\n    while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n        currentValue = tData[--currentBindingIndex];\n    }\n    return currentBindingIndex + 1;\n}\nfunction collectHostPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    // Host binding values for a node are stored after directives on that node\n    var hostPropIndex = tNode.directiveEnd;\n    var propMetadata = tData[hostPropIndex];\n    // When we reach a value in TView.data that is not a string, we know we've\n    // hit the next node's providers and directives and should stop copying data.\n    while (typeof propMetadata === 'string') {\n        var propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n        properties[propertyName] = lView[hostPropIndex];\n        propMetadata = tData[++hostPropIndex];\n    }\n    return properties;\n}\nfunction collectClassNames(debugElement) {\n    var e_2, _a;\n    var classes = debugElement.classes;\n    var output = '';\n    try {\n        for (var _b = __values(Object.keys(classes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var className = _c.value;\n            if (classes[className]) {\n                output = output ? output + (\" \" + className) : className;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return output;\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nvar _nativeNodeToDebugNode = new Map();\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\nfunction getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__(nativeNode) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * @publicApi\n */\nvar getDebugNode = getDebugNode__PRE_R3__;\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * @publicApi\n */\nvar DebugNode = DebugNode__PRE_R3__;\n/**\n * @publicApi\n */\nvar DebugElement = DebugElement__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nvar platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nvar LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nvar TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nvar TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\nfunction _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\nfunction _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nvar APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nfunction zoneSchedulerFactory(ngZone) {\n    var queue = [];\n    ngZone.onStable.subscribe(function () {\n        while (queue.length) {\n            queue.pop()();\n        }\n    });\n    return function (fn) { queue.push(fn); };\n}\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule = __decorate([\n        NgModule({ providers: APPLICATION_MODULE_PROVIDERS }),\n        __metadata(\"design:paramtypes\", [ApplicationRef])\n    ], ApplicationModule);\n    return ApplicationModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SWITCH_IVY_ENABLED__POST_R3__ = true;\nvar SWITCH_IVY_ENABLED__PRE_R3__ = false;\nvar ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    var ns = null;\n    var name = null;\n    if (namespaceAndName) {\n        _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\n        var securityContext = undefined;\n        var suffix = undefined;\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = suffixOrSecurityContext;\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = suffixOrSecurityContext;\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: target, eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    var attrs = fixedAttrs.map(function (_a) {\n        var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];\n        var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\n        return [ns, name, value];\n    });\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nfunction createElement(view, renderHost, def) {\n    var elDef = def.element;\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    var renderer = view.renderer;\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\nfunction listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        var output = def.outputs[i];\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        var listenTarget = output.target;\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n        view.disposables[def.outputIndex + i] = disposable;\n    }\n}\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindLen = def.bindings.length;\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\nfunction checkAndUpdateElementDynamic(view, def, values) {\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    var binding = def.bindings[bindingIdx];\n    var elData = asElementData(view, def.nodeIndex);\n    var renderNode = elData.renderElement;\n    var name = binding.name;\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    var securityContext = binding.securityContext;\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\nfunction setElementClass(view, renderNode, name, value) {\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    var securityContext = binding.securityContext;\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction queryDef(flags, id, bindings) {\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\nfunction createQuery$1() {\n    return new QueryList();\n}\nfunction dirtyParentQueries(view) {\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        var tplDef = view.parentNodeDef;\n        view = view.parent;\n        // content queries\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction checkAndUpdateQuery(view, nodeDef) {\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    var directiveInstance;\n    var newValues = undefined;\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        var elementDef = nodeDef.parent.parent;\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);\n        directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    var bindings = nodeDef.query.bindings;\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        var binding = bindings[i];\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        var nodeDef = view.def.nodes[i];\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\n            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var embeddedViews = elementData.viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    var embeddedView = embeddedViews[k];\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\nfunction getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\nfunction appendNgContent(view, renderHost, def) {\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    var ngContentIndex = def.ngContent.index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\nfunction pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\nfunction pureObjectDef(checkIndex, propToIndex) {\n    var keys = Object.keys(propToIndex);\n    var nbKeys = keys.length;\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        var key = keys[i];\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nfunction createPureExpression(view, def) {\n    return { value: undefined };\n}\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindings = def.bindings;\n    var changed = false;\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var data = asPureExpressionData(view, def.nodeIndex);\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[bindings[0].name] = v0;\n                if (bindLen > 1)\n                    value[bindings[1].name] = v1;\n                if (bindLen > 2)\n                    value[bindings[2].name] = v2;\n                if (bindLen > 3)\n                    value[bindings[3].name] = v3;\n                if (bindLen > 4)\n                    value[bindings[4].name] = v4;\n                if (bindLen > 5)\n                    value[bindings[5].name] = v5;\n                if (bindLen > 6)\n                    value[bindings[6].name] = v6;\n                if (bindLen > 7)\n                    value[bindings[7].name] = v7;\n                if (bindLen > 8)\n                    value[bindings[8].name] = v8;\n                if (bindLen > 9)\n                    value[bindings[9].name] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n    var bindings = def.bindings;\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var data = asPureExpressionData(view, def.nodeIndex);\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[bindings[i].name] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                var pipe = values[0];\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, __spread(params));\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\nfunction createText(view, renderHost, def) {\n    var renderNode;\n    var renderer = view.renderer;\n    renderNode = renderer.createText(def.text.prefix);\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var changed = false;\n    var bindings = def.bindings;\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var value = def.text.prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\nfunction checkAndUpdateTextDynamic(view, def, values) {\n    var bindings = def.bindings;\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = def.text.prefix + value;\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\nfunction _addInterpolationPart(value, binding) {\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    var viewBindingCount = 0;\n    var viewDisposableCount = 0;\n    var viewNodeFlags = 0;\n    var viewRootNodeFlags = 0;\n    var viewMatchedQueries = 0;\n    var currentParent = null;\n    var currentRenderParent = null;\n    var currentElementHasPublicProviders = false;\n    var currentElementHasPrivateProviders = false;\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? currentParent.element.publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                currentParent.element.publicProviders =\n                    Object.create(currentParent.element.publicProviders);\n                currentParent.element.allProviders = currentParent.element.publicProviders;\n            }\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.allProviders =\n                        Object.create(currentParent.element.publicProviders);\n                }\n                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\n            }\n            if (isComponent) {\n                currentParent.element.componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    var handleEvent = function (view, nodeIndex, eventName, event) {\n        return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n    };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\n}\nfunction validateNode(parent, node, nodeCount) {\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\nfunction createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\nfunction createRootView(root, def, context) {\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var rendererType = nodeDef.element.componentRendererType;\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\n}\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    var nodes = new Array(def.nodes.length);\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\nfunction createViewNodes(view) {\n    var renderHost;\n    if (isComponentView(view)) {\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;\n    }\n    var def = view.def;\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                var el = createElement(view, renderHost, nodeDef);\n                var componentView = undefined;\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    var compViewDef = resolveDefinition(nodeDef.element.componentView);\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = {\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n                };\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = createText(view, renderHost, nodeDef);\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = { instance: instance };\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = createPureExpression(view, nodeDef);\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = createQuery$1();\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\nfunction checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\nfunction checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\nfunction markProjectedViewsForCheck(view) {\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\nfunction destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\nfunction destroyViewNodes(view) {\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            view.renderer.destroyNode(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            view.renderer.destroyNode(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\nvar ViewAction;\n(function (ViewAction) {\n    ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\n    ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\n    ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\n    ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\n    ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\n    ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\n})(ViewAction || (ViewAction = {}));\nfunction execComponentViewsAction(view, action) {\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction execEmbeddedViewsAction(view, action) {\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\nfunction callViewAction(view, action) {\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar initialized = false;\nfunction initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\nvar providerOverrides = new Map();\nvar providerOverridesWithScope = new Map();\nvar viewDefOverrides = new Map();\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    var injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(override.token, override);\n    }\n}\nfunction debugOverrideComponentView(comp, compFactory) {\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);\n    viewDefOverrides.set(comp, compViewDef);\n}\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = def.factory(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    function findElementIndicesWithOverwrittenProviders(def) {\n        var elIndicesWithOverwrittenProviders = [];\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(nodeDef.provider.token)) {\n                elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                var provider = nodeDef.provider;\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = def.factory(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    function calcHasOverrides(def) {\n        var hasOverrides = false;\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (getInjectableDef(token).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(getInjectableDef(token).providedIn)) {\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\nvar DebugAction;\n(function (DebugAction) {\n    DebugAction[DebugAction[\"create\"] = 0] = \"create\";\n    DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\n    DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\n    DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\n    DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\n})(DebugAction || (DebugAction = {}));\nvar _currentAction;\nvar _currentView;\nvar _currentNodeIndex;\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));\n    if (changed) {\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                var binding = nodeDef.bindings[i];\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            var elDef = nodeDef.parent;\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!elDef.element.name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));\n}\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        var elDef = this.nodeDef;\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = elDef.parent;\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = viewParentEl(elView);\n                elView = elView.parent;\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: function () { return createInjector$1(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: function () {\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(childDef.provider.token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: function () {\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: function () {\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugContext_.prototype.logError = function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        var logViewDef;\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        var currRenderNodeIndex = -1;\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, __spread([console], values));\n            }\n            else {\n                return NOOP;\n            }\n        };\n        logViewDef.factory(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, __spread(values));\n        }\n    };\n    return DebugContext_;\n}());\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = view.parent;\n    }\n    if (view.parent) {\n        return asElementData(view.parent, viewParentEl(view).nodeIndex);\n    }\n    return null;\n}\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\nfunction callWithDebugContext(action, fn, self, args) {\n    var oldAction = _currentAction;\n    var oldView = _currentView;\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, getCurrentDebugContext());\n    }\n}\nfunction getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    DebugRendererFactory2.prototype.begin = function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    DebugRendererFactory2.prototype.end = function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    DebugRendererFactory2.prototype.whenRenderingDone = function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    DebugRenderer2.prototype.createDebugContext = function (nativeElement) { return this.debugContextFactory(nativeElement); };\n    DebugRenderer2.prototype.destroyNode = function (node) {\n        removeDebugNodeFromIndex(getDebugNode(node));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n    DebugRenderer2.prototype.createElement = function (name, namespace) {\n        var el = this.delegate.createElement(name, namespace);\n        var debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    DebugRenderer2.prototype.createComment = function (value) {\n        var comment = this.delegate.createComment(value);\n        var debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    DebugRenderer2.prototype.createText = function (value) {\n        var text = this.delegate.createText(value);\n        var debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    };\n    DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(newChild);\n        var debugRefEl = getDebugNode(refChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n        var debugEl = getDebugNode(parent);\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        var debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    };\n    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    DebugRenderer2.prototype.addClass = function (el, name) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    DebugRenderer2.prototype.removeClass = function (el, name) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    DebugRenderer2.prototype.setProperty = function (el, name, value) {\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\nfunction overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\nfunction clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\nfunction cloneNgModuleDefinition(def) {\n    var providers = Array.from(def.providers);\n    var modules = Array.from(def.modules);\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    __extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    NgModuleFactory_.prototype.create = function (parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// clang-format on\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as …µangular_packages_core_core_r, _iterableDiffersFactory as …µangular_packages_core_core_o, _keyValueDiffersFactory as …µangular_packages_core_core_p, _localeFactory as …µangular_packages_core_core_q, zoneSchedulerFactory as …µangular_packages_core_core_s, _appIdRandomProviderFactory as …µangular_packages_core_core_f, DefaultIterableDifferFactory as …µangular_packages_core_core_m, DefaultKeyValueDifferFactory as …µangular_packages_core_core_n, DebugElement__PRE_R3__ as …µangular_packages_core_core_l, DebugNode__PRE_R3__ as …µangular_packages_core_core_k, NullInjector as …µangular_packages_core_core_a, injectInjectorOnly as …µangular_packages_core_core_b, ReflectiveInjector_ as …µangular_packages_core_core_c, ReflectiveDependency as …µangular_packages_core_core_d, resolveReflectiveProviders as …µangular_packages_core_core_e, getModuleFactory__PRE_R3__ as …µangular_packages_core_core_j, wtfEnabled as …µangular_packages_core_core_t, createScope as …µangular_packages_core_core_v, detectWTF as …µangular_packages_core_core_u, endTimeRange as …µangular_packages_core_core_y, leave as …µangular_packages_core_core_w, startTimeRange as …µangular_packages_core_core_x, SCHEDULER as …µangular_packages_core_core_bb, injectAttributeImpl as …µangular_packages_core_core_bc, getLView as …µangular_packages_core_core_bd, getPreviousOrParentTNode as …µangular_packages_core_core_be, nextContextImpl as …µangular_packages_core_core_bf, BoundPlayerFactory as …µangular_packages_core_core_bj, getRootContext as …µangular_packages_core_core_bo, loadInternal as …µangular_packages_core_core_bn, createElementRef as …µangular_packages_core_core_g, createTemplateRef as …µangular_packages_core_core_h, createViewRef as …µangular_packages_core_core_i, getUrlSanitizer as …µangular_packages_core_core_bh, makeParamDecorator as …µangular_packages_core_core_bk, makePropDecorator as …µangular_packages_core_core_bl, getClosureSafeProperty as …µangular_packages_core_core_bp, _def as …µangular_packages_core_core_z, DebugContext as …µangular_packages_core_core_ba, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, Attribute, ANALYZE_FOR_ENTRY_COMPONENTS, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, ViewEncapsulation, Version, VERSION, InjectFlags, defineInjectable, defineInjector, forwardRef, resolveForwardRef, Injectable, INJECTOR, Injector, inject, inject as …µinject, ReflectiveInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as …µNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as …µComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as …µALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as …µAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as …µdefaultIterableDiffers, defaultKeyValueDiffers as …µdefaultKeyValueDiffers, devModeEqual as …µdevModeEqual, isListLikeIterable as …µisListLikeIterable, ChangeDetectorStatus as …µChangeDetectorStatus, isDefaultChangeDetectionStrategy as …µisDefaultChangeDetectionStrategy, Console as …µConsole, setCurrentInjector as …µsetCurrentInjector, getInjectableDef as …µgetInjectableDef, APP_ROOT as …µAPP_ROOT, ivyEnabled as …µivyEnabled, CodegenComponentFactoryResolver as …µCodegenComponentFactoryResolver, clearResolutionOfComponentResourcesQueue as …µclearResolutionOfComponentResourcesQueue, resolveComponentResources as …µresolveComponentResources, ReflectionCapabilities as …µReflectionCapabilities, RenderDebugInfo as …µRenderDebugInfo, _sanitizeHtml as …µ_sanitizeHtml, _sanitizeStyle as …µ_sanitizeStyle, _sanitizeUrl as …µ_sanitizeUrl, _global as …µglobal, looseIdentical as …µlooseIdentical, stringify as …µstringify, makeDecorator as …µmakeDecorator, isObservable as …µisObservable, isPromise as …µisPromise, clearOverrides as …µclearOverrides, initServicesIfNeeded as …µinitServicesIfNeeded, overrideComponentView as …µoverrideComponentView, overrideProvider as …µoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as …µNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineBase as …µdefineBase, defineComponent as …µdefineComponent, defineDirective as …µdefineDirective, definePipe as …µdefinePipe, defineNgModule as …µdefineNgModule, detectChanges as …µdetectChanges, renderComponent as …µrenderComponent, ComponentFactory$1 as …µRender3ComponentFactory, ComponentRef$1 as …µRender3ComponentRef, directiveInject as …µdirectiveInject, injectAttribute as …µinjectAttribute, getFactoryOf$1 as …µgetFactoryOf, getInheritedFactory as …µgetInheritedFactory, setComponentScope as …µsetComponentScope, setNgModuleScope as …µsetNgModuleScope, templateRefExtractor as …µtemplateRefExtractor, ProvidersFeature as …µProvidersFeature, InheritDefinitionFeature as …µInheritDefinitionFeature, NgOnChangesFeature as …µNgOnChangesFeature, LifecycleHooksFeature as …µLifecycleHooksFeature, NgModuleRef$1 as …µRender3NgModuleRef, markDirty as …µmarkDirty, NgModuleFactory$1 as …µNgModuleFactory, NO_CHANGE as …µNO_CHANGE, container as …µcontainer, nextContext as …µnextContext, elementStart as …µelementStart, namespaceHTML as …µnamespaceHTML, namespaceMathML as …µnamespaceMathML, namespaceSVG as …µnamespaceSVG, element as …µelement, listener as …µlistener, text as …µtext, embeddedViewStart as …µembeddedViewStart, projection as …µprojection, bind as …µbind, interpolation1 as …µinterpolation1, interpolation2 as …µinterpolation2, interpolation3 as …µinterpolation3, interpolation4 as …µinterpolation4, interpolation5 as …µinterpolation5, interpolation6 as …µinterpolation6, interpolation7 as …µinterpolation7, interpolation8 as …µinterpolation8, interpolationV as …µinterpolationV, pipeBind1 as …µpipeBind1, pipeBind2 as …µpipeBind2, pipeBind3 as …µpipeBind3, pipeBind4 as …µpipeBind4, pipeBindV as …µpipeBindV, pureFunction0 as …µpureFunction0, pureFunction1 as …µpureFunction1, pureFunction2 as …µpureFunction2, pureFunction3 as …µpureFunction3, pureFunction4 as …µpureFunction4, pureFunction5 as …µpureFunction5, pureFunction6 as …µpureFunction6, pureFunction7 as …µpureFunction7, pureFunction8 as …µpureFunction8, pureFunctionV as …µpureFunctionV, getCurrentView as …µgetCurrentView, getDirectives as …µgetDirectives, getHostElement as …µgetHostElement, restoreView as …µrestoreView, containerRefreshStart as …µcontainerRefreshStart, containerRefreshEnd as …µcontainerRefreshEnd, queryRefresh as …µqueryRefresh, viewQuery as …µviewQuery, staticViewQuery as …µstaticViewQuery, staticContentQuery as …µstaticContentQuery, loadViewQuery as …µloadViewQuery, contentQuery as …µcontentQuery, loadContentQuery as …µloadContentQuery, elementEnd as …µelementEnd, elementProperty as …µelementProperty, componentHostSyntheticProperty as …µcomponentHostSyntheticProperty, componentHostSyntheticListener as …µcomponentHostSyntheticListener, projectionDef as …µprojectionDef, reference as …µreference, enableBindings as …µenableBindings, disableBindings as …µdisableBindings, allocHostVars as …µallocHostVars, elementAttribute as …µelementAttribute, elementContainerStart as …µelementContainerStart, elementContainerEnd as …µelementContainerEnd, elementStyling as …µelementStyling, elementStylingMap as …µelementStylingMap, elementStyleProp as …µelementStyleProp, elementStylingApply as …µelementStylingApply, elementClassProp as …µelementClassProp, elementHostAttrs as …µelementHostAttrs, elementHostStyling as …µelementHostStyling, elementHostStylingMap as …µelementHostStylingMap, elementHostStyleProp as …µelementHostStyleProp, elementHostClassProp as …µelementHostClassProp, elementHostStylingApply as …µelementHostStylingApply, select as …µselect, textBinding as …µtextBinding, template as …µtemplate, embeddedViewEnd as …µembeddedViewEnd, store as …µstore, load as …µload, pipe as …µpipe, whenRendered as …µwhenRendered, i18n as …µi18n, i18nAttributes as …µi18nAttributes, i18nExp as …µi18nExp, i18nStart as …µi18nStart, i18nEnd as …µi18nEnd, i18nApply as …µi18nApply, i18nPostprocess as …µi18nPostprocess, setClassMetadata as …µsetClassMetadata, resolveWindow as …µresolveWindow, resolveDocument as …µresolveDocument, resolveBody as …µresolveBody, compileComponent as …µcompileComponent, compileDirective as …µcompileDirective, compileNgModule as …µcompileNgModule, compileNgModuleDefs as …µcompileNgModuleDefs, patchComponentDefWithScope as …µpatchComponentDefWithScope, resetCompiledComponents as …µresetCompiledComponents, flushModuleScopingQueueAsMuchAsPossible as …µflushModuleScopingQueueAsMuchAsPossible, transitiveScopesFor as …µtransitiveScopesFor, compilePipe as …µcompilePipe, sanitizeHtml as …µsanitizeHtml, sanitizeStyle as …µsanitizeStyle, defaultStyleSanitizer as …µdefaultStyleSanitizer, sanitizeScript as …µsanitizeScript, sanitizeUrl as …µsanitizeUrl, sanitizeResourceUrl as …µsanitizeResourceUrl, sanitizeUrlOrResourceUrl as …µsanitizeUrlOrResourceUrl, bypassSanitizationTrustHtml as …µbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as …µbypassSanitizationTrustStyle, bypassSanitizationTrustScript as …µbypassSanitizationTrustScript, bypassSanitizationTrustUrl as …µbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as …µbypassSanitizationTrustResourceUrl, getLContext as …µgetLContext, NG_ELEMENT_ID as …µNG_ELEMENT_ID, NG_COMPONENT_DEF as …µNG_COMPONENT_DEF, NG_DIRECTIVE_DEF as …µNG_DIRECTIVE_DEF, NG_PIPE_DEF as …µNG_PIPE_DEF, NG_MODULE_DEF as …µNG_MODULE_DEF, NG_BASE_DEF as …µNG_BASE_DEF, NG_INJECTABLE_DEF as …µNG_INJECTABLE_DEF, NG_INJECTOR_DEF as …µNG_INJECTOR_DEF, bindPlayerFactory as …µbindPlayerFactory, addPlayer as …µaddPlayer, getPlayers as …µgetPlayers, compileNgModuleFactory__POST_R3__ as …µcompileNgModuleFactory__POST_R3__, isBoundToModule__POST_R3__ as …µisBoundToModule__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as …µSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as …µSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as …µSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as …µSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as …µgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as …µSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as …µSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as …µSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as …µCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as …µCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as …µCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as …µCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as …µSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as …µSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as …µSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as …µSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as …µgetModuleFactory__POST_R3__, publishGlobalUtil as …µpublishGlobalUtil, publishDefaultGlobalUtils as …µpublishDefaultGlobalUtils, createInjector as …µcreateInjector, registerModuleFactory as …µregisterModuleFactory, EMPTY_ARRAY$3 as …µEMPTY_ARRAY, EMPTY_MAP as …µEMPTY_MAP, anchorDef as …µand, createComponentFactory as …µccf, createNgModuleFactory as …µcmf, createRendererType2 as …µcrt, directiveDef as …µdid, elementDef as …µeld, elementEventFullName as …µelementEventFullName, getComponentViewDefinitionFactory as …µgetComponentViewDefinitionFactory, inlineInterpolate as …µinlineInterpolate, interpolate as …µinterpolate, moduleDef as …µmod, moduleProvideDef as …µmpd, ngContentDef as …µncd, nodeValue as …µnov, pipeDef as …µpid, providerDef as …µprd, pureArrayDef as …µpad, pureObjectDef as …µpod, purePipeDef as …µppd, queryDef as …µqud, textDef as …µted, unwrapValue as …µunv, viewDef as …µvid };\n//# sourceMappingURL=core.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n","/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";"],"sourceRoot":""}