{"version":3,"sources":["webpack:///./node_modules/@angular/core/esm5/src/util/is_dev_mode.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/constants.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/property.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/fields.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/global.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/stringify.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/forward_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/decorators.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/metadata.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/metadata/resource_loading.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/metadata/view.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/empty.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/misc_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/interface/defs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injector_compatibility.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/interface/injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/definition.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/state.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/view.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/container.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/context.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/view_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/hooks.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/projection.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/interfaces/renderer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/context_discovery.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/styling/util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/injector_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/view_traversal_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/di.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/ng_module_factory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/errors.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/errors.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/error_handler.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/styling/class_and_style_bindings.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/instructions/shared.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/node_manipulation.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/view_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/view_engine_compatibility.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/element_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injection_token.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/scope.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/di/r3_injector.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/inert_body.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/url_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/html_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/security.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/sanitization/style_sanitizer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/symbol.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/comparison.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/change_detection_util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/lang.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isFunction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/errorObject.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/tryCatch.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/config.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/hostReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observer.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Observable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/toSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/canReportError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/pipe.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/noop.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/SubjectSubscription.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/Subject.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/event_emitter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/jit/environment.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/component_factory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/component_factory_resolver.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render/api.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/version.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/view/provider.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/util/discovery_utils.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/component.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/component_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/node_util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/ng_module_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/platform_id.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/location/platform_location.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/dom_tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/node_modules/tslib/tslib.es6.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/default_iterable_differ.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/iterable_differs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/default_keyvalue_differ.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/differs/keyvalue_differs.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/i18n/tokens.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_en.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_data.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/locale_data_api.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/i18n/localization.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/common_module.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_tokens.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/InnerSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/symbol/iterator.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isArrayLike.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isPromise.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeTo.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/OuterSubscriber.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/map.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromArray.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeMap.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/identity.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/refCount.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/share.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_init.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/profile/wtf_impl.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/console.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/linker/compiler.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/profile/profile.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/microtask.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/zone/ng_zone.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_ref.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/testability/testability.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/compiler/compiler_facade.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/merge.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/isScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/mergeAll.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/from.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/multicast.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/platform_core_providers.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/change_detection/change_detection.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/application_module.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/dom_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/browser_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/common/esm5/src/cookie.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/generic_browser_adapter.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/location/history.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/location/browser_platform_location.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/server-transition.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser/testability.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/debug/debug_node.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/util.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/debug/ng_probe.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/event_manager.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/shared_styles_host.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/dom_renderer.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/dom_events.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/hammer_gestures.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/dom/events/key_events.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/security/dom_sanitization_service.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/platform-browser/esm5/src/browser.js.pre-build-optimizer.js","webpack:///./src/app.module.ts","webpack:///./src/app.module.ts.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/render3/instructions/text.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/core/esm5/src/util/closure.js.pre-build-optimizer.js","webpack:///./src/main.cli.ts"],"names":["_devMode","_runModeLocked","isDevMode","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ChangeDetectionStrategy","getClosureSafeProperty","objWithPropertyToExtract","key","Error","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_ELEMENT_ID","__NG_ELEMENT_ID__","getGlobal","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","stringify","token","map","join","overriddenName","name","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","fn","PARAMETERS","makeParamDecorator","props","parentClass","metaCtor","args","_i","values","propName","makeMetadataCtor","ParamDecoratorFactory","_a","annotationInstance","bind","ParamDecorator","annotation","cls","unusedKey","index","parameters","defineProperty","ngMetadataName","annotationCls","Inject","Optional","Self","SkipSelf","componentResourceResolutionQueue","Map","componentDefPendingResolution","Set","unwrapResponse","response","text","ViewEncapsulation","EMPTY_OBJ","EMPTY_ARRAY","renderStringify","defaultScheduler","requestAnimationFrame","setTimeout","INTERPOLATION_DELIMITER","isPropMetadataString","str","maybeUnwrapFn","Function","defineInjectable","opts","providedIn","factory","undefined","defineInjector","options","providers","imports","getInjectableDef","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","_injectImplementation","ngInjectableDef","ngInjectorDef","InjectFlags","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","inject","flags","Default","injectRootLimpMode","get","notFoundValue","injectableDef","injectArgs","types","arg","isArray","j","meta","_renderCompCount","extractDirectiveDef","getComponentDef","getDirectiveDef","extractPipeDef","getPipeDef","defineNgModule","def","bootstrap","declarations","exports","transitiveCompileScopes","schemas","invertObject","obj","secondary","newLookup","minifiedKey","publicName","declaredName","getNgModuleDef","throwNotFound","state_previousOrParentTNode","state_isParent","state_lView","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","FactoryPrototype","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","DECLARATION_VIEW","PREORDER_HOOK_FLAGS","HEADER_OFFSET","TYPE","ACTIVE_INDEX","NATIVE","VIEWS","MONKEY_PATCH_KEY_NAME","unwrapRNode","isLView","isLContainer","getNativeByTNode","tNode","hostView","getTNode","view","data","getComponentViewByIndex","nodeIndex","slotValue","view_utils_isComponent","isComponentDef","template","isRootView","target","readPatchedData","readPatchedLView","lView","resetPreOrderHookFlags","executeHooks","currentView","firstPassHooks","checkHooks","checkNoChangesMode","initPhaseState","currentNodeIndex","hooksToCall","arr","initPhase","nodeIndexLimit","lastNodeIndexFound","callHook","callHooks","isInitHook","hook","directive","getLView","setActiveHost","host","getPreviousOrParentTNode","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","isCreationMode","state_checkNoChangesMode","getCheckNoChangesMode","setCheckNoChangesMode","mode","enterView","newView","hostTNode","oldView","leaveView","tView","viewHooks","viewCheckHooks","bindingStartIndex","_currentNamespace","namespaceHTML","RendererStyleFlags3","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","document","createLContext","native","component","directives","localRefs","attachPatchData","findViaNativeElement","firstChild","traverseNextElement","child","parent","getStylingContext","viewData","storageIndex","wrapper","context","stylingTemplate","element","templateStyleContext","slice","allocStylingContext","directiveRef","dirs","allocateDirectiveIntoContext","getParentInjectorIndex","parentLocation","getParentInjectorView","location","startView","viewOffset","parentView","getLViewParent","findComponentView","rootTNode","includeViewProviders","setIncludeViewProviders","v","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","insertBloom","footer","getInjectorIndex","injectorIndex","getParentInjectorLocation","getOrCreateInjectable","bloomHash","charCodeAt","tokenId","bloomHashBitOrFactory","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","Host","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","directiveStart","cptViewProvidersCount","endIndex","directiveEnd","providerTokenOrDef","dirDef","locateDirectiveOrProvider","getNodeInjectable","tData","lData","getPrototypeOf","previousIncludeViewProviders","injectorView","b6","b5","isFirstHostTNode","_tNode","_lView","ng_module_factory_NgModuleRef","ng_module_factory_NgModuleFactory","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","getDebugContext","getOriginalError","defaultErrorLogger","console","error_handler_ErrorHandler","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","NO_CHANGE","setStyle","prop","sanitizer","store","playerBuilder","setValue","DashCase","style","setProperty","removeStyle","removeProperty","setClass","className","add","addClass","removeClass","remove","isClassBasedValue","getValue","class_and_style_bindings_getProp","refreshDescendantViews","creationMode","firstTemplatePass","preOrderHooks","preOrderCheckHooks","executePreOrderHooks","current","container","dynamicViewData","renderEmbeddedTemplate","refreshDynamicEmbeddedViews","refreshContentQueries","contentHooks","contentCheckHooks","expandoInstructions","bindingRootIndex","expandoStartIndex","currentDirectiveIndex","currentElementIndex","instruction","providerCount","hostCtx","setHostBindings","staticContentQueries","components","componentView","componentTView","blueprint","syncViewWithBlueprint","checkView","refreshChildComponents","contentQueries","directiveDefIdx","createLView","parentLView","tHostNode","rendererFactory","createNodeAtIndex","attrs","adjustedIndex","previousOrParentTNode","isParent","parent_1","createTNode","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","componentOrLView","getRootView","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","creationModeIsActive","begin","end","createTView","viewIndex","consts","vars","pipes","viewQuery","initialViewLength","fill","createViewBlueprint","id","node","viewQueryStartIndex","staticViewQueries","destroyHooks","cleanup","directiveRegistry","pipeRegistry","tParent","tagName","propertyMetadataStartIndex","propertyMetadataEndIndex","localNames","initialInputs","inputs","outputs","tViews","projectionNext","projection","onElementCreationFns","rootContext","rootComponent","detectChangesInternal","errorHandler","detectChangesInRootView","hostTView","executeViewQueryFn","CLEAN_PROMISE","Promise","resolve","getLContainer","embeddedView","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","e_1","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","lContainer","head","head_1","head_1_1","e_1_1","return","nativeInsertBefore","rNode","isHostElement","nativeParent","nativeParentNode","removeChild","nativeRemoveChild","nativeRemoveNode","destroyNode","getParentState","lViewOrLContainer","rootView","cleanUpView","executeOnDestroys","tCleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","cleanupFn","removeListeners","destroy","viewAttachedToContainer","removeView","insertBefore","nativeAppendOrInsertBefore","appendChild","nativeAppendChild","parentNode","childEl","childTNode","e_2","getHighestElementOrICUContainer","getHostNative","encapsulation","ShadowDom","Native","getRenderParent","anchorNode","parentTNode","views","containerNative","viewTNode","getBeforeNodeForView","getNativeAnchorNode","childEl_1","childEl_1_1","e_2_1","R3ElementRef","view_ref_RootViewRef","_super","RootViewRef","_view","_this","detectChanges","checkNoChanges","checkNoChangesInRootView","enumerable","configurable","ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","collectNativeNodes","result","tNodeChild","nativeNode","componentHost","currentProjectedNode","_lookUpContext","detachView","detach","destroyViewTree","destroyLView","onDestroy","callback","getCleanup","getTViewCleanup","markForCheck","parent_2","markViewDirty","reattach","checkNoChangesInternal","attachToViewContainerRef","vcRef","detachFromAppRef","attachToAppRef","appRef","createElementRef","ElementRefToken","ElementRef_","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","injection_token_InjectionToken","InjectionToken","_desc","SOURCE","_THROW_IF_NOT_FOUND","injector_INJECTOR","injector_NullInjector","NullInjector","injector_Injector","Injector","injector_StaticInjector","THROW_IF_NOT_FOUND","NULL","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","USE_VALUE","provide","String","useValue","NG_TOKEN_PATH","NG_TEMP_TOKEN_PATH","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","StaticInjector","source","records","_records","set","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","providerDeps","annotations","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","tryResolveToken","depRecords","depRecord","childRecord","resolveToken","unshift","catchInjectorError","tokens","forEach","injectorErrorName","tokenPath","message","formatError","charAt","substr","parts","JSON","replace","APP_ROOT","NOT_YET","r3_injector_CIRCULAR","r3_injector_EMPTY_ARRAY","r3_injector_NULL_INJECTOR","getNullInjector","r3_injector_R3Injector","R3Injector","additionalProviders","injectorDefTypes","_destroyed","dedupStack","deepForEach","injectorDef","processInjectorType","processProvider","makeRecord","isRootInjector","has","defType","assertNotDestroyed","service","ngOnDestroy","clear","previousInjector","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","defOrWrappedDef","parents","ngModule","isDuplicate","imported","defProviders","injectorType_1","ngModuleType","isTypeProvider","isValueProvider","classRef_1","ngModuleDetail","providerToFactory","providerToRecord","existing","multiRecord_1","paramLength","input","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","createElement","innerHTML","querySelector","getInertBodyElement","DOMParser","isDOMParserAvailable","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrName","item","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","match","warn","tagSet","tags","_b","split","_c","merge","sets","sets_1","sets_1_1","html_sanitizer_inertBodyHelper","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","html_sanitizer_SanitizingHtmlSerializer","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","srcset","nodeName","toLowerCase","elAttr","lower","trim","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","getTemplateContent","isTemplateElement","content","SecurityContext","Sanitizer","SAFE_STYLE_VALUE","RegExp","URL_RE","_symbolIterator","getSymbolIterator","Symbol_1","keys","getOwnPropertyNames","looseIdentical","a","isNaN","change_detection_util_isListLikeIterable","change_detection_util_isJsObject","isPromise","then","x","isObject","isFunction","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","err","UnsubscriptionError","Subscription_Subscription","Subscription","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","hasErrors","len","flattenUnsubscriptionErrors","sub","teardown","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","reduce","errs","tslib_es6_extendStatics","tslib_es6_extends","_enable_super_gross_mode_that_will_cause_bad_things","config","useDeprecatedSynchronousErrorHandling","hostReportError","complete","rxSubscriber","Math","random","Subscriber_Subscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","Subscriber_SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable_observable","observable","Observable_Observable","Observable","subscribe","_isScalar","_subscribe","lift","operator","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","promiseCtor","getPromiseCtor","reject","pipe","operations","fns","prev","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription_SubjectSubscription","SubjectSubscription","subject","observers","subscriberIndex","Subject_SubjectSubscriber","SubjectSubscriber","Subject_Subject","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","asObservable","AnonymousSubject","event_emitter_EventEmitter","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","component_factory_ComponentRef","component_factory_ComponentFactory","_NullComponentFactoryResolver","resolveComponentFactory","noComponentFactoryError","component_factory_resolver_ComponentFactoryResolver","ComponentFactoryResolver","RendererFactory2","RendererStyleFlags2","VERSION","full","major","minor","patch","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","loadLContext","throwOnNotFound","mpValue","componentInstance","componentIndices","elementComponentIndex","findViaComponent","directiveInstance","directiveIndexEnd","findViaDirective","includeComponents","directiveStartIndex","getDirectivesAtNodeIndex","existingCtx","rElement","parentContext","getLContext","loadLContextFromNode","isBrowserEvents","listener","useCapture","sortListeners","createRootComponentView","ngPrivateData","directiveDefs","pipeDefs","onPush","bloomBit","mask","bloomAdd","existingInjectorIndex","parentLoc","parentIndex","parentData","getOrCreateNodeInjectorForNode","numberOfDirectives","initNodeFlags","queueComponentIndexForCheck","createRootContext","scheduler","playerHandler","clean","LifecycleHooksFeature","directiveIndex","directiveDef","onChanges","onInit","doCheck","rootTView","dirIndex","afterContentInit","afterContentChecked","afterViewInit","afterViewChecked","registerPostOrderHooks","component_ref_ComponentFactoryResolver","componentDef","component_ref_ComponentFactory","toRefArray","array","nonMinified","templateName","ROOT_CONTEXT","SCHEDULER","ComponentFactory","componentType","selector","selectors","ngContentSelectors","isBoundToModule","projectableNodes","rootSelectorOrNode","elementOrSelector","defaultRenderer","rendererToUse","namespace","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","createElementNS","selectRootElement","rootFlags","setAttribute","tElementNode","rootLView","oldLView","nodesforSlot","from","hostFeatures","providersResolver","directiveCount","elementIndex","generateExpandoInstructionBlock","directiveFactory","nodeInjectorFactory","baseResolveDirective","postProcessBaseDirective","instantiateRootComponent","feature","expando","previousExpandoLength","hostBindings","applyOnCreateInstructions","startIndex","initialClasses","renderInitialClasses","initialStyles","renderInitialStyles","createRootComponent","componentRef","component_ref_ComponentRef","ComponentRef","_rootLView","destroyCbs","changeDetectorRef","destroyed","COMPONENT_FACTORY_RESOLVER","ng_module_ref_NgModuleRef","NgModuleRef","_bootstrapComponents","_r3Injector","createInjector","injectFlags","ng_module_ref_NgModuleFactory","NgModuleFactory","moduleType","parentInjector","tslib_tslib_es6_extendStatics","tslib_tslib_es6_extends","tslib_tslib_es6_assign","tslib_tslib_es6_metadata","tslib_tslib_es6_read","PLATFORM_SERVER_ID","PlatformLocation","DOCUMENT","node_modules_tslib_tslib_es6_extendStatics","node_modules_tslib_tslib_es6_read","default_iterable_differ_DefaultIterableDifferFactory","DefaultIterableDifferFactory","supports","trackByFn","default_iterable_differ_DefaultIterableDiffer","trackByIdentity","DefaultIterableDiffer","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","change_detection_util_iterateListLike","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","default_iterable_differ_DuplicateItemRecordList","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","delete","size","moveOffset","iterable_differs_IterableDiffers","IterableDiffers","factories","copied","extend","find","iterable","f","default_keyvalue_differ_DefaultKeyValueDifferFactory","DefaultKeyValueDifferFactory","default_keyvalue_differ_DefaultKeyValueDiffer","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","currentValue","before","record_1","KeyValueChangeRecord_","_addToAdditions","newValue","_addToChanges","k","keyvalue_differs_KeyValueDiffers","KeyValueDiffers","kv","LOCALE_ID","u","locale_en","floor","abs","LOCALE_DATA","locale_data_api_Plural","Plural","DEPRECATED_PLURAL_FN","NgLocalization","localization_NgLocaleLocalization","NgLocaleLocalization","locale","deprecatedPluralFn","node_modules_tslib_tslib_es6_extends","getPluralCategory","normalizedLocale","parentLocale","findLocaleData","getLocalePluralCase","Zero","One","Two","Few","Many","common_module_CommonModule","CommonModule","APP_ID","APP_ID_RANDOM_PROVIDER","_randomChar","fromCharCode","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","InnerSubscriber_InnerSubscriber","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToArray","subscribeToPromise","promise","iterator_getSymbolIterator","iterator_iterator","subscribeToIterable","subscribeToObservable","obs","TypeError","isArrayLike","isPromise_isPromise","subscribeTo","OuterSubscriber_OuterSubscriber","OuterSubscriber","innerValue","innerIndex","innerSub","MapOperator","project","thisArg","map_MapSubscriber","MapSubscriber","count","fromArray","schedule","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","shift","identity","refCount","RefCountOperator","connectable","_refCount","refCounter","refCount_RefCountSubscriber","connection","connect","RefCountSubscriber","sharedConnection","_connection","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableObservable_ConnectableSubscriber","connectableObservableDescriptor","writable","ConnectableSubscriber","shareSubjectFactory","trace","events","APP_INITIALIZER","application_init_ApplicationInitStatus","ApplicationInitStatus","appInits","initialized","donePromise","rej","runInitializers","asyncInitPromises","initResult","all","catch","console_Console","Console","log","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","declaration","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","compiler_Compiler","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","COMPILER_OPTIONS","detectWTF","wtf","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","signature","createScope","wtfLeave","scope","returnValue","leaveScope","microtask_promise","scheduleMicroTask","Zone","ng_zone_NgZone","NgZone","zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","ng_zone_noop","cancelTask","runGuarded","_platform","ng_zone_NoopNgZone","NoopNgZone","testability_Testability","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","pop","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","filter","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","testability_TestabilityRegistry","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","decorators","desc","c","getOwnPropertyDescriptor","decorate","__decorate","_NoopGetTestability","registry","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatformFactory","parentPlatformFactory","marker","extraProviders","platform","getPlatform","injectedProviders","application_ref_PlatformRef","inits","init","createPlatform","requiredToken","assertPlatform","PlatformRef","_injector","_modules","_destroyListeners","bootstrapModuleFactory","moduleFactory","ngZoneOption","ngZone","ngZoneInjector","moduleRef","exceptionHandler","initStatus","_moduleDoBootstrap","_callAndReportToErrorHandler","bootstrapModule","compilerOptions","optionsReducer","compilerProviders","part","compiler","globalNg","ɵcompilerFacade","getCompilerFacade","resourceLoader","ResourceLoader","resourceResolver","componentResolved","urlMap","cachedResourceResolve","resp","promises","templateUrl","styleUrls","styles","styleOffset","styleUrl","fullyResolved","componentDefResolved","resolveComponentResources","compileNgModuleFactory","application_ref_ApplicationRef","ngDoBootstrap","module","dst","objs","ApplicationRef","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","stableSub","unstableSub","observables","last","mergeMap","resultSelector","map_map","ii","mergeAll","merge_merge","subjectOrSubjectFactory","ApplicationRef_1","componentOrFactory","componentFactory","compRef","_unloadComponent","_loadComponent","_tickScope","_d","_e","_f","attachView","viewRef","list","platformCore","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","APPLICATION_MODULE_PROVIDERS","queue","application_module_ApplicationModule","ApplicationModule","_DOM","getDOM","nodeContains","_attrToPropMap","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","","contains","urlParsingNode","browser_adapter_BrowserDomAdapter","BrowserDomAdapter","parse","templateHtml","makeCurrent","adapter","hasProperty","getProperty","methodName","tslib_tslib_es6_spread","logError","logGroup","group","logGroupEnd","groupEnd","nodeA","nodeB","querySelectorAll","on","evt","addEventListener","onAndCancel","dispatchEvent","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","isPrevented","defaultPrevented","getInnerHTML","getOuterHTML","parentElement","childNodes","childNodesAsList","clearNodes","replaceChild","newChild","oldChild","ref","insertAllBefore","nodes","insertAfter","setInnerHTML","getText","textContent","setText","getChecked","checked","setChecked","createComment","createTemplate","doc","ns","createTextNode","createScriptTag","attrValue","createStyleElement","css","createShadowRoot","getShadowRoot","shadowRoot","getHost","clone","cloneNode","getElementsByClassName","getElementsByTagName","classList","hasClass","styleName","styleValue","stylename","getStyle","hasStyle","attributeMap","attrib","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttributeNS","templateAwareRoot","createHtmlDocument","getBoundingClientRect","top","bottom","left","right","width","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","matches","msMatchesSelector","webkitMatchesSelector","isTextNode","isCommentNode","COMMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","getEventKey","event","keyIdentifier","startsWith","parseInt","getGlobalEventTarget","getHistory","history","getLocation","getBaseHref","href","baseElement","pathname","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","Date","getTime","supportsCookies","getCookie","cookieStr","encodeURIComponent","node_modules_tslib_tslib_es6_values","cookie","eqIndex","cookieValue","decodeURIComponent","parseCookieValue","setCookie","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","resolveAndSetHref","baseUrl","supportsDOMEvents","supportsNativeShadowDOM","getAnimationPrefix","getTransitionEnd","supportsAnimation","DomAdapter","resourceLoaderType","supportsState","pushState","browser_platform_location_BrowserPlatformLocation","BrowserPlatformLocation","_doc","_init","decorator","_history","getBaseHrefFromDOM","onPopState","onHashChange","newPath","search","hash","state","replaceState","forward","back","tslib_tslib_es6_decorate","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","testability_BrowserGetTestability","BrowserGetTestability","getter","testabilities","didWork","decrement","didWork_","debug_node_DebugNode_POST_R3_","DebugNode__POST_R3__","debug_node_DebugElement_POST_R3_","getViewComponent","listeners","firstParam","secondParam","name_1","listenerElement","useCaptureOrIndx","sort","getListeners","localIndex","discoverLocalRefs","providerTokens","declaredInputs","getInjectionTokens","DebugElement__POST_R3__","bindingIndex","metadataIndex","currentBindingIndex","getFirstBindingIndex","propMetadata","metadataParts","propertyName","collectPropertyBindings","hostProperties","hostPropIndex","collectHostPropertyBindings","debugElement","classes","output","collectClassNames","eAttrs","attr","lContext","stylingContext","eClasses","eStyles","getPropertyValue","children","getDebugNode__POST_R3__","query","predicate","queryAll","_queryAllR3","queryAllNodes","triggerEventHandler","eventName","eventObj","elementsOnly","_queryNodeChildrenR3","rootNativeNode","_addQueryMatchR3","_queryNodeChildrenInContainerR3","nextLView","childView","debugNode","getDebugNode","exportNgVar","COMPILED","CORE_TOKENS","inspectNativeElement","ELEMENT_PROBE_PROVIDERS","coreTokens","EVENT_MANAGER_PLUGINS","event_manager_EventManager","EventManager","plugins","_eventNameToPlugin","manager","_plugins","reverse","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","event_manager_EventManagerPlugin","EventManagerPlugin","shared_styles_host_SharedStylesHost","SharedStylesHost","_stylesSet","addStyles","additions","onStylesAdded","getAllStyles","shared_styles_host_DomSharedStylesHost","DomSharedStylesHost","_hostNodes","_styleNodes","_addStylesToHost","styleEl","addHost","hostNode","removeHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","dom_renderer_DomRendererFactory2","DomRendererFactory2","eventManager","sharedStylesHost","rendererByCompId","dom_renderer_DefaultDomRenderer2","Emulated","dom_renderer_EmulatedEncapsulationDomRenderer2","applyToHost","dom_renderer_ShadowDomRenderer","DefaultDomRenderer2","createText","refChild","selectorOrNode","preserveContent","namespaceUri","Important","checkNoSyntheticProp","listen","AT_CHARCODE","nameKind","blackListedMap","EmulatedEncapsulationDomRenderer2","contentAttr","hostAttr","ShadowDomRenderer","hostEl","attachShadow","nodeOrShadowRoot","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","stopSymbol","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","dom_events_DomEventsPlugin","DomEventsPlugin","platformId","isPlatformServer","patchEvent","Event","stopImmediatePropagation","globalListenerRegistered","root","callbackRegistered","underlyingRemove","found","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","hammer_gestures_HammerGestureConfig","HammerGestureConfig","overrides","buildHammer","mc","Hammer","enable","hammer_gestures_HammerGesturesPlugin","HammerGesturesPlugin","_config","loader","isCustomEvent","cancelRegistration_1","deregister_1","off","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","key_events_KeyEventsPlugin","KeyEventsPlugin","KeyEventsPlugin_1","parseEventName","parsedEvent","outsideHandler","eventCallback","domEventName","_normalizeKey","fullKey","modifierName","getEventFullKey","modifierGetter","keyName","DomSanitizer","dom_sanitization_service_DomSanitizerImpl","DomSanitizerImpl","sanitize","ctx","NONE","HTML","dom_sanitization_service_SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","_sanitizeHtml","STYLE","dom_sanitization_service_SafeStyleImpl","urlMatch","outsideSingle","outsideDouble","hasBalancedQuotes","_sanitizeStyle","SCRIPT","dom_sanitization_service_SafeScriptImpl","URL","dom_sanitization_service_SafeResourceUrlImpl","dom_sanitization_service_SafeUrlImpl","RESOURCE_URL","expectedType","SafeValueImpl","getTypeName","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","SafeHtmlImpl","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","BROWSER_SANITIZATION_PROVIDERS","platformBrowser","BROWSER_MODULE_PROVIDERS","browser_BrowserModule","BrowserModule","parentModule","BrowserModule_1","withServerTransition","params","appId","app_module_AppComponent","AppComponent","componentDefinition","rf","textNative","exportAs","typePrototype","ngOnInit","ngDoCheck","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","changeDetection","OnPush","features","_","setInput","directiveTypes","pipeTypes","app_module_AppModule","AppModule","enableProdMode"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nvar _devMode = true;\nvar _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNfZGV2X21vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL2lzX2Rldl9tb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7OztHQUtHO0FBRUgsSUFBSSxRQUFRLEdBQVksSUFBSSxDQUFDO0FBQzdCLElBQUksY0FBYyxHQUFZLEtBQUssQ0FBQztBQUdwQzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVM7SUFDdkIsY0FBYyxHQUFHLElBQUksQ0FBQztJQUN0QixPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGNBQWM7SUFDNUIsSUFBSSxjQUFjLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIHRvIGNvbnRyb2wgaWYgdGhlIGRlZmF1bHQgcmVuZGVyaW5nIHBpcGVsaW5lIHNob3VsZCBiZSBgVmlld0VuZ2luZWAgb3IgYEl2eWAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIHJ1biBhbmQgZGVidWcgdGVzdHMgd2l0aCBlaXRoZXIgSXZ5IG9yIFZpZXcgRW5naW5lIChsZWdhY3kpLFxuICogcGxlYXNlIHNlZSBbQkFaRUwubWRdKC4vZG9jcy9CQVpFTC5tZCkuXG4gKi9cblxubGV0IF9kZXZNb2RlOiBib29sZWFuID0gdHJ1ZTtcbmxldCBfcnVuTW9kZUxvY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIEFuZ3VsYXIgaXMgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gQWZ0ZXIgY2FsbGVkIG9uY2UsXG4gKiB0aGUgdmFsdWUgaXMgbG9ja2VkIGFuZCB3b24ndCBjaGFuZ2UgYW55IG1vcmUuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyBpcyB0cnVlLCB1bmxlc3MgYSB1c2VyIGNhbGxzIGBlbmFibGVQcm9kTW9kZWAgYmVmb3JlIGNhbGxpbmcgdGhpcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rldk1vZGUoKTogYm9vbGVhbiB7XG4gIF9ydW5Nb2RlTG9ja2VkID0gdHJ1ZTtcbiAgcmV0dXJuIF9kZXZNb2RlO1xufVxuXG4vKipcbiAqIERpc2FibGUgQW5ndWxhcidzIGRldmVsb3BtZW50IG1vZGUsIHdoaWNoIHR1cm5zIG9mZiBhc3NlcnRpb25zIGFuZCBvdGhlclxuICogY2hlY2tzIHdpdGhpbiB0aGUgZnJhbWV3b3JrLlxuICpcbiAqIE9uZSBpbXBvcnRhbnQgYXNzZXJ0aW9uIHRoaXMgZGlzYWJsZXMgdmVyaWZpZXMgdGhhdCBhIGNoYW5nZSBkZXRlY3Rpb24gcGFzc1xuICogZG9lcyBub3QgcmVzdWx0IGluIGFkZGl0aW9uYWwgY2hhbmdlcyB0byBhbnkgYmluZGluZ3MgKGFsc28ga25vd24gYXNcbiAqIHVuaWRpcmVjdGlvbmFsIGRhdGEgZmxvdykuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUHJvZE1vZGUoKTogdm9pZCB7XG4gIGlmIChfcnVuTW9kZUxvY2tlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuYWJsZSBwcm9kIG1vZGUgYWZ0ZXIgcGxhdGZvcm0gc2V0dXAuJyk7XG4gIH1cbiAgX2Rldk1vZGUgPSBmYWxzZTtcbn0iXX0=","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @publicApi\n */\nexport var ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport var ChangeDetectorStatus;\n(function (ChangeDetectorStatus) {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY2hhbmdlX2RldGVjdGlvbi9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0g7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQU4sSUFBWSx1QkFjWDtBQWRELFdBQVksdUJBQXVCO0lBQ2pDOzs7OztPQUtHO0lBQ0gseUVBQVUsQ0FBQTtJQUVWOzs7T0FHRztJQUNILDJFQUFXLENBQUE7QUFDYixDQUFDLEVBZFcsdUJBQXVCLEtBQXZCLHVCQUF1QixRQWNsQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLG9CQW9DWDtBQXBDRCxXQUFZLG9CQUFvQjtJQUM5Qjs7O09BR0c7SUFDSCx5RUFBUyxDQUFBO0lBRVQ7OztPQUdHO0lBQ0gscUVBQU8sQ0FBQTtJQUVQOzs7T0FHRztJQUNILDZFQUFXLENBQUE7SUFFWDs7O09BR0c7SUFDSCx1RUFBUSxDQUFBO0lBRVI7Ozs7T0FJRztJQUNILHFFQUFPLENBQUE7SUFFUDs7T0FFRztJQUNILHlFQUFTLENBQUE7QUFDWCxDQUFDLEVBcENXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFvQy9CO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGdDQUFnQyxDQUFDLHVCQUFnRDtJQUUvRixPQUFPLHVCQUF1QixJQUFJLElBQUk7UUFDbEMsdUJBQXVCLEtBQUssdUJBQXVCLENBQUMsT0FBTyxDQUFDO0FBQ2xFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuLyoqXG4gKiBUaGUgc3RyYXRlZ3kgdGhhdCB0aGUgZGVmYXVsdCBjaGFuZ2UgZGV0ZWN0b3IgdXNlcyB0byBkZXRlY3QgY2hhbmdlcy5cbiAqIFdoZW4gc2V0LCB0YWtlcyBlZmZlY3QgdGhlIG5leHQgdGltZSBjaGFuZ2UgZGV0ZWN0aW9uIGlzIHRyaWdnZXJlZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBlbnVtIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IHtcbiAgLyoqXG4gICAqIFVzZSB0aGUgYENoZWNrT25jZWAgc3RyYXRlZ3ksIG1lYW5pbmcgdGhhdCBhdXRvbWF0aWMgY2hhbmdlIGRldGVjdGlvbiBpcyBkZWFjdGl2YXRlZFxuICAgKiB1bnRpbCByZWFjdGl2YXRlZCBieSBzZXR0aW5nIHRoZSBzdHJhdGVneSB0byBgRGVmYXVsdGAgKGBDaGVja0Fsd2F5c2ApLlxuICAgKiBDaGFuZ2UgZGV0ZWN0aW9uIGNhbiBzdGlsbCBiZSBleHBsaWNpdGx5IGludm9rZWQuXG4gICAqIFRoaXMgc3RyYXRlZ3kgYXBwbGllcyB0byBhbGwgY2hpbGQgZGlyZWN0aXZlcyBhbmQgY2Fubm90IGJlIG92ZXJyaWRkZW4uXG4gICAqL1xuICBPblB1c2ggPSAwLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhlIGRlZmF1bHQgYENoZWNrQWx3YXlzYCBzdHJhdGVneSwgaW4gd2hpY2ggY2hhbmdlIGRldGVjdGlvbiBpcyBhdXRvbWF0aWMgdW50aWxcbiAgICogZXhwbGljaXRseSBkZWFjdGl2YXRlZC5cbiAgICovXG4gIERlZmF1bHQgPSAxLFxufVxuXG4vKipcbiAqIERlZmluZXMgdGhlIHBvc3NpYmxlIHN0YXRlcyBvZiB0aGUgZGVmYXVsdCBjaGFuZ2UgZGV0ZWN0b3IuXG4gKiBAc2VlIGBDaGFuZ2VEZXRlY3RvclJlZmBcbiAqL1xuZXhwb3J0IGVudW0gQ2hhbmdlRGV0ZWN0b3JTdGF0dXMge1xuICAvKipcbiAgICogQSBzdGF0ZSBpbiB3aGljaCwgYWZ0ZXIgY2FsbGluZyBgZGV0ZWN0Q2hhbmdlcygpYCwgdGhlIGNoYW5nZSBkZXRlY3RvclxuICAgKiBzdGF0ZSBiZWNvbWVzIGBDaGVja2VkYCwgYW5kIG11c3QgYmUgZXhwbGljaXRseSBpbnZva2VkIG9yIHJlYWN0aXZhdGVkLlxuICAgKi9cbiAgQ2hlY2tPbmNlLFxuXG4gIC8qKlxuICAgKiBBIHN0YXRlIGluIHdoaWNoIGNoYW5nZSBkZXRlY3Rpb24gaXMgc2tpcHBlZCB1bnRpbCB0aGUgY2hhbmdlIGRldGVjdG9yIG1vZGVcbiAgICogYmVjb21lcyBgQ2hlY2tPbmNlYC5cbiAgICovXG4gIENoZWNrZWQsXG5cbiAgLyoqXG4gICAqIEEgc3RhdGUgaW4gd2hpY2ggY2hhbmdlIGRldGVjdGlvbiBjb250aW51ZXMgYXV0b21hdGljYWxseSB1bnRpbCBleHBsaWNpdGx5XG4gICAqIGRlYWN0aXZhdGVkLlxuICAgKi9cbiAgQ2hlY2tBbHdheXMsXG5cbiAgLyoqXG4gICAqIEEgc3RhdGUgaW4gd2hpY2ggYSBjaGFuZ2UgZGV0ZWN0b3Igc3ViIHRyZWUgaXMgbm90IGEgcGFydCBvZiB0aGUgbWFpbiB0cmVlIGFuZFxuICAgKiBzaG91bGQgYmUgc2tpcHBlZC5cbiAgICovXG4gIERldGFjaGVkLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgY2hhbmdlIGRldGVjdG9yIGVuY291bnRlcmVkIGFuIGVycm9yIGNoZWNraW5nIGEgYmluZGluZ1xuICAgKiBvciBjYWxsaW5nIGEgZGlyZWN0aXZlIGxpZmVjeWNsZSBtZXRob2QgYW5kIGlzIG5vdyBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIENoYW5nZVxuICAgKiBkZXRlY3RvcnMgaW4gdGhpcyBzdGF0ZSBkbyBub3QgZGV0ZWN0IGNoYW5nZXMuXG4gICAqL1xuICBFcnJvcmVkLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgY2hhbmdlIGRldGVjdG9yIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICovXG4gIERlc3Ryb3llZCxcbn1cblxuLyoqXG4gKiBSZXBvcnRzIHdoZXRoZXIgYSBnaXZlbiBzdHJhdGVneSBpcyBjdXJyZW50bHkgdGhlIGRlZmF1bHQgZm9yIGNoYW5nZSBkZXRlY3Rpb24uXG4gKiBAcGFyYW0gY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgVGhlIHN0cmF0ZWd5IHRvIGNoZWNrLlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyYXRlZ3kgaXMgdGhlIGN1cnJlbnQgZGVmYXVsdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICogQHNlZSBgQ2hhbmdlRGV0ZWN0b3JTdGF0dXNgXG4gKiBAc2VlIGBDaGFuZ2VEZXRlY3RvclJlZmBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmYXVsdENoYW5nZURldGVjdGlvblN0cmF0ZWd5KGNoYW5nZURldGVjdGlvblN0cmF0ZWd5OiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSk6XG4gICAgYm9vbGVhbiB7XG4gIHJldHVybiBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9PSBudWxsIHx8XG4gICAgICBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9PT0gQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdDtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlsL3Byb3BlcnR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sVUFBVSxzQkFBc0IsQ0FBSSx3QkFBMkI7SUFDbkUsS0FBSyxJQUFJLEdBQUcsSUFBSSx3QkFBd0IsRUFBRTtRQUN4QyxJQUFJLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxLQUFLLHNCQUE2QixFQUFFO1lBQ25FLE9BQU8sR0FBRyxDQUFDO1NBQ1o7S0FDRjtJQUNELE1BQU0sS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUErQixFQUFFLE1BQStCO0lBQzdGLEtBQUssSUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3N1cmVTYWZlUHJvcGVydHk8VD4ob2JqV2l0aFByb3BlcnR5VG9FeHRyYWN0OiBUKTogc3RyaW5nIHtcbiAgZm9yIChsZXQga2V5IGluIG9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdCkge1xuICAgIGlmIChvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3Rba2V5XSA9PT0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSBhcyBhbnkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHRocm93IEVycm9yKCdDb3VsZCBub3QgZmluZCByZW5hbWVkIHByb3BlcnR5IG9uIHRhcmdldCBvYmplY3QuJyk7XG59XG5cbi8qKlxuICogU2V0cyBwcm9wZXJ0aWVzIG9uIGEgdGFyZ2V0IG9iamVjdCBmcm9tIGEgc291cmNlIG9iamVjdCwgYnV0IG9ubHkgaWZcbiAqIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gc2V0IHByb3BlcnRpZXMgb25cbiAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvZiB0aGUgcHJvcGVydHkga2V5cyBhbmQgdmFsdWVzIHRvIHNldFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsbFByb3BlcnRpZXModGFyZ2V0OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSwgc291cmNlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkge1xuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkgJiYgIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\nexport var NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\nexport var NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\nexport var NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\nexport var NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\nexport var NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFeEQsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxjQUFjLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDO0FBQ2pHLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixFQUFDLENBQUMsQ0FBQztBQUNqRyxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxTQUFTLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxFQUFDLFdBQVcsRUFBRSxzQkFBc0IsRUFBQyxDQUFDLENBQUM7QUFDM0YsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEVBQUMsU0FBUyxFQUFFLHNCQUFzQixFQUFDLENBQUMsQ0FBQztBQUV2Rjs7OztHQUlHO0FBQ0gsMEVBQTBFO0FBQzFFLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxFQUFDLGlCQUFpQixFQUFFLHNCQUFzQixFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSBmcm9tICcuLi91dGlsL3Byb3BlcnR5JztcblxuZXhwb3J0IGNvbnN0IE5HX0NPTVBPTkVOVF9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0NvbXBvbmVudERlZjogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0pO1xuZXhwb3J0IGNvbnN0IE5HX0RJUkVDVElWRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0RpcmVjdGl2ZURlZjogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0pO1xuZXhwb3J0IGNvbnN0IE5HX1BJUEVfREVGID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7bmdQaXBlRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG5leHBvcnQgY29uc3QgTkdfTU9EVUxFX0RFRiA9IGdldENsb3N1cmVTYWZlUHJvcGVydHkoe25nTW9kdWxlRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG5leHBvcnQgY29uc3QgTkdfQkFTRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0Jhc2VEZWY6IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcblxuLyoqXG4gKiBJZiBhIGRpcmVjdGl2ZSBpcyBkaVB1YmxpYywgYmxvb21BZGQgc2V0cyBhIHByb3BlcnR5IG9uIHRoZSB0eXBlIHdpdGggdGhpcyBjb25zdGFudCBhc1xuICogdGhlIGtleSBhbmQgdGhlIGRpcmVjdGl2ZSdzIHVuaXF1ZSBJRCBhcyB0aGUgdmFsdWUuIFRoaXMgYWxsb3dzIHVzIHRvIG1hcCBkaXJlY3RpdmVzIHRvIHRoZWlyXG4gKiBibG9vbSBmaWx0ZXIgYml0IGZvciBESS5cbiAqL1xuLy8gVE9ETyhtaXNrbyk6IFRoaXMgaXMgd3JvbmcuIFRoZSBOR19FTEVNRU5UX0lEIHNob3VsZCBuZXZlciBiZSBtaW5pZmllZC5cbmV4cG9ydCBjb25zdCBOR19FTEVNRU5UX0lEID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7X19OR19FTEVNRU5UX0lEX186IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getGlobal() {\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    return __globalThis || __global || __window || __self;\n}\nvar _global = getGlobal();\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport { _global as global };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9nbG9iYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBV0gsU0FBUyxTQUFTO0lBQ2hCLElBQU0sWUFBWSxHQUFHLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVLENBQUM7SUFDckUsSUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUN6RCxJQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksT0FBTyxpQkFBaUIsS0FBSyxXQUFXO1FBQ2xGLElBQUksWUFBWSxpQkFBaUIsSUFBSSxJQUFJLENBQUM7SUFDOUMsSUFBTSxRQUFRLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztJQUV6RCw2RkFBNkY7SUFDN0YseUZBQXlGO0lBQ3pGLHVFQUF1RTtJQUN2RSxPQUFPLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUN4RCxDQUFDO0FBRUQsSUFBTSxPQUFPLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFFNUI7Ozs7R0FJRztBQUNILE9BQU8sRUFBQyxPQUFPLElBQUksTUFBTSxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIFRPRE8oanRlcGxpdHo2MDIpOiBMb2FkIFdvcmtlckdsb2JhbFNjb3BlIGZyb20gbGliLndlYndvcmtlci5kLnRzIGZpbGUgIzM0OTJcbmRlY2xhcmUgdmFyIFdvcmtlckdsb2JhbFNjb3BlOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi87XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55IC8qKiBUT0RPICM5MTAwICovO1xuLy8gTm90IHlldCBhdmFpbGFibGUgaW4gVHlwZVNjcmlwdDogaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMjkzMzJcbmRlY2xhcmUgdmFyIGdsb2JhbFRoaXM6IGFueSAvKiogVE9ETyAjOTEwMCAqLztcblxuZnVuY3Rpb24gZ2V0R2xvYmFsKCk6IGFueSB7XG4gIGNvbnN0IF9fZ2xvYmFsVGhpcyA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzO1xuICBjb25zdCBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbiAgY29uc3QgX19zZWxmID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xuICBjb25zdCBfX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbDtcblxuICAvLyBBbHdheXMgdXNlIF9fZ2xvYmFsVGhpcyBpZiBhdmFpbGFibGUsIHdoaWNoIGlzIHRoZSBzcGVjLWRlZmluZWQgZ2xvYmFsIHZhcmlhYmxlIGFjcm9zcyBhbGxcbiAgLy8gZW52aXJvbm1lbnRzLCB0aGVuIGZhbGxiYWNrIHRvIF9fZ2xvYmFsIGZpcnN0LCBiZWNhdXNlIGluIE5vZGUgdGVzdHMgYm90aCBfX2dsb2JhbCBhbmRcbiAgLy8gX193aW5kb3cgbWF5IGJlIGRlZmluZWQgYW5kIF9nbG9iYWwgc2hvdWxkIGJlIF9fZ2xvYmFsIGluIHRoYXQgY2FzZS5cbiAgcmV0dXJuIF9fZ2xvYmFsVGhpcyB8fCBfX2dsb2JhbCB8fCBfX3dpbmRvdyB8fCBfX3NlbGY7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxuLyoqXG4gKiBBdHRlbnRpb246IHdoZW5ldmVyIHByb3ZpZGluZyBhIG5ldyB2YWx1ZSwgYmUgc3VyZSB0byBhZGQgYW5cbiAqIGVudHJ5IGludG8gdGhlIGNvcnJlc3BvbmRpbmcgYC4uLi5leHRlcm5zLmpzYCBmaWxlLFxuICogc28gdGhhdCBjbG9zdXJlIHdvbid0IHVzZSB0aGF0IGdsb2JhbCBmb3IgaXRzIHB1cnBvc2VzLlxuICovXG5leHBvcnQge19nbG9iYWwgYXMgZ2xvYmFsfTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5naWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zdHJpbmdpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7UUFDMUIsT0FBTyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztLQUNuQjtJQUVELElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtRQUN4QixPQUFPLEtBQUcsS0FBSyxDQUFDLGNBQWdCLENBQUM7S0FDbEM7SUFFRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDZCxPQUFPLEtBQUcsS0FBSyxDQUFDLElBQU0sQ0FBQztLQUN4QjtJQUVELElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUU3QixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUM7S0FDakI7SUFFRCxJQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkodG9rZW46IGFueSk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgaWYgKHRva2VuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gJ1snICsgdG9rZW4ubWFwKHN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgfVxuXG4gIGlmICh0b2tlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgdG9rZW47XG4gIH1cblxuICBpZiAodG9rZW4ub3ZlcnJpZGRlbk5hbWUpIHtcbiAgICByZXR1cm4gYCR7dG9rZW4ub3ZlcnJpZGRlbk5hbWV9YDtcbiAgfVxuXG4gIGlmICh0b2tlbi5uYW1lKSB7XG4gICAgcmV0dXJuIGAke3Rva2VuLm5hbWV9YDtcbiAgfVxuXG4gIGNvbnN0IHJlcyA9IHRva2VuLnRvU3RyaW5nKCk7XG5cbiAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnICsgcmVzO1xuICB9XG5cbiAgY29uc3QgbmV3TGluZUluZGV4ID0gcmVzLmluZGV4T2YoJ1xcbicpO1xuICByZXR1cm4gbmV3TGluZUluZGV4ID09PSAtMSA/IHJlcyA6IHJlcy5zdWJzdHJpbmcoMCwgbmV3TGluZUluZGV4KTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\nvar __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () { return stringify(this()); };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef(type) {\n    var fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZF9yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9mb3J3YXJkX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFlNUMsSUFBTSxlQUFlLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxlQUFlLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDO0FBRTFGOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxZQUEwQjtJQUM3QyxZQUFhLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQztJQUMzQyxZQUFhLENBQUMsUUFBUSxHQUFHLGNBQWEsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxPQUF3QixZQUFhLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBSSxJQUFPO0lBQzFDLElBQU0sRUFBRSxHQUFRLElBQUksQ0FBQztJQUNyQixJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQztRQUM5RCxFQUFFLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtRQUNyQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7Z2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0gZnJvbSAnLi4vdXRpbC9wcm9wZXJ0eSc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuXG5cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCBhIGZ1bmN0aW9uIHBhc3NlZCBpbnRvIHtAbGluayBmb3J3YXJkUmVmfSBoYXMgdG8gaW1wbGVtZW50LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2ZvcndhcmRfcmVmL2ZvcndhcmRfcmVmX3NwZWMudHMgcmVnaW9uPSdmb3J3YXJkX3JlZl9mbid9XG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9yd2FyZFJlZkZuIHsgKCk6IGFueTsgfVxuXG5jb25zdCBfX2ZvcndhcmRfcmVmX18gPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtfX2ZvcndhcmRfcmVmX186IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcblxuLyoqXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYGZvcndhcmRSZWZgIGlzIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSBuZWVkIHRvIHJlZmVyIHRvIGZvciB0aGUgcHVycG9zZXMgb2ZcbiAqIERJIGlzIGRlY2xhcmVkLCBidXQgbm90IHlldCBkZWZpbmVkLiBJdCBpcyBhbHNvIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSB1c2Ugd2hlbiBjcmVhdGluZ1xuICogYSBxdWVyeSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9mb3J3YXJkX3JlZi9mb3J3YXJkX3JlZl9zcGVjLnRzIHJlZ2lvbj0nZm9yd2FyZF9yZWYnfVxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihmb3J3YXJkUmVmRm46IEZvcndhcmRSZWZGbik6IFR5cGU8YW55PiB7XG4gICg8YW55PmZvcndhcmRSZWZGbikuX19mb3J3YXJkX3JlZl9fID0gZm9yd2FyZFJlZjtcbiAgKDxhbnk+Zm9yd2FyZFJlZkZuKS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5naWZ5KHRoaXMoKSk7IH07XG4gIHJldHVybiAoPFR5cGU8YW55Pj48YW55PmZvcndhcmRSZWZGbik7XG59XG5cbi8qKlxuICogTGF6aWx5IHJldHJpZXZlcyB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYSBmb3J3YXJkUmVmLlxuICpcbiAqIEFjdHMgYXMgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIHdoZW4gZ2l2ZW4gYSBub24tZm9yd2FyZC1yZWYgdmFsdWUuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvZm9yd2FyZF9yZWYvZm9yd2FyZF9yZWZfc3BlYy50cyByZWdpb249J3Jlc29sdmVfZm9yd2FyZF9yZWYnfVxuICpcbiAqIEBzZWUgYGZvcndhcmRSZWZgXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRm9yd2FyZFJlZjxUPih0eXBlOiBUKTogVCB7XG4gIGNvbnN0IGZuOiBhbnkgPSB0eXBlO1xuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuLmhhc093blByb3BlcnR5KF9fZm9yd2FyZF9yZWZfXykgJiZcbiAgICAgIGZuLl9fZm9yd2FyZF9yZWZfXyA9PT0gZm9yd2FyZFJlZikge1xuICAgIHJldHVybiBmbigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nexport var ANNOTATIONS = '__annotations__';\nexport var PARAMETERS = '__parameters__';\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    var metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, tslib_1.__spread([this], args));\n            return this;\n        }\n        var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, tslib_1.__spread([cls], args));\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            var values = props.apply(void 0, tslib_1.__spread(args));\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nexport function makeParamDecorator(name, props, parentClass) {\n    var metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    var metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, tslib_1.__spread([void 0], args)))();\n        function PropDecorator(target, name) {\n            var constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, tslib_1.__spread([target, name], args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { makeParamDecorator } from '../util/decorators';\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Optional = makeParamDecorator('Optional');\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Self = makeParamDecorator('Self');\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var SkipSelf = makeParamDecorator('SkipSelf');\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Host = makeParamDecorator('Host');\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9tZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQTJDdEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQW9CLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxVQUFDLEtBQVUsSUFBSyxPQUFBLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLEVBQVQsQ0FBUyxDQUFDLENBQUM7QUFxQy9GOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFzQixrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQXNDMUU7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQWtCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBd0M5RDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBc0Isa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7QUFpQzFFOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFrQixrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQThDOUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQ2xCLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxVQUFDLGFBQXNCLElBQUssT0FBQSxDQUFDLEVBQUMsYUFBYSxlQUFBLEVBQUMsQ0FBQyxFQUFqQixDQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7bWFrZVBhcmFtRGVjb3JhdG9yfSBmcm9tICcuLi91dGlsL2RlY29yYXRvcnMnO1xuXG5cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBJbmplY3QgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluamVjdERlY29yYXRvciB7XG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBkZWNvcmF0b3Igb24gYSBkZXBlbmRlbmN5IHBhcmFtZXRlciBvZiBhIGNsYXNzIGNvbnN0cnVjdG9yXG4gICAqIHRoYXQgc3BlY2lmaWVzIGEgY3VzdG9tIHByb3ZpZGVyIG9mIHRoZSBkZXBlbmRlbmN5LlxuICAgKlxuICAgKiBMZWFybiBtb3JlIGluIHRoZSBbXCJEZXBlbmRlbmN5IEluamVjdGlvbiBHdWlkZVwiXShndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbikuXG4gICAqXG4gICAqIEB1c2FnZU5vdGVzXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIGNsYXNzIGNvbnN0cnVjdG9yIHRoYXQgc3BlY2lmaWVzIGFcbiAgICogY3VzdG9tIHByb3ZpZGVyIG9mIGEgZGVwZW5kZW5jeSB1c2luZyB0aGUgcGFyYW1ldGVyIGRlY29yYXRvci5cbiAgICpcbiAgICoge0BleGFtcGxlIGNvcmUvZGkvdHMvbWV0YWRhdGFfc3BlYy50cyByZWdpb249J0luamVjdCd9XG4gICAqXG4gICAqIFdoZW4gYEBJbmplY3QoKWAgaXMgbm90IHByZXNlbnQsIHRoZSBpbmplY3RvciB1c2VzIHRoZSB0eXBlIGFubm90YXRpb24gb2YgdGhlXG4gICAqIHBhcmFtZXRlciBhcyB0aGUgcHJvdmlkZXIuXG4gICAqXG4gICAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL21ldGFkYXRhX3NwZWMudHMgcmVnaW9uPSdJbmplY3RXaXRob3V0RGVjb3JhdG9yJ31cbiAgICovXG4gICh0b2tlbjogYW55KTogYW55O1xuICBuZXcgKHRva2VuOiBhbnkpOiBJbmplY3Q7XG59XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgSW5qZWN0IG1ldGFkYXRhLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmplY3Qge1xuICAvKipcbiAgICogQSBbREkgdG9rZW5dKGd1aWRlL2dsb3NzYXJ5I2RpLXRva2VuKSB0aGF0IG1hcHMgdG8gdGhlIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQuXG4gICAqL1xuICB0b2tlbjogYW55O1xufVxuXG4vKipcbiAqIEluamVjdCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBJbmplY3Q6IEluamVjdERlY29yYXRvciA9IG1ha2VQYXJhbURlY29yYXRvcignSW5qZWN0JywgKHRva2VuOiBhbnkpID0+ICh7dG9rZW59KSk7XG5cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBPcHRpb25hbCBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9uYWxEZWNvcmF0b3Ige1xuICAvKipcbiAgICogQSBwYXJhbWV0ZXIgZGVjb3JhdG9yIHRvIGJlIHVzZWQgb24gY29uc3RydWN0b3IgcGFyYW1ldGVycyxcbiAgICogd2hpY2ggbWFya3MgdGhlIHBhcmFtZXRlciBhcyBiZWluZyBhbiBvcHRpb25hbCBkZXBlbmRlbmN5LlxuICAgKiBUaGUgREkgZnJhbWV3b3JrIHByb3ZpZGVzIG51bGwgaWYgdGhlIGRlcGVuZGVuY3kgaXMgbm90IGZvdW5kLlxuICAgKlxuICAgKiBDYW4gYmUgdXNlZCB0b2dldGhlciB3aXRoIG90aGVyIHBhcmFtZXRlciBkZWNvcmF0b3JzXG4gICAqIHRoYXQgbW9kaWZ5IGhvdyBkZXBlbmRlbmN5IGluamVjdGlvbiBvcGVyYXRlcy5cbiAgICpcbiAgICogTGVhcm4gbW9yZSBpbiB0aGUgW1wiRGVwZW5kZW5jeSBJbmplY3Rpb24gR3VpZGVcIl0oZ3VpZGUvZGVwZW5kZW5jeS1pbmplY3Rpb24pLlxuICAgKlxuICAgKiBAdXNhZ2VOb3Rlc1xuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIGNvZGUgYWxsb3dzIHRoZSBwb3NzaWJpbGl0eSBvZiBhIG51bGwgcmVzdWx0OlxuICAgKlxuICAgKiB7QGV4YW1wbGUgY29yZS9kaS90cy9tZXRhZGF0YV9zcGVjLnRzIHJlZ2lvbj0nT3B0aW9uYWwnfVxuICAgKlxuICAgKi9cbiAgKCk6IGFueTtcbiAgbmV3ICgpOiBPcHRpb25hbDtcbn1cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBPcHRpb25hbCBtZXRhZGF0YS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9uYWwge31cblxuLyoqXG4gKiBPcHRpb25hbCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25hbDogT3B0aW9uYWxEZWNvcmF0b3IgPSBtYWtlUGFyYW1EZWNvcmF0b3IoJ09wdGlvbmFsJyk7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgU2VsZiBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZkRlY29yYXRvciB7XG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBkZWNvcmF0b3IgdG8gYmUgdXNlZCBvbiBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLFxuICAgKiB3aGljaCB0ZWxscyB0aGUgREkgZnJhbWV3b3JrIHRvIHN0YXJ0IGRlcGVuZGVuY3kgcmVzb2x1dGlvbiBmcm9tIHRoZSBsb2NhbCBpbmplY3Rvci5cbiAgICpcbiAgICogUmVzb2x1dGlvbiB3b3JrcyB1cHdhcmQgdGhyb3VnaCB0aGUgaW5qZWN0b3IgaGllcmFyY2h5LCBzbyB0aGUgY2hpbGRyZW5cbiAgICogb2YgdGhpcyBjbGFzcyBtdXN0IGNvbmZpZ3VyZSB0aGVpciBvd24gcHJvdmlkZXJzIG9yIGJlIHByZXBhcmVkIGZvciBhIG51bGwgcmVzdWx0LlxuICAgKlxuICAgKiBAdXNhZ2VOb3Rlc1xuICAgKlxuICAgKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHRoZSBkZXBlbmRlbmN5IGNhbiBiZSByZXNvbHZlZFxuICAgKiBieSB0aGUgbG9jYWwgaW5qZWN0b3Igd2hlbiBpbnN0YW50aWF0aW5nIHRoZSBjbGFzcyBpdHNlbGYsIGJ1dCBub3RcbiAgICogd2hlbiBpbnN0YW50aWF0aW5nIGEgY2hpbGQuXG4gICAqXG4gICAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL21ldGFkYXRhX3NwZWMudHMgcmVnaW9uPSdTZWxmJ31cbiAgICpcbiAgICogQHNlZSBgU2tpcFNlbGZgXG4gICAqIEBzZWUgYE9wdGlvbmFsYFxuICAgKlxuICAgKi9cbiAgKCk6IGFueTtcbiAgbmV3ICgpOiBTZWxmO1xufVxuXG4vKipcbiAqIFR5cGUgb2YgdGhlIFNlbGYgbWV0YWRhdGEuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlbGYge31cblxuLyoqXG4gKiBTZWxmIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGY6IFNlbGZEZWNvcmF0b3IgPSBtYWtlUGFyYW1EZWNvcmF0b3IoJ1NlbGYnKTtcblxuXG4vKipcbiAqIFR5cGUgb2YgdGhlIFNraXBTZWxmIGRlY29yYXRvciAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTa2lwU2VsZkRlY29yYXRvciB7XG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBkZWNvcmF0b3IgdG8gYmUgdXNlZCBvbiBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLFxuICAgKiB3aGljaCB0ZWxscyB0aGUgREkgZnJhbWV3b3JrIHRvIHN0YXJ0IGRlcGVuZGVuY3kgcmVzb2x1dGlvbiBmcm9tIHRoZSBwYXJlbnQgaW5qZWN0b3IuXG4gICAqIFJlc29sdXRpb24gd29ya3MgdXB3YXJkIHRocm91Z2ggdGhlIGluamVjdG9yIGhpZXJhcmNoeSwgc28gdGhlIGxvY2FsIGluamVjdG9yXG4gICAqIGlzIG5vdCBjaGVja2VkIGZvciBhIHByb3ZpZGVyLlxuICAgKlxuICAgKiBAdXNhZ2VOb3Rlc1xuICAgKlxuICAgKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHRoZSBkZXBlbmRlbmN5IGNhbiBiZSByZXNvbHZlZCB3aGVuXG4gICAqIGluc3RhbnRpYXRpbmcgYSBjaGlsZCwgYnV0IG5vdCB3aGVuIGluc3RhbnRpYXRpbmcgdGhlIGNsYXNzIGl0c2VsZi5cbiAgICpcbiAgICoge0BleGFtcGxlIGNvcmUvZGkvdHMvbWV0YWRhdGFfc3BlYy50cyByZWdpb249J1NraXBTZWxmJ31cbiAgICpcbiAgICogTGVhcm4gbW9yZSBpbiB0aGVcbiAgICogW0RlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlXShndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbi1pbi1hY3Rpb24jc2tpcCkuXG4gICAqXG4gICAqIEBzZWUgYFNlbGZgXG4gICAqIEBzZWUgYE9wdGlvbmFsYFxuICAgKlxuICAgKi9cbiAgKCk6IGFueTtcbiAgbmV3ICgpOiBTa2lwU2VsZjtcbn1cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBTa2lwU2VsZiBtZXRhZGF0YS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2tpcFNlbGYge31cblxuLyoqXG4gKiBTa2lwU2VsZiBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBTa2lwU2VsZjogU2tpcFNlbGZEZWNvcmF0b3IgPSBtYWtlUGFyYW1EZWNvcmF0b3IoJ1NraXBTZWxmJyk7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgSG9zdCBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSG9zdERlY29yYXRvciB7XG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBkZWNvcmF0b3Igb24gYSB2aWV3LXByb3ZpZGVyIHBhcmFtZXRlciBvZiBhIGNsYXNzIGNvbnN0cnVjdG9yXG4gICAqIHRoYXQgdGVsbHMgdGhlIERJIGZyYW1ld29yayB0byByZXNvbHZlIHRoZSB2aWV3IGJ5IGNoZWNraW5nIGluamVjdG9ycyBvZiBjaGlsZFxuICAgKiBlbGVtZW50cywgYW5kIHN0b3Agd2hlbiByZWFjaGluZyB0aGUgaG9zdCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICpcbiAgICogRm9yIGFuIGV4dGVuZGVkIGV4YW1wbGUsIHNlZVxuICAgKiBbXCJEZXBlbmRlbmN5IEluamVjdGlvbiBHdWlkZVwiXShndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbi1pbi1hY3Rpb24jb3B0aW9uYWwpLlxuICAgKlxuICAgKiBAdXNhZ2VOb3Rlc1xuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHNob3dzIHVzZSB3aXRoIHRoZSBgQE9wdGlvbmFsYCBkZWNvcmF0b3IsIGFuZCBhbGxvd3MgZm9yIGEgbnVsbCByZXN1bHQuXG4gICAqXG4gICAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL21ldGFkYXRhX3NwZWMudHMgcmVnaW9uPSdIb3N0J31cbiAgICovXG4gICgpOiBhbnk7XG4gIG5ldyAoKTogSG9zdDtcbn1cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBIb3N0IG1ldGFkYXRhLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIb3N0IHt9XG5cbi8qKlxuICogSG9zdCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBIb3N0OiBIb3N0RGVjb3JhdG9yID0gbWFrZVBhcmFtRGVjb3JhdG9yKCdIb3N0Jyk7XG5cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBBdHRyaWJ1dGUgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF0dHJpYnV0ZURlY29yYXRvciB7XG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBkZWNvcmF0b3IgZm9yIGEgZGlyZWN0aXZlIGNvbnN0cnVjdG9yIHRoYXQgZGVzaWduYXRlc1xuICAgKiBhIGhvc3QtZWxlbWVudCBhdHRyaWJ1dGUgd2hvc2UgdmFsdWUgaXMgaW5qZWN0ZWQgYXMgYSBjb25zdGFudCBzdHJpbmcgbGl0ZXJhbC5cbiAgICpcbiAgICogQHVzYWdlTm90ZXNcbiAgICpcbiAgICogU3VwcG9zZSB3ZSBoYXZlIGFuIGA8aW5wdXQ+YCBlbGVtZW50IGFuZCB3YW50IHRvIGtub3cgaXRzIGB0eXBlYC5cbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8aW5wdXQgdHlwZT1cInRleHRcIj5cbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSB1c2VzIHRoZSBkZWNvcmF0b3IgdG8gaW5qZWN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBgdGV4dGAuXG4gICAqXG4gICAqIHtAZXhhbXBsZSBjb3JlL3RzL21ldGFkYXRhL21ldGFkYXRhLnRzIHJlZ2lvbj0nYXR0cmlidXRlTWV0YWRhdGEnfVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZSBhcyBUeXBlU2NyaXB0IERlY29yYXRvclxuICAgKlxuICAgKiB7QGV4YW1wbGUgY29yZS90cy9tZXRhZGF0YS9tZXRhZGF0YS50cyByZWdpb249J2F0dHJpYnV0ZUZhY3RvcnknfVxuICAgKlxuICAgKi9cbiAgKG5hbWU6IHN0cmluZyk6IGFueTtcbiAgbmV3IChuYW1lOiBzdHJpbmcpOiBBdHRyaWJ1dGU7XG59XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgQXR0cmlidXRlIG1ldGFkYXRhLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGUge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB3aG9zZSB2YWx1ZSBjYW4gYmUgaW5qZWN0ZWQuXG4gICAqL1xuICBhdHRyaWJ1dGVOYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEF0dHJpYnV0ZSBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBdHRyaWJ1dGU6IEF0dHJpYnV0ZURlY29yYXRvciA9XG4gICAgbWFrZVBhcmFtRGVjb3JhdG9yKCdBdHRyaWJ1dGUnLCAoYXR0cmlidXRlTmFtZT86IHN0cmluZykgPT4gKHthdHRyaWJ1dGVOYW1lfSkpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nexport function resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    var componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    var urlMap = new Map();\n    function cachedResourceResolve(url) {\n        var promise = urlMap.get(url);\n        if (!promise) {\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component, type) {\n        var promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n            }));\n        }\n        var styleUrls = component.styleUrls;\n        var styles = component.styles || (component.styles = []);\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(function () { return undefined; });\n}\nvar componentResourceResolutionQueue = new Map();\n// Track when existing ngComponentDef for a Type is waiting on resources.\nvar componentDefPendingResolution = new Set();\nexport function maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nexport function isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nexport function componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.template) ||\n        component.styleUrls && component.styleUrls.length);\n}\nexport function clearResolutionOfComponentResourcesQueue() {\n    var old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nexport function restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n    componentResourceResolutionQueue = queue;\n}\nexport function isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport var ViewEncapsulation;\n(function (ViewEncapsulation) {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL21ldGFkYXRhL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLENBQU4sSUFBWSxpQkFnQ1g7QUFoQ0QsV0FBWSxpQkFBaUI7SUFDM0I7Ozs7Ozs7T0FPRztJQUNILGlFQUFZLENBQUE7SUFDWjs7Ozs7OztPQU9HO0lBQ0gsNkRBQVUsQ0FBQTtJQUNWOztPQUVHO0lBQ0gseURBQVEsQ0FBQTtJQUVSOzs7Ozs7T0FNRztJQUNILG1FQUFhLENBQUE7QUFDZixDQUFDLEVBaENXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFnQzVCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIERlZmluZXMgdGVtcGxhdGUgYW5kIHN0eWxlIGVuY2Fwc3VsYXRpb24gb3B0aW9ucyBhdmFpbGFibGUgZm9yIENvbXBvbmVudCdzIHtAbGluayBDb21wb25lbnR9LlxuICpcbiAqIFNlZSB7QGxpbmsgQ29tcG9uZW50I2VuY2Fwc3VsYXRpb24gZW5jYXBzdWxhdGlvbn0uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvdHMvbWV0YWRhdGEvZW5jYXBzdWxhdGlvbi50cyByZWdpb249J2xvbmdmb3JtJ31cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBlbnVtIFZpZXdFbmNhcHN1bGF0aW9uIHtcbiAgLyoqXG4gICAqIEVtdWxhdGUgYE5hdGl2ZWAgc2NvcGluZyBvZiBzdHlsZXMgYnkgYWRkaW5nIGFuIGF0dHJpYnV0ZSBjb250YWluaW5nIHN1cnJvZ2F0ZSBpZCB0byB0aGUgSG9zdFxuICAgKiBFbGVtZW50IGFuZCBwcmUtcHJvY2Vzc2luZyB0aGUgc3R5bGUgcnVsZXMgcHJvdmlkZWQgdmlhIHtAbGluayBDb21wb25lbnQjc3R5bGVzIHN0eWxlc30gb3JcbiAgICoge0BsaW5rIENvbXBvbmVudCNzdHlsZVVybHMgc3R5bGVVcmxzfSwgYW5kIGFkZGluZyB0aGUgbmV3IEhvc3QgRWxlbWVudCBhdHRyaWJ1dGUgdG8gYWxsXG4gICAqIHNlbGVjdG9ycy5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBvcHRpb24uXG4gICAqL1xuICBFbXVsYXRlZCA9IDAsXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB2Ni4xLjAgLSB1c2Uge1ZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbX0gaW5zdGVhZC5cbiAgICogVXNlIHRoZSBuYXRpdmUgZW5jYXBzdWxhdGlvbiBtZWNoYW5pc20gb2YgdGhlIHJlbmRlcmVyLlxuICAgKlxuICAgKiBGb3IgdGhlIERPTSB0aGlzIG1lYW5zIHVzaW5nIHRoZSBkZXByZWNhdGVkIFtTaGFkb3cgRE9NXG4gICAqIHYwXShodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL3NoYWRvdy8pIGFuZFxuICAgKiBjcmVhdGluZyBhIFNoYWRvd1Jvb3QgZm9yIENvbXBvbmVudCdzIEhvc3QgRWxlbWVudC5cbiAgICovXG4gIE5hdGl2ZSA9IDEsXG4gIC8qKlxuICAgKiBEb24ndCBwcm92aWRlIGFueSB0ZW1wbGF0ZSBvciBzdHlsZSBlbmNhcHN1bGF0aW9uLlxuICAgKi9cbiAgTm9uZSA9IDIsXG5cbiAgLyoqXG4gICAqIFVzZSBTaGFkb3cgRE9NIHRvIGVuY2Fwc3VsYXRlIHN0eWxlcy5cbiAgICpcbiAgICogRm9yIHRoZSBET00gdGhpcyBtZWFucyB1c2luZyBtb2Rlcm4gW1NoYWRvd1xuICAgKiBET01dKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvc2hhZG93LykgYW5kXG4gICAqIGNyZWF0aW5nIGEgU2hhZG93Um9vdCBmb3IgQ29tcG9uZW50J3MgSG9zdCBFbGVtZW50LlxuICAgKi9cbiAgU2hhZG93RG9tID0gM1xufVxuIl19","/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nimport '../util/ng_dev_mode';\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nexport var EMPTY_OBJ = {};\nexport var EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY_OBJ);\n    Object.freeze(EMPTY_ARRAY);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2VtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7RUFNRTtBQUNGLE9BQU8scUJBQXFCLENBQUM7QUFFN0I7Ozs7O0dBS0c7QUFFSCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQU8sRUFBRSxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBVSxFQUFFLENBQUM7QUFFckMsa0ZBQWtGO0FBQ2xGLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRTtJQUNqRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDNUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQGxpY2Vuc2VcbiogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4qXG4qIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4qIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiovXG5pbXBvcnQgJy4uL3V0aWwvbmdfZGV2X21vZGUnO1xuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyByZXVzZWFibGUgXCJlbXB0eVwiIHN5bWJvbHMgdGhhdCBjYW4gYmUgdXNlZCBhcyBkZWZhdWx0IHJldHVybiB2YWx1ZXNcbiAqIGluIGRpZmZlcmVudCBwYXJ0cyBvZiB0aGUgcmVuZGVyaW5nIGNvZGUuIEJlY2F1c2UgdGhlIHNhbWUgc3ltYm9scyBhcmUgcmV0dXJuZWQsIHRoaXNcbiAqIGFsbG93cyBmb3IgaWRlbnRpdHkgY2hlY2tzIGFnYWluc3QgdGhlc2UgdmFsdWVzIHRvIGJlIGNvbnNpc3RlbnRseSB1c2VkIGJ5IHRoZSBmcmFtZXdvcmtcbiAqIGNvZGUuXG4gKi9cblxuZXhwb3J0IGNvbnN0IEVNUFRZX09CSjoge30gPSB7fTtcbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSBbXTtcblxuLy8gZnJlZXppbmcgdGhlIHZhbHVlcyBwcmV2ZW50cyBhbnkgY29kZSBmcm9tIGFjY2lkZW50YWxseSBpbnNlcnRpbmcgbmV3IHZhbHVlcyBpblxuaWYgKHR5cGVvZiBuZ0Rldk1vZGUgIT09ICd1bmRlZmluZWQnICYmIG5nRGV2TW9kZSkge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX09CSik7XG4gIE9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../../util/global';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n */\nexport function renderStringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\nexport var defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(global);\nexport function resolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\nexport function resolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\nexport function resolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport var INTERPOLATION_DELIMITER = \"\\uFFFD\";\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n */\nexport function isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzY191dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvdXRpbC9taXNjX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUt6Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUN4QyxpRUFBaUU7SUFDakUsMENBQTBDO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFVO0lBQ3hDLElBQUksT0FBTyxLQUFLLElBQUksVUFBVTtRQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUM7SUFDM0QsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDM0MsSUFBSSxLQUFLLElBQUksSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzdCLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxVQUFVO1FBQzdELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztJQUN2QyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDcEIsQ0FBQztBQUdELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUN6QixDQUFDLE9BQU8scUJBQXFCLEtBQUssV0FBVyxJQUFJLHFCQUFxQixJQUFLLGVBQWU7SUFDekYsVUFBVSxDQUFnRSxrQkFBa0I7Q0FDM0YsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFcEIsTUFBTSxVQUFVLGFBQWEsQ0FBQyxPQUE2QztJQUN6RSxPQUFPLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUE2QztJQUMzRSxPQUFPLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsRUFBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQTZDO0lBQ3ZFLE9BQU8sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksRUFBQyxDQUFDO0FBQzVELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsUUFBRyxDQUFDO0FBRTNDOzs7R0FHRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxHQUFXO0lBQzlDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFJLEtBQW9CO0lBQ25ELElBQUksS0FBSyxZQUFZLFFBQVEsRUFBRTtRQUM3QixPQUFPLEtBQUssRUFBRSxDQUFDO0tBQ2hCO1NBQU07UUFDTCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi8uLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge2dsb2JhbH0gZnJvbSAnLi4vLi4vdXRpbC9nbG9iYWwnO1xuaW1wb3J0IHtSRWxlbWVudH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9yZW5kZXJlcic7XG5pbXBvcnQge0NPTlRFWFQsIExWaWV3LCBSb290Q29udGV4dH0gZnJvbSAnLi4vaW50ZXJmYWNlcy92aWV3JztcbmltcG9ydCB7Z2V0Um9vdFZpZXd9IGZyb20gJy4vdmlld190cmF2ZXJzYWxfdXRpbHMnO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdmFsdWVzIGFyZSBkaWZmZXJlbnQgZnJvbSBhIGNoYW5nZSBkZXRlY3Rpb24gc3RhbmQgcG9pbnQuXG4gKlxuICogQ29uc3RyYWludHMgYXJlIHJlbGF4ZWQgaW4gY2hlY2tOb0NoYW5nZXMgbW9kZS4gU2VlIGBkZXZNb2RlRXF1YWxgIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEaWZmZXJlbnQoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgLy8gTmFOIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZiBzbyB0aGUgZmlyc3RcbiAgLy8gdGVzdCBjaGVja3MgaWYgYm90aCBhIGFuZCBiIGFyZSBub3QgTmFOXG4gIHJldHVybiAhKGEgIT09IGEgJiYgYiAhPT0gYikgJiYgYSAhPT0gYjtcbn1cblxuLyoqXG4gKiBVc2VkIGZvciBzdHJpbmdpZnkgcmVuZGVyIG91dHB1dCBpbiBJdnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdHJpbmdpZnkodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlLm5hbWUgfHwgdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiAnJztcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudHlwZSA9PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB2YWx1ZS50eXBlLm5hbWUgfHwgdmFsdWUudHlwZTtcbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTY2hlZHVsZXIgPVxuICAgICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJyAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIC8vIGJyb3dzZXIgb25seVxuICAgICBzZXRUaW1lb3V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICApLmJpbmQoZ2xvYmFsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVXaW5kb3coZWxlbWVudDogUkVsZW1lbnQgJiB7b3duZXJEb2N1bWVudDogRG9jdW1lbnR9KSB7XG4gIHJldHVybiB7bmFtZTogJ3dpbmRvdycsIHRhcmdldDogZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVEb2N1bWVudChlbGVtZW50OiBSRWxlbWVudCAmIHtvd25lckRvY3VtZW50OiBEb2N1bWVudH0pIHtcbiAgcmV0dXJuIHtuYW1lOiAnZG9jdW1lbnQnLCB0YXJnZXQ6IGVsZW1lbnQub3duZXJEb2N1bWVudH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQm9keShlbGVtZW50OiBSRWxlbWVudCAmIHtvd25lckRvY3VtZW50OiBEb2N1bWVudH0pIHtcbiAgcmV0dXJuIHtuYW1lOiAnYm9keScsIHRhcmdldDogZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHl9O1xufVxuXG4vKipcbiAqIFRoZSBzcGVjaWFsIGRlbGltaXRlciB3ZSB1c2UgdG8gc2VwYXJhdGUgcHJvcGVydHkgbmFtZXMsIHByZWZpeGVzLCBhbmQgc3VmZml4ZXNcbiAqIGluIHByb3BlcnR5IGJpbmRpbmcgbWV0YWRhdGEuIFNlZSBzdG9yZUJpbmRpbmdNZXRhZGF0YSgpLlxuICpcbiAqIFdlIGludGVudGlvbmFsbHkgdXNlIHRoZSBVbmljb2RlIFwiUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXCIgKFUrRkZGRCkgYXMgYSBkZWxpbWl0ZXJcbiAqIGJlY2F1c2UgaXQgaXMgYSB2ZXJ5IHVuY29tbW9uIGNoYXJhY3RlciB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHBhcnQgb2YgYSB1c2VyJ3NcbiAqIHByb3BlcnR5IG5hbWVzIG9yIGludGVycG9sYXRpb24gc3RyaW5ncy4gSWYgaXQgaXMgaW4gZmFjdCB1c2VkIGluIGEgcHJvcGVydHlcbiAqIGJpbmRpbmcsIERlYnVnRWxlbWVudC5wcm9wZXJ0aWVzIHdpbGwgbm90IHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZSBmb3IgdGhhdFxuICogYmluZGluZy4gSG93ZXZlciwgdGhlcmUgc2hvdWxkIGJlIG5vIHJ1bnRpbWUgZWZmZWN0IGZvciByZWFsIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIGNoYXJhY3RlciBpcyB0eXBpY2FsbHkgcmVuZGVyZWQgYXMgYSBxdWVzdGlvbiBtYXJrIGluc2lkZSBvZiBhIGRpYW1vbmQuXG4gKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbHNfKFVuaWNvZGVfYmxvY2spXG4gKlxuICovXG5leHBvcnQgY29uc3QgSU5URVJQT0xBVElPTl9ERUxJTUlURVIgPSBg77+9YDtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBwcm9wZXJ0eSBtZXRhZGF0YSBzdHJpbmcuXG4gKiBTZWUgc3RvcmVCaW5kaW5nTWV0YWRhdGEoKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcE1ldGFkYXRhU3RyaW5nKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdHIuaW5kZXhPZihJTlRFUlBPTEFUSU9OX0RFTElNSVRFUikgPj0gMDtcbn1cblxuLyoqXG4gKiBVbndyYXAgYSB2YWx1ZSB3aGljaCBtaWdodCBiZSBiZWhpbmQgYSBjbG9zdXJlIChmb3IgZm9yd2FyZCBkZWNsYXJhdGlvbiByZWFzb25zKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlVW53cmFwRm48VD4odmFsdWU6IFQgfCAoKCkgPT4gVCkpOiBUIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gdmFsdWUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../../util/property';\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport function defineInjectable(opts) {\n    return {\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\n    };\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport function defineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport function getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport function getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nexport var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nexport var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2RpL2ludGVyZmFjZS9kZWZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBd0czRDs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksSUFHbkM7SUFDQyxPQUFRO1FBQ04sVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFpQixJQUFJLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUztLQUN0RCxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsT0FBaUU7SUFFOUYsT0FBUTtRQUNOLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFO0tBQy9ELENBQUM7QUFDbEMsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksSUFBUztJQUMzQyxPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFFLElBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbEcsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFJLElBQVM7SUFDekMsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUUsSUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUYsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLHNCQUFzQixDQUFDLEVBQUMsZUFBZSxFQUFFLHNCQUFzQixFQUFDLENBQUMsQ0FBQztBQUNuRyxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsc0JBQXNCLENBQUMsRUFBQyxhQUFhLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7Z2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0gZnJvbSAnLi4vLi4vdXRpbC9wcm9wZXJ0eSc7XG5pbXBvcnQge0NsYXNzUHJvdmlkZXIsIENvbnN0cnVjdG9yUHJvdmlkZXIsIEV4aXN0aW5nUHJvdmlkZXIsIEZhY3RvcnlQcm92aWRlciwgU3RhdGljQ2xhc3NQcm92aWRlciwgVmFsdWVQcm92aWRlcn0gZnJvbSAnLi9wcm92aWRlcic7XG5cblxuXG4vKipcbiAqIEluZm9ybWF0aW9uIGFib3V0IGhvdyBhIHR5cGUgb3IgYEluamVjdGlvblRva2VuYCBpbnRlcmZhY2VzIHdpdGggdGhlIERJIHN5c3RlbS5cbiAqXG4gKiBBdCBhIG1pbmltdW0sIHRoaXMgaW5jbHVkZXMgYSBgZmFjdG9yeWAgd2hpY2ggZGVmaW5lcyBob3cgdG8gY3JlYXRlIHRoZSBnaXZlbiB0eXBlIGBUYCwgcG9zc2libHlcbiAqIHJlcXVlc3RpbmcgaW5qZWN0aW9uIG9mIG90aGVyIHR5cGVzIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBPcHRpb25hbGx5LCBhIGBwcm92aWRlZEluYCBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoYXQgdGhlIGdpdmVuIHR5cGUgYmVsb25ncyB0byBhIHBhcnRpY3VsYXJcbiAqIGBJbmplY3RvckRlZmAsIGBOZ01vZHVsZWAsIG9yIGEgc3BlY2lhbCBzY29wZSAoZS5nLiBgJ3Jvb3QnYCkuIEEgdmFsdWUgb2YgYG51bGxgIGluZGljYXRlc1xuICogdGhhdCB0aGUgaW5qZWN0YWJsZSBkb2VzIG5vdCBiZWxvbmcgdG8gYW55IHNjb3BlLlxuICpcbiAqIE5PVEU6IFRoaXMgaXMgYSBwcml2YXRlIHR5cGUgYW5kIHNob3VsZCBub3QgYmUgZXhwb3J0ZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmplY3RhYmxlRGVmPFQ+IHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGF0IHRoZSBnaXZlbiB0eXBlIGJlbG9uZ3MgdG8gYSBwYXJ0aWN1bGFyIGluamVjdG9yOlxuICAgKiAtIGBJbmplY3RvclR5cGVgIHN1Y2ggYXMgYE5nTW9kdWxlYCxcbiAgICogLSBgJ3Jvb3QnYCB0aGUgcm9vdCBpbmplY3RvclxuICAgKiAtIGAnYW55J2AgYWxsIGluamVjdG9ycy5cbiAgICogLSBgbnVsbGAsIGRvZXMgbm90IGJlbG9uZyB0byBhbnkgaW5qZWN0b3IuIE11c3QgYmUgZXhwbGljaXRseSBsaXN0ZWQgaW4gdGhlIGluamVjdG9yXG4gICAqICAgYHByb3ZpZGVyc2AuXG4gICAqL1xuICBwcm92aWRlZEluOiBJbmplY3RvclR5cGU8YW55Pnwncm9vdCd8J2FueSd8bnVsbDtcblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gZXhlY3V0ZSB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGluamVjdGFibGUuXG4gICAqL1xuICBmYWN0b3J5OiAoKSA9PiBUO1xuXG4gIC8qKlxuICAgKiBJbiBhIGNhc2Ugb2Ygbm8gZXhwbGljaXQgaW5qZWN0b3IsIGEgbG9jYXRpb24gd2hlcmUgdGhlIGluc3RhbmNlIG9mIHRoZSBpbmplY3RhYmxlIGlzIHN0b3JlZC5cbiAgICovXG4gIHZhbHVlOiBUfHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvdmlkZXJzIHRvIGJlIGluY2x1ZGVkIGluIGFuIGBJbmplY3RvcmAgYXMgd2VsbCBhcyBob3cgdGhlIGdpdmVuIHR5cGVcbiAqIHdoaWNoIGNhcnJpZXMgdGhlIGluZm9ybWF0aW9uIHNob3VsZCBiZSBjcmVhdGVkIGJ5IHRoZSBESSBzeXN0ZW0uXG4gKlxuICogQW4gYEluamVjdG9yRGVmYCBjYW4gaW1wb3J0IG90aGVyIHR5cGVzIHdoaWNoIGhhdmUgYEluamVjdG9yRGVmc2AsIGZvcm1pbmcgYSBkZWVwIG5lc3RlZFxuICogc3RydWN0dXJlIG9mIHByb3ZpZGVycyB3aXRoIGEgZGVmaW5lZCBwcmlvcml0eSAoaWRlbnRpY2FsbHkgdG8gaG93IGBOZ01vZHVsZWBzIGFsc28gaGF2ZVxuICogYW4gaW1wb3J0L2RlcGVuZGVuY3kgc3RydWN0dXJlKS5cbiAqXG4gKiBOT1RFOiBUaGlzIGlzIGEgcHJpdmF0ZSB0eXBlIGFuZCBzaG91bGQgbm90IGJlIGV4cG9ydGVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0b3JEZWY8VD4ge1xuICBmYWN0b3J5OiAoKSA9PiBUO1xuXG4gIC8vIFRPRE8oYWx4aHViKTogTmFycm93IGRvd24gdGhlIHR5cGUgaGVyZSBvbmNlIGRlY29yYXRvcnMgcHJvcGVybHkgY2hhbmdlIHRoZSByZXR1cm4gdHlwZSBvZiB0aGVcbiAgLy8gY2xhc3MgdGhleSBhcmUgZGVjb3JhdGluZyAodG8gYWRkIHRoZSBuZ0luamVjdGFibGVEZWYgcHJvcGVydHkgZm9yIGV4YW1wbGUpLlxuICBwcm92aWRlcnM6IChUeXBlPGFueT58VmFsdWVQcm92aWRlcnxFeGlzdGluZ1Byb3ZpZGVyfEZhY3RvcnlQcm92aWRlcnxDb25zdHJ1Y3RvclByb3ZpZGVyfFxuICAgICAgICAgICAgICBTdGF0aWNDbGFzc1Byb3ZpZGVyfENsYXNzUHJvdmlkZXJ8YW55W10pW107XG5cbiAgaW1wb3J0czogKEluamVjdG9yVHlwZTxhbnk+fEluamVjdG9yVHlwZVdpdGhQcm92aWRlcnM8YW55PilbXTtcbn1cblxuLyoqXG4gKiBBIGBUeXBlYCB3aGljaCBoYXMgYW4gYEluamVjdGFibGVEZWZgIHN0YXRpYyBmaWVsZC5cbiAqXG4gKiBgSW5qZWN0YWJsZURlZlR5cGVgcyBjb250YWluIHRoZWlyIG93biBEZXBlbmRlbmN5IEluamVjdGlvbiBtZXRhZGF0YSBhbmQgYXJlIHVzYWJsZSBpbiBhblxuICogYEluamVjdG9yRGVmYC1iYXNlZCBgU3RhdGljSW5qZWN0b3IuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluamVjdGFibGVUeXBlPFQ+IGV4dGVuZHMgVHlwZTxUPiB7XG4gIC8qKlxuICAgKiBPcGFxdWUgdHlwZSB3aG9zZSBzdHJ1Y3R1cmUgaXMgaGlnaGx5IHZlcnNpb24gZGVwZW5kZW50LiBEbyBub3QgcmVseSBvbiBhbnkgcHJvcGVydGllcy5cbiAgICovXG4gIG5nSW5qZWN0YWJsZURlZjogbmV2ZXI7XG59XG5cbi8qKlxuICogQSB0eXBlIHdoaWNoIGhhcyBhbiBgSW5qZWN0b3JEZWZgIHN0YXRpYyBmaWVsZC5cbiAqXG4gKiBgSW5qZWN0b3JEZWZUeXBlc2AgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIGEgYFN0YXRpY0luamVjdG9yYC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0b3JUeXBlPFQ+IGV4dGVuZHMgVHlwZTxUPiB7XG4gIC8qKlxuICAgKiBPcGFxdWUgdHlwZSB3aG9zZSBzdHJ1Y3R1cmUgaXMgaGlnaGx5IHZlcnNpb24gZGVwZW5kZW50LiBEbyBub3QgcmVseSBvbiBhbnkgcHJvcGVydGllcy5cbiAgICovXG4gIG5nSW5qZWN0b3JEZWY6IG5ldmVyO1xufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgYEluamVjdG9yRGVmYCBlcXVpdmFsZW50IG9mIGEgYE1vZHVsZVdpdGhQcm92aWRlcnNgLCBhbiBgSW5qZWN0b3JEZWZUeXBlYCB3aXRoIGFuXG4gKiBhc3NvY2lhdGVkIGFycmF5IG9mIHByb3ZpZGVycy5cbiAqXG4gKiBPYmplY3RzIG9mIHRoaXMgdHlwZSBjYW4gYmUgbGlzdGVkIGluIHRoZSBpbXBvcnRzIHNlY3Rpb24gb2YgYW4gYEluamVjdG9yRGVmYC5cbiAqXG4gKiBOT1RFOiBUaGlzIGlzIGEgcHJpdmF0ZSB0eXBlIGFuZCBzaG91bGQgbm90IGJlIGV4cG9ydGVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0b3JUeXBlV2l0aFByb3ZpZGVyczxUPiB7XG4gIG5nTW9kdWxlOiBJbmplY3RvclR5cGU8VD47XG4gIHByb3ZpZGVycz86IChUeXBlPGFueT58VmFsdWVQcm92aWRlcnxFeGlzdGluZ1Byb3ZpZGVyfEZhY3RvcnlQcm92aWRlcnxDb25zdHJ1Y3RvclByb3ZpZGVyfFxuICAgICAgICAgICAgICAgU3RhdGljQ2xhc3NQcm92aWRlcnxDbGFzc1Byb3ZpZGVyfGFueVtdKVtdO1xufVxuXG5cbi8qKlxuICogQ29uc3RydWN0IGFuIGBJbmplY3RhYmxlRGVmYCB3aGljaCBkZWZpbmVzIGhvdyBhIHRva2VuIHdpbGwgYmUgY29uc3RydWN0ZWQgYnkgdGhlIERJIHN5c3RlbSwgYW5kXG4gKiBpbiB3aGljaCBpbmplY3RvcnMgKGlmIGFueSkgaXQgd2lsbCBiZSBhdmFpbGFibGUuXG4gKlxuICogVGhpcyBzaG91bGQgYmUgYXNzaWduZWQgdG8gYSBzdGF0aWMgYG5nSW5qZWN0YWJsZURlZmAgZmllbGQgb24gYSB0eXBlLCB3aGljaCB3aWxsIHRoZW4gYmUgYW5cbiAqIGBJbmplY3RhYmxlVHlwZWAuXG4gKlxuICogT3B0aW9uczpcbiAqICogYHByb3ZpZGVkSW5gIGRldGVybWluZXMgd2hpY2ggaW5qZWN0b3JzIHdpbGwgaW5jbHVkZSB0aGUgaW5qZWN0YWJsZSwgYnkgZWl0aGVyIGFzc29jaWF0aW5nIGl0XG4gKiAgIHdpdGggYW4gYEBOZ01vZHVsZWAgb3Igb3RoZXIgYEluamVjdG9yVHlwZWAsIG9yIGJ5IHNwZWNpZnlpbmcgdGhhdCB0aGlzIGluamVjdGFibGUgc2hvdWxkIGJlXG4gKiAgIHByb3ZpZGVkIGluIHRoZSBgJ3Jvb3QnYCBpbmplY3Rvciwgd2hpY2ggd2lsbCBiZSB0aGUgYXBwbGljYXRpb24tbGV2ZWwgaW5qZWN0b3IgaW4gbW9zdCBhcHBzLlxuICogKiBgZmFjdG9yeWAgZ2l2ZXMgdGhlIHplcm8gYXJndW1lbnQgZnVuY3Rpb24gd2hpY2ggd2lsbCBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIGluamVjdGFibGUuXG4gKiAgIFRoZSBmYWN0b3J5IGNhbiBjYWxsIGBpbmplY3RgIHRvIGFjY2VzcyB0aGUgYEluamVjdG9yYCBhbmQgcmVxdWVzdCBpbmplY3Rpb24gb2YgZGVwZW5kZW5jaWVzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUluamVjdGFibGU8VD4ob3B0czoge1xuICBwcm92aWRlZEluPzogVHlwZTxhbnk+fCAncm9vdCcgfCAnYW55JyB8IG51bGwsXG4gIGZhY3Rvcnk6ICgpID0+IFQsXG59KTogbmV2ZXIge1xuICByZXR1cm4gKHtcbiAgICBwcm92aWRlZEluOiBvcHRzLnByb3ZpZGVkSW4gYXMgYW55IHx8IG51bGwsIGZhY3Rvcnk6IG9wdHMuZmFjdG9yeSwgdmFsdWU6IHVuZGVmaW5lZCxcbiAgfSBhcyBJbmplY3RhYmxlRGVmPFQ+KSBhcyBuZXZlcjtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3QgYW4gYEluamVjdG9yRGVmYCB3aGljaCBjb25maWd1cmVzIGFuIGluamVjdG9yLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGFzc2lnbmVkIHRvIGEgc3RhdGljIGBuZ0luamVjdG9yRGVmYCBmaWVsZCBvbiBhIHR5cGUsIHdoaWNoIHdpbGwgdGhlbiBiZSBhblxuICogYEluamVjdG9yVHlwZWAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAqIGBmYWN0b3J5YDogYW4gYEluamVjdG9yVHlwZWAgaXMgYW4gaW5zdGFudGlhYmxlIHR5cGUsIHNvIGEgemVybyBhcmd1bWVudCBgZmFjdG9yeWAgZnVuY3Rpb24gdG9cbiAqICAgY3JlYXRlIHRoZSB0eXBlIG11c3QgYmUgcHJvdmlkZWQuIElmIHRoYXQgZmFjdG9yeSBmdW5jdGlvbiBuZWVkcyB0byBpbmplY3QgYXJndW1lbnRzLCBpdCBjYW5cbiAqICAgdXNlIHRoZSBgaW5qZWN0YCBmdW5jdGlvbi5cbiAqICogYHByb3ZpZGVyc2A6IGFuIG9wdGlvbmFsIGFycmF5IG9mIHByb3ZpZGVycyB0byBhZGQgdG8gdGhlIGluamVjdG9yLiBFYWNoIHByb3ZpZGVyIG11c3RcbiAqICAgZWl0aGVyIGhhdmUgYSBmYWN0b3J5IG9yIHBvaW50IHRvIGEgdHlwZSB3aGljaCBoYXMgYW4gYG5nSW5qZWN0YWJsZURlZmAgc3RhdGljIHByb3BlcnR5ICh0aGVcbiAqICAgdHlwZSBtdXN0IGJlIGFuIGBJbmplY3RhYmxlVHlwZWApLlxuICogKiBgaW1wb3J0c2A6IGFuIG9wdGlvbmFsIGFycmF5IG9mIGltcG9ydHMgb2Ygb3RoZXIgYEluamVjdG9yVHlwZWBzIG9yIGBJbmplY3RvclR5cGVXaXRoTW9kdWxlYHNcbiAqICAgd2hvc2UgcHJvdmlkZXJzIHdpbGwgYWxzbyBiZSBhZGRlZCB0byB0aGUgaW5qZWN0b3IuIExvY2FsbHkgcHJvdmlkZWQgdHlwZXMgd2lsbCBvdmVycmlkZVxuICogICBwcm92aWRlcnMgZnJvbSBpbXBvcnRzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUluamVjdG9yKG9wdGlvbnM6IHtmYWN0b3J5OiAoKSA9PiBhbnksIHByb3ZpZGVycz86IGFueVtdLCBpbXBvcnRzPzogYW55W119KTpcbiAgICBuZXZlciB7XG4gIHJldHVybiAoe1xuICAgIGZhY3Rvcnk6IG9wdGlvbnMuZmFjdG9yeSwgcHJvdmlkZXJzOiBvcHRpb25zLnByb3ZpZGVycyB8fCBbXSwgaW1wb3J0czogb3B0aW9ucy5pbXBvcnRzIHx8IFtdLFxuICB9IGFzIEluamVjdG9yRGVmPGFueT4pIGFzIG5ldmVyO1xufVxuXG4vKipcbiAqIFJlYWQgdGhlIGBuZ0luamVjdGFibGVEZWZgIHR5cGUgaW4gYSB3YXkgd2hpY2ggaXMgaW1tdW5lIHRvIGFjY2lkZW50YWxseSByZWFkaW5nIGluaGVyaXRlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gdHlwZSB0eXBlIHdoaWNoIG1heSBoYXZlIGBuZ0luamVjdGFibGVEZWZgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmplY3RhYmxlRGVmPFQ+KHR5cGU6IGFueSk6IEluamVjdGFibGVEZWY8VD58bnVsbCB7XG4gIHJldHVybiB0eXBlICYmIHR5cGUuaGFzT3duUHJvcGVydHkoTkdfSU5KRUNUQUJMRV9ERUYpID8gKHR5cGUgYXMgYW55KVtOR19JTkpFQ1RBQkxFX0RFRl0gOiBudWxsO1xufVxuXG4vKipcbiAqIFJlYWQgdGhlIGBuZ0luamVjdG9yRGVmYCB0eXBlIGluIGEgd2F5IHdoaWNoIGlzIGltbXVuZSB0byBhY2NpZGVudGFsbHkgcmVhZGluZyBpbmhlcml0ZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHR5cGUgdHlwZSB3aGljaCBtYXkgaGF2ZSBgbmdJbmplY3RvckRlZmBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEluamVjdG9yRGVmPFQ+KHR5cGU6IGFueSk6IEluamVjdG9yRGVmPFQ+fG51bGwge1xuICByZXR1cm4gdHlwZSAmJiB0eXBlLmhhc093blByb3BlcnR5KE5HX0lOSkVDVE9SX0RFRikgPyAodHlwZSBhcyBhbnkpW05HX0lOSkVDVE9SX0RFRl0gOiBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgTkdfSU5KRUNUQUJMRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0luamVjdGFibGVEZWY6IGdldENsb3N1cmVTYWZlUHJvcGVydHl9KTtcbmV4cG9ydCBjb25zdCBOR19JTkpFQ1RPUl9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHtuZ0luamVjdG9yRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util/stringify';\nimport { getInjectableDef } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nvar _currentInjector = undefined;\nexport function setCurrentInjector(injector) {\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nvar _injectImplementation;\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(impl) {\n    var previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\nexport function injectInjectorOnly(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport function injectRootLimpMode(token, notFoundValue, flags) {\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n}\nexport function injectArgs(types) {\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            var type = undefined;\n            var flags = InjectFlags.Default;\n            for (var j = 0; j < arg.length; j++) {\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(type, flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport var InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9pbnRlcmZhY2UvaW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0g7Ozs7R0FJRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBZ0JYO0FBaEJELFdBQVksV0FBVztJQUNyQixnR0FBZ0c7SUFFaEcscURBQXFEO0lBQ3JELG1EQUFnQixDQUFBO0lBQ2hCOzs7T0FHRztJQUNILDZDQUFhLENBQUE7SUFDYixrRUFBa0U7SUFDbEUsNkNBQWEsQ0FBQTtJQUNiLGtEQUFrRDtJQUNsRCxxREFBaUIsQ0FBQTtJQUNqQix3REFBd0Q7SUFDeEQscURBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQWhCVyxXQUFXLEtBQVgsV0FBVyxRQWdCdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuLyoqXG4gKiBJbmplY3Rpb24gZmxhZ3MgZm9yIERJLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGVudW0gSW5qZWN0RmxhZ3Mge1xuICAvLyBUT0RPKGFseGh1Yik6IG1ha2UgdGhpcyAnY29uc3QnIHdoZW4gbmdjIG5vIGxvbmdlciB3cml0ZXMgZXhwb3J0cyBvZiBpdCBpbnRvIG5nZmFjdG9yeSBmaWxlcy5cblxuICAvKiogQ2hlY2sgc2VsZiBhbmQgY2hlY2sgcGFyZW50IGluamVjdG9yIGlmIG5lZWRlZCAqL1xuICBEZWZhdWx0ID0gMGIwMDAwLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoYXQgYW4gaW5qZWN0b3Igc2hvdWxkIHJldHJpZXZlIGEgZGVwZW5kZW5jeSBmcm9tIGFueSBpbmplY3RvciB1bnRpbCByZWFjaGluZyB0aGVcbiAgICogaG9zdCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gKE9ubHkgdXNlZCB3aXRoIEVsZW1lbnQgSW5qZWN0b3IpXG4gICAqL1xuICBIb3N0ID0gMGIwMDAxLFxuICAvKiogRG9uJ3QgYXNjZW5kIHRvIGFuY2VzdG9ycyBvZiB0aGUgbm9kZSByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2VsZiA9IDBiMDAxMCxcbiAgLyoqIFNraXAgdGhlIG5vZGUgdGhhdCBpcyByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgU2tpcFNlbGYgPSAwYjAxMDAsXG4gIC8qKiBJbmplY3QgYGRlZmF1bHRWYWx1ZWAgaW5zdGVhZCBpZiB0b2tlbiBub3QgZm91bmQuICovXG4gIE9wdGlvbmFsID0gMGIxMDAwLFxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { noSideEffects } from '../util/closure';\nimport { stringify } from '../util/stringify';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from './empty';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport function defineComponent(componentDefinition) {\n    var type = componentDefinition.type;\n    var typePrototype = type.prototype;\n    var declaredInputs = {};\n    var def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || null,\n        ngContentSelectors: componentDefinition.ngContentSelectors,\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        declaredInputs: declaredInputs,\n        inputs: null,\n        outputs: null,\n        exportAs: componentDefinition.exportAs || null,\n        onChanges: null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: null,\n        pipeDefs: null,\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: null,\n        setInput: null,\n        schemas: componentDefinition.schemas || null,\n    };\n    def._ = noSideEffects(function () {\n        var directiveTypes = componentDefinition.directives;\n        var feature = componentDefinition.features;\n        var pipeTypes = componentDefinition.pipes;\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach(function (fn) { return fn(def); });\n        def.directiveDefs = directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null;\n        def.pipeDefs = pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null;\n    });\n    return def;\n}\nexport function setComponentScope(type, directives, pipes) {\n    var def = type.ngComponentDef;\n    def.directiveDefs = function () { return directives.map(extractDirectiveDef); };\n    def.pipeDefs = function () { return pipes.map(extractPipeDef); };\n}\nexport function extractDirectiveDef(type) {\n    var def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return def;\n}\nexport function extractPipeDef(type) {\n    var def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return def;\n}\nexport function defineNgModule(def) {\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n        schemas: def.schemas || null,\n    };\n    return res;\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n */\nexport function setNgModuleScope(type, scope) {\n    var ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            var publicName = obj[minifiedKey];\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @param baseDefinition The base definition parameters\n */\nexport function defineBase(baseDefinition) {\n    var declaredInputs = {};\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport var defineDirective = defineComponent;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport function definePipe(pipeDef) {\n    return {\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    };\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nexport function getComponentDef(type) {\n    return type[NG_COMPONENT_DEF] || null;\n}\nexport function getDirectiveDef(type) {\n    return type[NG_DIRECTIVE_DEF] || null;\n}\nexport function getPipeDef(type) {\n    return type[NG_PIPE_DEF] || null;\n}\nexport function getNgModuleDef(type, throwNotFound) {\n    var ngModuleDef = type[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(\"Type \" + stringify(type) + \" does not have 'ngModuleDef' property.\");\n    }\n    return ngModuleDef;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var TNODE = 8;\nexport var PARENT_INJECTOR = 8;\nexport var INJECTOR_BLOOM_PARENT_SIZE = 9;\nexport var NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n* Factory for creating instances of injectors in the NodeInjector.\n*\n* This factory is complicated by the fact that it can resolve `multi` factories as well.\n*\n* NOTE: Some of the fields are optional which means that this class has two hidden classes.\n* - One without `multi` support (most common)\n* - One with `multi` values, (rare).\n*\n* Since VMs can cache up to 4 inline hidden classes this is OK.\n*\n* - Single factory: Only `resolving` and `factory` is defined.\n* - `providers` factory: `componentProviders` is a number and `index = -1`.\n* - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n*/\nvar NodeInjectorFactory = /** @class */ (function () {\n    function NodeInjectorFactory(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n    return NodeInjectorFactory;\n}());\nexport { NodeInjectorFactory };\nvar FactoryPrototype = NodeInjectorFactory.prototype;\nexport function isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj !== null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2ludGVyZmFjZXMvaW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBU0gsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQztBQWdCNUMsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQTZCLENBQUMsQ0FBUSxDQUFDO0FBRXRFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4RUc7QUFFSDs7Ozs7Ozs7Ozs7Ozs7RUFjRTtBQUNGO0lBbUZFO0lBQ0k7O09BRUc7SUFDSSxPQWV5QjtJQUNoQzs7T0FFRztJQUNILGNBQXVCLEVBQ3ZCLG9CQUEyRjtRQXBCcEYsWUFBTyxHQUFQLE9BQU8sQ0Fla0I7UUFoR3BDOzs7V0FHRztRQUNILGNBQVMsR0FBRyxLQUFLLENBQUM7UUFrR2hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxjQUFjLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQztJQUN6QyxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBL0dELElBK0dDOztBQUVELElBQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDO0FBQ3ZELE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBUTtJQUNoQyx1REFBdUQ7SUFDdkQsT0FBTyxHQUFHLEtBQUssSUFBSSxJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGdCQUFnQixDQUFDO0FBQ2xHLENBQUM7QUFFRCxpRkFBaUY7QUFDakYsMEJBQTBCO0FBQzFCLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnLi4vLi4vZGkvaW5qZWN0aW9uX3Rva2VuJztcbmltcG9ydCB7SW5qZWN0RmxhZ3N9IGZyb20gJy4uLy4uL2RpL2ludGVyZmFjZS9pbmplY3Rvcic7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZS90eXBlJztcblxuaW1wb3J0IHtURWxlbWVudE5vZGV9IGZyb20gJy4vbm9kZSc7XG5pbXBvcnQge0xWaWV3LCBURGF0YX0gZnJvbSAnLi92aWV3JztcblxuZXhwb3J0IGNvbnN0IFROT0RFID0gODtcbmV4cG9ydCBjb25zdCBQQVJFTlRfSU5KRUNUT1IgPSA4O1xuZXhwb3J0IGNvbnN0IElOSkVDVE9SX0JMT09NX1BBUkVOVF9TSVpFID0gOTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVsYXRpdmUgbG9jYXRpb24gb2YgcGFyZW50IGluamVjdG9yLlxuICpcbiAqIFRoZSBpbnRlcmZhY2VzIGVuY29kZXMgbnVtYmVyIG9mIHBhcmVudHMgYExWaWV3YHMgdG8gdHJhdmVyc2UgYW5kIGluZGV4IGluIHRoZSBgTFZpZXdgXG4gKiBwb2ludGluZyB0byB0aGUgcGFyZW50IGluamVjdG9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbiB7IF9fYnJhbmRfXzogJ1JlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbkZsYWdzJzsgfVxuXG5leHBvcnQgY29uc3QgZW51bSBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb25GbGFncyB7XG4gIEluamVjdG9ySW5kZXhNYXNrID0gMGIxMTExMTExMTExMTExMTEsXG4gIFZpZXdPZmZzZXRTaGlmdCA9IDE2LFxuICBOT19QQVJFTlQgPSAtMSxcbn1cblxuZXhwb3J0IGNvbnN0IE5PX1BBUkVOVF9JTkpFQ1RPUjogUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uID0gLTEgYXMgYW55O1xuXG4vKipcbiAqIEVhY2ggaW5qZWN0b3IgaXMgc2F2ZWQgaW4gOSBjb250aWd1b3VzIHNsb3RzIGluIGBMVmlld2AgYW5kIDkgY29udGlndW91cyBzbG90cyBpblxuICogYFRWaWV3LmRhdGFgLiBUaGlzIGFsbG93cyB1cyB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBub2RlJ3MgdG9rZW5zICh3aGljaFxuICogY2FuIGJlIHNoYXJlZCBpbiBgVFZpZXdgKSBhcyB3ZWxsIGFzIHRoZSB0b2tlbnMgb2YgaXRzIGFuY2VzdG9yIG5vZGVzICh3aGljaCBjYW5ub3QgYmVcbiAqIHNoYXJlZCwgc28gdGhleSBsaXZlIGluIGBMVmlld2ApLlxuICpcbiAqIEVhY2ggb2YgdGhlc2Ugc2xvdHMgKGFzaWRlIGZyb20gdGhlIGxhc3Qgc2xvdCkgY29udGFpbnMgYSBibG9vbSBmaWx0ZXIuIFRoaXMgYmxvb20gZmlsdGVyXG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBkaXJlY3RpdmUgaXMgYXZhaWxhYmxlIG9uIHRoZSBhc3NvY2lhdGVkIG5vZGUgb3Igbm90LiBUaGlzIHByZXZlbnRzIHVzXG4gKiBmcm9tIHNlYXJjaGluZyB0aGUgZGlyZWN0aXZlcyBhcnJheSBhdCB0aGlzIGxldmVsIHVubGVzcyBpdCdzIHByb2JhYmxlIHRoZSBkaXJlY3RpdmUgaXMgaW4gaXQuXG4gKlxuICogU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CbG9vbV9maWx0ZXIgZm9yIG1vcmUgYWJvdXQgYmxvb20gZmlsdGVycy5cbiAqXG4gKiBCZWNhdXNlIGFsbCBpbmplY3RvcnMgaGF2ZSBiZWVuIGZsYXR0ZW5lZCBpbnRvIGBMVmlld2AgYW5kIGBUVmlld0RhdGFgLCB0aGV5IGNhbm5vdCB0eXBlZFxuICogdXNpbmcgaW50ZXJmYWNlcyBhcyB0aGV5IHdlcmUgcHJldmlvdXNseS4gVGhlIHN0YXJ0IGluZGV4IG9mIGVhY2ggYExJbmplY3RvcmAgYW5kIGBUSW5qZWN0b3JgXG4gKiB3aWxsIGRpZmZlciBiYXNlZCBvbiB3aGVyZSBpdCBpcyBmbGF0dGVuZWQgaW50byB0aGUgbWFpbiBhcnJheSwgc28gaXQncyBub3QgcG9zc2libGUgdG8ga25vd1xuICogdGhlIGluZGljZXMgYWhlYWQgb2YgdGltZSBhbmQgc2F2ZSB0aGVpciB0eXBlcyBoZXJlLiBUaGUgaW50ZXJmYWNlcyBhcmUgc3RpbGwgaW5jbHVkZWQgaGVyZVxuICogZm9yIGRvY3VtZW50YXRpb24gcHVycG9zZXMuXG4gKlxuICogZXhwb3J0IGludGVyZmFjZSBMSW5qZWN0b3IgZXh0ZW5kcyBBcnJheTxhbnk+IHtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDAtMzEgIChJRHMgYXJlICUgQkxPT01fU0laRSlcbiAqICAgIFswXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMzItNjNcbiAqICAgIFsxXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgNjQtOTVcbiAqICAgIFsyXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgOTYtMTI3XG4gKiAgICBbM106IG51bWJlcjtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDEyOC0xNTlcbiAqICAgIFs0XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMTYwIC0gMTkxXG4gKiAgICBbNV06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDE5MiAtIDIyM1xuICogICAgWzZdOiBudW1iZXI7XG4gKlxuICogICAgLy8gQ3VtdWxhdGl2ZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyAyMjQgLSAyNTVcbiAqICAgIFs3XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFdlIG5lZWQgdG8gc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIGluamVjdG9yJ3MgcGFyZW50IHNvIERJIGNhbiBrZWVwIGxvb2tpbmcgdXBcbiAqICAgIC8vIHRoZSBpbmplY3RvciB0cmVlIHVudGlsIGl0IGZpbmRzIHRoZSBkZXBlbmRlbmN5IGl0J3MgbG9va2luZyBmb3IuXG4gKiAgICBbUEFSRU5UX0lOSkVDVE9SXTogbnVtYmVyO1xuICogfVxuICpcbiAqIGV4cG9ydCBpbnRlcmZhY2UgVEluamVjdG9yIGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMC0zMSAgKElEcyBhcmUgJSBCTE9PTV9TSVpFKVxuICogICAgWzBdOiBudW1iZXI7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMzItNjNcbiAqICAgIFsxXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDY0LTk1XG4gKiAgICBbMl06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBTaGFyZWQgbm9kZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyA5Ni0xMjdcbiAqICAgIFszXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDEyOC0xNTlcbiAqICAgIFs0XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDE2MCAtIDE5MVxuICogICAgWzVdOiBudW1iZXI7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMTkyIC0gMjIzXG4gKiAgICBbNl06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBTaGFyZWQgbm9kZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyAyMjQgLSAyNTVcbiAqICAgIFs3XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIE5lY2Vzc2FyeSB0byBmaW5kIGRpcmVjdGl2ZSBpbmRpY2VzIGZvciBhIHBhcnRpY3VsYXIgbm9kZS5cbiAqICAgIFtUTk9ERV06IFRFbGVtZW50Tm9kZXxURWxlbWVudENvbnRhaW5lck5vZGV8VENvbnRhaW5lck5vZGU7XG4gKiAgfVxuICovXG5cbi8qKlxuKiBGYWN0b3J5IGZvciBjcmVhdGluZyBpbnN0YW5jZXMgb2YgaW5qZWN0b3JzIGluIHRoZSBOb2RlSW5qZWN0b3IuXG4qXG4qIFRoaXMgZmFjdG9yeSBpcyBjb21wbGljYXRlZCBieSB0aGUgZmFjdCB0aGF0IGl0IGNhbiByZXNvbHZlIGBtdWx0aWAgZmFjdG9yaWVzIGFzIHdlbGwuXG4qXG4qIE5PVEU6IFNvbWUgb2YgdGhlIGZpZWxkcyBhcmUgb3B0aW9uYWwgd2hpY2ggbWVhbnMgdGhhdCB0aGlzIGNsYXNzIGhhcyB0d28gaGlkZGVuIGNsYXNzZXMuXG4qIC0gT25lIHdpdGhvdXQgYG11bHRpYCBzdXBwb3J0IChtb3N0IGNvbW1vbilcbiogLSBPbmUgd2l0aCBgbXVsdGlgIHZhbHVlcywgKHJhcmUpLlxuKlxuKiBTaW5jZSBWTXMgY2FuIGNhY2hlIHVwIHRvIDQgaW5saW5lIGhpZGRlbiBjbGFzc2VzIHRoaXMgaXMgT0suXG4qXG4qIC0gU2luZ2xlIGZhY3Rvcnk6IE9ubHkgYHJlc29sdmluZ2AgYW5kIGBmYWN0b3J5YCBpcyBkZWZpbmVkLlxuKiAtIGBwcm92aWRlcnNgIGZhY3Rvcnk6IGBjb21wb25lbnRQcm92aWRlcnNgIGlzIGEgbnVtYmVyIGFuZCBgaW5kZXggPSAtMWAuXG4qIC0gYHZpZXdQcm92aWRlcnNgIGZhY3Rvcnk6IGBjb21wb25lbnRQcm92aWRlcnNgIGlzIGEgbnVtYmVyIGFuZCBgaW5kZXhgIHBvaW50cyB0byBgcHJvdmlkZXJzYC5cbiovXG5leHBvcnQgY2xhc3MgTm9kZUluamVjdG9yRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBUaGUgaW5qZWN0IGltcGxlbWVudGF0aW9uIHRvIGJlIGFjdGl2YXRlZCB3aGVuIHVzaW5nIHRoZSBmYWN0b3J5LlxuICAgKi9cbiAgaW5qZWN0SW1wbDogbnVsbHwoPFQ+KHRva2VuOiBUeXBlPFQ+fEluamVjdGlvblRva2VuPFQ+LCBmbGFnczogSW5qZWN0RmxhZ3MpID0+IFQpO1xuXG4gIC8qKlxuICAgKiBNYXJrZXIgc2V0IHRvIHRydWUgZHVyaW5nIGZhY3RvcnkgaW52b2NhdGlvbiB0byBzZWUgaWYgd2UgZ2V0IGludG8gcmVjdXJzaXZlIGxvb3AuXG4gICAqIFJlY3Vyc2l2ZSBsb29wIGNhdXNlcyBhbiBlcnJvciB0byBiZSBkaXNwbGF5ZWQuXG4gICAqL1xuICByZXNvbHZpbmcgPSBmYWxzZTtcblxuICAvKipcbiAgICogTWFya3MgdGhhdCB0aGUgdG9rZW4gY2FuIHNlZSBvdGhlciBUb2tlbnMgZGVjbGFyZWQgaW4gYHZpZXdQcm92aWRlcnNgIG9uIHRoZSBzYW1lIG5vZGUuXG4gICAqL1xuICBjYW5TZWVWaWV3UHJvdmlkZXJzOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBmYWN0b3JpZXMgdG8gdXNlIGluIGNhc2Ugb2YgYG11bHRpYCBwcm92aWRlci5cbiAgICovXG4gIG11bHRpPzogQXJyYXk8KCkgPT4gYW55PjtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIGBtdWx0aWAtcHJvdmlkZXJzIHdoaWNoIGJlbG9uZyB0byB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHdoZW4gbXVsdGlwbGUgY29tcG9uZW50cyBhbmQgZGlyZWN0aXZlcyBkZWNsYXJlIHRoZSBgbXVsdGlgIHByb3ZpZGVyXG4gICAqIHRoZXkgaGF2ZSB0byBiZSBjb25jYXRlbmF0ZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqIElmIHdlIGhhdmUgYSBjb21wb25lbnQgYW5kIGRpcmVjdGl2ZSBhY3RpdmUgYW4gYSBzaW5nbGUgZWxlbWVudCBhcyBkZWNsYXJlZCBoZXJlXG4gICAqIGBgYFxuICAgKiBjb21wb25lbnQ6XG4gICAqICAgcHJvdmlkZXM6IFsge3Byb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6ICdjb21wb25lbnQnLCBtdWx0aTogdHJ1ZX0gXSxcbiAgICogICB2aWV3UHJvdmlkZXM6IFsge3Byb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6ICdjb21wb25lbnRWaWV3JywgbXVsdGk6IHRydWV9IF0sXG4gICAqXG4gICAqIGRpcmVjdGl2ZTpcbiAgICogICBwcm92aWRlczogWyB7cHJvdmlkZTogU3RyaW5nLCB1c2VWYWx1ZTogJ2RpcmVjdGl2ZScsIG11bHRpOiB0cnVlfSBdLFxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlbiB0aGUgZXhwZWN0ZWQgcmVzdWx0cyBhcmU6XG4gICAqXG4gICAqIGBgYFxuICAgKiBwcm92aWRlcnM6IFsnY29tcG9uZW50JywgJ2RpcmVjdGl2ZSddXG4gICAqIHZpZXdQcm92aWRlcnM6IFsnY29tcG9uZW50JywgJ2NvbXBvbmVudFZpZXcnLCAnZGlyZWN0aXZlJ11cbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSB3YXkgdG8gdGhpbmsgYWJvdXQgaXQgaXMgdGhhdCB0aGUgYHZpZXdQcm92aWRlcnNgIGhhdmUgYmVlbiBpbnNlcnRlZCBhZnRlciB0aGUgY29tcG9uZW50XG4gICAqIGJ1dCBiZWZvcmUgdGhlIGRpcmVjdGl2ZXMsIHdoaWNoIGlzIHdoeSB3ZSBuZWVkIHRvIGtub3cgaG93IG1hbnkgYG11bHRpYHMgaGF2ZSBiZWVuIGRlY2xhcmVkIGJ5XG4gICAqIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnRQcm92aWRlcnM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgaW5kZXggb2YgdGhlIEZhY3RvcnkgaW4gdGhlIGBkYXRhYC4gTmVlZGVkIGZvciBgdmlld1Byb3ZpZGVyc2AgYW5kIGBwcm92aWRlcnNgIG1lcmdpbmcuXG4gICAqIFNlZSBgcHJvdmlkZXJGYWN0b3J5YC5cbiAgICovXG4gIGluZGV4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBCZWNhdXNlIHRoZSBzYW1lIGBtdWx0aWAgcHJvdmlkZXIgY2FuIGJlIGRlY2xhcmVkIGluIGBwcm92aWRlc2AgYW5kIGB2aWV3UHJvdmlkZXNgIGl0IGlzXG4gICAqIHBvc3NpYmxlIGZvciBgdmlld1Byb3ZpZGVzYCB0byBzaGFkb3cgdGhlIGBwcm92aWRlc2AuIEZvciB0aGlzIHJlYXNvbiB3ZSBzdG9yZSB0aGVcbiAgICogYHByb3ZpZGVGYWN0b3J5YCBvZiB0aGUgYHByb3ZpZGVyc2Agc28gdGhhdCBgcHJvdmlkZXJzYCBjYW4gYmUgZXh0ZW5kZWQgd2l0aCBgdmlld1Byb3ZpZGVyc2AuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqIEdpdmVuOlxuICAgKiBgYGBcbiAgICogcHJvdmlkZXM6IFsge3Byb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6ICdhbGwnLCBtdWx0aTogdHJ1ZX0gXSxcbiAgICogdmlld1Byb3ZpZGVzOiBbIHtwcm92aWRlOiBTdHJpbmcsIHVzZVZhbHVlOiAndmlld09ubHknLCBtdWx0aTogdHJ1ZX0gXSxcbiAgICogYGBgXG4gICAqXG4gICAqIFdlIGhhdmUgdG8gcmV0dXJuIGBbJ2FsbCddYCBpbiBjYXNlIG9mIGNvbnRlbnQgaW5qZWN0aW9uLCBidXQgYFsnYWxsJywgJ3ZpZXdPbmx5J11gIGluIGNhc2VcbiAgICogb2YgdmlldyBpbmplY3Rpb24uIFdlIGZ1cnRoZXIgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGUgc2hhcmVkIGluc3RhbmNlcyAoaW4gb3VyIGNhc2VcbiAgICogYGFsbGApIGFyZSB0aGUgZXhhY3Qgc2FtZSBpbnN0YW5jZSBpbiBib3RoIHRoZSBjb250ZW50IGFzIHdlbGwgYXMgdGhlIHZpZXcgaW5qZWN0aW9uLiAoV2VcbiAgICogaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBkb3VibGUgaW5zdGFudGlhdGUuKSBGb3IgdGhpcyByZWFzb24gdGhlIGB2aWV3UHJvdmlkZXNgXG4gICAqIGBGYWN0b3J5YCBoYXMgYSBwb2ludGVyIHRvIHRoZSBzaGFkb3dlZCBgcHJvdmlkZXNgIGZhY3Rvcnkgc28gdGhhdCBpdCBjYW4gaW5zdGFudGlhdGUgdGhlXG4gICAqIGBwcm92aWRlcnNgIChgWydhbGwnXWApIGFuZCB0aGVuIGV4dGVuZCBpdCB3aXRoIGB2aWV3UHJvdmlkZXJzYCAoYFsnYWxsJ10gKyBbJ3ZpZXdPbmx5J10gPVxuICAgKiBbJ2FsbCcsICd2aWV3T25seSddYCkuXG4gICAqL1xuICBwcm92aWRlckZhY3Rvcnk/OiBOb2RlSW5qZWN0b3JGYWN0b3J5fG51bGw7XG5cblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIC8qKlxuICAgICAgICogRmFjdG9yeSB0byBpbnZva2UgaW4gb3JkZXIgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlLlxuICAgICAgICovXG4gICAgICBwdWJsaWMgZmFjdG9yeTpcbiAgICAgICAgICAodGhpczogTm9kZUluamVjdG9yRmFjdG9yeSwgXzogbnVsbCxcbiAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGFycmF5IHdoZXJlIGluamVjdGFibGVzIHRva2VucyBhcmUgc3RvcmVkLiBUaGlzIGlzIHVzZWQgaW5cbiAgICAgICAgICAgICogY2FzZSBvZiBhbiBlcnJvciByZXBvcnRpbmcgdG8gcHJvZHVjZSBmcmllbmRsaWVyIGVycm9ycy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgIHREYXRhOiBURGF0YSxcbiAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGFycmF5IHdoZXJlIGV4aXN0aW5nIGluc3RhbmNlcyBvZiBpbmplY3RhYmxlcyBhcmUgc3RvcmVkLiBUaGlzIGlzIHVzZWQgaW4gY2FzZVxuICAgICAgICAgICAgKiBvZiBtdWx0aSBzaGFkb3cgaXMgbmVlZGVkLiBTZWUgYG11bHRpYCBmaWVsZCBkb2N1bWVudGF0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgbFZpZXc6IExWaWV3LFxuICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogVGhlIFROb2RlIG9mIHRoZSBzYW1lIGVsZW1lbnQgaW5qZWN0b3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICB0Tm9kZTogVEVsZW1lbnROb2RlKSA9PiBhbnksXG4gICAgICAvKipcbiAgICAgICAqIFNldCB0byBgdHJ1ZWAgaWYgdGhlIHRva2VuIGlzIGRlY2xhcmVkIGluIGB2aWV3UHJvdmlkZXJzYCAob3IgaWYgaXQgaXMgY29tcG9uZW50KS5cbiAgICAgICAqL1xuICAgICAgaXNWaWV3UHJvdmlkZXI6IGJvb2xlYW4sXG4gICAgICBpbmplY3RJbXBsZW1lbnRhdGlvbjogbnVsbHwoPFQ+KHRva2VuOiBUeXBlPFQ+fEluamVjdGlvblRva2VuPFQ+LCBmbGFnczogSW5qZWN0RmxhZ3MpID0+IFQpKSB7XG4gICAgdGhpcy5jYW5TZWVWaWV3UHJvdmlkZXJzID0gaXNWaWV3UHJvdmlkZXI7XG4gICAgdGhpcy5pbmplY3RJbXBsID0gaW5qZWN0SW1wbGVtZW50YXRpb247XG4gIH1cbn1cblxuY29uc3QgRmFjdG9yeVByb3RvdHlwZSA9IE5vZGVJbmplY3RvckZhY3RvcnkucHJvdG90eXBlO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmFjdG9yeShvYmo6IGFueSk6IG9iaiBpcyBOb2RlSW5qZWN0b3JGYWN0b3J5IHtcbiAgLy8gU2VlOiBodHRwczovL2pzcGVyZi5jb20vaW5zdGFuY2VvZi12cy1nZXRwcm90b3R5cGVvZlxuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT0gRmFjdG9yeVByb3RvdHlwZTtcbn1cblxuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuZXhwb3J0IGNvbnN0IHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkID0gMTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertGreaterThan } from '../util/assert';\nimport { assertLViewOrUndefined } from './assert';\nimport { executeHooks } from './hooks';\nimport { BINDING_INDEX, CONTEXT, DECLARATION_VIEW, FLAGS, TVIEW } from './interfaces/view';\nimport { resetPreOrderHookFlags } from './util/view_utils';\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n */\nvar elementDepthCount;\nexport function getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\nexport function increaseElementDepthCount() {\n    elementDepthCount++;\n}\nexport function decreaseElementDepthCount() {\n    elementDepthCount--;\n}\nvar currentDirectiveDef = null;\nexport function getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\nexport function setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n */\nvar bindingsEnabled;\nexport function getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function disableBindings() {\n    bindingsEnabled = false;\n}\nexport function getLView() {\n    return lView;\n}\nvar activeHostContext = null;\nvar activeHostElementIndex = null;\n/**\n * Sets the active host context (the directive/component instance) and its host element index.\n *\n * @param host the directive/component instance\n * @param index the element index value for the host element where the directive/component instance\n * lives\n */\nexport function setActiveHost(host, index) {\n    if (index === void 0) { index = null; }\n    activeHostContext = host;\n    activeHostElementIndex = index;\n}\nexport function getActiveHostContext() {\n    return activeHostContext;\n}\nexport function getActiveHostElementIndex() {\n    return activeHostElementIndex;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nexport function restoreView(viewToRestore) {\n    contextLView = viewToRestore;\n}\n/** Used to set the parent property when nodes are created and track query results. */\nvar previousOrParentTNode;\nexport function getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\nexport function setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\nexport function setTNodeAndViewData(tNode, view) {\n    ngDevMode && assertLViewOrUndefined(view);\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n */\nvar isParent;\nexport function getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\nexport function setIsParent(value) {\n    isParent = value;\n}\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view) {\n    if (view === void 0) { view = lView; }\n    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nvar lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n */\nvar contextLView = null;\nexport function getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nvar checkNoChangesMode = false;\nexport function getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\nexport function setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n */\nvar bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\nexport function setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Current index of a View or Content Query which needs to be processed next.\n * We iterate over the list of Queries and increment current query index at every step.\n */\nvar currentQueryIndex = 0;\nexport function getCurrentQueryIndex() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueryIndex;\n}\nexport function setCurrentQueryIndex(value) {\n    currentQueryIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nexport function enterView(newView, hostTNode) {\n    ngDevMode && assertLViewOrUndefined(newView);\n    var oldView = lView;\n    if (newView) {\n        var tView = newView[TVIEW];\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = hostTNode;\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\nexport function nextContextImpl(level) {\n    if (level === void 0) { level = 1; }\n    contextLView = walkUpViews(level, contextLView);\n    return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = currentView[DECLARATION_VIEW];\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = null;\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n */\nexport function leaveView(newView) {\n    var tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    else {\n        try {\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n        }\n        finally {\n            // Views are clean and in update mode after being checked, so these bits are cleared\n            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            lView[BINDING_INDEX] = tView.bindingStartIndex;\n        }\n    }\n    enterView(newView, null);\n}\nvar _selectedIndex = -1;\n/**\n * Gets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function getSelectedIndex() {\n    ngDevMode &&\n        assertGreaterThan(_selectedIndex, -1, 'select() should be called prior to retrieving the selected index');\n    return _selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function setSelectedIndex(index) {\n    _selectedIndex = index;\n}\nvar _currentNamespace = null;\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * Sets the namespace used to create elements no `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\nexport function getNamespace() {\n    return _currentNamespace;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport var HOST = 0;\nexport var TVIEW = 1;\nexport var FLAGS = 2;\nexport var PARENT = 3;\nexport var NEXT = 4;\nexport var QUERIES = 5;\nexport var T_HOST = 6;\nexport var BINDING_INDEX = 7;\nexport var CLEANUP = 8;\nexport var CONTEXT = 9;\nexport var INJECTOR = 10;\nexport var RENDERER_FACTORY = 11;\nexport var RENDERER = 12;\nexport var SANITIZER = 13;\nexport var CHILD_HEAD = 14;\nexport var CHILD_TAIL = 15;\nexport var CONTENT_QUERIES = 16;\nexport var DECLARATION_VIEW = 17;\nexport var PREORDER_HOOK_FLAGS = 18;\n/** Size of LView's header. Necessary to adjust for it when setting slots.  */\nexport var HEADER_OFFSET = 20;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HOST, NEXT, PARENT, QUERIES, T_HOST } from './view';\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nexport var TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\nexport var ACTIVE_INDEX = 2;\n// PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n// As we already have these constants in LView, we don't need to re-create them.\nexport var NATIVE = 7;\nexport var VIEWS = 8;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9pbnRlcmZhY2VzL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFNSCxPQUFPLEVBQUMsSUFBSSxFQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUdsRTs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztBQUN0Qjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUM5Qiw4REFBOEQ7QUFDOUQsZ0ZBQWdGO0FBQ2hGLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQztBQTJFdkIsaUZBQWlGO0FBQ2pGLDBCQUEwQjtBQUMxQixNQUFNLENBQUMsSUFBTSw2QkFBNkIsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7VE5vZGV9IGZyb20gJy4vbm9kZSc7XG5pbXBvcnQge0xRdWVyaWVzfSBmcm9tICcuL3F1ZXJ5JztcbmltcG9ydCB7UkNvbW1lbnQsIFJFbGVtZW50fSBmcm9tICcuL3JlbmRlcmVyJztcbmltcG9ydCB7U3R5bGluZ0NvbnRleHR9IGZyb20gJy4vc3R5bGluZyc7XG5pbXBvcnQge0hPU1QsIExWaWV3LCBORVhULCBQQVJFTlQsIFFVRVJJRVMsIFRfSE9TVH0gZnJvbSAnLi92aWV3JztcblxuXG4vKipcbiAqIFNwZWNpYWwgbG9jYXRpb24gd2hpY2ggYWxsb3dzIGVhc3kgaWRlbnRpZmljYXRpb24gb2YgdHlwZS4gSWYgd2UgaGF2ZSBhbiBhcnJheSB3aGljaCB3YXNcbiAqIHJldHJpZXZlZCBmcm9tIHRoZSBgTFZpZXdgIGFuZCB0aGF0IGFycmF5IGhhcyBgdHJ1ZWAgYXQgYFRZUEVgIGxvY2F0aW9uLCB3ZSBrbm93IGl0IGlzXG4gKiBgTENvbnRhaW5lcmAuXG4gKi9cbmV4cG9ydCBjb25zdCBUWVBFID0gMTtcbi8qKlxuICogQmVsb3cgYXJlIGNvbnN0YW50cyBmb3IgTENvbnRhaW5lciBpbmRpY2VzIHRvIGhlbHAgdXMgbG9vayB1cCBMQ29udGFpbmVyIG1lbWJlcnNcbiAqIHdpdGhvdXQgaGF2aW5nIHRvIHJlbWVtYmVyIHRoZSBzcGVjaWZpYyBpbmRpY2VzLlxuICogVWdsaWZ5IHdpbGwgaW5saW5lIHRoZXNlIHdoZW4gbWluaWZ5aW5nIHNvIHRoZXJlIHNob3VsZG4ndCBiZSBhIGNvc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVkVfSU5ERVggPSAyO1xuLy8gUEFSRU5ULCBORVhULCBRVUVSSUVTIGFuZCBUX0hPU1QgYXJlIGluZGljZXMgMywgNCwgNSBhbmQgNi5cbi8vIEFzIHdlIGFscmVhZHkgaGF2ZSB0aGVzZSBjb25zdGFudHMgaW4gTFZpZXcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY3JlYXRlIHRoZW0uXG5leHBvcnQgY29uc3QgTkFUSVZFID0gNztcbmV4cG9ydCBjb25zdCBWSUVXUyA9IDg7XG5cbi8qKlxuICogVGhlIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCBhIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIGlzIGFuIGFycmF5IHNvIHRoYXQgaXRzIHN0cnVjdHVyZSBpcyBjbG9zZXIgdG8gTFZpZXcuIFRoaXMgaGVscHNcbiAqIHdoZW4gdHJhdmVyc2luZyB0aGUgdmlldyB0cmVlICh3aGljaCBpcyBhIG1peCBvZiBjb250YWluZXJzIGFuZCBjb21wb25lbnRcbiAqIHZpZXdzKSwgc28gd2UgY2FuIGp1bXAgdG8gdmlld09yQ29udGFpbmVyW05FWFRdIGluIHRoZSBzYW1lIHdheSByZWdhcmRsZXNzXG4gKiBvZiB0eXBlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExDb250YWluZXIgZXh0ZW5kcyBBcnJheTxhbnk+IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0IGVsZW1lbnQgb2YgdGhpcyBMQ29udGFpbmVyLlxuICAgKlxuICAgKiBUaGUgaG9zdCBjb3VsZCBiZSBhbiBMVmlldyBpZiB0aGlzIGNvbnRhaW5lciBpcyBvbiBhIGNvbXBvbmVudCBub2RlLlxuICAgKiBJbiB0aGF0IGNhc2UsIHRoZSBjb21wb25lbnQgTFZpZXcgaXMgaXRzIEhPU1QuXG4gICAqXG4gICAqIEl0IGNvdWxkIGFsc28gYmUgYSBzdHlsaW5nIGNvbnRleHQgaWYgdGhpcyBpcyBhIG5vZGUgd2l0aCBhIHN0eWxlL2NsYXNzXG4gICAqIGJpbmRpbmcuXG4gICAqL1xuICByZWFkb25seVtIT1NUXTogUkVsZW1lbnR8UkNvbW1lbnR8U3R5bGluZ0NvbnRleHR8TFZpZXc7XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSB0eXBlIGZpZWxkIHdoaWNoIGFsbG93cyB1cyB0byBkaWZmZXJlbnRpYXRlIGBMQ29udGFpbmVyYCBmcm9tIGBTdHlsaW5nQ29udGV4dGAgaW4gYW5cbiAgICogZWZmaWNpZW50IHdheS4gVGhlIHZhbHVlIGlzIGFsd2F5cyBzZXQgdG8gYHRydWVgXG4gICAqL1xuICBbVFlQRV06IHRydWU7XG5cbiAgLyoqXG4gICAqIFRoZSBuZXh0IGFjdGl2ZSBpbmRleCBpbiB0aGUgdmlld3MgYXJyYXkgdG8gcmVhZCBvciB3cml0ZSB0by4gVGhpcyBoZWxwcyB1c1xuICAgKiBrZWVwIHRyYWNrIG9mIHdoZXJlIHdlIGFyZSBpbiB0aGUgdmlld3MgYXJyYXkuXG4gICAqIEluIHRoZSBjYXNlIHRoZSBMQ29udGFpbmVyIGlzIGNyZWF0ZWQgZm9yIGEgVmlld0NvbnRhaW5lclJlZixcbiAgICogaXQgaXMgc2V0IHRvIG51bGwgdG8gaWRlbnRpZnkgdGhpcyBzY2VuYXJpbywgYXMgaW5kaWNlcyBhcmUgXCJhYnNvbHV0ZVwiIGluIHRoYXQgY2FzZSxcbiAgICogaS5lLiBwcm92aWRlZCBkaXJlY3RseSBieSB0aGUgdXNlciBvZiB0aGUgVmlld0NvbnRhaW5lclJlZiBBUEkuXG4gICAqL1xuICBbQUNUSVZFX0lOREVYXTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdG8gdGhlIHBhcmVudCB2aWV3IGlzIG5lY2Vzc2FyeSBzbyB3ZSBjYW4gcHJvcGFnYXRlIGJhY2tcbiAgICogdXAgZnJvbSBpbnNpZGUgYSBjb250YWluZXIgdG8gcGFyZW50W05FWFRdLlxuICAgKi9cbiAgW1BBUkVOVF06IExWaWV3O1xuXG4gIC8qKlxuICAgKiBUaGlzIGFsbG93cyB1cyB0byBqdW1wIGZyb20gYSBjb250YWluZXIgdG8gYSBzaWJsaW5nIGNvbnRhaW5lciBvciBjb21wb25lbnRcbiAgICogdmlldyB3aXRoIHRoZSBzYW1lIHBhcmVudCwgc28gd2UgY2FuIHJlbW92ZSBsaXN0ZW5lcnMgZWZmaWNpZW50bHkuXG4gICAqL1xuICBbTkVYVF06IExWaWV3fExDb250YWluZXJ8bnVsbDtcblxuICAvKipcbiAgICogUXVlcmllcyBhY3RpdmUgZm9yIHRoaXMgY29udGFpbmVyIC0gYWxsIHRoZSB2aWV3cyBpbnNlcnRlZCB0byAvIHJlbW92ZWQgZnJvbVxuICAgKiB0aGlzIGNvbnRhaW5lciBhcmUgcmVwb3J0ZWQgdG8gcXVlcmllcyByZWZlcmVuY2VkIGhlcmUuXG4gICAqL1xuICBbUVVFUklFU106IExRdWVyaWVzfG51bGw7ICAvLyBUT0RPKG1pc2tvKTogVGhpcyBpcyBhYnVzZSBvZiBgTENvbnRhaW5lcmAgc2luY2Ugd2UgYXJlIHN0b3JpbmdcbiAgLy8gYFtRVUVSSUVTXWAgaW4gaXQgd2hpY2ggYXJlIG5vdCBuZWVkZWQgZm9yIGBMQ29udGFpbmVyYCAob25seSBuZWVkZWQgZm9yIFRlbXBsYXRlKVxuXG4gIC8qKlxuICAgKiBQb2ludGVyIHRvIHRoZSBgVE5vZGVgIHdoaWNoIHJlcHJlc2VudHMgdGhlIGhvc3Qgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIFtUX0hPU1RdOiBUTm9kZTtcblxuICAvKiogVGhlIGNvbW1lbnQgZWxlbWVudCB0aGF0IHNlcnZlcyBhcyBhbiBhbmNob3IgZm9yIHRoaXMgTENvbnRhaW5lci4gKi9cbiAgcmVhZG9ubHlbTkFUSVZFXTpcbiAgICAgIFJDb21tZW50OyAgLy8gVE9ETyhtaXNrbyk6IHJlbW92ZSBhcyB0aGlzIHZhbHVlIGNhbiBiZSBnb3R0ZW4gYnkgdW53cmFwcGluZyBgW0hPU1RdYFxuXG4gIC8qKlxuKkEgbGlzdCBvZiB0aGUgY29udGFpbmVyJ3MgY3VycmVudGx5IGFjdGl2ZSBjaGlsZCB2aWV3cy4gVmlld3Mgd2lsbCBiZSBpbnNlcnRlZFxuKmhlcmUgYXMgdGhleSBhcmUgYWRkZWQgYW5kIHNwbGljZWQgZnJvbSBoZXJlIHdoZW4gdGhleSBhcmUgcmVtb3ZlZC4gV2UgbmVlZFxuKnRvIGtlZXAgYSByZWNvcmQgb2YgY3VycmVudCB2aWV3cyBzbyB3ZSBrbm93IHdoaWNoIHZpZXdzIGFyZSBhbHJlYWR5IGluIHRoZSBET01cbiooYW5kIGRvbid0IG5lZWQgdG8gYmUgcmUtYWRkZWQpIGFuZCBzbyB3ZSBjYW4gcmVtb3ZlIHZpZXdzIGZyb20gdGhlIERPTSB3aGVuIHRoZXlcbiphcmUgbm8gbG9uZ2VyIHJlcXVpcmVkLlxuKi9cbiAgW1ZJRVdTXTogTFZpZXdbXTtcbn1cblxuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuZXhwb3J0IGNvbnN0IHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkID0gMTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n */\nexport var MONKEY_PATCH_KEY_NAME = '__ngContext__';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaW50ZXJmYWNlcy9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQU1IOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5cbmltcG9ydCB7Uk5vZGV9IGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IHtMVmlld30gZnJvbSAnLi92aWV3JztcblxuLyoqXG4gKiBUaGlzIHByb3BlcnR5IHdpbGwgYmUgbW9ua2V5LXBhdGNoZWQgb24gZWxlbWVudHMsIGNvbXBvbmVudHMgYW5kIGRpcmVjdGl2ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IE1PTktFWV9QQVRDSF9LRVlfTkFNRSA9ICdfX25nQ29udGV4dF9fJztcblxuLyoqXG4gKiBUaGUgaW50ZXJuYWwgdmlldyBjb250ZXh0IHdoaWNoIGlzIHNwZWNpZmljIHRvIGEgZ2l2ZW4gRE9NIGVsZW1lbnQsIGRpcmVjdGl2ZSBvclxuICogY29tcG9uZW50IGluc3RhbmNlLiBFYWNoIHZhbHVlIGluIGhlcmUgKGJlc2lkZXMgdGhlIExWaWV3IGFuZCBlbGVtZW50IG5vZGUgZGV0YWlscylcbiAqIGNhbiBiZSBwcmVzZW50LCBudWxsIG9yIHVuZGVmaW5lZC4gSWYgdW5kZWZpbmVkIHRoZW4gaXQgaW1wbGllcyB0aGUgdmFsdWUgaGFzIG5vdCBiZWVuXG4gKiBsb29rZWQgdXAgeWV0LCBvdGhlcndpc2UsIGlmIG51bGwsIHRoZW4gYSBsb29rdXAgd2FzIGV4ZWN1dGVkIGFuZCBub3RoaW5nIHdhcyBmb3VuZC5cbiAqXG4gKiBFYWNoIHZhbHVlIHdpbGwgZ2V0IGZpbGxlZCB3aGVuIHRoZSByZXNwZWN0aXZlIHZhbHVlIGlzIGV4YW1pbmVkIHdpdGhpbiB0aGUgZ2V0Q29udGV4dFxuICogZnVuY3Rpb24uIFRoZSBjb21wb25lbnQsIGVsZW1lbnQgYW5kIGVhY2ggZGlyZWN0aXZlIGluc3RhbmNlIHdpbGwgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2VcbiAqIG9mIHRoZSBjb250ZXh0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExDb250ZXh0IHtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyBwYXJlbnQgdmlldyBkYXRhLlxuICAgKi9cbiAgbFZpZXc6IExWaWV3O1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggaW5zdGFuY2Ugb2YgdGhlIG5vZGUuXG4gICAqL1xuICBub2RlSW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluc3RhbmNlIG9mIHRoZSBET00gbm9kZSB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBsTm9kZS5cbiAgICovXG4gIG5hdGl2ZTogUk5vZGU7XG5cbiAgLyoqXG4gICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgQ29tcG9uZW50IG5vZGUuXG4gICAqL1xuICBjb21wb25lbnQ6IHt9fG51bGx8dW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBhY3RpdmUgZGlyZWN0aXZlcyB0aGF0IGV4aXN0IG9uIHRoaXMgZWxlbWVudC5cbiAgICovXG4gIGRpcmVjdGl2ZXM6IGFueVtdfG51bGx8dW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgbWFwIG9mIGxvY2FsIHJlZmVyZW5jZXMgKGxvY2FsIHJlZmVyZW5jZSBuYW1lID0+IGVsZW1lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlKSB0aGF0IGV4aXN0XG4gICAqIG9uIHRoaXMgZWxlbWVudC5cbiAgICovXG4gIGxvY2FsUmVmczoge1trZXk6IHN0cmluZ106IGFueX18bnVsbHx1bmRlZmluZWQ7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDataInRange, assertDefined, assertGreaterThan, assertLessThan } from '../../util/assert';\nimport { TYPE } from '../interfaces/container';\nimport { MONKEY_PATCH_KEY_NAME } from '../interfaces/context';\nimport { FLAGS, HEADER_OFFSET, HOST, PARENT, PREORDER_HOOK_FLAGS, TVIEW } from '../interfaces/view';\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n * space for it because the storage is sparse. This file contains utilities for dealing with such\n * data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n *      - This happens when we have style/class binding at a given location.\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = value[HOST];\n    }\n    return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Returns `LContainer` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function unwrapLContainer(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLContainer()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (value[TYPE] === true)\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Returns `StylingContext` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function unwrapStylingContext(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isStylingContext()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'number')\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\n/**\n * True if `value` is `StylingContext`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n */\nexport function isStylingContext(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'number';\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index, lView) {\n    return unwrapRNode(lView[index + HEADER_OFFSET]);\n}\nexport function getNativeByTNode(tNode, hostView) {\n    return unwrapRNode(hostView[tNode.index]);\n}\nexport function getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return view[TVIEW].data[index + HEADER_OFFSET];\n}\n/** Retrieves a value from any `LView` or `TData`. */\nexport function loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\nexport function getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    var slotValue = hostView[nodeIndex];\n    var lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\nexport function isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\nexport function isComponentDef(def) {\n    return def.template !== null;\n}\nexport function isRootView(target) {\n    return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\nexport function readPatchedLView(target) {\n    var value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : value.lView;\n    }\n    return null;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nexport function viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nexport function viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nexport function resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld191dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvdXRpbC92aWV3X3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDdEcsT0FBTyxFQUFhLElBQUksRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBVyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBS3RFLE9BQU8sRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBcUIsTUFBTSxFQUFFLG1CQUFtQixFQUFTLEtBQUssRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBSTVIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFFSDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQWtEO0lBQzVFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMzQixLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBUSxDQUFDO0tBQzVCO0lBQ0QsT0FBTyxLQUFjLENBQUM7QUFDeEIsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBa0Q7SUFDNUUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzNCLGtGQUFrRjtRQUNsRixpRUFBaUU7UUFDakUsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRO1lBQUUsT0FBTyxLQUFjLENBQUM7UUFDM0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQVEsQ0FBQztLQUM1QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVE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S0FBSyxDQUFDLHFCQUFzQixDQUFDLHVCQUF3QixDQUFDO0FBQ3JFLENBQUM7QUFFRCx5RUFBeUU7QUFDekUsTUFBTSxVQUFVLHVCQUF1QixDQUFDLElBQVc7SUFDakQsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxLQUFZO0lBQ2pELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2Fzc2VydERhdGFJblJhbmdlLCBhc3NlcnREZWZpbmVkLCBhc3NlcnRHcmVhdGVyVGhhbiwgYXNzZXJ0TGVzc1RoYW59IGZyb20gJy4uLy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7TENvbnRhaW5lciwgVFlQRX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250YWluZXInO1xuaW1wb3J0IHtMQ29udGV4dCwgTU9OS0VZX1BBVENIX0tFWV9OQU1FfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbnRleHQnO1xuaW1wb3J0IHtDb21wb25lbnREZWYsIERpcmVjdGl2ZURlZn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcbmltcG9ydCB7VE5vZGUsIFROb2RlRmxhZ3N9IGZyb20gJy4uL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge1JOb2RlfSBmcm9tICcuLi9pbnRlcmZhY2VzL3JlbmRlcmVyJztcbmltcG9ydCB7U3R5bGluZ0NvbnRleHR9IGZyb20gJy4uL2ludGVyZmFjZXMvc3R5bGluZyc7XG5pbXBvcnQge0ZMQUdTLCBIRUFERVJfT0ZGU0VULCBIT1NULCBMVmlldywgTFZpZXdGbGFncywgUEFSRU5ULCBQUkVPUkRFUl9IT09LX0ZMQUdTLCBURGF0YSwgVFZJRVd9IGZyb20gJy4uL2ludGVyZmFjZXMvdmlldyc7XG5cblxuXG4vKipcbiAqIEZvciBlZmZpY2llbmN5IHJlYXNvbnMgd2Ugb2Z0ZW4gcHV0IHNldmVyYWwgZGlmZmVyZW50IGRhdGEgdHlwZXMgKGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYCxcbiAqIGBTdHlsaW5nQ29udGV4dGApIGluIHNhbWUgbG9jYXRpb24gaW4gYExWaWV3YC4gVGhpcyBpcyBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gcHJlLWFsbG9jYXRlXG4gKiBzcGFjZSBmb3IgaXQgYmVjYXVzZSB0aGUgc3RvcmFnZSBpcyBzcGFyc2UuIFRoaXMgZmlsZSBjb250YWlucyB1dGlsaXRpZXMgZm9yIGRlYWxpbmcgd2l0aCBzdWNoXG4gKiBkYXRhIHR5cGVzLlxuICpcbiAqIEhvdyBkbyB3ZSBrbm93IHdoYXQgaXMgc3RvcmVkIGF0IGEgZ2l2ZW4gbG9jYXRpb24gaW4gYExWaWV3YC5cbiAqIC0gYEFycmF5LmlzQXJyYXkodmFsdWUpID09PSBmYWxzZWAgPT4gYFJOb2RlYCAoVGhlIG5vcm1hbCBzdG9yYWdlIHZhbHVlKVxuICogLSBgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPT09IHRydWVgID0+IHRoZW4gdGhlIGB2YWx1ZVswXWAgcmVwcmVzZW50cyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAqICAgLSBgdHlwZW9mIHZhbHVlW1RZUEVdID09PSAnb2JqZWN0J2AgPT4gYExWaWV3YFxuICogICAgICAtIFRoaXMgaGFwcGVucyB3aGVuIHdlIGhhdmUgYSBjb21wb25lbnQgYXQgYSBnaXZlbiBsb2NhdGlvblxuICogICAtIGB0eXBlb2YgdmFsdWVbVFlQRV0gPT09ICdudW1iZXInYCA9PiBgU3R5bGluZ0NvbnRleHRgXG4gKiAgICAgIC0gVGhpcyBoYXBwZW5zIHdoZW4gd2UgaGF2ZSBzdHlsZS9jbGFzcyBiaW5kaW5nIGF0IGEgZ2l2ZW4gbG9jYXRpb24uXG4gKiAgIC0gYHR5cGVvZiB2YWx1ZVtUWVBFXSA9PT0gdHJ1ZWAgPT4gYExDb250YWluZXJgXG4gKiAgICAgIC0gVGhpcyBoYXBwZW5zIHdoZW4gd2UgaGF2ZSBgTENvbnRhaW5lcmAgYmluZGluZyBhdCBhIGdpdmVuIGxvY2F0aW9uLlxuICpcbiAqXG4gKiBOT1RFOiBpdCBpcyBhc3N1bWVkIHRoYXQgYEFycmF5LmlzQXJyYXlgIGFuZCBgdHlwZW9mYCBvcGVyYXRpb25zIGFyZSB2ZXJ5IGVmZmljaWVudC5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYFJOb2RlYC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYCwgYFN0eWxpbmdDb250ZXh0YFxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwUk5vZGUodmFsdWU6IFJOb2RlIHwgTFZpZXcgfCBMQ29udGFpbmVyIHwgU3R5bGluZ0NvbnRleHQpOiBSTm9kZSB7XG4gIHdoaWxlIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhbHVlID0gdmFsdWVbSE9TVF0gYXMgYW55O1xuICB9XG4gIHJldHVybiB2YWx1ZSBhcyBSTm9kZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGBMVmlld2Agb3IgYG51bGxgIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYCwgYFN0eWxpbmdDb250ZXh0YFxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwTFZpZXcodmFsdWU6IFJOb2RlIHwgTFZpZXcgfCBMQ29udGFpbmVyIHwgU3R5bGluZ0NvbnRleHQpOiBMVmlld3xudWxsIHtcbiAgd2hpbGUgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gVGhpcyBjaGVjayBpcyBzYW1lIGFzIGBpc0xWaWV3KClgIGJ1dCB3ZSBkb24ndCBjYWxsIGF0IGFzIHdlIGRvbid0IHdhbnQgdG8gY2FsbFxuICAgIC8vIGBBcnJheS5pc0FycmF5KClgIHR3aWNlIGFuZCBnaXZlIEpJVGVyIG1vcmUgd29yayBmb3IgaW5saW5pbmcuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZVtUWVBFXSA9PT0gJ29iamVjdCcpIHJldHVybiB2YWx1ZSBhcyBMVmlldztcbiAgICB2YWx1ZSA9IHZhbHVlW0hPU1RdIGFzIGFueTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGBMQ29udGFpbmVyYCBvciBgbnVsbGAgaWYgbm90IGZvdW5kLlxuICogQHBhcmFtIHZhbHVlIHdyYXBwZWQgdmFsdWUgb2YgYFJOb2RlYCwgYExWaWV3YCwgYExDb250YWluZXJgLCBgU3R5bGluZ0NvbnRleHRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBMQ29udGFpbmVyKHZhbHVlOiBSTm9kZSB8IExWaWV3IHwgTENvbnRhaW5lciB8IFN0eWxpbmdDb250ZXh0KTogTENvbnRhaW5lcnxcbiAgICBudWxsIHtcbiAgd2hpbGUgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gVGhpcyBjaGVjayBpcyBzYW1lIGFzIGBpc0xDb250YWluZXIoKWAgYnV0IHdlIGRvbid0IGNhbGwgYXQgYXMgd2UgZG9uJ3Qgd2FudCB0byBjYWxsXG4gICAgLy8gYEFycmF5LmlzQXJyYXkoKWAgdHdpY2UgYW5kIGdpdmUgSklUZXIgbW9yZSB3b3JrIGZvciBpbmxpbmluZy5cbiAgICBpZiAodmFsdWVbVFlQRV0gPT09IHRydWUpIHJldHVybiB2YWx1ZSBhcyBMQ29udGFpbmVyO1xuICAgIHZhbHVlID0gdmFsdWVbSE9TVF0gYXMgYW55O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgYFN0eWxpbmdDb250ZXh0YCBvciBgbnVsbGAgaWYgbm90IGZvdW5kLlxuICogQHBhcmFtIHZhbHVlIHdyYXBwZWQgdmFsdWUgb2YgYFJOb2RlYCwgYExWaWV3YCwgYExDb250YWluZXJgLCBgU3R5bGluZ0NvbnRleHRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBTdHlsaW5nQ29udGV4dCh2YWx1ZTogUk5vZGUgfCBMVmlldyB8IExDb250YWluZXIgfCBTdHlsaW5nQ29udGV4dCk6XG4gICAgU3R5bGluZ0NvbnRleHR8bnVsbCB7XG4gIHdoaWxlIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFRoaXMgY2hlY2sgaXMgc2FtZSBhcyBgaXNTdHlsaW5nQ29udGV4dCgpYCBidXQgd2UgZG9uJ3QgY2FsbCBhdCBhcyB3ZSBkb24ndCB3YW50IHRvIGNhbGxcbiAgICAvLyBgQXJyYXkuaXNBcnJheSgpYCB0d2ljZSBhbmQgZ2l2ZSBKSVRlciBtb3JlIHdvcmsgZm9yIGlubGluaW5nLlxuICAgIGlmICh0eXBlb2YgdmFsdWVbVFlQRV0gPT09ICdudW1iZXInKSByZXR1cm4gdmFsdWUgYXMgU3R5bGluZ0NvbnRleHQ7XG4gICAgdmFsdWUgPSB2YWx1ZVtIT1NUXSBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVHJ1ZSBpZiBgdmFsdWVgIGlzIGBMVmlld2AuXG4gKiBAcGFyYW0gdmFsdWUgd3JhcHBlZCB2YWx1ZSBvZiBgUk5vZGVgLCBgTFZpZXdgLCBgTENvbnRhaW5lcmAsIGBTdHlsaW5nQ29udGV4dGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTFZpZXcodmFsdWU6IFJOb2RlIHwgTFZpZXcgfCBMQ29udGFpbmVyIHwgU3R5bGluZ0NvbnRleHQgfCB7fSB8IG51bGwpOlxuICAgIHZhbHVlIGlzIExWaWV3IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVtUWVBFXSA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogVHJ1ZSBpZiBgdmFsdWVgIGlzIGBMQ29udGFpbmVyYC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYCwgYFN0eWxpbmdDb250ZXh0YFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMQ29udGFpbmVyKHZhbHVlOiBSTm9kZSB8IExWaWV3IHwgTENvbnRhaW5lciB8IFN0eWxpbmdDb250ZXh0IHwge30gfCBudWxsKTpcbiAgICB2YWx1ZSBpcyBMQ29udGFpbmVyIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlW1RZUEVdID09PSB0cnVlO1xufVxuXG4vKipcbiAqIFRydWUgaWYgYHZhbHVlYCBpcyBgU3R5bGluZ0NvbnRleHRgLlxuICogQHBhcmFtIHZhbHVlIHdyYXBwZWQgdmFsdWUgb2YgYFJOb2RlYCwgYExWaWV3YCwgYExDb250YWluZXJgLCBgU3R5bGluZ0NvbnRleHRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0eWxpbmdDb250ZXh0KHZhbHVlOiBSTm9kZSB8IExWaWV3IHwgTENvbnRhaW5lciB8IFN0eWxpbmdDb250ZXh0IHwge30gfCBudWxsKTpcbiAgICB2YWx1ZSBpcyBTdHlsaW5nQ29udGV4dCB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbVFlQRV0gPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyBhbiBlbGVtZW50IHZhbHVlIGZyb20gdGhlIHByb3ZpZGVkIGB2aWV3RGF0YWAsIGJ5IHVud3JhcHBpbmdcbiAqIGZyb20gYW55IGNvbnRhaW5lcnMsIGNvbXBvbmVudCB2aWV3cywgb3Igc3R5bGUgY29udGV4dHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVCeUluZGV4KGluZGV4OiBudW1iZXIsIGxWaWV3OiBMVmlldyk6IFJOb2RlIHtcbiAgcmV0dXJuIHVud3JhcFJOb2RlKGxWaWV3W2luZGV4ICsgSEVBREVSX09GRlNFVF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0aXZlQnlUTm9kZSh0Tm9kZTogVE5vZGUsIGhvc3RWaWV3OiBMVmlldyk6IFJOb2RlIHtcbiAgcmV0dXJuIHVud3JhcFJOb2RlKGhvc3RWaWV3W3ROb2RlLmluZGV4XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUTm9kZShpbmRleDogbnVtYmVyLCB2aWV3OiBMVmlldyk6IFROb2RlIHtcbiAgbmdEZXZNb2RlICYmIGFzc2VydEdyZWF0ZXJUaGFuKGluZGV4LCAtMSwgJ3dyb25nIGluZGV4IGZvciBUTm9kZScpO1xuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TGVzc1RoYW4oaW5kZXgsIHZpZXdbVFZJRVddLmRhdGEubGVuZ3RoLCAnd3JvbmcgaW5kZXggZm9yIFROb2RlJyk7XG4gIHJldHVybiB2aWV3W1RWSUVXXS5kYXRhW2luZGV4ICsgSEVBREVSX09GRlNFVF0gYXMgVE5vZGU7XG59XG5cbi8qKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIGFueSBgTFZpZXdgIG9yIGBURGF0YWAuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZEludGVybmFsPFQ+KHZpZXc6IExWaWV3IHwgVERhdGEsIGluZGV4OiBudW1iZXIpOiBUIHtcbiAgbmdEZXZNb2RlICYmIGFzc2VydERhdGFJblJhbmdlKHZpZXcsIGluZGV4ICsgSEVBREVSX09GRlNFVCk7XG4gIHJldHVybiB2aWV3W2luZGV4ICsgSEVBREVSX09GRlNFVF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRWaWV3QnlJbmRleChub2RlSW5kZXg6IG51bWJlciwgaG9zdFZpZXc6IExWaWV3KTogTFZpZXcge1xuICAvLyBDb3VsZCBiZSBhbiBMVmlldyBvciBhbiBMQ29udGFpbmVyLiBJZiBMQ29udGFpbmVyLCB1bndyYXAgdG8gZmluZCBMVmlldy5cbiAgY29uc3Qgc2xvdFZhbHVlID0gaG9zdFZpZXdbbm9kZUluZGV4XTtcbiAgY29uc3QgbFZpZXcgPSBpc0xWaWV3KHNsb3RWYWx1ZSkgPyBzbG90VmFsdWUgOiBzbG90VmFsdWVbSE9TVF07XG4gIHJldHVybiBsVmlldztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29udGVudFF1ZXJ5SG9zdCh0Tm9kZTogVE5vZGUpOiBib29sZWFuIHtcbiAgcmV0dXJuICh0Tm9kZS5mbGFncyAmIFROb2RlRmxhZ3MuaGFzQ29udGVudFF1ZXJ5KSAhPT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9uZW50KHROb2RlOiBUTm9kZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKHROb2RlLmZsYWdzICYgVE5vZGVGbGFncy5pc0NvbXBvbmVudCkgPT09IFROb2RlRmxhZ3MuaXNDb21wb25lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvbmVudERlZjxUPihkZWY6IERpcmVjdGl2ZURlZjxUPik6IGRlZiBpcyBDb21wb25lbnREZWY8VD4ge1xuICByZXR1cm4gKGRlZiBhcyBDb21wb25lbnREZWY8VD4pLnRlbXBsYXRlICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSb290Vmlldyh0YXJnZXQ6IExWaWV3KTogYm9vbGVhbiB7XG4gIHJldHVybiAodGFyZ2V0W0ZMQUdTXSAmIExWaWV3RmxhZ3MuSXNSb290KSAhPT0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb25rZXktcGF0Y2ggdmFsdWUgZGF0YSBwcmVzZW50IG9uIHRoZSB0YXJnZXQgKHdoaWNoIGNvdWxkIGJlXG4gKiBhIGNvbXBvbmVudCwgZGlyZWN0aXZlIG9yIGEgRE9NIG5vZGUpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZFBhdGNoZWREYXRhKHRhcmdldDogYW55KTogTFZpZXd8TENvbnRleHR8bnVsbCB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRhcmdldCwgJ1RhcmdldCBleHBlY3RlZCcpO1xuICByZXR1cm4gdGFyZ2V0W01PTktFWV9QQVRDSF9LRVlfTkFNRV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkUGF0Y2hlZExWaWV3KHRhcmdldDogYW55KTogTFZpZXd8bnVsbCB7XG4gIGNvbnN0IHZhbHVlID0gcmVhZFBhdGNoZWREYXRhKHRhcmdldCk7XG4gIGlmICh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogKHZhbHVlIGFzIExDb250ZXh0KS5sVmlldztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3Igd2hldGhlciB0aGUgdmlldyBpcyBhdHRhY2hlZCB0byB0aGUgY2hhbmdlIGRldGVjdGlvbiB0cmVlLlxuICpcbiAqIE5vdGU6IFRoaXMgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmlldyBzaG91bGQgYmUgY2hlY2tlZCwgbm90IHdoZXRoZXIgaXQncyBpbnNlcnRlZFxuICogaW50byBhIGNvbnRhaW5lci4gRm9yIHRoYXQsIHlvdSdsbCB3YW50IGB2aWV3QXR0YWNoZWRUb0NvbnRhaW5lcmAgYmVsb3cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2aWV3QXR0YWNoZWRUb0NoYW5nZURldGVjdG9yKHZpZXc6IExWaWV3KTogYm9vbGVhbiB7XG4gIHJldHVybiAodmlld1tGTEFHU10gJiBMVmlld0ZsYWdzLkF0dGFjaGVkKSA9PT0gTFZpZXdGbGFncy5BdHRhY2hlZDtcbn1cblxuLyoqIFJldHVybnMgYSBib29sZWFuIGZvciB3aGV0aGVyIHRoZSB2aWV3IGlzIGF0dGFjaGVkIHRvIGEgY29udGFpbmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZpZXdBdHRhY2hlZFRvQ29udGFpbmVyKHZpZXc6IExWaWV3KTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0xDb250YWluZXIodmlld1tQQVJFTlRdKTtcbn1cblxuLyoqXG4gKiBSZXNldHMgdGhlIHByZS1vcmRlciBob29rIGZsYWdzIG9mIHRoZSB2aWV3LlxuICogQHBhcmFtIGxWaWV3IHRoZSBMVmlldyBvbiB3aGljaCB0aGUgZmxhZ3MgYXJlIHJlc2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFByZU9yZGVySG9va0ZsYWdzKGxWaWV3OiBMVmlldykge1xuICBsVmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSA9IDA7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from '../util/assert';\nimport { FLAGS, PREORDER_HOOK_FLAGS } from './interfaces/view';\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n * @param nodeIndex The index of the node to which the directive is attached\n * @param initialPreOrderHooksLength the number of pre-order hooks already registered before the\n * current process, used to know if the node index has to be added to the array. If it is -1,\n * the node index is never added.\n * @param initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n */\nexport function registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;\n    if (initialPreOrderHooksLength >= 0 &&\n        (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n        (onChanges || onInit || doCheck)) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n    }\n    if (initialPreOrderCheckHooksLength >= 0 &&\n        (!tView.preOrderCheckHooks ||\n            initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n        (onChanges || doCheck)) {\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n    }\n    if (onChanges) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n    }\n    if (onInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n    }\n    if (doCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            var directiveDef = tView.data[i];\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * @param lView The current view\n * @param tView Static data for the view containing the hooks to be executed\n * @param checkNoChangesMode Whether or not we're in checkNoChanges mode.\n * @param @param currentNodeIndex 2 cases depending the the value:\n * - undefined: execute hooks only from the saved index until the end of the array (pre-order case,\n * when flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n    }\n}\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param currentView The view instance data to run the hooks against\n * @param firstPassHooks An array of hooks to run if we're in the first view pass\n * @param checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param checkNoChangesMode Whether or not we're in no changes mode.\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n    if (checkNoChangesMode)\n        return;\n    var hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n        firstPassHooks :\n        checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n    }\n    // The init phase state must be always checked here as it may have been recursively updated\n    if (currentNodeIndex == null &&\n        (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n        initPhaseState !== 3 /* InitPhaseCompleted */) {\n        currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n        currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    var startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    var lastNodeIndexFound = 0;\n    for (var i = startIndex; i < arr.length; i++) {\n        var hook = arr[i + 1];\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = arr[i];\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            var isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    var isInitHook = arr[i] < 0;\n    var hook = arr[i + 1];\n    var directiveIndex = isInitHook ? -arr[i] : arr[i];\n    var directive = currentView[directiveIndex];\n    if (isInitHook) {\n        var indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively\n        // updated\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n            hook.call(directive);\n        }\n    }\n    else {\n        hook.call(directive);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2hvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUkzQyxPQUFPLEVBQUMsS0FBSyxFQUErQyxtQkFBbUIsRUFBMkIsTUFBTSxtQkFBbUIsQ0FBQztBQUlwSTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FDakMsY0FBc0IsRUFBRSxZQUErQixFQUFFLEtBQVksRUFBRSxTQUFpQixFQUN4RiwwQkFBa0MsRUFBRSwrQkFBdUM7SUFDN0UsU0FBUztRQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLDhDQUE4QyxDQUFDLENBQUM7SUFFeEYsSUFBQSxrQ0FBUyxFQUFFLDRCQUFNLEVBQUUsOEJBQU8sQ0FBaUI7SUFDbEQsSUFBSSwwQkFBMEIsSUFBSSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxJQUFJLDBCQUEwQixLQUFLLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ25GLENBQUMsU0FBUyxJQUFJLE1BQU0sSUFBSSxPQUFPLENBQUMsRUFBRTtRQUNwQyxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3JFO0lBRUQsSUFBSSwrQkFBK0IsSUFBSSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCO1lBQ3pCLCtCQUErQixLQUFLLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFDckUsQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFD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QUNqQixDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyx5Q0FBa0QsQ0FBQztZQUN4RixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsNkJBQWdDLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDdEUsV0FBVyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQztZQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RCO0tBQ0Y7U0FBTTtRQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2Fzc2VydEVxdWFsfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5cbmltcG9ydCB7RGlyZWN0aXZlRGVmfSBmcm9tICcuL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5pbXBvcnQge1ROb2RlfSBmcm9tICcuL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge0ZMQUdTLCBIb29rRGF0YSwgSW5pdFBoYXNlU3RhdGUsIExWaWV3LCBMVmlld0ZsYWdzLCBQUkVPUkRFUl9IT09LX0ZMQUdTLCBQcmVPcmRlckhvb2tGbGFncywgVFZpZXd9IGZyb20gJy4vaW50ZXJmYWNlcy92aWV3JztcblxuXG5cbi8qKlxuICogQWRkcyBhbGwgZGlyZWN0aXZlIGxpZmVjeWNsZSBob29rcyBmcm9tIHRoZSBnaXZlbiBgRGlyZWN0aXZlRGVmYCB0byB0aGUgZ2l2ZW4gYFRWaWV3YC5cbiAqXG4gKiBNdXN0IGJlIHJ1biAqb25seSogb24gdGhlIGZpcnN0IHRlbXBsYXRlIHBhc3MuXG4gKlxuICogU2V0cyB1cCB0aGUgcHJlLW9yZGVyIGhvb2tzIG9uIHRoZSBwcm92aWRlZCBgdFZpZXdgLFxuICogc2VlIHtAbGluayBIb29rRGF0YX0gZm9yIGRldGFpbHMgYWJvdXQgdGhlIGRhdGEgc3RydWN0dXJlLlxuICpcbiAqIEBwYXJhbSBkaXJlY3RpdmVJbmRleCBUaGUgaW5kZXggb2YgdGhlIGRpcmVjdGl2ZSBpbiBMVmlld1xuICogQHBhcmFtIGRpcmVjdGl2ZURlZiBUaGUgZGVmaW5pdGlvbiBjb250YWluaW5nIHRoZSBob29rcyB0byBzZXR1cCBpbiB0Vmlld1xuICogQHBhcmFtIHRWaWV3IFRoZSBjdXJyZW50IFRWaWV3XG4gKiBAcGFyYW0gbm9kZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgbm9kZSB0byB3aGljaCB0aGUgZGlyZWN0aXZlIGlzIGF0dGFjaGVkXG4gKiBAcGFyYW0gaW5pdGlhbFByZU9yZGVySG9va3NMZW5ndGggdGhlIG51bWJlciBvZiBwcmUtb3JkZXIgaG9va3MgYWxyZWFkeSByZWdpc3RlcmVkIGJlZm9yZSB0aGVcbiAqIGN1cnJlbnQgcHJvY2VzcywgdXNlZCB0byBrbm93IGlmIHRoZSBub2RlIGluZGV4IGhhcyB0byBiZSBhZGRlZCB0byB0aGUgYXJyYXkuIElmIGl0IGlzIC0xLFxuICogdGhlIG5vZGUgaW5kZXggaXMgbmV2ZXIgYWRkZWQuXG4gKiBAcGFyYW0gaW5pdGlhbFByZU9yZGVyQ2hlY2tIb29rc0xlbmd0aCBzYW1lIGFzIHByZXZpb3VzIGZvciBwcmUtb3JkZXIgY2hlY2sgaG9va3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyUHJlT3JkZXJIb29rcyhcbiAgICBkaXJlY3RpdmVJbmRleDogbnVtYmVyLCBkaXJlY3RpdmVEZWY6IERpcmVjdGl2ZURlZjxhbnk+LCB0VmlldzogVFZpZXcsIG5vZGVJbmRleDogbnVtYmVyLFxuICAgIGluaXRpYWxQcmVPcmRlckhvb2tzTGVuZ3RoOiBudW1iZXIsIGluaXRpYWxQcmVPcmRlckNoZWNrSG9va3NMZW5ndGg6IG51bWJlcik6IHZvaWQge1xuICBuZ0Rldk1vZGUgJiZcbiAgICAgIGFzc2VydEVxdWFsKHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzLCB0cnVlLCAnU2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIGZpcnN0IHRlbXBsYXRlIHBhc3MnKTtcblxuICBjb25zdCB7b25DaGFuZ2VzLCBvbkluaXQsIGRvQ2hlY2t9ID0gZGlyZWN0aXZlRGVmO1xuICBpZiAoaW5pdGlhbFByZU9yZGVySG9va3NMZW5ndGggPj0gMCAmJlxuICAgICAgKCF0Vmlldy5wcmVPcmRlckhvb2tzIHx8IGluaXRpYWxQcmVPcmRlckhvb2tzTGVuZ3RoID09PSB0Vmlldy5wcmVPcmRlckhvb2tzLmxlbmd0aCkgJiZcbiAgICAgIChvbkNoYW5nZXMgfHwgb25Jbml0IHx8IGRvQ2hlY2spKSB7XG4gICAgKHRWaWV3LnByZU9yZGVySG9va3MgfHwgKHRWaWV3LnByZU9yZGVySG9va3MgPSBbXSkpLnB1c2gobm9kZUluZGV4KTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJlT3JkZXJDaGVja0hvb2tzTGVuZ3RoID49IDAgJiZcbiAgICAgICghdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzIHx8XG4gICAgICAgaW5pdGlhbFByZU9yZGVyQ2hlY2tIb29rc0xlbmd0aCA9PT0gdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzLmxlbmd0aCkgJiZcbiAgICAgIChvbkNoYW5nZXMgfHwgZG9DaGVjaykpIHtcbiAgICAodFZpZXcucHJlT3JkZXJDaGVja0hvb2tzIHx8ICh0Vmlldy5wcmVPcmRlckNoZWNrSG9va3MgPSBbXSkpLnB1c2gobm9kZUluZGV4KTtcbiAgfVxuXG4gIGlmIChvbkNoYW5nZXMpIHtcbiAgICAodFZpZXcucHJlT3JkZXJIb29rcyB8fCAodFZpZXcucHJlT3JkZXJIb29rcyA9IFtdKSkucHVzaChkaXJlY3RpdmVJbmRleCwgb25DaGFuZ2VzKTtcbiAgICAodFZpZXcucHJlT3JkZXJDaGVja0hvb2tzIHx8ICh0Vmlldy5wcmVPcmRlckNoZWNrSG9va3MgPSBbXSkpLnB1c2goZGlyZWN0aXZlSW5kZXgsIG9uQ2hhbmdlcyk7XG4gIH1cblxuICBpZiAob25Jbml0KSB7XG4gICAgKHRWaWV3LnByZU9yZGVySG9va3MgfHwgKHRWaWV3LnByZU9yZGVySG9va3MgPSBbXSkpLnB1c2goLWRpcmVjdGl2ZUluZGV4LCBvbkluaXQpO1xuICB9XG5cbiAgaWYgKGRvQ2hlY2spIHtcbiAgICAodFZpZXcucHJlT3JkZXJIb29rcyB8fCAodFZpZXcucHJlT3JkZXJIb29rcyA9IFtdKSkucHVzaChkaXJlY3RpdmVJbmRleCwgZG9DaGVjayk7XG4gICAgKHRWaWV3LnByZU9yZGVyQ2hlY2tIb29rcyB8fCAodFZpZXcucHJlT3JkZXJDaGVja0hvb2tzID0gW10pKS5wdXNoKGRpcmVjdGl2ZUluZGV4LCBkb0NoZWNrKTtcbiAgfVxufVxuXG4vKipcbiAqXG4gKiBMb29wcyB0aHJvdWdoIHRoZSBkaXJlY3RpdmVzIG9uIHRoZSBwcm92aWRlZCBgdE5vZGVgIGFuZCBxdWV1ZXMgaG9va3MgdG8gYmVcbiAqIHJ1biB0aGF0IGFyZSBub3QgaW5pdGlhbGl6YXRpb24gaG9va3MuXG4gKlxuICogU2hvdWxkIGJlIGV4ZWN1dGVkIGR1cmluZyBgZWxlbWVudEVuZCgpYCBhbmQgc2ltaWxhciB0b1xuICogcHJlc2VydmUgaG9vayBleGVjdXRpb24gb3JkZXIuIENvbnRlbnQsIHZpZXcsIGFuZCBkZXN0cm95IGhvb2tzIGZvciBwcm9qZWN0ZWRcbiAqIGNvbXBvbmVudHMgYW5kIGRpcmVjdGl2ZXMgbXVzdCBiZSBjYWxsZWQgKmJlZm9yZSogdGhlaXIgaG9zdHMuXG4gKlxuICogU2V0cyB1cCB0aGUgY29udGVudCwgdmlldywgYW5kIGRlc3Ryb3kgaG9va3Mgb24gdGhlIHByb3ZpZGVkIGB0Vmlld2AsXG4gKiBzZWUge0BsaW5rIEhvb2tEYXRhfSBmb3IgZGV0YWlscyBhYm91dCB0aGUgZGF0YSBzdHJ1Y3R1cmUuXG4gKlxuICogTk9URTogVGhpcyBkb2VzIG5vdCBzZXQgdXAgYG9uQ2hhbmdlc2AsIGBvbkluaXRgIG9yIGBkb0NoZWNrYCwgdGhvc2UgYXJlIHNldCB1cFxuICogc2VwYXJhdGVseSBhdCBgZWxlbWVudFN0YXJ0YC5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgVGhlIGN1cnJlbnQgVFZpZXdcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgVE5vZGUgd2hvc2UgZGlyZWN0aXZlcyBhcmUgdG8gYmUgc2VhcmNoZWQgZm9yIGhvb2tzIHRvIHF1ZXVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclBvc3RPcmRlckhvb2tzKHRWaWV3OiBUVmlldywgdE5vZGU6IFROb2RlKTogdm9pZCB7XG4gIGlmICh0Vmlldy5maXJzdFRlbXBsYXRlUGFzcykge1xuICAgIC8vIEl0J3MgbmVjZXNzYXJ5IHRvIGxvb3AgdGhyb3VnaCB0aGUgZGlyZWN0aXZlcyBhdCBlbGVtZW50RW5kKCkgKHJhdGhlciB0aGFuIHByb2Nlc3NpbmcgaW5cbiAgICAvLyBkaXJlY3RpdmVDcmVhdGUpIHNvIHdlIGNhbiBwcmVzZXJ2ZSB0aGUgY3VycmVudCBob29rIG9yZGVyLiBDb250ZW50LCB2aWV3LCBhbmQgZGVzdHJveVxuICAgIC8vIGhvb2tzIGZvciBwcm9qZWN0ZWQgY29tcG9uZW50cyBhbmQgZGlyZWN0aXZlcyBtdXN0IGJlIGNhbGxlZCAqYmVmb3JlKiB0aGVpciBob3N0cy5cbiAgICBmb3IgKGxldCBpID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQsIGVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmVEZWYgPSB0Vmlldy5kYXRhW2ldIGFzIERpcmVjdGl2ZURlZjxhbnk+O1xuICAgICAgaWYgKGRpcmVjdGl2ZURlZi5hZnRlckNvbnRlbnRJbml0KSB7XG4gICAgICAgICh0Vmlldy5jb250ZW50SG9va3MgfHwgKHRWaWV3LmNvbnRlbnRIb29rcyA9IFtdKSkucHVzaCgtaSwgZGlyZWN0aXZlRGVmLmFmdGVyQ29udGVudEluaXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aXZlRGVmLmFmdGVyQ29udGVudENoZWNrZWQpIHtcbiAgICAgICAgKHRWaWV3LmNvbnRlbnRIb29rcyB8fCAodFZpZXcuY29udGVudEhvb2tzID0gW10pKS5wdXNoKGksIGRpcmVjdGl2ZURlZi5hZnRlckNvbnRlbnRDaGVja2VkKTtcbiAgICAgICAgKHRWaWV3LmNvbnRlbnRDaGVja0hvb2tzIHx8ICh0Vmlldy5jb250ZW50Q2hlY2tIb29rcyA9IFtcbiAgICAgICAgIF0pKS5wdXNoKGksIGRpcmVjdGl2ZURlZi5hZnRlckNvbnRlbnRDaGVja2VkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGl2ZURlZi5hZnRlclZpZXdJbml0KSB7XG4gICAgICAgICh0Vmlldy52aWV3SG9va3MgfHwgKHRWaWV3LnZpZXdIb29rcyA9IFtdKSkucHVzaCgtaSwgZGlyZWN0aXZlRGVmLmFmdGVyVmlld0luaXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aXZlRGVmLmFmdGVyVmlld0NoZWNrZWQpIHtcbiAgICAgICAgKHRWaWV3LnZpZXdIb29rcyB8fCAodFZpZXcudmlld0hvb2tzID0gW10pKS5wdXNoKGksIGRpcmVjdGl2ZURlZi5hZnRlclZpZXdDaGVja2VkKTtcbiAgICAgICAgKHRWaWV3LnZpZXdDaGVja0hvb2tzIHx8ICh0Vmlldy52aWV3Q2hlY2tIb29rcyA9IFtcbiAgICAgICAgIF0pKS5wdXNoKGksIGRpcmVjdGl2ZURlZi5hZnRlclZpZXdDaGVja2VkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGl2ZURlZi5vbkRlc3Ryb3kgIT0gbnVsbCkge1xuICAgICAgICAodFZpZXcuZGVzdHJveUhvb2tzIHx8ICh0Vmlldy5kZXN0cm95SG9va3MgPSBbXSkpLnB1c2goaSwgZGlyZWN0aXZlRGVmLm9uRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhlY3V0aW5nIGhvb2tzIHJlcXVpcmVzIGNvbXBsZXggbG9naWMgYXMgd2UgbmVlZCB0byBkZWFsIHdpdGggMiBjb25zdHJhaW50cy5cbiAqXG4gKiAxLiBJbml0IGhvb2tzIChuZ09uSW5pdCwgbmdBZnRlckNvbnRlbnRJbml0LCBuZ0FmdGVyVmlld0luaXQpIG11c3QgYWxsIGJlIGV4ZWN1dGVkIG9uY2UgYW5kIG9ubHlcbiAqIG9uY2UsIGFjcm9zcyBtYW55IGNoYW5nZSBkZXRlY3Rpb24gY3ljbGVzLiBUaGlzIG11c3QgYmUgdHJ1ZSBldmVuIGlmIHNvbWUgaG9va3MgdGhyb3csIG9yIGlmXG4gKiBzb21lIHJlY3Vyc2l2ZWx5IHRyaWdnZXIgYSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlLlxuICogVG8gc29sdmUgdGhhdCwgaXQgaXMgcmVxdWlyZWQgdG8gdHJhY2sgdGhlIHN0YXRlIG9mIHRoZSBleGVjdXRpb24gb2YgdGhlc2UgaW5pdCBob29rcy5cbiAqIFRoaXMgaXMgZG9uZSBieSBzdG9yaW5nIGFuZCBtYWludGFpbmluZyBmbGFncyBpbiB0aGUgdmlldzogdGhlIHtAbGluayBJbml0UGhhc2VTdGF0ZX0sXG4gKiBhbmQgdGhlIGluZGV4IHdpdGhpbiB0aGF0IHBoYXNlLiBUaGV5IGNhbiBiZSBzZWVuIGFzIGEgY3Vyc29yIGluIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICogW1tvbkluaXQxLCBvbkluaXQyXSwgW2FmdGVyQ29udGVudEluaXQxXSwgW2FmdGVyVmlld0luaXQxLCBhZnRlclZpZXdJbml0MiwgYWZ0ZXJWaWV3SW5pdDNdXVxuICogVGhleSBhcmUgYXJlIHN0b3JlZCBhcyBmbGFncyBpbiBMVmlld1tGTEFHU10uXG4gKlxuICogMi4gUHJlLW9yZGVyIGhvb2tzIGNhbiBiZSBleGVjdXRlZCBpbiBiYXRjaGVzLCBiZWNhdXNlIG9mIHRoZSBzZWxlY3QgaW5zdHJ1Y3Rpb24uXG4gKiBUbyBiZSBhYmxlIHRvIHBhdXNlIGFuZCByZXN1bWUgdGhlaXIgZXhlY3V0aW9uLCB3ZSBhbHNvIG5lZWQgc29tZSBzdGF0ZSBhYm91dCB0aGUgaG9vaydzIGFycmF5XG4gKiB0aGF0IGlzIGJlaW5nIHByb2Nlc3NlZDpcbiAqIC0gdGhlIGluZGV4IG9mIHRoZSBuZXh0IGhvb2sgdG8gYmUgZXhlY3V0ZWRcbiAqIC0gdGhlIG51bWJlciBvZiBpbml0IGhvb2tzIGFscmVhZHkgZm91bmQgaW4gdGhlIHByb2Nlc3NlZCBwYXJ0IG9mIHRoZSAgYXJyYXlcbiAqIFRoZXkgYXJlIGFyZSBzdG9yZWQgYXMgZmxhZ3MgaW4gTFZpZXdbUFJFT1JERVJfSE9PS19GTEFHU10uXG4gKi9cblxuLyoqXG4gKiBFeGVjdXRlcyBuZWNlc3NhcnkgaG9va3MgYXQgdGhlIHN0YXJ0IG9mIGV4ZWN1dGluZyBhIHRlbXBsYXRlLlxuICpcbiAqIEV4ZWN1dGVzIGhvb2tzIHRoYXQgYXJlIHRvIGJlIHJ1biBkdXJpbmcgdGhlIGluaXRpYWxpemF0aW9uIG9mIGEgZGlyZWN0aXZlIHN1Y2hcbiAqIGFzIGBvbkNoYW5nZXNgLCBgb25Jbml0YCwgYW5kIGBkb0NoZWNrYC5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIGN1cnJlbnQgdmlld1xuICogQHBhcmFtIHRWaWV3IFN0YXRpYyBkYXRhIGZvciB0aGUgdmlldyBjb250YWluaW5nIHRoZSBob29rcyB0byBiZSBleGVjdXRlZFxuICogQHBhcmFtIGNoZWNrTm9DaGFuZ2VzTW9kZSBXaGV0aGVyIG9yIG5vdCB3ZSdyZSBpbiBjaGVja05vQ2hhbmdlcyBtb2RlLlxuICogQHBhcmFtIEBwYXJhbSBjdXJyZW50Tm9kZUluZGV4IDIgY2FzZXMgZGVwZW5kaW5nIHRoZSB0aGUgdmFsdWU6XG4gKiAtIHVuZGVmaW5lZDogZXhlY3V0ZSBob29rcyBvbmx5IGZyb20gdGhlIHNhdmVkIGluZGV4IHVudGlsIHRoZSBlbmQgb2YgdGhlIGFycmF5IChwcmUtb3JkZXIgY2FzZSxcbiAqIHdoZW4gZmx1c2hpbmcgdGhlIHJlbWFpbmluZyBob29rcylcbiAqIC0gbnVtYmVyOiBleGVjdXRlIGhvb2tzIG9ubHkgZnJvbSB0aGUgc2F2ZWQgaW5kZXggdW50aWwgdGhhdCBub2RlIGluZGV4IGV4Y2x1c2l2ZSAocHJlLW9yZGVyXG4gKiBjYXNlLCB3aGVuIGV4ZWN1dGluZyBzZWxlY3QobnVtYmVyKSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVQcmVPcmRlckhvb2tzKFxuICAgIGN1cnJlbnRWaWV3OiBMVmlldywgdFZpZXc6IFRWaWV3LCBjaGVja05vQ2hhbmdlc01vZGU6IGJvb2xlYW4sXG4gICAgY3VycmVudE5vZGVJbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIGlmICghY2hlY2tOb0NoYW5nZXNNb2RlKSB7XG4gICAgZXhlY3V0ZUhvb2tzKFxuICAgICAgICBjdXJyZW50VmlldywgdFZpZXcucHJlT3JkZXJIb29rcywgdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzLCBjaGVja05vQ2hhbmdlc01vZGUsXG4gICAgICAgIEluaXRQaGFzZVN0YXRlLk9uSW5pdEhvb2tzVG9CZVJ1bixcbiAgICAgICAgY3VycmVudE5vZGVJbmRleCAhPT0gdW5kZWZpbmVkID8gY3VycmVudE5vZGVJbmRleCA6IG51bGwpO1xuICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgaG9va3MgYWdhaW5zdCB0aGUgZ2l2ZW4gYExWaWV3YCBiYXNlZCBvZmYgb2Ygd2hldGhlciBvciBub3RcbiAqIFRoaXMgaXMgdGhlIGZpcnN0IHBhc3MuXG4gKlxuICogQHBhcmFtIGN1cnJlbnRWaWV3IFRoZSB2aWV3IGluc3RhbmNlIGRhdGEgdG8gcnVuIHRoZSBob29rcyBhZ2FpbnN0XG4gKiBAcGFyYW0gZmlyc3RQYXNzSG9va3MgQW4gYXJyYXkgb2YgaG9va3MgdG8gcnVuIGlmIHdlJ3JlIGluIHRoZSBmaXJzdCB2aWV3IHBhc3NcbiAqIEBwYXJhbSBjaGVja0hvb2tzIEFuIEFycmF5IG9mIGhvb2tzIHRvIHJ1biBpZiB3ZSdyZSBub3QgaW4gdGhlIGZpcnN0IHZpZXcgcGFzcy5cbiAqIEBwYXJhbSBjaGVja05vQ2hhbmdlc01vZGUgV2hldGhlciBvciBub3Qgd2UncmUgaW4gbm8gY2hhbmdlcyBtb2RlLlxuICogQHBhcmFtIGluaXRQaGFzZVN0YXRlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBpbml0IHBoYXNlXG4gKiBAcGFyYW0gY3VycmVudE5vZGVJbmRleCAzIGNhc2VzIGRlcGVuZGluZyB0aGUgdGhlIHZhbHVlOlxuICogLSB1bmRlZmluZWQ6IGFsbCBob29rcyBmcm9tIHRoZSBhcnJheSBzaG91bGQgYmUgZXhlY3V0ZWQgKHBvc3Qtb3JkZXIgY2FzZSlcbiAqIC0gbnVsbDogZXhlY3V0ZSBob29rcyBvbmx5IGZyb20gdGhlIHNhdmVkIGluZGV4IHVudGlsIHRoZSBlbmQgb2YgdGhlIGFycmF5IChwcmUtb3JkZXIgY2FzZSwgd2hlblxuICogZmx1c2hpbmcgdGhlIHJlbWFpbmluZyBob29rcylcbiAqIC0gbnVtYmVyOiBleGVjdXRlIGhvb2tzIG9ubHkgZnJvbSB0aGUgc2F2ZWQgaW5kZXggdW50aWwgdGhhdCBub2RlIGluZGV4IGV4Y2x1c2l2ZSAocHJlLW9yZGVyXG4gKiBjYXNlLCB3aGVuIGV4ZWN1dGluZyBzZWxlY3QobnVtYmVyKSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVIb29rcyhcbiAgICBjdXJyZW50VmlldzogTFZpZXcsIGZpcnN0UGFzc0hvb2tzOiBIb29rRGF0YSB8IG51bGwsIGNoZWNrSG9va3M6IEhvb2tEYXRhIHwgbnVsbCxcbiAgICBjaGVja05vQ2hhbmdlc01vZGU6IGJvb2xlYW4sIGluaXRQaGFzZVN0YXRlOiBJbml0UGhhc2VTdGF0ZSxcbiAgICBjdXJyZW50Tm9kZUluZGV4OiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIGlmIChjaGVja05vQ2hhbmdlc01vZGUpIHJldHVybjtcbiAgY29uc3QgaG9va3NUb0NhbGwgPSAoY3VycmVudFZpZXdbRkxBR1NdICYgTFZpZXdGbGFncy5Jbml0UGhhc2VTdGF0ZU1hc2spID09PSBpbml0UGhhc2VTdGF0ZSA/XG4gICAgICBmaXJzdFBhc3NIb29rcyA6XG4gICAgICBjaGVja0hvb2tzO1xuICBpZiAoaG9va3NUb0NhbGwpIHtcbiAgICBjYWxsSG9va3MoY3VycmVudFZpZXcsIGhvb2tzVG9DYWxsLCBpbml0UGhhc2VTdGF0ZSwgY3VycmVudE5vZGVJbmRleCk7XG4gIH1cbiAgLy8gVGhlIGluaXQgcGhhc2Ugc3RhdGUgbXVzdCBiZSBhbHdheXMgY2hlY2tlZCBoZXJlIGFzIGl0IG1heSBoYXZlIGJlZW4gcmVjdXJzaXZlbHkgdXBkYXRlZFxuICBpZiAoY3VycmVudE5vZGVJbmRleCA9PSBudWxsICYmXG4gICAgICAoY3VycmVudFZpZXdbRkxBR1NdICYgTFZpZXdGbGFncy5Jbml0UGhhc2VTdGF0ZU1hc2spID09PSBpbml0UGhhc2VTdGF0ZSAmJlxuICAgICAgaW5pdFBoYXNlU3RhdGUgIT09IEluaXRQaGFzZVN0YXRlLkluaXRQaGFzZUNvbXBsZXRlZCkge1xuICAgIGN1cnJlbnRWaWV3W0ZMQUdTXSAmPSBMVmlld0ZsYWdzLkluZGV4V2l0aGluSW5pdFBoYXNlUmVzZXQ7XG4gICAgY3VycmVudFZpZXdbRkxBR1NdICs9IExWaWV3RmxhZ3MuSW5pdFBoYXNlU3RhdGVJbmNyZW1lbnRlcjtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxzIGxpZmVjeWNsZSBob29rcyB3aXRoIHRoZWlyIGNvbnRleHRzLCBza2lwcGluZyBpbml0IGhvb2tzIGlmIGl0J3Mgbm90XG4gKiB0aGUgZmlyc3QgTFZpZXcgcGFzc1xuICpcbiAqIEBwYXJhbSBjdXJyZW50VmlldyBUaGUgY3VycmVudCB2aWV3XG4gKiBAcGFyYW0gYXJyIFRoZSBhcnJheSBpbiB3aGljaCB0aGUgaG9va3MgYXJlIGZvdW5kXG4gKiBAcGFyYW0gaW5pdFBoYXNlU3RhdGUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGluaXQgcGhhc2VcbiAqIEBwYXJhbSBjdXJyZW50Tm9kZUluZGV4IDMgY2FzZXMgZGVwZW5kaW5nIHRoZSB0aGUgdmFsdWU6XG4gKiAtIHVuZGVmaW5lZDogYWxsIGhvb2tzIGZyb20gdGhlIGFycmF5IHNob3VsZCBiZSBleGVjdXRlZCAocG9zdC1vcmRlciBjYXNlKVxuICogLSBudWxsOiBleGVjdXRlIGhvb2tzIG9ubHkgZnJvbSB0aGUgc2F2ZWQgaW5kZXggdW50aWwgdGhlIGVuZCBvZiB0aGUgYXJyYXkgKHByZS1vcmRlciBjYXNlLCB3aGVuXG4gKiBmbHVzaGluZyB0aGUgcmVtYWluaW5nIGhvb2tzKVxuICogLSBudW1iZXI6IGV4ZWN1dGUgaG9va3Mgb25seSBmcm9tIHRoZSBzYXZlZCBpbmRleCB1bnRpbCB0aGF0IG5vZGUgaW5kZXggZXhjbHVzaXZlIChwcmUtb3JkZXJcbiAqIGNhc2UsIHdoZW4gZXhlY3V0aW5nIHNlbGVjdChudW1iZXIpKVxuICovXG5mdW5jdGlvbiBjYWxsSG9va3MoXG4gICAgY3VycmVudFZpZXc6IExWaWV3LCBhcnI6IEhvb2tEYXRhLCBpbml0UGhhc2U6IEluaXRQaGFzZVN0YXRlLFxuICAgIGN1cnJlbnROb2RlSW5kZXg6IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IGN1cnJlbnROb2RlSW5kZXggIT09IHVuZGVmaW5lZCA/XG4gICAgICAoY3VycmVudFZpZXdbUFJFT1JERVJfSE9PS19GTEFHU10gJiBQcmVPcmRlckhvb2tGbGFncy5JbmRleE9mVGhlTmV4dFByZU9yZGVySG9va01hc2tNYXNrKSA6XG4gICAgICAwO1xuICBjb25zdCBub2RlSW5kZXhMaW1pdCA9IGN1cnJlbnROb2RlSW5kZXggIT0gbnVsbCA/IGN1cnJlbnROb2RlSW5kZXggOiAtMTtcbiAgbGV0IGxhc3ROb2RlSW5kZXhGb3VuZCA9IDA7XG4gIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaG9vayA9IGFycltpICsgMV0gYXMoKSA9PiB2b2lkO1xuICAgIGlmICh0eXBlb2YgaG9vayA9PT0gJ251bWJlcicpIHtcbiAgICAgIGxhc3ROb2RlSW5kZXhGb3VuZCA9IGFycltpXSBhcyBudW1iZXI7XG4gICAgICBpZiAoY3VycmVudE5vZGVJbmRleCAhPSBudWxsICYmIGxhc3ROb2RlSW5kZXhGb3VuZCA+PSBjdXJyZW50Tm9kZUluZGV4KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc0luaXRIb29rID0gYXJyW2ldIDwgMDtcbiAgICAgIGlmIChpc0luaXRIb29rKVxuICAgICAgICBjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSArPSBQcmVPcmRlckhvb2tGbGFncy5OdW1iZXJPZkluaXRIb29rc0NhbGxlZEluY3JlbWVudGVyO1xuICAgICAgaWYgKGxhc3ROb2RlSW5kZXhGb3VuZCA8IG5vZGVJbmRleExpbWl0IHx8IG5vZGVJbmRleExpbWl0ID09IC0xKSB7XG4gICAgICAgIGNhbGxIb29rKGN1cnJlbnRWaWV3LCBpbml0UGhhc2UsIGFyciwgaSk7XG4gICAgICAgIGN1cnJlbnRWaWV3W1BSRU9SREVSX0hPT0tfRkxBR1NdID1cbiAgICAgICAgICAgIChjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSAmIFByZU9yZGVySG9va0ZsYWdzLk51bWJlck9mSW5pdEhvb2tzQ2FsbGVkTWFzaykgKyBpICtcbiAgICAgICAgICAgIDI7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZSBvbmUgaG9vayBhZ2FpbnN0IHRoZSBjdXJyZW50IGBMVmlld2AuXG4gKlxuICogQHBhcmFtIGN1cnJlbnRWaWV3IFRoZSBjdXJyZW50IHZpZXdcbiAqIEBwYXJhbSBpbml0UGhhc2VTdGF0ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaW5pdCBwaGFzZVxuICogQHBhcmFtIGFyciBUaGUgYXJyYXkgaW4gd2hpY2ggdGhlIGhvb2tzIGFyZSBmb3VuZFxuICogQHBhcmFtIGkgVGhlIGN1cnJlbnQgaW5kZXggd2l0aGluIHRoZSBob29rIGRhdGEgYXJyYXlcbiAqL1xuZnVuY3Rpb24gY2FsbEhvb2soY3VycmVudFZpZXc6IExWaWV3LCBpbml0UGhhc2U6IEluaXRQaGFzZVN0YXRlLCBhcnI6IEhvb2tEYXRhLCBpOiBudW1iZXIpIHtcbiAgY29uc3QgaXNJbml0SG9vayA9IGFycltpXSA8IDA7XG4gIGNvbnN0IGhvb2sgPSBhcnJbaSArIDFdIGFzKCkgPT4gdm9pZDtcbiAgY29uc3QgZGlyZWN0aXZlSW5kZXggPSBpc0luaXRIb29rID8gLWFycltpXSA6IGFycltpXSBhcyBudW1iZXI7XG4gIGNvbnN0IGRpcmVjdGl2ZSA9IGN1cnJlbnRWaWV3W2RpcmVjdGl2ZUluZGV4XTtcbiAgaWYgKGlzSW5pdEhvb2spIHtcbiAgICBjb25zdCBpbmRleFdpdGhpbnRJbml0UGhhc2UgPSBjdXJyZW50Vmlld1tGTEFHU10gPj4gTFZpZXdGbGFncy5JbmRleFdpdGhpbkluaXRQaGFzZVNoaWZ0O1xuICAgIC8vIFRoZSBpbml0IHBoYXNlIHN0YXRlIG11c3QgYmUgYWx3YXlzIGNoZWNrZWQgaGVyZSBhcyBpdCBtYXkgaGF2ZSBiZWVuIHJlY3Vyc2l2ZWx5XG4gICAgLy8gdXBkYXRlZFxuICAgIGlmIChpbmRleFdpdGhpbnRJbml0UGhhc2UgPFxuICAgICAgICAgICAgKGN1cnJlbnRWaWV3W1BSRU9SREVSX0hPT0tfRkxBR1NdID4+IFByZU9yZGVySG9va0ZsYWdzLk51bWJlck9mSW5pdEhvb2tzQ2FsbGVkU2hpZnQpICYmXG4gICAgICAgIChjdXJyZW50Vmlld1tGTEFHU10gJiBMVmlld0ZsYWdzLkluaXRQaGFzZVN0YXRlTWFzaykgPT09IGluaXRQaGFzZSkge1xuICAgICAgY3VycmVudFZpZXdbRkxBR1NdICs9IExWaWV3RmxhZ3MuSW5kZXhXaXRoaW5Jbml0UGhhc2VJbmNyZW1lbnRlcjtcbiAgICAgIGhvb2suY2FsbChkaXJlY3RpdmUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBob29rLmNhbGwoZGlyZWN0aXZlKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaW50ZXJmYWNlcy9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7R0FNRztBQTRESCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxhQUFhLENBQUM7QUFFckQsaUZBQWlGO0FBQ2pGLDBCQUEwQjtBQUMxQixNQUFNLENBQUMsSUFBTSw2QkFBNkIsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuXG4vKipcbiAqIEV4cHJlc3NlcyBhIHNpbmdsZSBDU1MgU2VsZWN0b3IuXG4gKlxuICogQmVnaW5uaW5nIG9mIGFycmF5XG4gKiAtIEZpcnN0IGluZGV4OiBlbGVtZW50IG5hbWVcbiAqIC0gU3Vic2VxdWVudCBvZGQgaW5kaWNlczogYXR0ciBrZXlzXG4gKiAtIFN1YnNlcXVlbnQgZXZlbiBpbmRpY2VzOiBhdHRyIHZhbHVlc1xuICpcbiAqIEFmdGVyIFNlbGVjdG9yRmxhZ3MuQ0xBU1MgZmxhZ1xuICogLSBDbGFzcyBuYW1lIHZhbHVlc1xuICpcbiAqIFNlbGVjdG9yRmxhZ3MuTk9UIGZsYWdcbiAqIC0gQ2hhbmdlcyB0aGUgbW9kZSB0byBOT1RcbiAqIC0gQ2FuIGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgZmxhZ3MgdG8gc2V0IHRoZSBlbGVtZW50IC8gYXR0ciAvIGNsYXNzIG1vZGVcbiAqXG4gKiBlLmcuIFNlbGVjdG9yRmxhZ3MuTk9UIHwgU2VsZWN0b3JGbGFncy5FTEVNRU5UXG4gKlxuICogRXhhbXBsZTpcbiAqIE9yaWdpbmFsOiBgZGl2LmZvby5iYXJbYXR0cjE9dmFsMV1bYXR0cjJdYFxuICogUGFyc2VkOiBbJ2RpdicsICdhdHRyMScsICd2YWwxJywgJ2F0dHIyJywgJycsIFNlbGVjdG9yRmxhZ3MuQ0xBU1MsICdmb28nLCAnYmFyJ11cbiAqXG4gKiBPcmlnaW5hbDogJ2RpdlthdHRyMV06bm90KC5mb29bYXR0cjJdKVxuICogUGFyc2VkOiBbXG4gKiAgJ2RpdicsICdhdHRyMScsICcnLFxuICogIFNlbGVjdG9yRmxhZ3MuTk9UIHwgU2VsZWN0b3JGbGFncy5BVFRSSUJVVEUgJ2F0dHIyJywgJycsIFNlbGVjdG9yRmxhZ3MuQ0xBU1MsICdmb28nXG4gKiBdXG4gKlxuICogU2VlIG1vcmUgZXhhbXBsZXMgaW4gbm9kZV9zZWxlY3Rvcl9tYXRjaGVyX3NwZWMudHNcbiAqL1xuZXhwb3J0IHR5cGUgQ3NzU2VsZWN0b3IgPSAoc3RyaW5nIHwgU2VsZWN0b3JGbGFncylbXTtcblxuLyoqXG4gKiBBIGxpc3Qgb2YgQ3NzU2VsZWN0b3JzLlxuICpcbiAqIEEgZGlyZWN0aXZlIG9yIGNvbXBvbmVudCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RvcnMuIFRoaXMgdHlwZSBpcyB1c2VkIGZvclxuICogZGlyZWN0aXZlIGRlZnMgc28gYW55IG9mIHRoZSBzZWxlY3RvcnMgaW4gdGhlIGxpc3Qgd2lsbCBtYXRjaCB0aGF0IGRpcmVjdGl2ZS5cbiAqXG4gKiBPcmlnaW5hbDogJ2Zvcm0sIFtuZ0Zvcm1dJ1xuICogUGFyc2VkOiBbWydmb3JtJ10sIFsnJywgJ25nRm9ybScsICcnXV1cbiAqL1xuZXhwb3J0IHR5cGUgQ3NzU2VsZWN0b3JMaXN0ID0gQ3NzU2VsZWN0b3JbXTtcblxuLyoqIEZsYWdzIHVzZWQgdG8gYnVpbGQgdXAgQ3NzU2VsZWN0b3JzICovXG5leHBvcnQgY29uc3QgZW51bSBTZWxlY3RvckZsYWdzIHtcbiAgLyoqIEluZGljYXRlcyB0aGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgYSBuZXcgbmVnYXRpdmUgc2VsZWN0b3IgKi9cbiAgTk9UID0gMGIwMDAxLFxuXG4gIC8qKiBNb2RlIGZvciBtYXRjaGluZyBhdHRyaWJ1dGVzICovXG4gIEFUVFJJQlVURSA9IDBiMDAxMCxcblxuICAvKiogTW9kZSBmb3IgbWF0Y2hpbmcgdGFnIG5hbWVzICovXG4gIEVMRU1FTlQgPSAwYjAxMDAsXG5cbiAgLyoqIE1vZGUgZm9yIG1hdGNoaW5nIGNsYXNzIG5hbWVzICovXG4gIENMQVNTID0gMGIxMDAwLFxufVxuXG5leHBvcnQgY29uc3QgTkdfUFJPSkVDVF9BU19BVFRSX05BTUUgPSAnbmdQcm9qZWN0QXMnO1xuXG4vLyBOb3RlOiBUaGlzIGhhY2sgaXMgbmVjZXNzYXJ5IHNvIHdlIGRvbid0IGVycm9uZW91c2x5IGdldCBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbi8vIGZhaWx1cmUgYmFzZWQgb24gdHlwZXMuXG5leHBvcnQgY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQgPSAxO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: cleanup once the code is merged in angular/angular\nexport var RendererStyleFlags3;\n(function (RendererStyleFlags3) {\n    RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\n    RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport function isProceduralRenderer(renderer) {\n    return !!(renderer.listen);\n}\nexport var domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport { assertDomNode } from '../util/assert';\nimport { EMPTY_ARRAY } from './empty';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, HEADER_OFFSET, HOST, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, getNativeByTNode, readPatchedData, unwrapRNode } from './util/view_utils';\n/** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target) {\n    var mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            var lView = mpValue;\n            var nodeIndex = void 0;\n            var component = undefined;\n            var directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, target);\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            var native = unwrapRNode(lView[nodeIndex]);\n            var existingCtx = readPatchedData(native);\n            var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (var i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        var rElement = target;\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        var parent_1 = rElement;\n        while (parent_1 = parent_1.parentNode) {\n            var parentContext = readPatchedData(parent_1);\n            if (parentContext) {\n                var lView = void 0;\n                if (Array.isArray(parentContext)) {\n                    lView = parentContext;\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                var index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    var native = unwrapRNode(lView[index]);\n                    var context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView: lView,\n        nodeIndex: nodeIndex,\n        native: native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance) {\n    var lView = readPatchedData(componentInstance);\n    var view;\n    if (Array.isArray(lView)) {\n        var nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        var context = createLContext(lView, nodeIndex, view[HOST]);\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        var context = lView;\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\nexport function isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\nexport function isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        var native = getNativeByTNode(tNode, lView);\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n    var componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (var i = 0; i < componentIndices.length; i++) {\n            var elementComponentIndex = componentIndices[i];\n            var componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        var rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        var directiveIndexStart = tNode.directiveStart;\n        var directiveIndexEnd = tNode.directiveEnd;\n        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    var directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    var directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\nexport function getComponentAtNodeIndex(nodeIndex, lView) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    var directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView, nodeIndex) {\n    var tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode && tNode.localNames) {\n        var result = {};\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport { getLContext } from '../context_discovery';\nimport { HEADER_OFFSET, HOST } from '../interfaces/view';\nimport { getTNode, isStylingContext } from '../util/view_utils';\nimport { CorePlayerHandler } from './core_player_handler';\nexport var ANIMATION_PROP_PREFIX = '@';\nexport function createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n    var context = [\n        wrappedElement || null,\n        0,\n        [],\n        initialStyles || [null, null],\n        initialClasses || [null, null],\n        [0, 0],\n        [0],\n        [0],\n        null,\n    ];\n    // whenever a context is created there is always a `null` directive\n    // that is registered (which is a placeholder for the \"template\").\n    allocateDirectiveIntoContext(context, null);\n    return context;\n}\n/**\n * Allocates (registers) a directive into the directive registry within the provided styling\n * context.\n *\n * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n * (as well as static style and class attributes) a directive, component or template\n * is marked as the owner. When an owner is determined (this happens when the template\n * is first passed over) the directive owner is allocated into the styling context. When\n * this happens, each owner gets its own index value. This then ensures that once any\n * style and/or class binding are assigned into the context then they are marked to\n * that directive's index value.\n *\n * @param context the target StylingContext\n * @param directiveRef the directive that will be allocated into the context\n * @returns the index where the directive was inserted into\n */\nexport function allocateDirectiveIntoContext(context, directiveRef) {\n    // this is a new directive which we have not seen yet.\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var i = dirs.length;\n    // we preemptively make space into the directives array and then\n    // assign values slot-by-slot to ensure that if the directive ordering\n    // changes then it will still function\n    dirs.push(null, null, null, null);\n    dirs[i + 0 /* DirectiveValueOffset */] = directiveRef;\n    dirs[i + 2 /* DirtyFlagOffset */] = false;\n    dirs[i + 3 /* StyleSanitizerOffset */] = null;\n    // -1 is used to signal that the directive has been allocated, but\n    // no actual style or class bindings have been registered yet...\n    dirs[i + 1 /* SinglePropValuesIndexOffset */] = -1;\n    return i;\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nexport function allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    var context = templateStyleContext.slice();\n    // the HEADER values contain arrays which also need\n    // to be copied over into the new context\n    for (var i = 0; i < 9 /* SingleStylesStartPosition */; i++) {\n        var value = templateStyleContext[i];\n        if (Array.isArray(value)) {\n            context[i] = value.slice();\n        }\n    }\n    context[0 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nexport function getStylingContext(index, viewData) {\n    var storageIndex = index;\n    var slotValue = viewData[storageIndex];\n    var wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = slotValue[HOST];\n    }\n    if (isStylingContext(wrapper)) {\n        return wrapper;\n    }\n    else {\n        // This is an LView or an LContainer\n        var stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\nexport function isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\nexport function hasClassInput(tNode) {\n    return (tNode.flags & 8 /* hasClassInput */) !== 0;\n}\nexport function hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n}\nexport function forceClassesAsString(classes) {\n    if (classes && typeof classes !== 'string') {\n        classes = Object.keys(classes).join(' ');\n    }\n    return classes || '';\n}\nexport function forceStylesAsString(styles) {\n    var str = '';\n    if (styles) {\n        var props = Object.keys(styles);\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            str += (i ? ';' : '') + (prop + \":\" + styles[prop]);\n        }\n    }\n    return str;\n}\nexport function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, function () {\n            var index = playerContext.indexOf(player);\n            var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\nexport function getPlayersInternal(playerContext) {\n    var players = [];\n    var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        var player = playerContext[i];\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push(playerContext[i]);\n    }\n    return players;\n}\nexport function getOrCreatePlayerContext(target, context) {\n    context = context || getLContext(target);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    var lView = context.lView, nodeIndex = context.nodeIndex;\n    var stylingContext = getStylingContext(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\nexport function getPlayerContext(stylingContext) {\n    return stylingContext[8 /* PlayerContext */];\n}\nexport function allocPlayerContext(data) {\n    return data[8 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\nexport function throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NO_PARENT_INJECTOR } from '../interfaces/injector';\nimport { DECLARATION_VIEW } from '../interfaces/view';\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\nexport function getParentInjectorIndex(parentLocation) {\n    return parentLocation & 32767 /* InjectorIndexMask */;\n}\nexport function getParentInjectorViewOffset(parentLocation) {\n    return parentLocation >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location, startView) {\n    var viewOffset = getParentInjectorViewOffset(location);\n    var parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = parentView[DECLARATION_VIEW];\n        viewOffset--;\n    }\n    return parentView;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3JfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3V0aWwvaW5qZWN0b3JfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLGtCQUFrQixFQUEwRCxNQUFNLHdCQUF3QixDQUFDO0FBQ25ILE9BQU8sRUFBQyxnQkFBZ0IsRUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELHlGQUF5RjtBQUN6RixNQUFNLFVBQVUsaUJBQWlCLENBQUMsY0FBd0M7SUFDeEUsT0FBTyxjQUFjLEtBQUssa0JBQWtCLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxjQUF3QztJQUM3RSxPQUFRLGNBQWdDLGdDQUFrRCxDQUFDO0FBQzdGLENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsY0FBd0M7SUFDbEYsT0FBUSxjQUFnQyw0QkFBaUQsQ0FBQztBQUM1RixDQUFDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsUUFBa0MsRUFBRSxTQUFnQjtJQUN4RixJQUFJLFVBQVUsR0FBRywyQkFBMkIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDM0Isd0ZBQXdGO0lBQ3hGLDJGQUEyRjtJQUMzRixzRkFBc0Y7SUFDdEYsNEJBQTRCO0lBQzVCLE9BQU8sVUFBVSxHQUFHLENBQUMsRUFBRTtRQUNyQixVQUFVLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFHLENBQUM7UUFDNUMsVUFBVSxFQUFFLENBQUM7S0FDZDtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge05PX1BBUkVOVF9JTkpFQ1RPUiwgUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uLCBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb25GbGFnc30gZnJvbSAnLi4vaW50ZXJmYWNlcy9pbmplY3Rvcic7XG5pbXBvcnQge0RFQ0xBUkFUSU9OX1ZJRVcsIExWaWV3fSBmcm9tICcuLi9pbnRlcmZhY2VzL3ZpZXcnO1xuLy8vIFBhcmVudCBJbmplY3RvciBVdGlscyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmV4cG9ydCBmdW5jdGlvbiBoYXNQYXJlbnRJbmplY3RvcihwYXJlbnRMb2NhdGlvbjogUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBwYXJlbnRMb2NhdGlvbiAhPT0gTk9fUEFSRU5UX0lOSkVDVE9SO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50SW5qZWN0b3JJbmRleChwYXJlbnRMb2NhdGlvbjogUmVsYXRpdmVJbmplY3RvckxvY2F0aW9uKTogbnVtYmVyIHtcbiAgcmV0dXJuIChwYXJlbnRMb2NhdGlvbiBhcyBhbnkgYXMgbnVtYmVyKSAmIFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbkZsYWdzLkluamVjdG9ySW5kZXhNYXNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50SW5qZWN0b3JWaWV3T2Zmc2V0KHBhcmVudExvY2F0aW9uOiBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb24pOiBudW1iZXIge1xuICByZXR1cm4gKHBhcmVudExvY2F0aW9uIGFzIGFueSBhcyBudW1iZXIpID4+IFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbkZsYWdzLlZpZXdPZmZzZXRTaGlmdDtcbn1cblxuLyoqXG4gKiBVbndyYXBzIGEgcGFyZW50IGluamVjdG9yIGxvY2F0aW9uIG51bWJlciB0byBmaW5kIHRoZSB2aWV3IG9mZnNldCBmcm9tIHRoZSBjdXJyZW50IGluamVjdG9yLFxuICogdGhlbiB3YWxrcyB1cCB0aGUgZGVjbGFyYXRpb24gdmlldyB0cmVlIHVudGlsIHRoZSB2aWV3IGlzIGZvdW5kIHRoYXQgY29udGFpbnMgdGhlIHBhcmVudFxuICogaW5qZWN0b3IuXG4gKlxuICogQHBhcmFtIGxvY2F0aW9uIFRoZSBsb2NhdGlvbiBvZiB0aGUgcGFyZW50IGluamVjdG9yLCB3aGljaCBjb250YWlucyB0aGUgdmlldyBvZmZzZXRcbiAqIEBwYXJhbSBzdGFydFZpZXcgVGhlIExWaWV3IGluc3RhbmNlIGZyb20gd2hpY2ggdG8gc3RhcnQgd2Fsa2luZyB1cCB0aGUgdmlldyB0cmVlXG4gKiBAcmV0dXJucyBUaGUgTFZpZXcgaW5zdGFuY2UgdGhhdCBjb250YWlucyB0aGUgcGFyZW50IGluamVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnRJbmplY3RvclZpZXcobG9jYXRpb246IFJlbGF0aXZlSW5qZWN0b3JMb2NhdGlvbiwgc3RhcnRWaWV3OiBMVmlldyk6IExWaWV3IHtcbiAgbGV0IHZpZXdPZmZzZXQgPSBnZXRQYXJlbnRJbmplY3RvclZpZXdPZmZzZXQobG9jYXRpb24pO1xuICBsZXQgcGFyZW50VmlldyA9IHN0YXJ0VmlldztcbiAgLy8gRm9yIG1vc3QgY2FzZXMsIHRoZSBwYXJlbnQgaW5qZWN0b3IgY2FuIGJlIGZvdW5kIG9uIHRoZSBob3N0IG5vZGUgKGUuZy4gZm9yIGNvbXBvbmVudFxuICAvLyBvciBjb250YWluZXIpLCBidXQgd2UgbXVzdCBrZWVwIHRoZSBsb29wIGhlcmUgdG8gc3VwcG9ydCB0aGUgcmFyZXIgY2FzZSBvZiBkZWVwbHkgbmVzdGVkXG4gIC8vIDxuZy10ZW1wbGF0ZT4gdGFncyBvciBpbmxpbmUgdmlld3MsIHdoZXJlIHRoZSBwYXJlbnQgaW5qZWN0b3IgbWlnaHQgbGl2ZSBtYW55IHZpZXdzXG4gIC8vIGFib3ZlIHRoZSBjaGlsZCBpbmplY3Rvci5cbiAgd2hpbGUgKHZpZXdPZmZzZXQgPiAwKSB7XG4gICAgcGFyZW50VmlldyA9IHBhcmVudFZpZXdbREVDTEFSQVRJT05fVklFV10gITtcbiAgICB2aWV3T2Zmc2V0LS07XG4gIH1cbiAgcmV0dXJuIHBhcmVudFZpZXc7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from '../../util/assert';\nimport { assertLView } from '../assert';\nimport { CONTEXT, DECLARATION_VIEW, FLAGS, PARENT, T_HOST } from '../interfaces/view';\nimport { isLContainer, isLView, readPatchedLView } from './view_utils';\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nexport function getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    var parent = lView[PARENT];\n    return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nexport function getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n        lView = getLViewParent(lView);\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param lView LView for which we want a host element node\n * @returns The host node\n */\nexport function findComponentView(lView) {\n    var rootTNode = lView[T_HOST];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = lView[DECLARATION_VIEW];\n        rootTNode = lView[T_HOST];\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nexport function getRootContext(viewOrComponent) {\n    var rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return rootView[CONTEXT];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld190cmF2ZXJzYWxfdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3V0aWwvdmlld190cmF2ZXJzYWxfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFdEMsT0FBTyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBZSxNQUFNLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVwSCxPQUFPLEVBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUdyRTs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUFZO0lBQ3pDLFNBQVMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMxRCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLGdCQUE0QjtJQUN0RCxTQUFTLElBQUksYUFBYSxDQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzFELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUcsQ0FBQztJQUNoRyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxtQkFBb0IsQ0FBQyxFQUFFO1FBQ25ELEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFHLENBQUM7S0FDakM7SUFDRCxTQUFTLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQVk7SUFDNUMsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLE9BQU8sU0FBUyxJQUFJLFNBQVMsQ0FBQyxJQUFJLGlCQUFtQixFQUFFO1FBQ3JELFNBQVMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUMvRSxLQUFLLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFHLENBQUM7UUFDbEMsU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMzQjtJQUNELFNBQVMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxlQUEyQjtJQUN4RCxJQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUMsU0FBUztRQUNMLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsc0RBQXNELENBQUMsQ0FBQztJQUM3RixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQWdCLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi8uLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge2Fzc2VydExWaWV3fSBmcm9tICcuLi9hc3NlcnQnO1xuaW1wb3J0IHtUTm9kZVR5cGV9IGZyb20gJy4uL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge0NPTlRFWFQsIERFQ0xBUkFUSU9OX1ZJRVcsIEZMQUdTLCBMVmlldywgTFZpZXdGbGFncywgUEFSRU5ULCBSb290Q29udGV4dCwgVF9IT1NUfSBmcm9tICcuLi9pbnRlcmZhY2VzL3ZpZXcnO1xuXG5pbXBvcnQge2lzTENvbnRhaW5lciwgaXNMVmlldywgcmVhZFBhdGNoZWRMVmlld30gZnJvbSAnLi92aWV3X3V0aWxzJztcblxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBMVmlldyBvZiB0aGUgcGFzc2VkIExWaWV3LCBpZiB0aGUgUEFSRU5UIGlzIGFuIExDb250YWluZXIsIHdpbGwgZ2V0IHRoZSBwYXJlbnQgb2ZcbiAqIHRoYXQgTENvbnRhaW5lciwgd2hpY2ggaXMgYW4gTFZpZXdcbiAqIEBwYXJhbSBsVmlldyB0aGUgbFZpZXcgd2hvc2UgcGFyZW50IHRvIGdldFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TFZpZXdQYXJlbnQobFZpZXc6IExWaWV3KTogTFZpZXd8bnVsbCB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRMVmlldyhsVmlldyk7XG4gIGNvbnN0IHBhcmVudCA9IGxWaWV3W1BBUkVOVF07XG4gIHJldHVybiBpc0xDb250YWluZXIocGFyZW50KSA/IHBhcmVudFtQQVJFTlRdICEgOiBwYXJlbnQ7XG59XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIHJvb3QgdmlldyBmcm9tIGFueSBjb21wb25lbnQgb3IgYExWaWV3YCBieSB3YWxraW5nIHRoZSBwYXJlbnQgYExWaWV3YCB1bnRpbFxuICogcmVhY2hpbmcgdGhlIHJvb3QgYExWaWV3YC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50T3JMVmlldyBhbnkgY29tcG9uZW50IG9yIGBMVmlld2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJvb3RWaWV3KGNvbXBvbmVudE9yTFZpZXc6IExWaWV3IHwge30pOiBMVmlldyB7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGNvbXBvbmVudE9yTFZpZXcsICdjb21wb25lbnQnKTtcbiAgbGV0IGxWaWV3ID0gaXNMVmlldyhjb21wb25lbnRPckxWaWV3KSA/IGNvbXBvbmVudE9yTFZpZXcgOiByZWFkUGF0Y2hlZExWaWV3KGNvbXBvbmVudE9yTFZpZXcpICE7XG4gIHdoaWxlIChsVmlldyAmJiAhKGxWaWV3W0ZMQUdTXSAmIExWaWV3RmxhZ3MuSXNSb290KSkge1xuICAgIGxWaWV3ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXcpICE7XG4gIH1cbiAgbmdEZXZNb2RlICYmIGFzc2VydExWaWV3KGxWaWV3KTtcbiAgcmV0dXJuIGxWaWV3O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgY3VycmVudCB2aWV3LCBmaW5kcyB0aGUgbmVhcmVzdCBjb21wb25lbnQncyBob3N0IChMRWxlbWVudCkuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGZvciB3aGljaCB3ZSB3YW50IGEgaG9zdCBlbGVtZW50IG5vZGVcbiAqIEByZXR1cm5zIFRoZSBob3N0IG5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb21wb25lbnRWaWV3KGxWaWV3OiBMVmlldyk6IExWaWV3IHtcbiAgbGV0IHJvb3RUTm9kZSA9IGxWaWV3W1RfSE9TVF07XG4gIHdoaWxlIChyb290VE5vZGUgJiYgcm9vdFROb2RlLnR5cGUgPT09IFROb2RlVHlwZS5WaWV3KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQobFZpZXdbREVDTEFSQVRJT05fVklFV10sICdsVmlld1tERUNMQVJBVElPTl9WSUVXXScpO1xuICAgIGxWaWV3ID0gbFZpZXdbREVDTEFSQVRJT05fVklFV10gITtcbiAgICByb290VE5vZGUgPSBsVmlld1tUX0hPU1RdO1xuICB9XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRMVmlldyhsVmlldyk7XG4gIHJldHVybiBsVmlldztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBgUm9vdENvbnRleHRgIGluc3RhbmNlIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gKiB0aGUgYXBwbGljYXRpb24gd2hlcmUgdGhlIHRhcmdldCBpcyBzaXR1YXRlZC4gSXQgZG9lcyB0aGlzIGJ5IHdhbGtpbmcgdGhlIHBhcmVudCB2aWV3cyB1bnRpbCBpdFxuICogZ2V0cyB0byB0aGUgcm9vdCB2aWV3LCB0aGVuIGdldHRpbmcgdGhlIGNvbnRleHQgb2ZmIG9mIHRoYXQuXG4gKlxuICogQHBhcmFtIHZpZXdPckNvbXBvbmVudCB0aGUgYExWaWV3YCBvciBjb21wb25lbnQgdG8gZ2V0IHRoZSByb290IGNvbnRleHQgZm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9vdENvbnRleHQodmlld09yQ29tcG9uZW50OiBMVmlldyB8IHt9KTogUm9vdENvbnRleHQge1xuICBjb25zdCByb290VmlldyA9IGdldFJvb3RWaWV3KHZpZXdPckNvbXBvbmVudCk7XG4gIG5nRGV2TW9kZSAmJlxuICAgICAgYXNzZXJ0RGVmaW5lZChyb290Vmlld1tDT05URVhUXSwgJ1Jvb3RWaWV3IGhhcyBubyBjb250ZXh0LiBQZXJoYXBzIGl0IGlzIGRpc2Nvbm5lY3RlZD8nKTtcbiAgcmV0dXJuIHJvb3RWaWV3W0NPTlRFWFRdIGFzIFJvb3RDb250ZXh0O1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectFlags } from '../di';\nimport { injectRootLimpMode, setInjectImplementation } from '../di/injector_compatibility';\nimport { getInjectableDef, getInjectorDef } from '../di/interface/defs';\nimport { assertDefined, assertEqual } from '../util/assert';\nimport { getComponentDef, getDirectiveDef, getPipeDef } from './definition';\nimport { NG_ELEMENT_ID } from './fields';\nimport { NO_PARENT_INJECTOR, PARENT_INJECTOR, TNODE, isFactory } from './interfaces/injector';\nimport { DECLARATION_VIEW, INJECTOR, TVIEW, T_HOST } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { getLView, getPreviousOrParentTNode, setTNodeAndViewData } from './state';\nimport { isNameOnlyAttributeMarker } from './util/attrs_utils';\nimport { getParentInjectorIndex, getParentInjectorView, hasParentInjector } from './util/injector_utils';\nimport { renderStringify } from './util/misc_utils';\nimport { findComponentView } from './util/view_traversal_utils';\nimport { isComponent, isComponentDef } from './util/view_utils';\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nvar includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n    var oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nvar BLOOM_SIZE = 256;\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** Counter used to generate unique IDs for directives. */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    var bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    var b7 = bloomBit & 0x80;\n    var b6 = bloomBit & 0x40;\n    var b5 = bloomBit & 0x20;\n    var tData = tView.data;\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param hostView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(tNode, hostView) {\n    var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    var tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    var parentLoc = getParentInjectorLocation(tNode, hostView);\n    var parentIndex = getParentInjectorIndex(parentLoc);\n    var parentLView = getParentInjectorView(parentLoc, hostView);\n    var injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        var parentData = parentLView[TVIEW].data;\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (var i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nexport function getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n */\nexport function getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return tNode.parent.injectorIndex; // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    var hostTNode = view[T_HOST];\n    var viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = view[DECLARATION_VIEW];\n        hostTNode = view ? view[T_HOST] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        -1;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    var attrs = tNode.attrs;\n    if (attrs) {\n        var attrsLength = attrs.length;\n        var i = 0;\n        while (i < attrsLength) {\n            var value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                if (value === 1 /* Classes */ && attrNameToInject === 'class') {\n                    var accumulatedClasses = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedClasses += ' ' + attrs[i++];\n                    }\n                    return accumulatedClasses.trim();\n                }\n                else if (value === 2 /* Styles */ && attrNameToInject === 'style') {\n                    var accumulatedStyles = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedStyles += attrs[i++] + \": \" + attrs[i++] + \"; \";\n                    }\n                    return accumulatedStyles.trim();\n                }\n                else {\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        i++;\n                    }\n                }\n            }\n            else if (value === attrNameToInject) {\n                return attrs[i + 1];\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (tNode) {\n        var bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            var savePreviousOrParentTNode = getPreviousOrParentTNode();\n            var saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                var value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(\"No provider for \" + renderStringify(token) + \"!\");\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            if (bloomHash === -1) {\n                // `-1` is a special value used to identify `Injector` types.\n                return new NodeInjector(tNode, lView);\n            }\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            var previousTView = null;\n            var injectorIndex = getInjectorIndex(tNode, lView);\n            var parentLocation = NO_PARENT_INJECTOR;\n            var hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                var tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        var moduleInjector = lView[INJECTOR];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        var previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(\"NodeInjector: NOT_FOUND [\" + renderStringify(token) + \"]\");\n    }\n}\nvar NOT_FOUND = {};\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    var currentTView = lView[TVIEW];\n    var tNode = currentTView.data[injectorIndex + TNODE];\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    var canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    var isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    var injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, tNode);\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param lView The view we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    var tView = lView[TVIEW];\n    var nodeProviderIndexes = tNode.providerIndexes;\n    var tInjectables = tView.data;\n    var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    var directivesStart = tNode.directiveStart;\n    var directiveEnd = tNode.directiveEnd;\n    var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (var i = startingIndex; i < endIndex; i++) {\n        var providerTokenOrDef = tInjectables[i];\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && providerTokenOrDef.type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        var dirDef = tInjectables[directivesStart];\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n* Retrieve or instantiate the injectable from the `lData` at particular `index`.\n*\n* This function checks to see if the value has already been instantiated and if so returns the\n* cached `injectable`. Otherwise if it detects that the value is still a factory it\n* instantiates the `injectable` and caches the value.\n*/\nexport function getNodeInjectable(tData, lData, index, tNode) {\n    var value = lData[index];\n    if (isFactory(value)) {\n        var factory = value;\n        if (factory.resolving) {\n            throw new Error(\"Circular dep for \" + renderStringify(tData[index]));\n        }\n        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        var previousInjectImplementation = void 0;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        var saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    var tokenId = token[NG_ELEMENT_ID];\n    // Negative token IDs are used for special objects such as `Injector`\n    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\nexport function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var mask = 1 << bloomHash;\n    var b7 = bloomHash & 0x80;\n    var b6 = bloomHash & 0x40;\n    var b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    var value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    NodeInjector.prototype.get = function (token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nexport function getFactoryOf(type) {\n    var typeAny = type;\n    var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\nexport function getInheritedFactory(type) {\n    var proto = Object.getPrototypeOf(type.prototype).constructor;\n    var factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nvar NgModuleRef = /** @class */ (function () {\n    function NgModuleRef() {\n    }\n    return NgModuleRef;\n}());\nexport { NgModuleRef };\n/**\n * @publicApi\n */\nvar NgModuleFactory = /** @class */ (function () {\n    function NgModuleFactory() {\n    }\n    return NgModuleFactory;\n}());\nexport { NgModuleFactory };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfbW9kdWxlX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBUUg7Ozs7Ozs7R0FPRztBQUNIO0lBQUE7SUEwQkEsQ0FBQztJQUFELGtCQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQzs7QUFRRDs7R0FFRztBQUNIO0lBQUE7SUFHQSxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyfSBmcm9tICcuL2NvbXBvbmVudF9mYWN0b3J5X3Jlc29sdmVyJztcblxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW5zdGFuY2Ugb2YgYW4gTmdNb2R1bGUgY3JlYXRlZCB2aWEgYSB7QGxpbmsgTmdNb2R1bGVGYWN0b3J5fS5cbiAqXG4gKiBgTmdNb2R1bGVSZWZgIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgTmdNb2R1bGUgSW5zdGFuY2UgYXMgd2VsbCBvdGhlciBvYmplY3RzIHJlbGF0ZWQgdG8gdGhpc1xuICogTmdNb2R1bGUgSW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmdNb2R1bGVSZWY8VD4ge1xuICAvKipcbiAgICogVGhlIGluamVjdG9yIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBwcm92aWRlcnMgb2YgdGhlIE5nTW9kdWxlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGluamVjdG9yKCk6IEluamVjdG9yO1xuXG4gIC8qKlxuICAgKiBUaGUgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHRvIGdldCBob2xkIG9mIHRoZSBDb21wb25lbnRGYWN0b3JpZXNcbiAgICogZGVjbGFyZWQgaW4gdGhlIGBlbnRyeUNvbXBvbmVudHNgIHByb3BlcnR5IG9mIHRoZSBtb2R1bGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcblxuICAvKipcbiAgICogVGhlIE5nTW9kdWxlIGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGluc3RhbmNlKCk6IFQ7XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBtb2R1bGUgaW5zdGFuY2UgYW5kIGFsbCBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICovXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIHJlZ2lzdGVyIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBtb2R1bGUgaXMgZGVzdHJveWVkLlxuICAgKi9cbiAgYWJzdHJhY3Qgb25EZXN0cm95KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbE5nTW9kdWxlUmVmPFQ+IGV4dGVuZHMgTmdNb2R1bGVSZWY8VD4ge1xuICAvLyBOb3RlOiB3ZSBhcmUgdXNpbmcgdGhlIHByZWZpeCBfIGFzIE5nTW9kdWxlRGF0YSBpcyBhbiBOZ01vZHVsZVJlZiBhbmQgdGhlcmVmb3JlIGRpcmVjdGx5XG4gIC8vIGV4cG9zZWQgdG8gdGhlIHVzZXIuXG4gIF9ib290c3RyYXBDb21wb25lbnRzOiBUeXBlPGFueT5bXTtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ01vZHVsZUZhY3Rvcnk8VD4ge1xuICBhYnN0cmFjdCBnZXQgbW9kdWxlVHlwZSgpOiBUeXBlPFQ+O1xuICBhYnN0cmFjdCBjcmVhdGUocGFyZW50SW5qZWN0b3I6IEluamVjdG9yfG51bGwpOiBOZ01vZHVsZVJlZjxUPjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var ERROR_TYPE = 'ngType';\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport var ERROR_LOGGER = 'ngErrorLogger';\nexport function wrappedError(message, originalError) {\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    var error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUNwRCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN0RCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDO0FBRzVDLE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBZSxFQUFFLGFBQWtCO0lBQzlELElBQU0sR0FBRyxHQUNGLE9BQU8scUJBQWUsYUFBYSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFHLENBQUM7SUFDdEcsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLEtBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUNyRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBjb25zdCBFUlJPUl9UWVBFID0gJ25nVHlwZSc7XG5leHBvcnQgY29uc3QgRVJST1JfREVCVUdfQ09OVEVYVCA9ICduZ0RlYnVnQ29udGV4dCc7XG5leHBvcnQgY29uc3QgRVJST1JfT1JJR0lOQUxfRVJST1IgPSAnbmdPcmlnaW5hbEVycm9yJztcbmV4cG9ydCBjb25zdCBFUlJPUl9MT0dHRVIgPSAnbmdFcnJvckxvZ2dlcic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZWRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIG9yaWdpbmFsRXJyb3I6IGFueSk6IEVycm9yIHtcbiAgY29uc3QgbXNnID1cbiAgICAgIGAke21lc3NhZ2V9IGNhdXNlZCBieTogJHtvcmlnaW5hbEVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBvcmlnaW5hbEVycm9yLm1lc3NhZ2U6IG9yaWdpbmFsRXJyb3IgfWA7XG4gIGNvbnN0IGVycm9yID0gRXJyb3IobXNnKTtcbiAgKGVycm9yIGFzIGFueSlbRVJST1JfT1JJR0lOQUxfRVJST1JdID0gb3JpZ2luYWxFcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, ERROR_ORIGINAL_ERROR, ERROR_TYPE } from './util/errors';\nexport function getType(error) {\n    return error[ERROR_TYPE];\n}\nexport function getDebugContext(error) {\n    return error[ERROR_DEBUG_CONTEXT];\n}\nexport function getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\nexport function getErrorLogger(error) {\n    return error[ERROR_LOGGER] || defaultErrorLogger;\n}\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, tslib_1.__spread(values));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUdsRyxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQVk7SUFDbEMsT0FBUSxLQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBWTtJQUMxQyxPQUFRLEtBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsS0FBWTtJQUMzQyxPQUFRLEtBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQVk7SUFDekMsT0FBUSxLQUFhLENBQUMsWUFBWSxDQUFDLElBQUksa0JBQWtCLENBQUM7QUFDNUQsQ0FBQztBQUdELFNBQVMsa0JBQWtCLENBQUMsT0FBZ0I7SUFBRSxnQkFBZ0I7U0FBaEIsVUFBZ0IsRUFBaEIscUJBQWdCLEVBQWhCLElBQWdCO1FBQWhCLCtCQUFnQjs7SUFDdEQsT0FBTyxDQUFDLEtBQUssT0FBYixPQUFPLG1CQUFXLE1BQU0sR0FBRTtBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0VSUk9SX0RFQlVHX0NPTlRFWFQsIEVSUk9SX0xPR0dFUiwgRVJST1JfT1JJR0lOQUxfRVJST1IsIEVSUk9SX1RZUEV9IGZyb20gJy4vdXRpbC9lcnJvcnMnO1xuaW1wb3J0IHtEZWJ1Z0NvbnRleHR9IGZyb20gJy4vdmlldyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKGVycm9yOiBFcnJvcik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIChlcnJvciBhcyBhbnkpW0VSUk9SX1RZUEVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdDb250ZXh0KGVycm9yOiBFcnJvcik6IERlYnVnQ29udGV4dCB7XG4gIHJldHVybiAoZXJyb3IgYXMgYW55KVtFUlJPUl9ERUJVR19DT05URVhUXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yaWdpbmFsRXJyb3IoZXJyb3I6IEVycm9yKTogRXJyb3Ige1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfT1JJR0lOQUxfRVJST1JdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JMb2dnZXIoZXJyb3I6IEVycm9yKTogKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pID0+IHZvaWQge1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfTE9HR0VSXSB8fCBkZWZhdWx0RXJyb3JMb2dnZXI7XG59XG5cblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yTG9nZ2VyKGNvbnNvbGU6IENvbnNvbGUsIC4uLnZhbHVlczogYW55W10pIHtcbiAgKDxhbnk+Y29uc29sZS5lcnJvcikoLi4udmFsdWVzKTtcbn0iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    ErrorHandler.prototype.handleError = function (error) {\n        var originalError = this._findOriginalError(error);\n        var context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    ErrorHandler.prototype._findContext = function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    ErrorHandler.prototype._findOriginalError = function (error) {\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\nexport { ErrorHandler };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2Vycm9yX2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFJM0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUNIO0lBQUE7UUFDRTs7V0FFRztRQUNILGFBQVEsR0FBWSxPQUFPLENBQUM7SUFxQzlCLENBQUM7SUFuQ0Msa0NBQVcsR0FBWCxVQUFZLEtBQVU7UUFDcEIsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsNkVBQTZFO1FBQzdFLHdFQUF3RTtRQUN4RSxJQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksYUFBYSxFQUFFO1lBQ2pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLG1DQUFZLEdBQVosVUFBYSxLQUFVO1FBQ3JCLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIseUNBQWtCLEdBQWxCLFVBQW1CLEtBQVk7UUFDN0IsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDL0IsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge2dldERlYnVnQ29udGV4dCwgZ2V0RXJyb3JMb2dnZXIsIGdldE9yaWdpbmFsRXJyb3J9IGZyb20gJy4vZXJyb3JzJztcblxuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBob29rIGZvciBjZW50cmFsaXplZCBleGNlcHRpb24gaGFuZGxpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEVycm9ySGFuZGxlcmAgcHJpbnRzIGVycm9yIG1lc3NhZ2VzIHRvIHRoZSBgY29uc29sZWAuIFRvXG4gKiBpbnRlcmNlcHQgZXJyb3IgaGFuZGxpbmcsIHdyaXRlIGEgY3VzdG9tIGV4Y2VwdGlvbiBoYW5kbGVyIHRoYXQgcmVwbGFjZXMgdGhpcyBkZWZhdWx0IGFzXG4gKiBhcHByb3ByaWF0ZSBmb3IgeW91ciBhcHAuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBjbGFzcyBNeUVycm9ySGFuZGxlciBpbXBsZW1lbnRzIEVycm9ySGFuZGxlciB7XG4gKiAgIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIGV4Y2VwdGlvblxuICogICB9XG4gKiB9XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEVycm9ySGFuZGxlciwgdXNlQ2xhc3M6IE15RXJyb3JIYW5kbGVyfV1cbiAqIH0pXG4gKiBjbGFzcyBNeU1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX2NvbnNvbGU6IENvbnNvbGUgPSBjb25zb2xlO1xuXG4gIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gdGhpcy5fZmluZE9yaWdpbmFsRXJyb3IoZXJyb3IpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9maW5kQ29udGV4dChlcnJvcik7XG4gICAgLy8gTm90ZTogQnJvd3NlciBjb25zb2xlcyBzaG93IHRoZSBwbGFjZSBmcm9tIHdoZXJlIGNvbnNvbGUuZXJyb3Igd2FzIGNhbGxlZC5cbiAgICAvLyBXZSBjYW4gdXNlIHRoaXMgdG8gZ2l2ZSB1c2VycyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci5cbiAgICBjb25zdCBlcnJvckxvZ2dlciA9IGdldEVycm9yTG9nZ2VyKGVycm9yKTtcblxuICAgIGVycm9yTG9nZ2VyKHRoaXMuX2NvbnNvbGUsIGBFUlJPUmAsIGVycm9yKTtcbiAgICBpZiAob3JpZ2luYWxFcnJvcikge1xuICAgICAgZXJyb3JMb2dnZXIodGhpcy5fY29uc29sZSwgYE9SSUdJTkFMIEVSUk9SYCwgb3JpZ2luYWxFcnJvcik7XG4gICAgfVxuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBlcnJvckxvZ2dlcih0aGlzLl9jb25zb2xlLCAnRVJST1IgQ09OVEVYVCcsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2ZpbmRDb250ZXh0KGVycm9yOiBhbnkpOiBhbnkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldERlYnVnQ29udGV4dChlcnJvcikgPyBnZXREZWJ1Z0NvbnRleHQoZXJyb3IpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmluZENvbnRleHQoZ2V0T3JpZ2luYWxFcnJvcihlcnJvcikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluZE9yaWdpbmFsRXJyb3IoZXJyb3I6IEVycm9yKTogYW55IHtcbiAgICBsZXQgZSA9IGdldE9yaWdpbmFsRXJyb3IoZXJyb3IpO1xuICAgIHdoaWxlIChlICYmIGdldE9yaWdpbmFsRXJyb3IoZSkpIHtcbiAgICAgIGUgPSBnZXRPcmlnaW5hbEVycm9yKGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** A special value which designates that a value has not changed. */\nexport var NO_CHANGE = {};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy90b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBT0gscUVBQXFFO0FBQ3JFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxFQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgTk9fQ0hBTkdFIHtcbiAgLy8gVGhpcyBpcyBhIGJyYW5kIHRoYXQgZW5zdXJlcyB0aGF0IHRoaXMgdHlwZSBjYW4gbmV2ZXIgbWF0Y2ggYW55dGhpbmcgZWxzZVxuICBicmFuZDogJ05PX0NIQU5HRSc7XG59XG5cbi8qKiBBIHNwZWNpYWwgdmFsdWUgd2hpY2ggZGVzaWduYXRlcyB0aGF0IGEgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLiAqL1xuZXhwb3J0IGNvbnN0IE5PX0NIQU5HRSA9IHt9IGFzIE5PX0NIQU5HRTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../empty';\nimport { RendererStyleFlags3, isProceduralRenderer } from '../interfaces/renderer';\nimport { NO_CHANGE } from '../tokens';\nimport { getRootContext } from '../util/view_traversal_utils';\nimport { BoundPlayerFactory } from './player_factory';\nimport { addPlayerInternal, allocPlayerContext, allocateDirectiveIntoContext, createEmptyStylingContext, getPlayerContext } from './util';\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * It also includes code that will allow style binding code to operate within host\n * bindings for components/directives.\n *\n * There are many different ways in which these functions below are called. Please see\n * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n */\nexport function initializeStaticContext(attrs, stylingStartIndex, directiveRef) {\n    var context = createEmptyStylingContext();\n    patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveRef);\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param context the existing styling context\n * @param attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param attrsStylingStartIndex what index to start iterating within the\n *              provided `attrs` array to start reading style and class values\n * @param directiveRef the directive instance with which static data is associated with.\n */\nexport function patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveRef) {\n    // this means the context has already been set and instantiated\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // If the styling context has already been patched with the given directive's bindings,\n    // then there is no point in doing it again. The reason why this may happen (the directive\n    // styling being patched twice) is because the `stylingBinding` function is called each time\n    // an element is created (both within a template function and within directive host bindings).\n    var directives = context[2 /* DirectiveRegistryPosition */];\n    var detectedIndex = getDirectiveRegistryValuesIndexOf(directives, directiveRef || null);\n    if (detectedIndex === -1) {\n        // this is a new directive which we have not seen yet.\n        detectedIndex = allocateDirectiveIntoContext(context, directiveRef);\n    }\n    var directiveIndex = detectedIndex / 4 /* Size */;\n    var initialClasses = null;\n    var initialStyles = null;\n    var mode = -1;\n    for (var i = attrsStylingStartIndex; i < attrs.length; i++) {\n        var attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode == 1 /* Classes */) {\n            initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n            patchInitialStylingValue(initialClasses, attr, true, directiveIndex);\n        }\n        else if (mode == 2 /* Styles */) {\n            initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n            patchInitialStylingValue(initialStyles, attr, attrs[++i], directiveIndex);\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is\n * present (allocated) then the code below will set the new value depending on the\n * following cases:\n *\n *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n *     `[style.prop]` binding was set, but there wasn't a matching static style\n *     or class present on the context)\n *  2) if the value was set already by the template, component or directive, but the\n *     new value is set on a higher level (i.e. a sub component which extends a parent\n *     component sets its value after the parent has already set the same one)\n *  3) if the same directive provides a new set of styling values to set\n *\n * @param initialStyling the initial styling array where the new styling entry will be added to\n * @param prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n * @param value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n */\nfunction patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n    for (var i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n        var key = initialStyling[i + 0 /* PropOffset */];\n        if (key === prop) {\n            var existingValue = initialStyling[i + 1 /* ValueOffset */];\n            var existingOwner = initialStyling[i + 2 /* DirectiveOwnerOffset */];\n            if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n            }\n            return;\n        }\n    }\n    // We did not find existing key, add a new one.\n    addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n}\n/**\n * Runs through the initial class values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param element the element the styling will be applied to\n * @param context the source styling context which contains the initial class values\n * @param renderer the renderer instance that will be used to apply the class\n * @returns the index that the classes were applied up until\n */\nexport function renderInitialClasses(element, context, renderer, startIndex) {\n    var initialClasses = context[4 /* InitialClassValuesPosition */];\n    var i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialClasses.length) {\n        var value = initialClasses[i + 1 /* ValueOffset */];\n        if (value) {\n            setClass(element, initialClasses[i + 0 /* PropOffset */], true, renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\n/**\n * Runs through the initial styles values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param element the element the styling will be applied to\n * @param context the source styling context which contains the initial class values\n * @param renderer the renderer instance that will be used to apply the class\n * @returns the index that the styles were applied up until\n */\nexport function renderInitialStyles(element, context, renderer, startIndex) {\n    var initialStyles = context[3 /* InitialStyleValuesPosition */];\n    var i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialStyles.length) {\n        var value = initialStyles[i + 1 /* ValueOffset */];\n        if (value) {\n            setStyle(element, initialStyles[i + 0 /* PropOffset */], value, renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\nexport function allowNewBindingsForStylingContext(context) {\n    return (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */) === 0;\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param context the existing styling context\n * @param directiveRef the directive that the new bindings will reference\n * @param classBindingNames an array of class binding names that will be added to the context\n * @param styleBindingNames an array of style binding names that will be added to the context\n * @param styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n */\nexport function updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer) {\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    var directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n    if (directiveIndex === -1) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    if (styleBindingNames) {\n        styleBindingNames = hyphenateEntries(styleBindingNames);\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    var singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n    var totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    var totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    var cachedClassMapValues = context[6 /* CachedMultiClasses */];\n    var cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n    var classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    var stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    var singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n    var singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    var multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    var multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    var currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    var insertionOffset = 0;\n    var filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (var i_1 = 0; i_1 < styleBindingNames.length; i_1++) {\n            var name_1 = styleBindingNames[i_1];\n            var singlePropIndex = getMatchingBindingIndex(context, name_1, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name_1);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    var filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (var i_2 = 0; i_2 < classBindingNames.length; i_2++) {\n            var name_2 = classBindingNames[i_2];\n            var singlePropIndex = getMatchingBindingIndex(context, name_2, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name_2);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    var i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            var totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            var totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                var start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (var j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            var total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    var totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (var i_3 = singleStylesStartIndex; i_3 < context.length; i_3 += 4 /* Size */) {\n        var isMultiBased = i_3 >= multiStylesStartIndex;\n        var isClassBased = i_3 >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        var flag = getPointers(context, i_3);\n        var staticIndex = getInitialIndex(flag);\n        var singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i_3, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (var i_4 = 0; i_4 < filteredStyleBindingNames.length * 4 /* Size */; i_4++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (var i_5 = 0; i_5 < filteredClassBindingNames.length * 4 /* Size */; i_5++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    var initialClasses = context[4 /* InitialClassValuesPosition */];\n    var initialStyles = context[3 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (var i_6 = 0; i_6 < totalNewEntries; i_6++) {\n        var entryIsClassBased = i_6 >= filteredStyleBindingNames.length;\n        var adjustedIndex = entryIsClassBased ? (i_6 - filteredStyleBindingNames.length) : i_6;\n        var propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        var multiIndex = void 0, singleIndex = void 0;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added in case a follow-up directive introduces the same initial\n        // style/class value later on.\n        var initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        var indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                1 /* ValueOffset */;\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        var initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // the map-based values also need to know how many entries got inserted\n    cachedClassMapValues[0 /* EntriesCountPosition */] +=\n        filteredClassBindingNames.length;\n    cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n        filteredStyleBindingNames.length;\n    var newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n    var newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n    // update the multi styles cache with a reference for the directive that was just inserted\n    var directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n    var cachedStyleMapIndex = cachedStyleMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n    for (var i_7 = 1 /* ValuesStartPosition */; i_7 < cachedStyleMapIndex; i_7 += 4 /* Size */) {\n        // multi values start after all the single values (which is also where classes are) in the\n        // context therefore the new class allocation size should be taken into account\n        cachedStyleMapValues[i_7 + 1 /* PositionStartOffset */] +=\n            newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n    }\n    // update the multi classes cache with a reference for the directive that was just inserted\n    var directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n    var cachedClassMapIndex = cachedClassMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n    for (var i_8 = 1 /* ValuesStartPosition */; i_8 < cachedClassMapIndex; i_8 += 4 /* Size */) {\n        // the reason why both the styles + classes space is allocated to the existing offsets is\n        // because the styles show up before the classes in the context and any new inserted\n        // styles will offset any existing class entries in the context (even if there are no\n        // new class entries added) also the reason why it's *2 is because both single + multi\n        // entries for each new style have been added in the context before the multi class values\n        // actually start\n        cachedClassMapValues[i_8 + 1 /* PositionStartOffset */] +=\n            (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    var masterFlag = pointers(0, 0, multiStylesStartIndex);\n    setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n */\nexport function findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n    var directiveRefs = context[2 /* DirectiveRegistryPosition */];\n    var nextOffsetInsertionIndex = context[5 /* SinglePropOffsetPositions */].length;\n    var directiveIndex;\n    var detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n    if (detectedIndex === -1) {\n        detectedIndex = directiveRefs.length;\n        directiveIndex = directiveRefs.length / 4 /* Size */;\n        allocateDirectiveIntoContext(context, directiveRef);\n        directiveRefs[detectedIndex + 1 /* SinglePropValuesIndexOffset */] =\n            nextOffsetInsertionIndex;\n        directiveRefs[detectedIndex + 3 /* StyleSanitizerOffset */] =\n            styleSanitizer || null;\n    }\n    else {\n        var singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        if (directiveRefs[singlePropStartPosition] >= 0) {\n            // the directive has already been patched into the context\n            return -1;\n        }\n        directiveIndex = detectedIndex / 4 /* Size */;\n        // because the directive already existed this means that it was set during elementHostAttrs or\n        // elementStart which means that the binding values were not here. Therefore, the values below\n        // need to be applied so that single class and style properties can be assigned later.\n        var singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n        // the sanitizer is also apart of the binding process and will be used when bindings are\n        // applied.\n        var styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n        directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n    }\n    return directiveIndex;\n}\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (var j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Registers the provided multi styling (`[style]` and `[class]`) values to the context.\n *\n * This function will iterate over the provided `classesInput` and `stylesInput` map\n * values and insert/update or remove them from the context at exactly the right\n * spot.\n *\n * This function also takes in a directive which implies that the styling values will\n * be evaluated for that directive with respect to any other styling that already exists\n * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n * both update the `width` property at the same time) then the styling algorithm code below\n * will decide which one wins based on the directive styling prioritization mechanism. This\n * mechanism is better explained in render3/interfaces/styling.ts#directives).\n *\n * This function will not render any styling values on screen, but is rather designed to\n * prepare the context for that. `renderStyling` must be called afterwards to render any\n * styling data that was set in this function (note that `updateClassProp` and\n * `updateStyleProp` are designed to be run after this function is run).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style values.\n * @param classesInput The key/value map of CSS class names that will be used for the update.\n * @param stylesInput The key/value map of CSS styles that will be used for the update.\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n */\nexport function updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n    var directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    classesInput = classesInput || null;\n    stylesInput = stylesInput || null;\n    var ignoreAllClassUpdates = isMultiValueCacheHit(context, true, directiveIndex, classesInput);\n    var ignoreAllStyleUpdates = isMultiValueCacheHit(context, false, directiveIndex, stylesInput);\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    classesInput =\n        classesInput === NO_CHANGE ? readCachedMapValue(context, true, directiveIndex) : classesInput;\n    stylesInput =\n        stylesInput === NO_CHANGE ? readCachedMapValue(context, false, directiveIndex) : stylesInput;\n    var element = context[0 /* ElementPosition */];\n    var classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(classesInput, element, 1 /* Class */) :\n        null;\n    var stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(stylesInput, element, 2 /* Style */) :\n        null;\n    var classesValue = classesPlayerBuilder ?\n        classesInput.value :\n        classesInput;\n    var stylesValue = stylesPlayerBuilder ? stylesInput['value'] : stylesInput;\n    var classNames = EMPTY_ARRAY;\n    var applyAllClasses = false;\n    var playerBuildersAreDirty = false;\n    var classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    var stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n        }\n    }\n    var multiStylesStartIndex = getMultiStylesStartIndex(context);\n    var multiClassesStartIndex = getMultiClassesStartIndex(context);\n    var multiClassesEndIndex = context.length;\n    if (!ignoreAllStyleUpdates) {\n        var styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n        var styles = stylesValue || EMPTY_OBJ;\n        var totalNewEntries = patchStylingMapIntoContext(context, directiveIndex, stylesPlayerBuilderIndex, multiStylesStartIndex, multiClassesStartIndex, styleProps, styles, stylesInput, false);\n        if (totalNewEntries) {\n            multiClassesStartIndex += totalNewEntries * 4 /* Size */;\n            multiClassesEndIndex += totalNewEntries * 4 /* Size */;\n        }\n    }\n    if (!ignoreAllClassUpdates) {\n        var classes = (classesValue || EMPTY_OBJ);\n        patchStylingMapIntoContext(context, directiveIndex, classesPlayerBuilderIndex, multiClassesStartIndex, multiClassesEndIndex, classNames, applyAllClasses || classes, classesInput, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * Applies the given multi styling (styles or classes) values to the context.\n *\n * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n * values) resides here.\n *\n * Because this function understands that multiple directives may all write to the `[style]` and\n * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n * value in order. This means that a directive like `classADirective` will always fire before\n * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n * in the same order. Because of this consistent ordering, the first directive has a higher priority\n * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n * to merge and apply redudant styling properties.\n *\n * The function itself applies the key/value entries (or an array of keys) to\n * the context in the following steps.\n *\n * STEP 1:\n *    First check to see what properties are already set and in use by another directive in the\n *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n *    attempting to set it as well).\n *\n * STEP 2:\n *    All remaining properties (that were not set prior to this directive) are now updated in\n *    the context. Any new properties are inserted exactly at their spot in the context and any\n *    previously set properties are shifted to exactly where the cursor sits while iterating over\n *    the context. The end result is a balanced context that includes the exact ordering of the\n *    styling properties/values for the provided input from the directive.\n *\n * STEP 3:\n *    Any unmatched properties in the context that belong to the directive are set to null\n *\n * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n * follow-up directives (the directives that will pass in their styling values) depending on if\n * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n * directives will not run (so long as their binding values stay the same).\n *\n * @returns the total amount of new slots that were allocated into the context due to new styling\n *          properties that were detected.\n */\nfunction patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n    var dirty = false;\n    var cacheIndex = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // the cachedValues array is the registry of all multi style values (map values). Each\n    // value is stored (cached) each time is updated.\n    var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    // this is the index in which this directive has ownership access to write to this\n    // value (anything before is owned by a previous directive that is more important)\n    var ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n    var existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n    var existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n    var existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n    // A shape change means the provided map value has either removed or added new properties\n    // compared to what were in the last time. If a shape change occurs then it means that all\n    // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n    // them. If a shape change has not occurred then there is no reason to check any other\n    // directive values if their identity has not changed. If a previous directive set this\n    // value as dirty (because its own shape changed) then this means that the object has been\n    // offset to a different area in the context. Because its value has been offset then it\n    // can't write to a region that it wrote to before (which may have been apart of another\n    // directive) and therefore its shape changes too.\n    var valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n    var totalUniqueValues = 0;\n    var totalNewAllocatedSlots = 0;\n    // this is a trick to avoid building {key:value} map where all the values\n    // are `true` (this happens when a className string is provided instead of a\n    // map as an input value to this styling algorithm)\n    var applyAllProps = values === true;\n    // STEP 1:\n    // loop through the earlier directives and figure out if any properties here will be placed\n    // in their area (this happens when the value is null because the earlier directive erased it).\n    var ctxIndex = ctxStart;\n    var totalRemainingProperties = props.length;\n    while (ctxIndex < ownershipValuesStartIndex) {\n        var currentProp = getProp(context, ctxIndex);\n        if (totalRemainingProperties) {\n            for (var i = 0; i < props.length; i++) {\n                var mapProp = props[i];\n                var normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                if (normalizedProp && currentProp === normalizedProp) {\n                    var currentValue = getValue(context, ctxIndex);\n                    var currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                    var value = applyAllProps ? true : values[normalizedProp];\n                    var currentFlag = getPointers(context, ctxIndex);\n                    if (hasValueChanged(currentFlag, currentValue, value) &&\n                        allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                        setValue(context, ctxIndex, value);\n                        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        if (hasInitialValueChanged(context, currentFlag, value)) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                    props[i] = null;\n                    totalRemainingProperties--;\n                    break;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // STEP 2:\n    // apply the left over properties to the context in the correct order.\n    if (totalRemainingProperties) {\n        var sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n        propertiesLoop: for (var i = 0; i < props.length; i++) {\n            var mapProp = props[i];\n            if (!mapProp) {\n                // this is an early exit in case a value was already encountered above in the\n                // previous loop (which means that the property was applied or rejected)\n                continue;\n            }\n            var value = applyAllProps ? true : values[mapProp];\n            var normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n            var isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n            for (var j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                var distantCtxProp = getProp(context, j);\n                if (distantCtxProp === normalizedProp) {\n                    var distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                    var distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                    var distantCtxValue = getValue(context, j);\n                    var distantCtxFlag = getPointers(context, j);\n                    if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                        // even if the entry isn't updated (by value or directiveIndex) then\n                        // it should still be moved over to the correct spot in the array so\n                        // the iteration loop is tighter.\n                        if (isInsideOwnershipArea) {\n                            swapMultiContextEntries(context, ctxIndex, j);\n                            totalUniqueValues++;\n                        }\n                        if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                            if (value === null || value === undefined && value !== distantCtxValue) {\n                                valuesEntryShapeChange = true;\n                            }\n                            setValue(context, ctxIndex, value);\n                            // SKIP IF INITIAL CHECK\n                            // If the former `value` is `null` then it means that an initial value\n                            // could be being rendered on screen. If that is the case then there is\n                            // no point in updating the value in case it matches. In other words if the\n                            // new value is the exact same as the previously rendered value (which\n                            // happens to be the initial value) then do nothing.\n                            if (distantCtxValue !== null ||\n                                hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        if (distantCtxDirectiveIndex !== directiveIndex ||\n                            playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        }\n                    }\n                    ctxIndex += 4 /* Size */;\n                    continue propertiesLoop;\n                }\n            }\n            // fallback case ... value not found at all in the context\n            if (value != null) {\n                valuesEntryShapeChange = true;\n                totalUniqueValues++;\n                var flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                    1 /* Dirty */;\n                var insertionIndex = isInsideOwnershipArea ?\n                    ctxIndex :\n                    (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                totalNewAllocatedSlots++;\n                ctxEnd += 4 /* Size */;\n                ctxIndex += 4 /* Size */;\n                dirty = true;\n            }\n        }\n    }\n    // STEP 3:\n    // Remove (nullify) any existing entries in the context that were not apart of the\n    // map input value that was passed into this algorithm for this directive.\n    while (ctxIndex < ctxEnd) {\n        valuesEntryShapeChange = true; // some values are missing\n        var ctxValue = getValue(context, ctxIndex);\n        var ctxFlag = getPointers(context, ctxIndex);\n        var ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n        if (ctxValue != null) {\n            valuesEntryShapeChange = true;\n        }\n        if (hasValueChanged(ctxFlag, ctxValue, null)) {\n            setValue(context, ctxIndex, null);\n            // only if the initial value is falsy then\n            if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                setDirty(context, ctxIndex, true);\n                dirty = true;\n            }\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // Because the object shape has changed, this means that all follow-up directives will need to\n    // reapply their values into the object. For this to happen, the cached array needs to be updated\n    // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n    // the reapplication of styling code within the context will reshape it and update the offset\n    // values (also follow-up directives can write new values in case earlier directives set anything\n    // to null due to removals or falsy values).\n    valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n    updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n    if (dirty) {\n        setContextDirty(context, true);\n        setDirectiveDirty(context, directiveIndex, true);\n    }\n    return totalNewAllocatedSlots;\n}\n/**\n * Sets and resolves a single class value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * @param context The styling context that will be updated with the\n *    newly provided class value.\n * @param offset The index of the CSS class which is being updated.\n * @param addOrRemove Whether or not to add or remove the CSS class\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n */\nexport function updateClassProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, true, directiveRef, forceOverride);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style value.\n * @param offset The index of the property which is being updated.\n * @param value The CSS style value that will be assigned\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @param forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n */\nexport function updateStyleProp(context, offset, input, directiveRef, forceOverride) {\n    updateSingleStylingValue(context, offset, input, false, directiveRef, forceOverride);\n}\nfunction updateSingleStylingValue(context, offset, input, isClassBased, directiveRef, forceOverride) {\n    var directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    var singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    var currValue = getValue(context, singleIndex);\n    var currFlag = getPointers(context, singleIndex);\n    var currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n        var isClassBased_1 = (currFlag & 2 /* Class */) === 2 /* Class */;\n        var element = context[0 /* ElementPosition */];\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(input, element, isClassBased_1 ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        var value_1 = (playerBuilder ? input.value : input);\n        var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        var playerBuildersAreDirty = false;\n        var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            var prop = getProp(context, singleIndex);\n            var sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value_1);\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n            var multiDirty = false;\n            var singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value_1, isClassBased_1) && valueExists(valueForMulti, isClassBased_1)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setDirectiveDirty(context, directiveIndex, true);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param lElement the element that the styles will be rendered on\n * @param context The styling context that will be used to determine\n *      what styles will be rendered\n * @param renderer the renderer that will be used to apply the styling\n * @param classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @returns number the total amount of players that got queued for animation (if any)\n */\nexport function renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n    var totalPlayersQueued = 0;\n    var targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n        var flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        var native = context[0 /* ElementPosition */];\n        var multiStartIndex = getMultiStylesStartIndex(context);\n        var stillDirty = false;\n        for (var i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                var flag = getPointers(context, i);\n                var directiveIndex = getDirectiveIndexFromEntry(context, i);\n                if (targetDirectiveIndex !== directiveIndex) {\n                    stillDirty = true;\n                    continue;\n                }\n                var prop = getProp(context, i);\n                var value = getValue(context, i);\n                var styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                var playerBuilder = getPlayerBuilder(context, i);\n                var isClassBased = flag & 2 /* Class */ ? true : false;\n                var isInSingleRegion = i < multiStartIndex;\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                    // single values ALWAYS have a reference to a multi index\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it in case there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                // Note that we ignore class-based deferals because otherwise a class can never\n                // be removed in the case that it exists as true in the initial classes list...\n                if (!valueExists(valueToApply, isClassBased)) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                // if the first render is true then we do not want to start applying falsy\n                // values to the DOM element's styling. Otherwise then we know there has\n                // been a change and even if it's falsy then it's removing something that\n                // was truthy before.\n                var doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        setStyle(native, prop, valueToApply, renderer, styleSanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : rootOrView;\n            var playerContext = getPlayerContext(context);\n            var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                var builder = playerContext[i];\n                var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                var oldPlayer = playerContext[playerInsertionIndex];\n                if (builder) {\n                    var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            var wasQueued = addPlayerInternal(playerContext, rootContext, native, player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setDirectiveDirty(context, targetDirectiveIndex, false);\n        setContextDirty(context, stillDirty);\n    }\n    return totalPlayersQueued;\n}\n/**\n * Assigns a style value to a style property for the given element.\n *\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nexport function setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native.style.setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native.style.removeProperty(prop);\n    }\n}\n/**\n * Adds/removes the provided className value to the provided element.\n *\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n        // DOMTokenList will throw if we try to add or remove an empty string.\n    }\n    else if (className !== '') {\n        if (add) {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                native['classList'].add(className);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                native['classList'].remove(className);\n        }\n    }\n}\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        context[index] |= 4 /* Sanitize */;\n    }\n    else {\n        context[index] &= ~4 /* Sanitize */;\n    }\n}\nfunction setDirty(context, index, isDirtyYes) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        context[adjustedIndex] |= 1 /* Dirty */;\n    }\n    else {\n        context[adjustedIndex] &= ~1 /* Dirty */;\n    }\n}\nfunction isDirty(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 1 /* Dirty */) == 1 /* Dirty */;\n}\nexport function isClassBasedValue(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 2 /* Class */) == 2 /* Class */;\n}\nfunction isSanitizable(context, index) {\n    var adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (context[adjustedIndex] & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\nfunction getInitialValue(context, flag) {\n    var index = getInitialIndex(flag);\n    var entryIsClassBased = flag & 2 /* Class */;\n    var initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n        context[3 /* InitialStyleValuesPosition */];\n    return initialValues[index];\n}\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\nfunction getMultiOrSingleIndex(flag) {\n    var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\nfunction getMultiStartIndex(context) {\n    return getMultiOrSingleIndex(context[1 /* MasterFlagPosition */]);\n}\nfunction getMultiClassesStartIndex(context) {\n    var classCache = context[6 /* CachedMultiClasses */];\n    return classCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\nfunction getMultiStylesStartIndex(context) {\n    var stylesCache = context[7 /* CachedMultiStyles */];\n    return stylesCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    var playerContext = context[8 /* PlayerContext */];\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    var playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\nexport function directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    var value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\nfunction getPlayerBuilderIndex(context, index) {\n    var flag = context[index + 3 /* PlayerBuilderIndexOffset */];\n    var playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\nfunction getPlayerBuilder(context, index) {\n    var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        var playerContext = context[8 /* PlayerContext */];\n        if (playerContext) {\n            return playerContext[playerBuilderIndex];\n        }\n    }\n    return null;\n}\nfunction setFlag(context, index, flag) {\n    var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\nfunction getPointers(context, index) {\n    var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return context[adjustedIndex];\n}\nexport function getValue(context, index) {\n    return context[index + 2 /* ValueOffset */];\n}\nexport function getProp(context, index) {\n    return context[index + 1 /* PropertyOffset */];\n}\nexport function isContextDirty(context) {\n    return isDirty(context, 1 /* MasterFlagPosition */);\n}\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n}\nexport function setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        context[1 /* MasterFlagPosition */] |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        context[1 /* MasterFlagPosition */] &= ~8 /* PlayerBuildersDirty */;\n    }\n}\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    if (indexA === indexB)\n        return;\n    var tmpValue = getValue(context, indexA);\n    var tmpProp = getProp(context, indexA);\n    var tmpFlag = getPointers(context, indexA);\n    var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    var tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n    var flagA = tmpFlag;\n    var flagB = getPointers(context, indexB);\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        var _flag = getPointers(context, singleIndexA);\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        var _flag = getPointers(context, singleIndexB);\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    var playerIndexA = getPlayerBuilderIndex(context, indexB);\n    var directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n}\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        var multiFlag = getPointers(context, i);\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            var singleFlag = getPointers(context, singleIndex);\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\nfunction valueExists(value, isClassBased) {\n    return value !== null;\n}\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    var flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    var initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\nfunction hasInitialValueChanged(context, flag, newValue) {\n    var initialValue = getInitialValue(context, flag);\n    return !initialValue || hasValueChanged(flag, initialValue, newValue);\n}\nfunction hasValueChanged(flag, a, b) {\n    var isClassBased = flag & 2 /* Class */;\n    var hasValues = a && b;\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return a.toString() !== b.toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\nvar ClassAndStylePlayerBuilder = /** @class */ (function () {\n    function ClassAndStylePlayerBuilder(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = factory;\n    }\n    ClassAndStylePlayerBuilder.prototype.setValue = function (prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    };\n    ClassAndStylePlayerBuilder.prototype.buildPlayer = function (currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            var player = this._factory.fn(this._element, this._type, this._values, isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    };\n    return ClassAndStylePlayerBuilder;\n}());\nexport { ClassAndStylePlayerBuilder };\nexport function generateConfigSummary(source, index) {\n    var flag, name = 'config value for ';\n    if (Array.isArray(source)) {\n        if (index) {\n            name += 'index: ' + index;\n        }\n        else {\n            name += 'master config';\n        }\n        index = index || 1 /* MasterFlagPosition */;\n        flag = source[index];\n    }\n    else {\n        flag = source;\n        name += 'index: ' + flag;\n    }\n    var dynamicIndex = getMultiOrSingleIndex(flag);\n    var staticIndex = getInitialIndex(flag);\n    return {\n        name: name,\n        staticIndex: staticIndex,\n        dynamicIndex: dynamicIndex,\n        value: flag,\n        flags: {\n            dirty: flag & 1 /* Dirty */ ? true : false,\n            class: flag & 2 /* Class */ ? true : false,\n            sanitize: flag & 4 /* Sanitize */ ? true : false,\n            playerBuildersDirty: flag & 8 /* PlayerBuildersDirty */ ? true : false,\n            bindingAllocationLocked: flag & 16 /* BindingAllocationLocked */ ? true : false,\n        }\n    };\n}\nexport function getDirectiveIndexFromEntry(context, index) {\n    var value = context[index + 3 /* PlayerBuilderIndexOffset */];\n    return value & 65535 /* BitMask */;\n}\nfunction getDirectiveIndexFromRegistry(context, directiveRef) {\n    var directiveIndex;\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var index = getDirectiveRegistryValuesIndexOf(dirs, directiveRef);\n    if (index === -1) {\n        // if the directive was not allocated then this means that styling is\n        // being applied in a dynamic way AFTER the element was already instantiated\n        index = dirs.length;\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n        dirs.push(null, null, null, null);\n        dirs[index + 0 /* DirectiveValueOffset */] = directiveRef;\n        dirs[index + 2 /* DirtyFlagOffset */] = false;\n        dirs[index + 1 /* SinglePropValuesIndexOffset */] = -1;\n        var classesStartIndex = getMultiClassesStartIndex(context) || 9 /* SingleStylesStartPosition */;\n        registerMultiMapEntry(context, directiveIndex, true, context.length);\n        registerMultiMapEntry(context, directiveIndex, false, classesStartIndex);\n    }\n    else {\n        directiveIndex = index > 0 ? index / 4 /* Size */ : 0;\n    }\n    return directiveIndex;\n}\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n    for (var i = 0; i < directives.length; i += 4 /* Size */) {\n        if (directives[i] === directive) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (var i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\nexport function compareLogSummaries(a, b) {\n    var log = [];\n    var diffs = [];\n    diffSummaryValues(diffs, 'staticIndex', 'staticIndex', a, b);\n    diffSummaryValues(diffs, 'dynamicIndex', 'dynamicIndex', a, b);\n    Object.keys(a.flags).forEach(function (name) { diffSummaryValues(diffs, 'flags.' + name, name, a.flags, b.flags); });\n    if (diffs.length) {\n        log.push('Log Summaries for:');\n        log.push('  A: ' + a.name);\n        log.push('  B: ' + b.name);\n        log.push('\\n  Differ in the following way (A !== B):');\n        diffs.forEach(function (result) {\n            var _a = tslib_1.__read(result, 3), name = _a[0], aVal = _a[1], bVal = _a[2];\n            log.push('    => ' + name);\n            log.push('    => ' + aVal + ' !== ' + bVal + '\\n');\n        });\n    }\n    return log;\n}\nfunction diffSummaryValues(result, name, prop, a, b) {\n    var aVal = a[prop];\n    var bVal = b[prop];\n    if (aVal !== bVal) {\n        result.push([name, aVal, bVal]);\n    }\n}\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    var singlePropOffsetRegistryIndex = context[2 /* DirectiveRegistryPosition */][(directiveIndex * 4 /* Size */) +\n        1 /* SinglePropValuesIndexOffset */];\n    var offsets = context[5 /* SinglePropOffsetPositions */];\n    var indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\nfunction getStyleSanitizer(context, directiveIndex) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    var value = dirs[directiveIndex * 4 /* Size */ +\n        3 /* StyleSanitizerOffset */] ||\n        dirs[3 /* StyleSanitizerOffset */] || null;\n    return value;\n}\nfunction isDirectiveDirty(context, directiveIndex) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    return dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */];\n}\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n    var dirs = context[2 /* DirectiveRegistryPosition */];\n    dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */] = dirtyYes;\n}\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced in case an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // this decides what to do if and when there is a collision.\n    if (currentValue != null) {\n        if (newValue != null) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value in case it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * Returns the className string of all the initial classes for the element.\n *\n * This function is designed to populate and cache all the static class\n * values into a className string. The caching mechanism works by placing\n * the completed className string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @returns the className string (e.g. `on active red`)\n */\nexport function getInitialClassNameValue(context) {\n    var initialClassValues = context[4 /* InitialClassValuesPosition */];\n    var className = initialClassValues[1 /* CachedStringValuePosition */];\n    if (className === null) {\n        className = '';\n        for (var i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n            var isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        initialClassValues[1 /* CachedStringValuePosition */] = className;\n    }\n    return className;\n}\n/**\n * Returns the style string of all the initial styles for the element.\n *\n * This function is designed to populate and cache all the static style\n * values into a style string. The caching mechanism works by placing\n * the completed style string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @returns the style string (e.g. `width:100px;height:200px`)\n */\nexport function getInitialStyleStringValue(context) {\n    var initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n    var styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n    if (styleString === null) {\n        styleString = '';\n        for (var i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n            var value = initialStyleValues[i + 1];\n            if (value !== null) {\n                styleString += (styleString.length ? ';' : '') + (initialStyleValues[i] + \":\" + value);\n            }\n        }\n        initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n    }\n    return styleString;\n}\n/**\n * Returns the current cached mutli-value for a given directiveIndex within the provided context.\n */\nfunction readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n    var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    return values[index + 2 /* ValueOffset */] || null;\n}\n/**\n * Determines whether the provided multi styling value should be updated or not.\n *\n * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n * applying new values, the styling algorithm may not update an existing entry into\n * the context if a previous directive's entry changed shape.\n *\n * This function will decide whether or not a value should be applied (if there is a\n * cache miss) to the context based on the following rules:\n *\n * - If there is an identity change between the existing value and new value\n * - If there is no existing value cached (first write)\n * - If a previous directive flagged the existing cached value as dirty\n */\nfunction isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n    var indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n    var cachedValues = context[indexOfCachedValues];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    if (cachedValues[index + 0 /* DirtyFlagOffset */])\n        return false;\n    return newValue === NO_CHANGE ||\n        readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n}\n/**\n * Updates the cached status of a multi-styling value in the context.\n *\n * The cached map array (which exists in the context) contains a manifest of\n * each multi-styling entry (`[style]` and `[class]` entries) for the template\n * as well as all directives.\n *\n * This function will update the cached status of the provided multi-style\n * entry within the cache.\n *\n * When called, this function will update the following information:\n * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n * - The total amount of unique styling entries that this value has written into the context\n * - The exact position of where the multi styling entries start in the context for this binding\n * - The dirty flag will be set to true\n *\n * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n * entries that exist as apart of other directives) to be dirty as well. This will force the\n * styling algorithm to reapply those values once change detection checks them (which will in\n * turn cause the styling context to update itself and the correct styling values will be\n * rendered on screen).\n */\nfunction updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n    var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    var index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // in the event that this is true we assume that future values are dirty and therefore\n    // will be checked again in the next CD cycle\n    if (dirtyFutureValues) {\n        var nextStartPosition = startPosition + totalValues * 4 /* Size */;\n        for (var i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n            values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n            values[i + 0 /* DirtyFlagOffset */] = 1;\n        }\n    }\n    values[index + 0 /* DirtyFlagOffset */] = 0;\n    values[index + 1 /* PositionStartOffset */] = startPosition;\n    values[index + 2 /* ValueOffset */] = cacheValue;\n    values[index + 3 /* ValueCountOffset */] = totalValues;\n    // the code below counts the total amount of styling values that exist in\n    // the context up until this directive. This value will be later used to\n    // update the cached value map's total counter value.\n    var totalStylingEntries = totalValues;\n    for (var i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n        totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n    }\n    // because style values come before class values in the context this means\n    // that if any new values were inserted then the cache values array for\n    // classes is out of sync. The code below will update the offsets to point\n    // to their new values.\n    if (!entryIsClassBased) {\n        var classCache = context[6 /* CachedMultiClasses */];\n        var classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n        var diffInStartPosition = endPosition - classesStartPosition;\n        for (var i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n            classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n        }\n    }\n    values[0 /* EntriesCountPosition */] = totalStylingEntries;\n}\nfunction hyphenateEntries(entries) {\n    var newEntries = [];\n    for (var i = 0; i < entries.length; i++) {\n        newEntries.push(hyphenate(entries[i]));\n    }\n    return newEntries;\n}\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, function (match) { return match.charAt(0) + \"-\" + match.charAt(1).toLowerCase(); });\n}\nfunction registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count) {\n    if (count === void 0) { count = 0; }\n    var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    if (directiveIndex > 0) {\n        var limit = 1 /* ValuesStartPosition */ +\n            (directiveIndex * 4 /* Size */);\n        while (cachedValues.length < limit) {\n            // this means that ONLY directive class styling (like ngClass) was used\n            // therefore the root directive will still need to be filled in as well\n            // as any other directive spaces in case they only used static values\n            cachedValues.push(0, startPosition, null, 0);\n        }\n    }\n    cachedValues.push(0, startPosition, null, count);\n}\n/**\n * Inserts or updates an existing entry in the provided `staticStyles` collection.\n *\n * @param index the index representing an existing styling entry in the collection:\n *  if provided (numeric): then it will update the existing entry at the given position\n *  if null: then it will insert a new entry within the collection\n * @param staticStyles a collection of style or class entries where the value will\n *  be inserted or patched\n * @param prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n * @param value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @returns the index of the updated or new entry within the collection\n */\nfunction addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n    if (index === null) {\n        index = staticStyles.length;\n        staticStyles.push(null, null, null);\n        staticStyles[index + 0 /* PropOffset */] = prop;\n    }\n    staticStyles[index + 1 /* ValueOffset */] = value;\n    staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n    return index;\n}\n//# sourceMappingURL=data:application/json;base64,","import { ErrorHandler } from '../../error_handler';\nimport { assertDataInRange, assertDefined, assertDomNode, assertEqual, assertLessThan, assertNotEqual } from '../../util/assert';\nimport { assertLView, assertPreviousIsParent } from '../assert';\nimport { attachPatchData, getComponentViewByInstance } from '../context_discovery';\nimport { attachLContainerDebug, attachLViewDebug } from '../debug';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode } from '../di';\nimport { throwMultipleComponentError } from '../errors';\nimport { executeHooks, executePreOrderHooks, registerPreOrderHooks } from '../hooks';\nimport { ACTIVE_INDEX, VIEWS } from '../interfaces/container';\nimport { INJECTOR_BLOOM_PARENT_SIZE, NodeInjectorFactory } from '../interfaces/injector';\nimport { isProceduralRenderer } from '../interfaces/renderer';\nimport { BINDING_INDEX, CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, RENDERER_FACTORY, SANITIZER, TVIEW, T_HOST } from '../interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from '../node_assert';\nimport { isNodeMatchingSelectorList } from '../node_selector_matcher';\nimport { enterView, getBindingsEnabled, getCheckNoChangesMode, getIsParent, getLView, getNamespace, getPreviousOrParentTNode, isCreationMode, leaveView, namespaceHTML, resetComponentState, setActiveHost, setBindingRoot, setCheckNoChangesMode, setCurrentDirectiveDef, setCurrentQueryIndex, setIsParent, setPreviousOrParentTNode, setSelectedIndex } from '../state';\nimport { initializeStaticContext as initializeStaticStylingContext } from '../styling/class_and_style_bindings';\nimport { NO_CHANGE } from '../tokens';\nimport { attrsStylingIndexOf } from '../util/attrs_utils';\nimport { INTERPOLATION_DELIMITER, renderStringify } from '../util/misc_utils';\nimport { getLViewParent, getRootContext } from '../util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByTNode, isComponentDef, isContentQueryHost, isRootView, readPatchedLView, resetPreOrderHookFlags, unwrapRNode, viewAttachedToChangeDetector } from '../util/view_utils';\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n */\nexport function refreshDescendantViews(lView) {\n    var tView = lView[TVIEW];\n    var creationMode = isCreationMode(lView);\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!creationMode) {\n        var checkNoChangesMode = getCheckNoChangesMode();\n        executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView, lView);\n        resetPreOrderHookFlags(lView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n        setHostBindings(tView, lView);\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (creationMode && tView.staticContentQueries) {\n        refreshContentQueries(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/** Sets the host bindings for the current view. */\nexport function setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        var currentDirectiveIndex = -1;\n        var currentElementIndex = -1;\n        for (var i = 0; i < tView.expandoInstructions.length; i++) {\n            var instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    // Injector block and providers are taken into account.\n                    var providerCount = tView.expandoInstructions[++i];\n                    bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    var hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                    setActiveHost(hostCtx, currentElementIndex);\n                    instruction(2 /* Update */, hostCtx, currentElementIndex);\n                    setActiveHost(null);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/** Refreshes content queries for all directives in the given view. */\nfunction refreshContentQueries(tView, lView) {\n    if (tView.contentQueries != null) {\n        setCurrentQueryIndex(0);\n        for (var i = 0; i < tView.contentQueries.length; i++) {\n            var directiveDefIdx = tView.contentQueries[i];\n            var directiveDef = tView.data[directiveDefIdx];\n            ngDevMode &&\n                assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n            directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n    }\n}\n/** Refreshes child components in the current view. */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param name the tag name\n * @param overriddenRenderer Optional A renderer to override the default one\n * @returns the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    var native;\n    var rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    var namespace = getNamespace();\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, namespace);\n    }\n    else {\n        if (namespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(namespace, name);\n        }\n    }\n    return native;\n}\nexport function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n    var lView = tView.blueprint.slice();\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n    resetPreOrderHookFlags(lView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n    lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;\n    lView[T_HOST] = tHostNode;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\nexport function createNodeAtIndex(index, type, native, name, attrs) {\n    var lView = getLView();\n    var tView = lView[TVIEW];\n    var adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, \"Slot should have been initialized with null\");\n    lView[adjustedIndex] = native;\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    var isParent = getIsParent();\n    var tNode = tView.data[adjustedIndex];\n    if (tNode == null) {\n        var parent_1 = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        var parentInSameView = parent_1 && parent_1 !== lView[T_HOST];\n        var tParentNode = parentInSameView ? parent_1 : null;\n        tNode = tView.data[adjustedIndex] = createTNode(tParentNode, type, adjustedIndex, name, attrs);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return tNode;\n}\nexport function assignTViewNodeToLView(tView, tParentNode, index, lView) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    var tNode = tView.node;\n    if (tNode == null) {\n        ngDevMode && tParentNode &&\n            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n        tView.node = tNode = createTNode(tParentNode, //\n        2 /* View */, index, null, null);\n    }\n    return lView[T_HOST] = tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n */\nexport function allocExpando(view, numSlotsToAlloc) {\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        for (var i = 0; i < numSlotsToAlloc; i++) {\n            tView.blueprint.push(null);\n            tView.data.push(null);\n            view.push(null);\n        }\n        // We should only increment the expando start index if there aren't already directives\n        // and injectors saved in the \"expando\" section\n        if (!tView.expandoInstructions) {\n            tView.expandoStartIndex += numSlotsToAlloc;\n        }\n        else {\n            // Since we're adding the dynamic nodes into the expando section, we need to let the host\n            // bindings know that they should skip x slots\n            tView.expandoInstructions.push(numSlotsToAlloc);\n        }\n    }\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n *\n * @param hostNode Existing node to render into.\n * @param templateFn Template function with the instructions.\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param context to pass into the template.\n * @param providedRendererFactory renderer factory to use\n * @param host The host element node to use\n * @param directives Directive defs that should be used for matching\n * @param pipes Pipe defs that should be used for matching\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, componentView, directives, pipes, sanitizer) {\n    if (componentView === null) {\n        resetComponentState();\n        var renderer = providedRendererFactory.createRenderer(null, null);\n        // We need to create a root view so it's possible to look up the host element through its index\n        var hostLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), {}, 16 /* CheckAlways */ | 512 /* IsRoot */, null, null, providedRendererFactory, renderer);\n        enterView(hostLView, null); // SUSPECT! why do we need to enter the View?\n        var componentTView = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null, null);\n        var hostTNode = createNodeAtIndex(0, 3 /* Element */, hostNode, null, null);\n        componentView = createLView(hostLView, componentTView, context, 16 /* CheckAlways */, hostNode, hostTNode, providedRendererFactory, renderer, sanitizer);\n    }\n    renderComponentOrTemplate(componentView, context, templateFn);\n    return componentView;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n */\nexport function createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n    var _isParent = getIsParent();\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(null);\n    var lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    assignTViewNodeToLView(tView, null, -1, lView);\n    if (tView.firstTemplatePass) {\n        tView.node.injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n */\nexport function renderEmbeddedTemplate(viewToRender, tView, context) {\n    var _isParent = getIsParent();\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    var oldView;\n    if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode(null);\n            oldView = enterView(viewToRender, viewToRender[T_HOST]);\n            resetPreOrderHookFlags(viewToRender);\n            namespaceHTML();\n            // Reset the selected index so we can assert that `select` was called later\n            ngDevMode && setSelectedIndex(-1);\n            tView.template(getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView(oldView);\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    var rendererFactory = hostView[RENDERER_FACTORY];\n    var oldView = enterView(hostView, hostView[T_HOST]);\n    var normalExecutionPath = !getCheckNoChangesMode();\n    var creationModeIsActive = isCreationMode(hostView);\n    try {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (creationModeIsActive) {\n            // creation mode pass\n            if (templateFn) {\n                namespaceHTML();\n                // Reset the selected index so we can assert that `select` was called later\n                ngDevMode && setSelectedIndex(-1);\n                templateFn(1 /* Create */, context);\n            }\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        // update mode pass\n        resetPreOrderHookFlags(hostView);\n        templateFn && templateFn(2 /* Update */, context);\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Appropriately sets `stylingTemplate` on a TNode\n *\n * Does not apply styles to DOM nodes\n *\n * @param tNode The node whose `stylingTemplate` to set\n * @param attrs The attribute array source to set the attributes from\n * @param attrsStartIndex Optional start index to start processing the `attrs` from\n */\nexport function setNodeStylingTemplate(tView, tNode, attrs, attrsStartIndex) {\n    if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n        var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, attrsStartIndex);\n        if (stylingAttrsStartIndex >= 0) {\n            tNode.stylingTemplate = initializeStaticStylingContext(attrs, stylingAttrsStartIndex);\n        }\n    }\n}\nexport function executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            var def = tView.data[directiveIndex];\n            if (def.contentQueries) {\n                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param localRefs Local refs of the node in question\n * @param localRefExtractor mapping function that extracts local ref value from TNode\n */\nexport function createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n    if (!getBindingsEnabled())\n        return;\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, lView, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n    saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    var localNames = tNode.localNames;\n    if (localNames) {\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            var index = localNames[i + 1];\n            var value = index === -1 ?\n                localRefExtractor(tNode, viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param templateFn The template from which to get static data\n * @param consts The number of nodes, local refs, and pipes in this view\n * @param vars The number of bindings and pure function bindings in this view\n * @param directives Directive defs that should be saved on TView\n * @param pipes Pipe defs that should be saved on TView\n * @param viewQuery View query that should be saved on TView\n * @param schemas Schemas that should be saved on TView\n * @returns TView\n */\nexport function getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery, schemas));\n}\n/**\n * Creates a TView instance\n *\n * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param templateFn Template function\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    ngDevMode && ngDevMode.tView++;\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    var initialViewLength = bindingStartIndex + vars;\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[TVIEW] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: null,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        viewQueryStartIndex: initialViewLength,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n    };\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    var blueprint = new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex);\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + renderStringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param elementOrSelector Render element or CSS selector to locate the element.\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    var defaultRenderer = factory.createRenderer(null, null);\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nexport function storeCleanupWithContext(lView, context, cleanupFn) {\n    var lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(view[CLEANUP].length - 1, null);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param type The type of the node\n * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport function createTNode(tParent, type, adjustedIndex, tagName, attrs) {\n    ngDevMode && ngDevMode.tNode++;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        propertyMetadataStartIndex: -1,\n        propertyMetadataEndIndex: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: null,\n        next: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        stylingTemplate: null,\n        projection: null,\n        onElementCreationFns: null,\n    };\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param tNodeFlags node flags\n * @param direction whether to consider inputs or outputs\n * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nexport function generatePropertyAliases(tNode, direction) {\n    var tView = getLView()[TVIEW];\n    var propStore = null;\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    if (end > start) {\n        var isInput = direction === 0 /* Input */;\n        var defs = tView.data;\n        for (var i = start; i < end; i++) {\n            var directiveDef = defs[i];\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    var internalName = propertyAliasMap[publicName];\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                        (propStore[publicName] = [i, publicName, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n//////////////////////////\n//// Text\n//////////////////////////\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n */\nexport function instantiateRootComponent(tView, viewData, def) {\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, rootTNode);\n    postProcessBaseDirective(viewData, rootTNode, directive);\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    var exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (var i = 0; i < directives.length; i++) {\n            var def = directives[i];\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        var initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n        var initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n        var nodeIndex = tNode.index - HEADER_OFFSET;\n        for (var i = 0; i < directives.length; i++) {\n            var def = directives[i];\n            var directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap(tView.data.length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    if (!tView.firstTemplatePass && start < end) {\n        getOrCreateNodeInjectorForNode(tNode, lView);\n    }\n    for (var i = start; i < end; i++) {\n        var def = tView.data[i];\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, def);\n        }\n        var directive = getNodeInjectable(tView.data, lView, i, tNode);\n        postProcessDirective(lView, directive, def, i);\n    }\n}\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    var start = tNode.directiveStart;\n    var end = tNode.directiveEnd;\n    var expando = tView.expandoInstructions;\n    var firstTemplatePass = tView.firstTemplatePass;\n    for (var i = start; i < end; i++) {\n        var def = tView.data[i];\n        var directive = viewData[i];\n        if (def.hostBindings) {\n            invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\nexport function invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n    var previousExpandoLength = expando.length;\n    setCurrentDirectiveDef(def);\n    var elementIndex = tNode.index - HEADER_OFFSET;\n    setActiveHost(directive, elementIndex);\n    def.hostBindings(1 /* Create */, directive, elementIndex);\n    setActiveHost(null);\n    setCurrentDirectiveDef(null);\n    // `hostBindings` function may or may not contain `allocHostVars` call\n    // (e.g. it may not if it only contains host listeners), so we need to check whether\n    // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n    // expando block, to make sure we execute it for DI cycle\n    if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n    }\n}\n/**\n* Generates a new block in TView.expandoInstructions for this node.\n*\n* Each expando block starts with the element index (turned negative so we can distinguish\n* it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n*/\nexport function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    var elementIndex = -(tNode.index - HEADER_OFFSET);\n    var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    var providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * Process a directive on the current node after its creation.\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n    }\n    if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    if (isComponentDef(def)) {\n        var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n}\n/**\n* Matches the current node against all available selectors.\n* If a component is matched (at most one), it is returned in first position in the array.\n*/\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    var registry = tView.directiveRegistry;\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            var def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(getPreviousOrParentTNode(), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/** Stores index of component's host element so it will be queued for view refresh during CD. */\nexport function queueComponentIndexForCheck(previousOrParentTNode) {\n    var tView = getLView()[TVIEW];\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n* Builds up an export map as directives are created, so local refs can be quickly mapped\n* to their directive instances.\n*/\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (var i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = index;\n            }\n        }\n        if (def.template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport function initNodeFlags(tNode, index, numberOfDirectives) {\n    var flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    var rendererFactory = lView[RENDERER_FACTORY];\n    var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], previousOrParentTNode, rendererFactory, lView[RENDERER_FACTORY].createRenderer(native, def)));\n    componentView[T_HOST] = previousOrParentTNode;\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[previousOrParentTNode.index] = componentView;\n    if (lView[TVIEW].firstTemplatePass) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n    var initialInputData = tNode.initialInputs;\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n    }\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        var setInput = def.setInput;\n        for (var i = 0; i < initialInputs.length;) {\n            var publicName = initialInputs[i++];\n            var privateName = initialInputs[i++];\n            var value = initialInputs[i++];\n            if (setInput) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param directiveIndex Index to store the initial input data\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data on this node\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    var attrs = tNode.attrs;\n    var i = 0;\n    while (i < attrs.length) {\n        var attrName = attrs[i];\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        var minifiedInputName = inputs[attrName];\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(attrName, minifiedInputName, attrValue);\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n    ngDevMode && assertDomNode(native);\n    ngDevMode && assertLView(currentView);\n    var lContainer = [\n        hostNative,\n        true,\n        isForViewContainerRef ? -1 : 0,\n        currentView,\n        null,\n        null,\n        tNode,\n        native,\n        [],\n    ];\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (var current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            var container = current;\n            for (var i = 0; i < container[VIEWS].length; i++) {\n                var dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], dynamicViewData[CONTEXT]);\n            }\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nexport function componentRefresh(adjustedElementIndex) {\n    var lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    var hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType(lView[TVIEW].data[adjustedElementIndex], 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttachedToChangeDetector(hostView) &&\n        hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param componentView The view to sync\n */\nfunction syncViewWithBlueprint(componentView) {\n    var componentTView = componentView[TVIEW];\n    for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer to\n    // the end of the queue, which means if the developer retrieves the LContainers from RNodes out of\n    // order, the change detection will run out of order, as the act of retrieving the the LContainer\n    // from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 64 /* Dirty */;\n        var parent_2 = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent_2) {\n            return lView;\n        }\n        // continue otherwise\n        lView = parent_2;\n    }\n    return null;\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport function scheduleTick(rootContext, flags) {\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        var res_1;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                var playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            res_1(null);\n        });\n    }\n}\nexport function tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        var rootComponent = rootContext.components[i];\n        renderComponentOrTemplate(readPatchedLView(rootComponent), rootComponent);\n    }\n}\nexport function detectChangesInternal(view, context) {\n    var rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        if (isCreationMode(view)) {\n            checkView(view, context); // creation mode pass\n        }\n        checkView(view, context); // update mode pass\n    }\n    catch (error) {\n        handleError(view, error);\n        throw error;\n    }\n    finally {\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lView The view which the change detection should be performed on.\n */\nexport function detectChangesInRootView(lView) {\n    tickRootContext(lView[CONTEXT]);\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n */\nexport function checkNoChanges(component) {\n    var view = getComponentViewByInstance(component);\n    checkNoChangesInternal(view, component);\n}\nexport function checkNoChangesInternal(view, context) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(view, context);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lView The view which the change detection should be checked on.\n */\nexport function checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */\nexport function checkView(hostView, component) {\n    var hostTView = hostView[TVIEW];\n    var oldView = enterView(hostView, hostView[T_HOST]);\n    var templateFn = hostTView.template;\n    var creationMode = isCreationMode(hostView);\n    try {\n        resetPreOrderHookFlags(hostView);\n        namespaceHTML();\n        creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n        // Reset the selected index so we can assert that `select` was called later\n        ngDevMode && setSelectedIndex(-1);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        // Only check view queries again in creation mode if there are static view queries\n        if (!creationMode || hostTView.staticViewQueries) {\n            executeViewQueryFn(2 /* Update */, hostTView, component);\n        }\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\nfunction executeViewQueryFn(flags, tView, component) {\n    var viewQuery = tView.viewQuery;\n    if (viewQuery) {\n        setCurrentQueryIndex(tView.viewQueryStartIndex);\n        viewQuery(flags, component);\n    }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates binding metadata for a particular binding and stores it in\n * TView.data. These are generated in order to support DebugElement.properties.\n *\n * Each binding / interpolation will have one (including attribute bindings)\n * because at the time of binding, we don't know to which instruction the binding\n * belongs. It is always stored in TView.data at the index of the last binding\n * value in LView (e.g. for interpolation8, it would be stored at the index of\n * the 8th value).\n *\n * @param lView The LView that contains the current binding index.\n * @param prefix The static prefix string\n * @param suffix The static suffix string\n *\n * @returns Newly created binding metadata string for this binding or null\n */\nexport function storeBindingMetadata(lView, prefix, suffix) {\n    if (prefix === void 0) { prefix = ''; }\n    if (suffix === void 0) { suffix = ''; }\n    var tData = lView[TVIEW].data;\n    var lastBindingIndex = lView[BINDING_INDEX] - 1;\n    var value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n    return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n}\nexport var CLEAN_PROMISE = _CLEAN_PROMISE;\nexport function initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\nexport function getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nexport function loadComponentRenderer(tNode, lView) {\n    var componentLView = lView[tNode.index];\n    return componentLView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nexport function handleError(lView, error) {\n    var injector = lView[INJECTOR];\n    var errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param lView the `LView` which contains the directives.\n * @param inputAliases mapping between the public \"input\" name and privately-known,\n * possibly minified, property names to write to.\n * @param value Value to set.\n */\nexport function setInputsForProperty(lView, inputs, value) {\n    var tView = lView[TVIEW];\n    for (var i = 0; i < inputs.length;) {\n        var index = inputs[i++];\n        var publicName = inputs[i++];\n        var privateName = inputs[i++];\n        var instance = lView[index];\n        ngDevMode && assertDataInRange(lView, index);\n        var def = tView.data[index];\n        var setInput = def.setInput;\n        if (setInput) {\n            def.setInput(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9pbnN0cnVjdGlvbnMvc2hhcmVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUlqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQy9ILE9BQU8sRUFBQyxXQUFXLEVBQUUsc0JBQXNCLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDOUQsT0FBTyxFQUFDLGVBQWUsRUFBRSwwQkFBMEIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2pGLE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNqRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsOEJBQThCLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFDNUYsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RELE9BQU8sRUFBQyxZQUFZLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDbkYsT0FBTyxFQUFDLFlBQVksRUFBYyxLQUFLLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV4RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUd2RixPQUFPLEVBQXlELG9CQUFvQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFcEgsT0FBTyxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQXVCLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFB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LFFBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0wsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUMvQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7SW5qZWN0b3J9IGZyb20gJy4uLy4uL2RpJztcbmltcG9ydCB7RXJyb3JIYW5kbGVyfSBmcm9tICcuLi8uLi9lcnJvcl9oYW5kbGVyJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3R5cGUnO1xuaW1wb3J0IHtTY2hlbWFNZXRhZGF0YX0gZnJvbSAnLi4vLi4vbWV0YWRhdGEvc2NoZW1hJztcbmltcG9ydCB7U2FuaXRpemVyfSBmcm9tICcuLi8uLi9zYW5pdGl6YXRpb24vc2VjdXJpdHknO1xuaW1wb3J0IHthc3NlcnREYXRhSW5SYW5nZSwgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RG9tTm9kZSwgYXNzZXJ0RXF1YWwsIGFzc2VydExlc3NUaGFuLCBhc3NlcnROb3RFcXVhbH0gZnJvbSAnLi4vLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHthc3NlcnRMVmlldywgYXNzZXJ0UHJldmlvdXNJc1BhcmVudH0gZnJvbSAnLi4vYXNzZXJ0JztcbmltcG9ydCB7YXR0YWNoUGF0Y2hEYXRhLCBnZXRDb21wb25lbnRWaWV3QnlJbnN0YW5jZX0gZnJvbSAnLi4vY29udGV4dF9kaXNjb3ZlcnknO1xuaW1wb3J0IHthdHRhY2hMQ29udGFpbmVyRGVidWcsIGF0dGFjaExWaWV3RGVidWd9IGZyb20gJy4uL2RlYnVnJztcbmltcG9ydCB7ZGlQdWJsaWNJbkluamVjdG9yLCBnZXROb2RlSW5qZWN0YWJsZSwgZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlfSBmcm9tICcuLi9kaSc7XG5pbXBvcnQge3Rocm93TXVsdGlwbGVDb21wb25lbnRFcnJvcn0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7ZXhlY3V0ZUhvb2tzLCBleGVjdXRlUHJlT3JkZXJIb29rcywgcmVnaXN0ZXJQcmVPcmRlckhvb2tzfSBmcm9tICcuLi9ob29rcyc7XG5pbXBvcnQge0FDVElWRV9JTkRFWCwgTENvbnRhaW5lciwgVklFV1N9IGZyb20gJy4uL2ludGVyZmFjZXMvY29udGFpbmVyJztcbmltcG9ydCB7Q29tcG9uZW50RGVmLCBDb21wb25lbnRUZW1wbGF0ZSwgRGlyZWN0aXZlRGVmLCBEaXJlY3RpdmVEZWZMaXN0T3JGYWN0b3J5LCBQaXBlRGVmTGlzdE9yRmFjdG9yeSwgUmVuZGVyRmxhZ3MsIFZpZXdRdWVyaWVzRnVuY3Rpb259IGZyb20gJy4uL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5pbXBvcnQge0lOSkVDVE9SX0JMT09NX1BBUkVOVF9TSVpFLCBOb2RlSW5qZWN0b3JGYWN0b3J5fSBmcm9tICcuLi9pbnRlcmZhY2VzL2luamVjdG9yJztcbmltcG9ydCB7QXR0cmlidXRlTWFya2VyLCBJbml0aWFsSW5wdXREYXRhLCBJbml0aWFsSW5wdXRzLCBMb2NhbFJlZkV4dHJhY3RvciwgUHJvcGVydHlBbGlhc1ZhbHVlLCBQcm9wZXJ0eUFsaWFzZXMsIFRBdHRyaWJ1dGVzLCBUQ29udGFpbmVyTm9kZSwgVEVsZW1lbnRDb250YWluZXJOb2RlLCBURWxlbWVudE5vZGUsIFRJY3VDb250YWluZXJOb2RlLCBUTm9kZSwgVE5vZGVGbGFncywgVE5vZGVQcm92aWRlckluZGV4ZXMsIFROb2RlVHlwZSwgVFByb2plY3Rpb25Ob2RlLCBUVmlld05vZGV9IGZyb20gJy4uL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge0xRdWVyaWVzfSBmcm9tICcuLi9pbnRlcmZhY2VzL3F1ZXJ5JztcbmltcG9ydCB7UkNvbW1lbnQsIFJFbGVtZW50LCBSVGV4dCwgUmVuZGVyZXIzLCBSZW5kZXJlckZhY3RvcnkzLCBpc1Byb2NlZHVyYWxSZW5kZXJlcn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9yZW5kZXJlcic7XG5pbXBvcnQge1N0eWxpbmdDb250ZXh0fSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0eWxpbmcnO1xuaW1wb3J0IHtCSU5ESU5HX0lOREVYLCBDSElMRF9IRUFELCBDSElMRF9UQUlMLCBDTEVBTlVQLCBDT05URVhULCBERUNMQVJBVElPTl9WSUVXLCBFeHBhbmRvSW5zdHJ1Y3Rpb25zLCBGTEFHUywgSEVBREVSX09GRlNFVCwgSE9TVCwgSU5KRUNUT1IsIEluaXRQaGFzZVN0YXRlLCBMVmlldywgTFZpZXdGbGFncywgTkVYVCwgUEFSRU5ULCBRVUVSSUVTLCBSRU5ERVJFUiwgUkVOREVSRVJfRkFDVE9SWSwgUm9vdENvbnRleHQsIFJvb3RDb250ZXh0RmxhZ3MsIFNBTklUSVpFUiwgVFZJRVcsIFRWaWV3LCBUX0hPU1R9IGZyb20gJy4uL2ludGVyZmFjZXMvdmlldyc7XG5pbXBvcnQge2Fzc2VydE5vZGVPZlBvc3NpYmxlVHlwZXMsIGFzc2VydE5vZGVUeXBlfSBmcm9tICcuLi9ub2RlX2Fzc2VydCc7XG5pbXBvcnQge2lzTm9kZU1hdGNoaW5nU2VsZWN0b3JMaXN0fSBmcm9tICcuLi9ub2RlX3NlbGVjdG9yX21hdGNoZXInO1xuaW1wb3J0IHtlbnRlclZpZXcsIGdldEJpbmRpbmdzRW5hYmxlZCwgZ2V0Q2hlY2tOb0NoYW5nZXNNb2RlLCBnZXRJc1BhcmVudCwgZ2V0TFZpZXcsIGdldE5hbWVzcGFjZSwgZ2V0UHJldmlvdXNPclBhcmVudFROb2RlLCBpc0NyZWF0aW9uTW9kZSwgbGVhdmVWaWV3LCBuYW1lc3BhY2VIVE1MLCByZXNldENvbXBvbmVudFN0YXRlLCBzZXRBY3RpdmVIb3N0LCBzZXRCaW5kaW5nUm9vdCwgc2V0Q2hlY2tOb0NoYW5nZXNNb2RlLCBzZXRDdXJyZW50RGlyZWN0aXZlRGVmLCBzZXRDdXJyZW50UXVlcnlJbmRleCwgc2V0SXNQYXJlbnQsIHNldFByZXZpb3VzT3JQYXJlbnRUTm9kZSwgc2V0U2VsZWN0ZWRJbmRleH0gZnJvbSAnLi4vc3RhdGUnO1xuaW1wb3J0IHtpbml0aWFsaXplU3RhdGljQ29udGV4dCBhcyBpbml0aWFsaXplU3RhdGljU3R5bGluZ0NvbnRleHR9IGZyb20gJy4uL3N0eWxpbmcvY2xhc3NfYW5kX3N0eWxlX2JpbmRpbmdzJztcbmltcG9ydCB7Tk9fQ0hBTkdFfSBmcm9tICcuLi90b2tlbnMnO1xuaW1wb3J0IHthdHRyc1N0eWxpbmdJbmRleE9mfSBmcm9tICcuLi91dGlsL2F0dHJzX3V0aWxzJztcbmltcG9ydCB7SU5URVJQT0xBVElPTl9ERUxJTUlURVIsIHJlbmRlclN0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9taXNjX3V0aWxzJztcbmltcG9ydCB7Z2V0TFZpZXdQYXJlbnQsIGdldFJvb3RDb250ZXh0fSBmcm9tICcuLi91dGlsL3ZpZXdfdHJhdmVyc2FsX3V0aWxzJztcbmltcG9ydCB7Z2V0Q29tcG9uZW50Vmlld0J5SW5kZXgsIGdldE5hdGl2ZUJ5VE5vZGUsIGlzQ29tcG9uZW50RGVmLCBpc0NvbnRlbnRRdWVyeUhvc3QsIGlzUm9vdFZpZXcsIHJlYWRQYXRjaGVkTFZpZXcsIHJlc2V0UHJlT3JkZXJIb29rRmxhZ3MsIHVud3JhcFJOb2RlLCB2aWV3QXR0YWNoZWRUb0NoYW5nZURldGVjdG9yfSBmcm9tICcuLi91dGlsL3ZpZXdfdXRpbHMnO1xuXG4vKipcbiAqIEEgcGVybWFuZW50IG1hcmtlciBwcm9taXNlIHdoaWNoIHNpZ25pZmllcyB0aGF0IHRoZSBjdXJyZW50IENEIHRyZWUgaXNcbiAqIGNsZWFuLlxuICovXG5jb25zdCBfQ0xFQU5fUFJPTUlTRSA9IFByb21pc2UucmVzb2x2ZShudWxsKTtcblxuZXhwb3J0IGNvbnN0IGVudW0gQmluZGluZ0RpcmVjdGlvbiB7XG4gIElucHV0LFxuICBPdXRwdXQsXG59XG5cbi8qKlxuICogUmVmcmVzaGVzIHRoZSB2aWV3LCBleGVjdXRpbmcgdGhlIGZvbGxvd2luZyBzdGVwcyBpbiB0aGF0IG9yZGVyOlxuICogdHJpZ2dlcnMgaW5pdCBob29rcywgcmVmcmVzaGVzIGR5bmFtaWMgZW1iZWRkZWQgdmlld3MsIHRyaWdnZXJzIGNvbnRlbnQgaG9va3MsIHNldHMgaG9zdFxuICogYmluZGluZ3MsIHJlZnJlc2hlcyBjaGlsZCBjb21wb25lbnRzLlxuICogTm90ZTogdmlldyBob29rcyBhcmUgdHJpZ2dlcmVkIGxhdGVyIHdoZW4gbGVhdmluZyB0aGUgdmlldy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZnJlc2hEZXNjZW5kYW50Vmlld3MobFZpZXc6IExWaWV3KSB7XG4gIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICBjb25zdCBjcmVhdGlvbk1vZGUgPSBpc0NyZWF0aW9uTW9kZShsVmlldyk7XG5cbiAgLy8gVGhpcyBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIGNoaWxkcmVuIGFyZSBwcm9jZXNzZWQgdG8gc3VwcG9ydCByZWN1cnNpdmUgY29tcG9uZW50c1xuICB0Vmlldy5maXJzdFRlbXBsYXRlUGFzcyA9IGZhbHNlO1xuXG4gIC8vIFJlc2V0dGluZyB0aGUgYmluZGluZ0luZGV4IG9mIHRoZSBjdXJyZW50IExWaWV3IGFzIHRoZSBuZXh0IHN0ZXBzIG1heSB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24uXG4gIGxWaWV3W0JJTkRJTkdfSU5ERVhdID0gdFZpZXcuYmluZGluZ1N0YXJ0SW5kZXg7XG5cbiAgLy8gSWYgdGhpcyBpcyBhIGNyZWF0aW9uIHBhc3MsIHdlIHNob3VsZCBub3QgY2FsbCBsaWZlY3ljbGUgaG9va3Mgb3IgZXZhbHVhdGUgYmluZGluZ3MuXG4gIC8vIFRoaXMgd2lsbCBiZSBkb25lIGluIHRoZSB1cGRhdGUgcGFzcy5cbiAgaWYgKCFjcmVhdGlvbk1vZGUpIHtcbiAgICBjb25zdCBjaGVja05vQ2hhbmdlc01vZGUgPSBnZXRDaGVja05vQ2hhbmdlc01vZGUoKTtcblxuICAgIGV4ZWN1dGVQcmVPcmRlckhvb2tzKGxWaWV3LCB0VmlldywgY2hlY2tOb0NoYW5nZXNNb2RlLCB1bmRlZmluZWQpO1xuXG4gICAgcmVmcmVzaER5bmFtaWNFbWJlZGRlZFZpZXdzKGxWaWV3KTtcblxuICAgIC8vIENvbnRlbnQgcXVlcnkgcmVzdWx0cyBtdXN0IGJlIHJlZnJlc2hlZCBiZWZvcmUgY29udGVudCBob29rcyBhcmUgY2FsbGVkLlxuICAgIHJlZnJlc2hDb250ZW50UXVlcmllcyh0VmlldywgbFZpZXcpO1xuXG4gICAgcmVzZXRQcmVPcmRlckhvb2tGbGFncyhsVmlldyk7XG4gICAgZXhlY3V0ZUhvb2tzKFxuICAgICAgICBsVmlldywgdFZpZXcuY29udGVudEhvb2tzLCB0Vmlldy5jb250ZW50Q2hlY2tIb29rcywgY2hlY2tOb0NoYW5nZXNNb2RlLFxuICAgICAgICBJbml0UGhhc2VTdGF0ZS5BZnRlckNvbnRlbnRJbml0SG9va3NUb0JlUnVuLCB1bmRlZmluZWQpO1xuXG4gICAgc2V0SG9zdEJpbmRpbmdzKHRWaWV3LCBsVmlldyk7XG4gIH1cblxuICAvLyBXZSByZXNvbHZlIGNvbnRlbnQgcXVlcmllcyBzcGVjaWZpY2FsbHkgbWFya2VkIGFzIGBzdGF0aWNgIGluIGNyZWF0aW9uIG1vZGUuIER5bmFtaWNcbiAgLy8gY29udGVudCBxdWVyaWVzIGFyZSByZXNvbHZlZCBkdXJpbmcgY2hhbmdlIGRldGVjdGlvbiAoaS5lLiB1cGRhdGUgbW9kZSksIGFmdGVyIGVtYmVkZGVkXG4gIC8vIHZpZXdzIGFyZSByZWZyZXNoZWQgKHNlZSBibG9jayBhYm92ZSkuXG4gIGlmIChjcmVhdGlvbk1vZGUgJiYgdFZpZXcuc3RhdGljQ29udGVudFF1ZXJpZXMpIHtcbiAgICByZWZyZXNoQ29udGVudFF1ZXJpZXModFZpZXcsIGxWaWV3KTtcbiAgfVxuXG4gIHJlZnJlc2hDaGlsZENvbXBvbmVudHModFZpZXcuY29tcG9uZW50cyk7XG59XG5cblxuLyoqIFNldHMgdGhlIGhvc3QgYmluZGluZ3MgZm9yIHRoZSBjdXJyZW50IHZpZXcuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SG9zdEJpbmRpbmdzKHRWaWV3OiBUVmlldywgdmlld0RhdGE6IExWaWV3KTogdm9pZCB7XG4gIGlmICh0Vmlldy5leHBhbmRvSW5zdHJ1Y3Rpb25zKSB7XG4gICAgbGV0IGJpbmRpbmdSb290SW5kZXggPSB2aWV3RGF0YVtCSU5ESU5HX0lOREVYXSA9IHRWaWV3LmV4cGFuZG9TdGFydEluZGV4O1xuICAgIHNldEJpbmRpbmdSb290KGJpbmRpbmdSb290SW5kZXgpO1xuICAgIGxldCBjdXJyZW50RGlyZWN0aXZlSW5kZXggPSAtMTtcbiAgICBsZXQgY3VycmVudEVsZW1lbnRJbmRleCA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdFZpZXcuZXhwYW5kb0luc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSB0Vmlldy5leHBhbmRvSW5zdHJ1Y3Rpb25zW2ldO1xuICAgICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGluc3RydWN0aW9uIDw9IDApIHtcbiAgICAgICAgICAvLyBOZWdhdGl2ZSBudW1iZXJzIG1lYW4gdGhhdCB3ZSBhcmUgc3RhcnRpbmcgbmV3IEVYUEFORE8gYmxvY2sgYW5kIG5lZWQgdG8gdXBkYXRlXG4gICAgICAgICAgLy8gdGhlIGN1cnJlbnQgZWxlbWVudCBhbmQgZGlyZWN0aXZlIGluZGV4LlxuICAgICAgICAgIGN1cnJlbnRFbGVtZW50SW5kZXggPSAtaW5zdHJ1Y3Rpb247XG4gICAgICAgICAgLy8gSW5qZWN0b3IgYmxvY2sgYW5kIHByb3ZpZGVycyBhcmUgdGFrZW4gaW50byBhY2NvdW50LlxuICAgICAgICAgIGNvbnN0IHByb3ZpZGVyQ291bnQgPSAodFZpZXcuZXhwYW5kb0luc3RydWN0aW9uc1srK2ldIGFzIG51bWJlcik7XG4gICAgICAgICAgYmluZGluZ1Jvb3RJbmRleCArPSBJTkpFQ1RPUl9CTE9PTV9QQVJFTlRfU0laRSArIHByb3ZpZGVyQ291bnQ7XG5cbiAgICAgICAgICBjdXJyZW50RGlyZWN0aXZlSW5kZXggPSBiaW5kaW5nUm9vdEluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoaXMgaXMgZWl0aGVyIHRoZSBpbmplY3RvciBzaXplIChzbyB0aGUgYmluZGluZyByb290IGNhbiBza2lwIG92ZXIgZGlyZWN0aXZlc1xuICAgICAgICAgIC8vIGFuZCBnZXQgdG8gdGhlIGZpcnN0IHNldCBvZiBob3N0IGJpbmRpbmdzIG9uIHRoaXMgbm9kZSkgb3IgdGhlIGhvc3QgdmFyIGNvdW50XG4gICAgICAgICAgLy8gKHRvIGdldCB0byB0aGUgbmV4dCBzZXQgb2YgaG9zdCBiaW5kaW5ncyBvbiB0aGlzIG5vZGUpLlxuICAgICAgICAgIGJpbmRpbmdSb290SW5kZXggKz0gaW5zdHJ1Y3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgc2V0QmluZGluZ1Jvb3QoYmluZGluZ1Jvb3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciwgaXQncyBhIGhvc3QgYmluZGluZyBmdW5jdGlvbiB0aGF0IG5lZWRzIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICB2aWV3RGF0YVtCSU5ESU5HX0lOREVYXSA9IGJpbmRpbmdSb290SW5kZXg7XG4gICAgICAgICAgY29uc3QgaG9zdEN0eCA9IHVud3JhcFJOb2RlKHZpZXdEYXRhW2N1cnJlbnREaXJlY3RpdmVJbmRleF0pO1xuICAgICAgICAgIHNldEFjdGl2ZUhvc3QoaG9zdEN0eCwgY3VycmVudEVsZW1lbnRJbmRleCk7XG4gICAgICAgICAgaW5zdHJ1Y3Rpb24oUmVuZGVyRmxhZ3MuVXBkYXRlLCBob3N0Q3R4LCBjdXJyZW50RWxlbWVudEluZGV4KTtcbiAgICAgICAgICBzZXRBY3RpdmVIb3N0KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnREaXJlY3RpdmVJbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiogUmVmcmVzaGVzIGNvbnRlbnQgcXVlcmllcyBmb3IgYWxsIGRpcmVjdGl2ZXMgaW4gdGhlIGdpdmVuIHZpZXcuICovXG5mdW5jdGlvbiByZWZyZXNoQ29udGVudFF1ZXJpZXModFZpZXc6IFRWaWV3LCBsVmlldzogTFZpZXcpOiB2b2lkIHtcbiAgaWYgKHRWaWV3LmNvbnRlbnRRdWVyaWVzICE9IG51bGwpIHtcbiAgICBzZXRDdXJyZW50UXVlcnlJbmRleCgwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRWaWV3LmNvbnRlbnRRdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmVEZWZJZHggPSB0Vmlldy5jb250ZW50UXVlcmllc1tpXTtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZiA9IHRWaWV3LmRhdGFbZGlyZWN0aXZlRGVmSWR4XSBhcyBEaXJlY3RpdmVEZWY8YW55PjtcbiAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgIGFzc2VydERlZmluZWQoZGlyZWN0aXZlRGVmLmNvbnRlbnRRdWVyaWVzLCAnY29udGVudFF1ZXJpZXMgZnVuY3Rpb24gc2hvdWxkIGJlIGRlZmluZWQnKTtcbiAgICAgIGRpcmVjdGl2ZURlZi5jb250ZW50UXVlcmllcyAhKFJlbmRlckZsYWdzLlVwZGF0ZSwgbFZpZXdbZGlyZWN0aXZlRGVmSWR4XSwgZGlyZWN0aXZlRGVmSWR4KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqIFJlZnJlc2hlcyBjaGlsZCBjb21wb25lbnRzIGluIHRoZSBjdXJyZW50IHZpZXcuICovXG5mdW5jdGlvbiByZWZyZXNoQ2hpbGRDb21wb25lbnRzKGNvbXBvbmVudHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICBpZiAoY29tcG9uZW50cyAhPSBudWxsKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb21wb25lbnRSZWZyZXNoKGNvbXBvbmVudHNbaV0pO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5hdGl2ZSBlbGVtZW50IGZyb20gYSB0YWcgbmFtZSwgdXNpbmcgYSByZW5kZXJlci5cbiAqIEBwYXJhbSBuYW1lIHRoZSB0YWcgbmFtZVxuICogQHBhcmFtIG92ZXJyaWRkZW5SZW5kZXJlciBPcHRpb25hbCBBIHJlbmRlcmVyIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9uZVxuICogQHJldHVybnMgdGhlIGVsZW1lbnQgY3JlYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudENyZWF0ZShuYW1lOiBzdHJpbmcsIG92ZXJyaWRkZW5SZW5kZXJlcj86IFJlbmRlcmVyMyk6IFJFbGVtZW50IHtcbiAgbGV0IG5hdGl2ZTogUkVsZW1lbnQ7XG4gIGNvbnN0IHJlbmRlcmVyVG9Vc2UgPSBvdmVycmlkZGVuUmVuZGVyZXIgfHwgZ2V0TFZpZXcoKVtSRU5ERVJFUl07XG5cbiAgY29uc3QgbmFtZXNwYWNlID0gZ2V0TmFtZXNwYWNlKCk7XG5cbiAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyVG9Vc2UpKSB7XG4gICAgbmF0aXZlID0gcmVuZGVyZXJUb1VzZS5jcmVhdGVFbGVtZW50KG5hbWUsIG5hbWVzcGFjZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG5hbWVzcGFjZSA9PT0gbnVsbCkge1xuICAgICAgbmF0aXZlID0gcmVuZGVyZXJUb1VzZS5jcmVhdGVFbGVtZW50KG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYXRpdmUgPSByZW5kZXJlclRvVXNlLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmF0aXZlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTFZpZXc8VD4oXG4gICAgcGFyZW50TFZpZXc6IExWaWV3IHwgbnVsbCwgdFZpZXc6IFRWaWV3LCBjb250ZXh0OiBUIHwgbnVsbCwgZmxhZ3M6IExWaWV3RmxhZ3MsXG4gICAgaG9zdDogUkVsZW1lbnQgfCBudWxsLCB0SG9zdE5vZGU6IFRWaWV3Tm9kZSB8IFRFbGVtZW50Tm9kZSB8IG51bGwsXG4gICAgcmVuZGVyZXJGYWN0b3J5PzogUmVuZGVyZXJGYWN0b3J5MyB8IG51bGwsIHJlbmRlcmVyPzogUmVuZGVyZXIzIHwgbnVsbCxcbiAgICBzYW5pdGl6ZXI/OiBTYW5pdGl6ZXIgfCBudWxsLCBpbmplY3Rvcj86IEluamVjdG9yIHwgbnVsbCk6IExWaWV3IHtcbiAgY29uc3QgbFZpZXcgPSB0Vmlldy5ibHVlcHJpbnQuc2xpY2UoKSBhcyBMVmlldztcbiAgbFZpZXdbSE9TVF0gPSBob3N0O1xuICBsVmlld1tGTEFHU10gPSBmbGFncyB8IExWaWV3RmxhZ3MuQ3JlYXRpb25Nb2RlIHwgTFZpZXdGbGFncy5BdHRhY2hlZCB8IExWaWV3RmxhZ3MuRmlyc3RMVmlld1Bhc3M7XG4gIHJlc2V0UHJlT3JkZXJIb29rRmxhZ3MobFZpZXcpO1xuICBsVmlld1tQQVJFTlRdID0gbFZpZXdbREVDTEFSQVRJT05fVklFV10gPSBwYXJlbnRMVmlldztcbiAgbFZpZXdbQ09OVEVYVF0gPSBjb250ZXh0O1xuICBsVmlld1tSRU5ERVJFUl9GQUNUT1JZXSA9IChyZW5kZXJlckZhY3RvcnkgfHwgcGFyZW50TFZpZXcgJiYgcGFyZW50TFZpZXdbUkVOREVSRVJfRkFDVE9SWV0pICE7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGxWaWV3W1JFTkRFUkVSX0ZBQ1RPUlldLCAnUmVuZGVyZXJGYWN0b3J5IGlzIHJlcXVpcmVkJyk7XG4gIGxWaWV3W1JFTkRFUkVSXSA9IChyZW5kZXJlciB8fCBwYXJlbnRMVmlldyAmJiBwYXJlbnRMVmlld1tSRU5ERVJFUl0pICE7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGxWaWV3W1JFTkRFUkVSXSwgJ1JlbmRlcmVyIGlzIHJlcXVpcmVkJyk7XG4gIGxWaWV3W1NBTklUSVpFUl0gPSBzYW5pdGl6ZXIgfHwgcGFyZW50TFZpZXcgJiYgcGFyZW50TFZpZXdbU0FOSVRJWkVSXSB8fCBudWxsICE7XG4gIGxWaWV3W0lOSkVDVE9SIGFzIGFueV0gPSBpbmplY3RvciB8fCBwYXJlbnRMVmlldyAmJiBwYXJlbnRMVmlld1tJTkpFQ1RPUl0gfHwgbnVsbDtcbiAgbFZpZXdbVF9IT1NUXSA9IHRIb3N0Tm9kZTtcbiAgbmdEZXZNb2RlICYmIGF0dGFjaExWaWV3RGVidWcobFZpZXcpO1xuICByZXR1cm4gbFZpZXc7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuZCBzdG9yZXMgdGhlIFROb2RlLCBhbmQgaG9va3MgaXQgdXAgdG8gdGhlIHRyZWUuXG4gKlxuICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0aGUgVE5vZGUgc2hvdWxkIGJlIHNhdmVkIChudWxsIGlmIHZpZXcsIHNpbmNlIHRoZXkgYXJlIG5vdFxuICogc2F2ZWQpLlxuICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgVE5vZGUgdG8gY3JlYXRlXG4gKiBAcGFyYW0gbmF0aXZlIFRoZSBuYXRpdmUgZWxlbWVudCBmb3IgdGhpcyBub2RlLCBpZiBhcHBsaWNhYmxlXG4gKiBAcGFyYW0gbmFtZSBUaGUgdGFnIG5hbWUgb2YgdGhlIGFzc29jaWF0ZWQgbmF0aXZlIGVsZW1lbnQsIGlmIGFwcGxpY2FibGVcbiAqIEBwYXJhbSBhdHRycyBBbnkgYXR0cnMgZm9yIHRoZSBuYXRpdmUgZWxlbWVudCwgaWYgYXBwbGljYWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9kZUF0SW5kZXgoXG4gICAgaW5kZXg6IG51bWJlciwgdHlwZTogVE5vZGVUeXBlLkVsZW1lbnQsIG5hdGl2ZTogUkVsZW1lbnQgfCBSVGV4dCB8IG51bGwsIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgYXR0cnM6IFRBdHRyaWJ1dGVzIHwgbnVsbCk6IFRFbGVtZW50Tm9kZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb2RlQXRJbmRleChcbiAgICBpbmRleDogbnVtYmVyLCB0eXBlOiBUTm9kZVR5cGUuQ29udGFpbmVyLCBuYXRpdmU6IFJDb21tZW50LCBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGF0dHJzOiBUQXR0cmlidXRlcyB8IG51bGwpOiBUQ29udGFpbmVyTm9kZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb2RlQXRJbmRleChcbiAgICBpbmRleDogbnVtYmVyLCB0eXBlOiBUTm9kZVR5cGUuUHJvamVjdGlvbiwgbmF0aXZlOiBudWxsLCBuYW1lOiBudWxsLFxuICAgIGF0dHJzOiBUQXR0cmlidXRlcyB8IG51bGwpOiBUUHJvamVjdGlvbk5vZGU7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9kZUF0SW5kZXgoXG4gICAgaW5kZXg6IG51bWJlciwgdHlwZTogVE5vZGVUeXBlLkVsZW1lbnRDb250YWluZXIsIG5hdGl2ZTogUkNvbW1lbnQsIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgYXR0cnM6IFRBdHRyaWJ1dGVzIHwgbnVsbCk6IFRFbGVtZW50Q29udGFpbmVyTm9kZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb2RlQXRJbmRleChcbiAgICBpbmRleDogbnVtYmVyLCB0eXBlOiBUTm9kZVR5cGUuSWN1Q29udGFpbmVyLCBuYXRpdmU6IFJDb21tZW50LCBuYW1lOiBudWxsLFxuICAgIGF0dHJzOiBUQXR0cmlidXRlcyB8IG51bGwpOiBURWxlbWVudENvbnRhaW5lck5vZGU7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9kZUF0SW5kZXgoXG4gICAgaW5kZXg6IG51bWJlciwgdHlwZTogVE5vZGVUeXBlLCBuYXRpdmU6IFJUZXh0IHwgUkVsZW1lbnQgfCBSQ29tbWVudCB8IG51bGwsIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgYXR0cnM6IFRBdHRyaWJ1dGVzIHwgbnVsbCk6IFRFbGVtZW50Tm9kZSZUQ29udGFpbmVyTm9kZSZURWxlbWVudENvbnRhaW5lck5vZGUmVFByb2plY3Rpb25Ob2RlJlxuICAgIFRJY3VDb250YWluZXJOb2RlIHtcbiAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICBjb25zdCB0VmlldyA9IGxWaWV3W1RWSUVXXTtcbiAgY29uc3QgYWRqdXN0ZWRJbmRleCA9IGluZGV4ICsgSEVBREVSX09GRlNFVDtcbiAgbmdEZXZNb2RlICYmXG4gICAgICBhc3NlcnRMZXNzVGhhbihhZGp1c3RlZEluZGV4LCBsVmlldy5sZW5ndGgsIGBTbG90IHNob3VsZCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgd2l0aCBudWxsYCk7XG4gIGxWaWV3W2FkanVzdGVkSW5kZXhdID0gbmF0aXZlO1xuXG4gIGNvbnN0IHByZXZpb3VzT3JQYXJlbnRUTm9kZSA9IGdldFByZXZpb3VzT3JQYXJlbnRUTm9kZSgpO1xuICBjb25zdCBpc1BhcmVudCA9IGdldElzUGFyZW50KCk7XG4gIGxldCB0Tm9kZSA9IHRWaWV3LmRhdGFbYWRqdXN0ZWRJbmRleF0gYXMgVE5vZGU7XG4gIGlmICh0Tm9kZSA9PSBudWxsKSB7XG4gICAgY29uc3QgcGFyZW50ID1cbiAgICAgICAgaXNQYXJlbnQgPyBwcmV2aW91c09yUGFyZW50VE5vZGUgOiBwcmV2aW91c09yUGFyZW50VE5vZGUgJiYgcHJldmlvdXNPclBhcmVudFROb2RlLnBhcmVudDtcblxuICAgIC8vIFBhcmVudHMgY2Fubm90IGNyb3NzIGNvbXBvbmVudCBib3VuZGFyaWVzIGJlY2F1c2UgY29tcG9uZW50cyB3aWxsIGJlIHVzZWQgaW4gbXVsdGlwbGUgcGxhY2VzLFxuICAgIC8vIHNvIGl0J3Mgb25seSBzZXQgaWYgdGhlIHZpZXcgaXMgdGhlIHNhbWUuXG4gICAgY29uc3QgcGFyZW50SW5TYW1lVmlldyA9IHBhcmVudCAmJiBwYXJlbnQgIT09IGxWaWV3W1RfSE9TVF07XG4gICAgY29uc3QgdFBhcmVudE5vZGUgPSBwYXJlbnRJblNhbWVWaWV3ID8gcGFyZW50IGFzIFRFbGVtZW50Tm9kZSB8IFRDb250YWluZXJOb2RlIDogbnVsbDtcblxuICAgIHROb2RlID0gdFZpZXcuZGF0YVthZGp1c3RlZEluZGV4XSA9IGNyZWF0ZVROb2RlKHRQYXJlbnROb2RlLCB0eXBlLCBhZGp1c3RlZEluZGV4LCBuYW1lLCBhdHRycyk7XG4gIH1cblxuICAvLyBOb3cgbGluayBvdXJzZWx2ZXMgaW50byB0aGUgdHJlZS5cbiAgLy8gV2UgbmVlZCB0aGlzIGV2ZW4gaWYgdE5vZGUgZXhpc3RzLCBvdGhlcndpc2Ugd2UgbWlnaHQgZW5kIHVwIHBvaW50aW5nIHRvIHVuZXhpc3RpbmcgdE5vZGVzIHdoZW5cbiAgLy8gd2UgdXNlIGkxOG4gKGVzcGVjaWFsbHkgd2l0aCBJQ1UgZXhwcmVzc2lvbnMgdGhhdCB1cGRhdGUgdGhlIERPTSBkdXJpbmcgdGhlIHVwZGF0ZSBwaGFzZSkuXG4gIGlmIChwcmV2aW91c09yUGFyZW50VE5vZGUpIHtcbiAgICBpZiAoaXNQYXJlbnQgJiYgcHJldmlvdXNPclBhcmVudFROb2RlLmNoaWxkID09IG51bGwgJiZcbiAgICAgICAgKHROb2RlLnBhcmVudCAhPT0gbnVsbCB8fCBwcmV2aW91c09yUGFyZW50VE5vZGUudHlwZSA9PT0gVE5vZGVUeXBlLlZpZXcpKSB7XG4gICAgICAvLyBXZSBhcmUgaW4gdGhlIHNhbWUgdmlldywgd2hpY2ggbWVhbnMgd2UgYXJlIGFkZGluZyBjb250ZW50IG5vZGUgdG8gdGhlIHBhcmVudCB2aWV3LlxuICAgICAgcHJldmlvdXNPclBhcmVudFROb2RlLmNoaWxkID0gdE5vZGU7XG4gICAgfSBlbHNlIGlmICghaXNQYXJlbnQpIHtcbiAgICAgIHByZXZpb3VzT3JQYXJlbnRUTm9kZS5uZXh0ID0gdE5vZGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRWaWV3LmZpcnN0Q2hpbGQgPT0gbnVsbCkge1xuICAgIHRWaWV3LmZpcnN0Q2hpbGQgPSB0Tm9kZTtcbiAgfVxuXG4gIHNldFByZXZpb3VzT3JQYXJlbnRUTm9kZSh0Tm9kZSk7XG4gIHNldElzUGFyZW50KHRydWUpO1xuICByZXR1cm4gdE5vZGUgYXMgVEVsZW1lbnROb2RlICYgVFZpZXdOb2RlICYgVENvbnRhaW5lck5vZGUgJiBURWxlbWVudENvbnRhaW5lck5vZGUgJlxuICAgICAgVFByb2plY3Rpb25Ob2RlICYgVEljdUNvbnRhaW5lck5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25UVmlld05vZGVUb0xWaWV3KFxuICAgIHRWaWV3OiBUVmlldywgdFBhcmVudE5vZGU6IFROb2RlIHwgbnVsbCwgaW5kZXg6IG51bWJlciwgbFZpZXc6IExWaWV3KTogVFZpZXdOb2RlIHtcbiAgLy8gVmlldyBub2RlcyBhcmUgbm90IHN0b3JlZCBpbiBkYXRhIGJlY2F1c2UgdGhleSBjYW4gYmUgYWRkZWQgLyByZW1vdmVkIGF0IHJ1bnRpbWUgKHdoaWNoXG4gIC8vIHdvdWxkIGNhdXNlIGluZGljZXMgdG8gY2hhbmdlKS4gVGhlaXIgVE5vZGVzIGFyZSBpbnN0ZWFkIHN0b3JlZCBpbiB0Vmlldy5ub2RlLlxuICBsZXQgdE5vZGUgPSB0Vmlldy5ub2RlO1xuICBpZiAodE5vZGUgPT0gbnVsbCkge1xuICAgIG5nRGV2TW9kZSAmJiB0UGFyZW50Tm9kZSAmJlxuICAgICAgICBhc3NlcnROb2RlT2ZQb3NzaWJsZVR5cGVzKHRQYXJlbnROb2RlLCBUTm9kZVR5cGUuRWxlbWVudCwgVE5vZGVUeXBlLkNvbnRhaW5lcik7XG4gICAgdFZpZXcubm9kZSA9IHROb2RlID0gY3JlYXRlVE5vZGUoXG4gICAgICAgIHRQYXJlbnROb2RlIGFzIFRFbGVtZW50Tm9kZSB8IFRDb250YWluZXJOb2RlIHwgbnVsbCwgIC8vXG4gICAgICAgIFROb2RlVHlwZS5WaWV3LCBpbmRleCwgbnVsbCwgbnVsbCkgYXMgVFZpZXdOb2RlO1xuICB9XG5cbiAgcmV0dXJuIGxWaWV3W1RfSE9TVF0gPSB0Tm9kZSBhcyBUVmlld05vZGU7XG59XG5cblxuLyoqXG4gKiBXaGVuIGVsZW1lbnRzIGFyZSBjcmVhdGVkIGR5bmFtaWNhbGx5IGFmdGVyIGEgdmlldyBibHVlcHJpbnQgaXMgY3JlYXRlZCAoZS5nLiB0aHJvdWdoXG4gKiBpMThuQXBwbHkoKSBvciBDb21wb25lbnRGYWN0b3J5LmNyZWF0ZSksIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBibHVlcHJpbnQgZm9yIGZ1dHVyZVxuICogdGVtcGxhdGUgcGFzc2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2NFeHBhbmRvKHZpZXc6IExWaWV3LCBudW1TbG90c1RvQWxsb2M6IG51bWJlcikge1xuICBjb25zdCB0VmlldyA9IHZpZXdbVFZJRVddO1xuICBpZiAodFZpZXcuZmlyc3RUZW1wbGF0ZVBhc3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNsb3RzVG9BbGxvYzsgaSsrKSB7XG4gICAgICB0Vmlldy5ibHVlcHJpbnQucHVzaChudWxsKTtcbiAgICAgIHRWaWV3LmRhdGEucHVzaChudWxsKTtcbiAgICAgIHZpZXcucHVzaChudWxsKTtcbiAgICB9XG5cbiAgICAvLyBXZSBzaG91bGQgb25seSBpbmNyZW1lbnQgdGhlIGV4cGFuZG8gc3RhcnQgaW5kZXggaWYgdGhlcmUgYXJlbid0IGFscmVhZHkgZGlyZWN0aXZlc1xuICAgIC8vIGFuZCBpbmplY3RvcnMgc2F2ZWQgaW4gdGhlIFwiZXhwYW5kb1wiIHNlY3Rpb25cbiAgICBpZiAoIXRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMpIHtcbiAgICAgIHRWaWV3LmV4cGFuZG9TdGFydEluZGV4ICs9IG51bVNsb3RzVG9BbGxvYztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2luY2Ugd2UncmUgYWRkaW5nIHRoZSBkeW5hbWljIG5vZGVzIGludG8gdGhlIGV4cGFuZG8gc2VjdGlvbiwgd2UgbmVlZCB0byBsZXQgdGhlIGhvc3RcbiAgICAgIC8vIGJpbmRpbmdzIGtub3cgdGhhdCB0aGV5IHNob3VsZCBza2lwIHggc2xvdHNcbiAgICAgIHRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMucHVzaChudW1TbG90c1RvQWxsb2MpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIFJlbmRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKlxuICogQHBhcmFtIGhvc3ROb2RlIEV4aXN0aW5nIG5vZGUgdG8gcmVuZGVyIGludG8uXG4gKiBAcGFyYW0gdGVtcGxhdGVGbiBUZW1wbGF0ZSBmdW5jdGlvbiB3aXRoIHRoZSBpbnN0cnVjdGlvbnMuXG4gKiBAcGFyYW0gY29uc3RzIFRoZSBudW1iZXIgb2Ygbm9kZXMsIGxvY2FsIHJlZnMsIGFuZCBwaXBlcyBpbiB0aGlzIHRlbXBsYXRlXG4gKiBAcGFyYW0gY29udGV4dCB0byBwYXNzIGludG8gdGhlIHRlbXBsYXRlLlxuICogQHBhcmFtIHByb3ZpZGVkUmVuZGVyZXJGYWN0b3J5IHJlbmRlcmVyIGZhY3RvcnkgdG8gdXNlXG4gKiBAcGFyYW0gaG9zdCBUaGUgaG9zdCBlbGVtZW50IG5vZGUgdG8gdXNlXG4gKiBAcGFyYW0gZGlyZWN0aXZlcyBEaXJlY3RpdmUgZGVmcyB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBtYXRjaGluZ1xuICogQHBhcmFtIHBpcGVzIFBpcGUgZGVmcyB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBtYXRjaGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGVtcGxhdGU8VD4oXG4gICAgaG9zdE5vZGU6IFJFbGVtZW50LCB0ZW1wbGF0ZUZuOiBDb21wb25lbnRUZW1wbGF0ZTxUPiwgY29uc3RzOiBudW1iZXIsIHZhcnM6IG51bWJlciwgY29udGV4dDogVCxcbiAgICBwcm92aWRlZFJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MywgY29tcG9uZW50VmlldzogTFZpZXcgfCBudWxsLFxuICAgIGRpcmVjdGl2ZXM/OiBEaXJlY3RpdmVEZWZMaXN0T3JGYWN0b3J5IHwgbnVsbCwgcGlwZXM/OiBQaXBlRGVmTGlzdE9yRmFjdG9yeSB8IG51bGwsXG4gICAgc2FuaXRpemVyPzogU2FuaXRpemVyIHwgbnVsbCk6IExWaWV3IHtcbiAgaWYgKGNvbXBvbmVudFZpZXcgPT09IG51bGwpIHtcbiAgICByZXNldENvbXBvbmVudFN0YXRlKCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBwcm92aWRlZFJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcblxuICAgIC8vIFdlIG5lZWQgdG8gY3JlYXRlIGEgcm9vdCB2aWV3IHNvIGl0J3MgcG9zc2libGUgdG8gbG9vayB1cCB0aGUgaG9zdCBlbGVtZW50IHRocm91Z2ggaXRzIGluZGV4XG4gICAgY29uc3QgaG9zdExWaWV3ID0gY3JlYXRlTFZpZXcoXG4gICAgICAgIG51bGwsIGNyZWF0ZVRWaWV3KC0xLCBudWxsLCAxLCAwLCBudWxsLCBudWxsLCBudWxsLCBudWxsKSwge30sXG4gICAgICAgIExWaWV3RmxhZ3MuQ2hlY2tBbHdheXMgfCBMVmlld0ZsYWdzLklzUm9vdCwgbnVsbCwgbnVsbCwgcHJvdmlkZWRSZW5kZXJlckZhY3RvcnksIHJlbmRlcmVyKTtcbiAgICBlbnRlclZpZXcoaG9zdExWaWV3LCBudWxsKTsgIC8vIFNVU1BFQ1QhIHdoeSBkbyB3ZSBuZWVkIHRvIGVudGVyIHRoZSBWaWV3P1xuXG4gICAgY29uc3QgY29tcG9uZW50VFZpZXcgPVxuICAgICAgICBnZXRPckNyZWF0ZVRWaWV3KHRlbXBsYXRlRm4sIGNvbnN0cywgdmFycywgZGlyZWN0aXZlcyB8fCBudWxsLCBwaXBlcyB8fCBudWxsLCBudWxsLCBudWxsKTtcbiAgICBjb25zdCBob3N0VE5vZGUgPSBjcmVhdGVOb2RlQXRJbmRleCgwLCBUTm9kZVR5cGUuRWxlbWVudCwgaG9zdE5vZGUsIG51bGwsIG51bGwpO1xuICAgIGNvbXBvbmVudFZpZXcgPSBjcmVhdGVMVmlldyhcbiAgICAgICAgaG9zdExWaWV3LCBjb21wb25lbnRUVmlldywgY29udGV4dCwgTFZpZXdGbGFncy5DaGVja0Fsd2F5cywgaG9zdE5vZGUsIGhvc3RUTm9kZSxcbiAgICAgICAgcHJvdmlkZWRSZW5kZXJlckZhY3RvcnksIHJlbmRlcmVyLCBzYW5pdGl6ZXIpO1xuICB9XG4gIHJlbmRlckNvbXBvbmVudE9yVGVtcGxhdGUoY29tcG9uZW50VmlldywgY29udGV4dCwgdGVtcGxhdGVGbik7XG4gIHJldHVybiBjb21wb25lbnRWaWV3O1xufVxuXG4vKipcbiAqIFVzZWQgZm9yIGNyZWF0aW5nIHRoZSBMVmlld05vZGUgb2YgYSBkeW5hbWljIGVtYmVkZGVkIHZpZXcsXG4gKiBlaXRoZXIgdGhyb3VnaCBWaWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldygpIG9yIFRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldygpLlxuICogU3VjaCBsVmlld05vZGUgd2lsbCB0aGVuIGJlIHJlbmRlcmVyIHdpdGggcmVuZGVyRW1iZWRkZWRUZW1wbGF0ZSgpIChzZWUgYmVsb3cpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1iZWRkZWRWaWV3QW5kTm9kZTxUPihcbiAgICB0VmlldzogVFZpZXcsIGNvbnRleHQ6IFQsIGRlY2xhcmF0aW9uVmlldzogTFZpZXcsIHF1ZXJpZXM6IExRdWVyaWVzIHwgbnVsbCxcbiAgICBpbmplY3RvckluZGV4OiBudW1iZXIpOiBMVmlldyB7XG4gIGNvbnN0IF9pc1BhcmVudCA9IGdldElzUGFyZW50KCk7XG4gIGNvbnN0IF9wcmV2aW91c09yUGFyZW50VE5vZGUgPSBnZXRQcmV2aW91c09yUGFyZW50VE5vZGUoKTtcbiAgc2V0SXNQYXJlbnQodHJ1ZSk7XG4gIHNldFByZXZpb3VzT3JQYXJlbnRUTm9kZShudWxsICEpO1xuXG4gIGNvbnN0IGxWaWV3ID0gY3JlYXRlTFZpZXcoZGVjbGFyYXRpb25WaWV3LCB0VmlldywgY29udGV4dCwgTFZpZXdGbGFncy5DaGVja0Fsd2F5cywgbnVsbCwgbnVsbCk7XG4gIGxWaWV3W0RFQ0xBUkFUSU9OX1ZJRVddID0gZGVjbGFyYXRpb25WaWV3O1xuXG4gIGlmIChxdWVyaWVzKSB7XG4gICAgbFZpZXdbUVVFUklFU10gPSBxdWVyaWVzLmNyZWF0ZVZpZXcoKTtcbiAgfVxuICBhc3NpZ25UVmlld05vZGVUb0xWaWV3KHRWaWV3LCBudWxsLCAtMSwgbFZpZXcpO1xuXG4gIGlmICh0Vmlldy5maXJzdFRlbXBsYXRlUGFzcykge1xuICAgIHRWaWV3Lm5vZGUgIS5pbmplY3RvckluZGV4ID0gaW5qZWN0b3JJbmRleDtcbiAgfVxuXG4gIHNldElzUGFyZW50KF9pc1BhcmVudCk7XG4gIHNldFByZXZpb3VzT3JQYXJlbnRUTm9kZShfcHJldmlvdXNPclBhcmVudFROb2RlKTtcbiAgcmV0dXJuIGxWaWV3O1xufVxuXG4vKipcbiAqIFVzZWQgZm9yIHJlbmRlcmluZyBlbWJlZGRlZCB2aWV3cyAoZS5nLiBkeW5hbWljYWxseSBjcmVhdGVkIHZpZXdzKVxuICpcbiAqIER5bmFtaWNhbGx5IGNyZWF0ZWQgdmlld3MgbXVzdCBzdG9yZS9yZXRyaWV2ZSB0aGVpciBUVmlld3MgZGlmZmVyZW50bHkgZnJvbSBjb21wb25lbnQgdmlld3NcbiAqIGJlY2F1c2UgdGhlaXIgdGVtcGxhdGUgZnVuY3Rpb25zIGFyZSBuZXN0ZWQgaW4gdGhlIHRlbXBsYXRlIGZ1bmN0aW9ucyBvZiB0aGVpciBob3N0cywgY3JlYXRpbmdcbiAqIGNsb3N1cmVzLiBJZiB0aGVpciBob3N0IHRlbXBsYXRlIGhhcHBlbnMgdG8gYmUgYW4gZW1iZWRkZWQgdGVtcGxhdGUgaW4gYSBsb29wIChlLmcuIG5nRm9yIGluc2lkZVxuICogYW4gbmdGb3IpLCB0aGUgbmVzdGluZyB3b3VsZCBtZWFuIHdlJ2QgaGF2ZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLCBzbyB3ZVxuICogY2FuJ3Qgc3RvcmUgVFZpZXdzIGluIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbiBpdHNlbGYgKGFzIHdlIGRvIGZvciBjb21wcykuIEluc3RlYWQsIHdlIHN0b3JlIHRoZVxuICogVFZpZXcgZm9yIGR5bmFtaWNhbGx5IGNyZWF0ZWQgdmlld3Mgb24gdGhlaXIgaG9zdCBUTm9kZSwgd2hpY2ggb25seSBoYXMgb25lIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRW1iZWRkZWRUZW1wbGF0ZTxUPih2aWV3VG9SZW5kZXI6IExWaWV3LCB0VmlldzogVFZpZXcsIGNvbnRleHQ6IFQpIHtcbiAgY29uc3QgX2lzUGFyZW50ID0gZ2V0SXNQYXJlbnQoKTtcbiAgY29uc3QgX3ByZXZpb3VzT3JQYXJlbnRUTm9kZSA9IGdldFByZXZpb3VzT3JQYXJlbnRUTm9kZSgpO1xuICBsZXQgb2xkVmlldzogTFZpZXc7XG4gIGlmICh2aWV3VG9SZW5kZXJbRkxBR1NdICYgTFZpZXdGbGFncy5Jc1Jvb3QpIHtcbiAgICAvLyBUaGlzIGlzIGEgcm9vdCB2aWV3IGluc2lkZSB0aGUgdmlldyB0cmVlXG4gICAgdGlja1Jvb3RDb250ZXh0KGdldFJvb3RDb250ZXh0KHZpZXdUb1JlbmRlcikpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc1BhcmVudCh0cnVlKTtcbiAgICAgIHNldFByZXZpb3VzT3JQYXJlbnRUTm9kZShudWxsICEpO1xuXG4gICAgICBvbGRWaWV3ID0gZW50ZXJWaWV3KHZpZXdUb1JlbmRlciwgdmlld1RvUmVuZGVyW1RfSE9TVF0pO1xuICAgICAgcmVzZXRQcmVPcmRlckhvb2tGbGFncyh2aWV3VG9SZW5kZXIpO1xuICAgICAgbmFtZXNwYWNlSFRNTCgpO1xuXG4gICAgICAvLyBSZXNldCB0aGUgc2VsZWN0ZWQgaW5kZXggc28gd2UgY2FuIGFzc2VydCB0aGF0IGBzZWxlY3RgIHdhcyBjYWxsZWQgbGF0ZXJcbiAgICAgIG5nRGV2TW9kZSAmJiBzZXRTZWxlY3RlZEluZGV4KC0xKTtcblxuICAgICAgdFZpZXcudGVtcGxhdGUgIShnZXRSZW5kZXJGbGFncyh2aWV3VG9SZW5kZXIpLCBjb250ZXh0KTtcbiAgICAgIC8vIFRoaXMgbXVzdCBiZSBzZXQgdG8gZmFsc2UgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGZpcnN0IGNyZWF0aW9uIHJ1biBiZWNhdXNlIGluIGFuXG4gICAgICAvLyBuZ0ZvciBsb29wLCBhbGwgdGhlIHZpZXdzIHdpbGwgYmUgY3JlYXRlZCB0b2dldGhlciBiZWZvcmUgdXBkYXRlIG1vZGUgcnVucyBhbmQgdHVybnNcbiAgICAgIC8vIG9mZiBmaXJzdFRlbXBsYXRlUGFzcy4gSWYgd2UgZG9uJ3Qgc2V0IGl0IGhlcmUsIGluc3RhbmNlcyB3aWxsIHBlcmZvcm0gZGlyZWN0aXZlXG4gICAgICAvLyBtYXRjaGluZywgZXRjIGFnYWluIGFuZCBhZ2Fpbi5cbiAgICAgIHZpZXdUb1JlbmRlcltUVklFV10uZmlyc3RUZW1wbGF0ZVBhc3MgPSBmYWxzZTtcblxuICAgICAgcmVmcmVzaERlc2NlbmRhbnRWaWV3cyh2aWV3VG9SZW5kZXIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBsZWF2ZVZpZXcob2xkVmlldyAhKTtcbiAgICAgIHNldElzUGFyZW50KF9pc1BhcmVudCk7XG4gICAgICBzZXRQcmV2aW91c09yUGFyZW50VE5vZGUoX3ByZXZpb3VzT3JQYXJlbnRUTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudE9yVGVtcGxhdGU8VD4oXG4gICAgaG9zdFZpZXc6IExWaWV3LCBjb250ZXh0OiBULCB0ZW1wbGF0ZUZuPzogQ29tcG9uZW50VGVtcGxhdGU8VD4pIHtcbiAgY29uc3QgcmVuZGVyZXJGYWN0b3J5ID0gaG9zdFZpZXdbUkVOREVSRVJfRkFDVE9SWV07XG4gIGNvbnN0IG9sZFZpZXcgPSBlbnRlclZpZXcoaG9zdFZpZXcsIGhvc3RWaWV3W1RfSE9TVF0pO1xuICBjb25zdCBub3JtYWxFeGVjdXRpb25QYXRoID0gIWdldENoZWNrTm9DaGFuZ2VzTW9kZSgpO1xuICBjb25zdCBjcmVhdGlvbk1vZGVJc0FjdGl2ZSA9IGlzQ3JlYXRpb25Nb2RlKGhvc3RWaWV3KTtcbiAgdHJ5IHtcbiAgICBpZiAobm9ybWFsRXhlY3V0aW9uUGF0aCAmJiAhY3JlYXRpb25Nb2RlSXNBY3RpdmUgJiYgcmVuZGVyZXJGYWN0b3J5LmJlZ2luKSB7XG4gICAgICByZW5kZXJlckZhY3RvcnkuYmVnaW4oKTtcbiAgICB9XG5cbiAgICBpZiAoY3JlYXRpb25Nb2RlSXNBY3RpdmUpIHtcbiAgICAgIC8vIGNyZWF0aW9uIG1vZGUgcGFzc1xuICAgICAgaWYgKHRlbXBsYXRlRm4pIHtcbiAgICAgICAgbmFtZXNwYWNlSFRNTCgpO1xuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBzZWxlY3RlZCBpbmRleCBzbyB3ZSBjYW4gYXNzZXJ0IHRoYXQgYHNlbGVjdGAgd2FzIGNhbGxlZCBsYXRlclxuICAgICAgICBuZ0Rldk1vZGUgJiYgc2V0U2VsZWN0ZWRJbmRleCgtMSk7XG5cbiAgICAgICAgdGVtcGxhdGVGbihSZW5kZXJGbGFncy5DcmVhdGUsIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICByZWZyZXNoRGVzY2VuZGFudFZpZXdzKGhvc3RWaWV3KTtcbiAgICAgIGhvc3RWaWV3W0ZMQUdTXSAmPSB+TFZpZXdGbGFncy5DcmVhdGlvbk1vZGU7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIG1vZGUgcGFzc1xuICAgIHJlc2V0UHJlT3JkZXJIb29rRmxhZ3MoaG9zdFZpZXcpO1xuICAgIHRlbXBsYXRlRm4gJiYgdGVtcGxhdGVGbihSZW5kZXJGbGFncy5VcGRhdGUsIGNvbnRleHQpO1xuICAgIHJlZnJlc2hEZXNjZW5kYW50Vmlld3MoaG9zdFZpZXcpO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChub3JtYWxFeGVjdXRpb25QYXRoICYmICFjcmVhdGlvbk1vZGVJc0FjdGl2ZSAmJiByZW5kZXJlckZhY3RvcnkuZW5kKSB7XG4gICAgICByZW5kZXJlckZhY3RvcnkuZW5kKCk7XG4gICAgfVxuICAgIGxlYXZlVmlldyhvbGRWaWV3KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9mIHJlbmRlcmluZyBmbGFncyBkZXBlbmRpbmcgb24gd2hlbiB0aGVcbiAqIHRlbXBsYXRlIGlzIGluIGNyZWF0aW9uIG1vZGUgb3IgdXBkYXRlIG1vZGUuIFVwZGF0ZSBibG9jayBhbmQgY3JlYXRlIGJsb2NrIGFyZVxuICogYWx3YXlzIHJ1biBzZXBhcmF0ZWx5LlxuICovXG5mdW5jdGlvbiBnZXRSZW5kZXJGbGFncyh2aWV3OiBMVmlldyk6IFJlbmRlckZsYWdzIHtcbiAgcmV0dXJuIGlzQ3JlYXRpb25Nb2RlKHZpZXcpID8gUmVuZGVyRmxhZ3MuQ3JlYXRlIDogUmVuZGVyRmxhZ3MuVXBkYXRlO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLyBFbGVtZW50XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEFwcHJvcHJpYXRlbHkgc2V0cyBgc3R5bGluZ1RlbXBsYXRlYCBvbiBhIFROb2RlXG4gKlxuICogRG9lcyBub3QgYXBwbHkgc3R5bGVzIHRvIERPTSBub2Rlc1xuICpcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgbm9kZSB3aG9zZSBgc3R5bGluZ1RlbXBsYXRlYCB0byBzZXRcbiAqIEBwYXJhbSBhdHRycyBUaGUgYXR0cmlidXRlIGFycmF5IHNvdXJjZSB0byBzZXQgdGhlIGF0dHJpYnV0ZXMgZnJvbVxuICogQHBhcmFtIGF0dHJzU3RhcnRJbmRleCBPcHRpb25hbCBzdGFydCBpbmRleCB0byBzdGFydCBwcm9jZXNzaW5nIHRoZSBgYXR0cnNgIGZyb21cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5vZGVTdHlsaW5nVGVtcGxhdGUoXG4gICAgdFZpZXc6IFRWaWV3LCB0Tm9kZTogVE5vZGUsIGF0dHJzOiBUQXR0cmlidXRlcywgYXR0cnNTdGFydEluZGV4OiBudW1iZXIpIHtcbiAgaWYgKHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzICYmICF0Tm9kZS5zdHlsaW5nVGVtcGxhdGUpIHtcbiAgICBjb25zdCBzdHlsaW5nQXR0cnNTdGFydEluZGV4ID0gYXR0cnNTdHlsaW5nSW5kZXhPZihhdHRycywgYXR0cnNTdGFydEluZGV4KTtcbiAgICBpZiAoc3R5bGluZ0F0dHJzU3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICB0Tm9kZS5zdHlsaW5nVGVtcGxhdGUgPSBpbml0aWFsaXplU3RhdGljU3R5bGluZ0NvbnRleHQoYXR0cnMsIHN0eWxpbmdBdHRyc1N0YXJ0SW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZUNvbnRlbnRRdWVyaWVzKHRWaWV3OiBUVmlldywgdE5vZGU6IFROb2RlLCBsVmlldzogTFZpZXcpIHtcbiAgaWYgKGlzQ29udGVudFF1ZXJ5SG9zdCh0Tm9kZSkpIHtcbiAgICBjb25zdCBzdGFydCA9IHROb2RlLmRpcmVjdGl2ZVN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDtcbiAgICBmb3IgKGxldCBkaXJlY3RpdmVJbmRleCA9IHN0YXJ0OyBkaXJlY3RpdmVJbmRleCA8IGVuZDsgZGlyZWN0aXZlSW5kZXgrKykge1xuICAgICAgY29uc3QgZGVmID0gdFZpZXcuZGF0YVtkaXJlY3RpdmVJbmRleF0gYXMgRGlyZWN0aXZlRGVmPGFueT47XG4gICAgICBpZiAoZGVmLmNvbnRlbnRRdWVyaWVzKSB7XG4gICAgICAgIGRlZi5jb250ZW50UXVlcmllcyhSZW5kZXJGbGFncy5DcmVhdGUsIGxWaWV3W2RpcmVjdGl2ZUluZGV4XSwgZGlyZWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBkaXJlY3RpdmUgaW5zdGFuY2VzIGFuZCBwb3B1bGF0ZXMgbG9jYWwgcmVmcy5cbiAqXG4gKiBAcGFyYW0gbG9jYWxSZWZzIExvY2FsIHJlZnMgb2YgdGhlIG5vZGUgaW4gcXVlc3Rpb25cbiAqIEBwYXJhbSBsb2NhbFJlZkV4dHJhY3RvciBtYXBwaW5nIGZ1bmN0aW9uIHRoYXQgZXh0cmFjdHMgbG9jYWwgcmVmIHZhbHVlIGZyb20gVE5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpcmVjdGl2ZXNBbmRMb2NhbHMoXG4gICAgdFZpZXc6IFRWaWV3LCBsVmlldzogTFZpZXcsIGxvY2FsUmVmczogc3RyaW5nW10gfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIGxvY2FsUmVmRXh0cmFjdG9yOiBMb2NhbFJlZkV4dHJhY3RvciA9IGdldE5hdGl2ZUJ5VE5vZGUpIHtcbiAgaWYgKCFnZXRCaW5kaW5nc0VuYWJsZWQoKSkgcmV0dXJuO1xuICBjb25zdCBwcmV2aW91c09yUGFyZW50VE5vZGUgPSBnZXRQcmV2aW91c09yUGFyZW50VE5vZGUoKTtcbiAgaWYgKHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzKSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5maXJzdFRlbXBsYXRlUGFzcysrO1xuICAgIHJlc29sdmVEaXJlY3RpdmVzKFxuICAgICAgICB0VmlldywgbFZpZXcsIGZpbmREaXJlY3RpdmVNYXRjaGVzKHRWaWV3LCBsVmlldywgcHJldmlvdXNPclBhcmVudFROb2RlKSxcbiAgICAgICAgcHJldmlvdXNPclBhcmVudFROb2RlLCBsb2NhbFJlZnMgfHwgbnVsbCk7XG4gIH1cbiAgaW5zdGFudGlhdGVBbGxEaXJlY3RpdmVzKHRWaWV3LCBsVmlldywgcHJldmlvdXNPclBhcmVudFROb2RlKTtcbiAgaW52b2tlRGlyZWN0aXZlc0hvc3RCaW5kaW5ncyh0VmlldywgbFZpZXcsIHByZXZpb3VzT3JQYXJlbnRUTm9kZSk7XG4gIHNhdmVSZXNvbHZlZExvY2Fsc0luRGF0YShsVmlldywgcHJldmlvdXNPclBhcmVudFROb2RlLCBsb2NhbFJlZkV4dHJhY3Rvcik7XG59XG5cbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIGxvY2FsIG5hbWVzIGFuZCBpbmRpY2VzIGFuZCBwdXNoZXMgdGhlIHJlc29sdmVkIGxvY2FsIHZhcmlhYmxlIHZhbHVlc1xuICogdG8gTFZpZXcgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhleSBhcmUgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSB3aXRoIGxvYWQoKS5cbiAqL1xuZnVuY3Rpb24gc2F2ZVJlc29sdmVkTG9jYWxzSW5EYXRhKFxuICAgIHZpZXdEYXRhOiBMVmlldywgdE5vZGU6IFROb2RlLCBsb2NhbFJlZkV4dHJhY3RvcjogTG9jYWxSZWZFeHRyYWN0b3IpOiB2b2lkIHtcbiAgY29uc3QgbG9jYWxOYW1lcyA9IHROb2RlLmxvY2FsTmFtZXM7XG4gIGlmIChsb2NhbE5hbWVzKSB7XG4gICAgbGV0IGxvY2FsSW5kZXggPSB0Tm9kZS5pbmRleCArIDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbE5hbWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGxvY2FsTmFtZXNbaSArIDFdIGFzIG51bWJlcjtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5kZXggPT09IC0xID9cbiAgICAgICAgICBsb2NhbFJlZkV4dHJhY3RvcihcbiAgICAgICAgICAgICAgdE5vZGUgYXMgVEVsZW1lbnROb2RlIHwgVENvbnRhaW5lck5vZGUgfCBURWxlbWVudENvbnRhaW5lck5vZGUsIHZpZXdEYXRhKSA6XG4gICAgICAgICAgdmlld0RhdGFbaW5kZXhdO1xuICAgICAgdmlld0RhdGFbbG9jYWxJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdldHMgVFZpZXcgZnJvbSBhIHRlbXBsYXRlIGZ1bmN0aW9uIG9yIGNyZWF0ZXMgYSBuZXcgVFZpZXdcbiAqIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdC5cbiAqXG4gKiBAcGFyYW0gdGVtcGxhdGVGbiBUaGUgdGVtcGxhdGUgZnJvbSB3aGljaCB0byBnZXQgc3RhdGljIGRhdGFcbiAqIEBwYXJhbSBjb25zdHMgVGhlIG51bWJlciBvZiBub2RlcywgbG9jYWwgcmVmcywgYW5kIHBpcGVzIGluIHRoaXMgdmlld1xuICogQHBhcmFtIHZhcnMgVGhlIG51bWJlciBvZiBiaW5kaW5ncyBhbmQgcHVyZSBmdW5jdGlvbiBiaW5kaW5ncyBpbiB0aGlzIHZpZXdcbiAqIEBwYXJhbSBkaXJlY3RpdmVzIERpcmVjdGl2ZSBkZWZzIHRoYXQgc2hvdWxkIGJlIHNhdmVkIG9uIFRWaWV3XG4gKiBAcGFyYW0gcGlwZXMgUGlwZSBkZWZzIHRoYXQgc2hvdWxkIGJlIHNhdmVkIG9uIFRWaWV3XG4gKiBAcGFyYW0gdmlld1F1ZXJ5IFZpZXcgcXVlcnkgdGhhdCBzaG91bGQgYmUgc2F2ZWQgb24gVFZpZXdcbiAqIEBwYXJhbSBzY2hlbWFzIFNjaGVtYXMgdGhhdCBzaG91bGQgYmUgc2F2ZWQgb24gVFZpZXdcbiAqIEByZXR1cm5zIFRWaWV3XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPckNyZWF0ZVRWaWV3KFxuICAgIHRlbXBsYXRlRm46IENvbXBvbmVudFRlbXBsYXRlPGFueT4sIGNvbnN0czogbnVtYmVyLCB2YXJzOiBudW1iZXIsXG4gICAgZGlyZWN0aXZlczogRGlyZWN0aXZlRGVmTGlzdE9yRmFjdG9yeSB8IG51bGwsIHBpcGVzOiBQaXBlRGVmTGlzdE9yRmFjdG9yeSB8IG51bGwsXG4gICAgdmlld1F1ZXJ5OiBWaWV3UXVlcmllc0Z1bmN0aW9uPGFueT58IG51bGwsIHNjaGVtYXM6IFNjaGVtYU1ldGFkYXRhW10gfCBudWxsKTogVFZpZXcge1xuICAvLyBUT0RPKG1pc2tvKTogcmVhZGluZyBgbmdQcml2YXRlRGF0YWAgaGVyZSBpcyBwcm9ibGVtYXRpYyBmb3IgdHdvIHJlYXNvbnNcbiAgLy8gMS4gSXQgaXMgYSBtZWdhbW9ycGhpYyBjYWxsIG9uIGVhY2ggaW52b2NhdGlvbi5cbiAgLy8gMi4gRm9yIG5lc3RlZCBlbWJlZGRlZCB2aWV3cyAobmdGb3IgaW5zaWRlIG5nRm9yKSB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgaXMgcGVyXG4gIC8vICAgIG91dGVyIHRlbXBsYXRlIGludm9jYXRpb24sIHdoaWNoIG1lYW5zIHRoYXQgbm8gc3VjaCBwcm9wZXJ0eSB3aWxsIGV4aXN0XG4gIC8vIENvcnJlY3Qgc29sdXRpb24gaXMgdG8gb25seSBwdXQgYG5nUHJpdmF0ZURhdGFgIG9uIHRoZSBDb21wb25lbnQgdGVtcGxhdGVcbiAgLy8gYW5kIG5vdCBvbiBlbWJlZGRlZCB0ZW1wbGF0ZXMuXG5cbiAgcmV0dXJuIHRlbXBsYXRlRm4ubmdQcml2YXRlRGF0YSB8fFxuICAgICAgKHRlbXBsYXRlRm4ubmdQcml2YXRlRGF0YSA9IGNyZWF0ZVRWaWV3KFxuICAgICAgICAgICAtMSwgdGVtcGxhdGVGbiwgY29uc3RzLCB2YXJzLCBkaXJlY3RpdmVzLCBwaXBlcywgdmlld1F1ZXJ5LCBzY2hlbWFzKSBhcyBuZXZlcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFRWaWV3IGluc3RhbmNlXG4gKlxuICogQHBhcmFtIHZpZXdJbmRleCBUaGUgdmlld0Jsb2NrSWQgZm9yIGlubGluZSB2aWV3cywgb3IgLTEgaWYgaXQncyBhIGNvbXBvbmVudC9keW5hbWljXG4gKiBAcGFyYW0gdGVtcGxhdGVGbiBUZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIGNvbnN0cyBUaGUgbnVtYmVyIG9mIG5vZGVzLCBsb2NhbCByZWZzLCBhbmQgcGlwZXMgaW4gdGhpcyB0ZW1wbGF0ZVxuICogQHBhcmFtIGRpcmVjdGl2ZXMgUmVnaXN0cnkgb2YgZGlyZWN0aXZlcyBmb3IgdGhpcyB2aWV3XG4gKiBAcGFyYW0gcGlwZXMgUmVnaXN0cnkgb2YgcGlwZXMgZm9yIHRoaXMgdmlld1xuICogQHBhcmFtIHZpZXdRdWVyeSBWaWV3IHF1ZXJpZXMgZm9yIHRoaXMgdmlld1xuICogQHBhcmFtIHNjaGVtYXMgU2NoZW1hcyBmb3IgdGhpcyB2aWV3XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUVmlldyhcbiAgICB2aWV3SW5kZXg6IG51bWJlciwgdGVtcGxhdGVGbjogQ29tcG9uZW50VGVtcGxhdGU8YW55PnwgbnVsbCwgY29uc3RzOiBudW1iZXIsIHZhcnM6IG51bWJlcixcbiAgICBkaXJlY3RpdmVzOiBEaXJlY3RpdmVEZWZMaXN0T3JGYWN0b3J5IHwgbnVsbCwgcGlwZXM6IFBpcGVEZWZMaXN0T3JGYWN0b3J5IHwgbnVsbCxcbiAgICB2aWV3UXVlcnk6IFZpZXdRdWVyaWVzRnVuY3Rpb248YW55PnwgbnVsbCwgc2NoZW1hczogU2NoZW1hTWV0YWRhdGFbXSB8IG51bGwpOiBUVmlldyB7XG4gIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUudFZpZXcrKztcbiAgY29uc3QgYmluZGluZ1N0YXJ0SW5kZXggPSBIRUFERVJfT0ZGU0VUICsgY29uc3RzO1xuICAvLyBUaGlzIGxlbmd0aCBkb2VzIG5vdCB5ZXQgY29udGFpbiBob3N0IGJpbmRpbmdzIGZyb20gY2hpbGQgZGlyZWN0aXZlcyBiZWNhdXNlIGF0IHRoaXMgcG9pbnQsXG4gIC8vIHdlIGRvbid0IGtub3cgd2hpY2ggZGlyZWN0aXZlcyBhcmUgYWN0aXZlIG9uIHRoaXMgdGVtcGxhdGUuIEFzIHNvb24gYXMgYSBkaXJlY3RpdmUgaXMgbWF0Y2hlZFxuICAvLyB0aGF0IGhhcyBhIGhvc3QgYmluZGluZywgd2Ugd2lsbCB1cGRhdGUgdGhlIGJsdWVwcmludCB3aXRoIHRoYXQgZGVmJ3MgaG9zdFZhcnMgY291bnQuXG4gIGNvbnN0IGluaXRpYWxWaWV3TGVuZ3RoID0gYmluZGluZ1N0YXJ0SW5kZXggKyB2YXJzO1xuICBjb25zdCBibHVlcHJpbnQgPSBjcmVhdGVWaWV3Qmx1ZXByaW50KGJpbmRpbmdTdGFydEluZGV4LCBpbml0aWFsVmlld0xlbmd0aCk7XG4gIHJldHVybiBibHVlcHJpbnRbVFZJRVcgYXMgYW55XSA9IHtcbiAgICBpZDogdmlld0luZGV4LFxuICAgIGJsdWVwcmludDogYmx1ZXByaW50LFxuICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZUZuLFxuICAgIHZpZXdRdWVyeTogdmlld1F1ZXJ5LFxuICAgIG5vZGU6IG51bGwgISxcbiAgICBkYXRhOiBibHVlcHJpbnQuc2xpY2UoKS5maWxsKG51bGwsIGJpbmRpbmdTdGFydEluZGV4KSxcbiAgICBiaW5kaW5nU3RhcnRJbmRleDogYmluZGluZ1N0YXJ0SW5kZXgsXG4gICAgdmlld1F1ZXJ5U3RhcnRJbmRleDogaW5pdGlhbFZpZXdMZW5ndGgsXG4gICAgZXhwYW5kb1N0YXJ0SW5kZXg6IGluaXRpYWxWaWV3TGVuZ3RoLFxuICAgIGV4cGFuZG9JbnN0cnVjdGlvbnM6IG51bGwsXG4gICAgZmlyc3RUZW1wbGF0ZVBhc3M6IHRydWUsXG4gICAgc3RhdGljVmlld1F1ZXJpZXM6IGZhbHNlLFxuICAgIHN0YXRpY0NvbnRlbnRRdWVyaWVzOiBmYWxzZSxcbiAgICBwcmVPcmRlckhvb2tzOiBudWxsLFxuICAgIHByZU9yZGVyQ2hlY2tIb29rczogbnVsbCxcbiAgICBjb250ZW50SG9va3M6IG51bGwsXG4gICAgY29udGVudENoZWNrSG9va3M6IG51bGwsXG4gICAgdmlld0hvb2tzOiBudWxsLFxuICAgIHZpZXdDaGVja0hvb2tzOiBudWxsLFxuICAgIGRlc3Ryb3lIb29rczogbnVsbCxcbiAgICBjbGVhbnVwOiBudWxsLFxuICAgIGNvbnRlbnRRdWVyaWVzOiBudWxsLFxuICAgIGNvbXBvbmVudHM6IG51bGwsXG4gICAgZGlyZWN0aXZlUmVnaXN0cnk6IHR5cGVvZiBkaXJlY3RpdmVzID09PSAnZnVuY3Rpb24nID8gZGlyZWN0aXZlcygpIDogZGlyZWN0aXZlcyxcbiAgICBwaXBlUmVnaXN0cnk6IHR5cGVvZiBwaXBlcyA9PT0gJ2Z1bmN0aW9uJyA/IHBpcGVzKCkgOiBwaXBlcyxcbiAgICBmaXJzdENoaWxkOiBudWxsLFxuICAgIHNjaGVtYXM6IHNjaGVtYXMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZpZXdCbHVlcHJpbnQoYmluZGluZ1N0YXJ0SW5kZXg6IG51bWJlciwgaW5pdGlhbFZpZXdMZW5ndGg6IG51bWJlcik6IExWaWV3IHtcbiAgY29uc3QgYmx1ZXByaW50ID0gbmV3IEFycmF5KGluaXRpYWxWaWV3TGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbGwobnVsbCwgMCwgYmluZGluZ1N0YXJ0SW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsbChOT19DSEFOR0UsIGJpbmRpbmdTdGFydEluZGV4KSBhcyBMVmlldztcbiAgYmx1ZXByaW50W0JJTkRJTkdfSU5ERVhdID0gYmluZGluZ1N0YXJ0SW5kZXg7XG4gIHJldHVybiBibHVlcHJpbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvcih0ZXh0OiBzdHJpbmcsIHRva2VuOiBhbnkpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihgUmVuZGVyZXI6ICR7dGV4dH0gWyR7cmVuZGVyU3RyaW5naWZ5KHRva2VuKX1dYCk7XG59XG5cblxuLyoqXG4gKiBMb2NhdGVzIHRoZSBob3N0IG5hdGl2ZSBlbGVtZW50LCB1c2VkIGZvciBib290c3RyYXBwaW5nIGV4aXN0aW5nIG5vZGVzIGludG8gcmVuZGVyaW5nIHBpcGVsaW5lLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50T3JTZWxlY3RvciBSZW5kZXIgZWxlbWVudCBvciBDU1Mgc2VsZWN0b3IgdG8gbG9jYXRlIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9jYXRlSG9zdEVsZW1lbnQoXG4gICAgZmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MywgZWxlbWVudE9yU2VsZWN0b3I6IFJFbGVtZW50IHwgc3RyaW5nKTogUkVsZW1lbnR8bnVsbCB7XG4gIGNvbnN0IGRlZmF1bHRSZW5kZXJlciA9IGZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gIGNvbnN0IHJOb2RlID0gdHlwZW9mIGVsZW1lbnRPclNlbGVjdG9yID09PSAnc3RyaW5nJyA/XG4gICAgICAoaXNQcm9jZWR1cmFsUmVuZGVyZXIoZGVmYXVsdFJlbmRlcmVyKSA/XG4gICAgICAgICAgIGRlZmF1bHRSZW5kZXJlci5zZWxlY3RSb290RWxlbWVudChlbGVtZW50T3JTZWxlY3RvcikgOlxuICAgICAgICAgICBkZWZhdWx0UmVuZGVyZXIucXVlcnlTZWxlY3RvcihlbGVtZW50T3JTZWxlY3RvcikpIDpcbiAgICAgIGVsZW1lbnRPclNlbGVjdG9yO1xuICBpZiAobmdEZXZNb2RlICYmICFyTm9kZSkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudE9yU2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBjcmVhdGVFcnJvcignSG9zdCBub2RlIHdpdGggc2VsZWN0b3Igbm90IGZvdW5kOicsIGVsZW1lbnRPclNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgY3JlYXRlRXJyb3IoJ0hvc3Qgbm9kZSBpcyByZXF1aXJlZDonLCBlbGVtZW50T3JTZWxlY3Rvcik7XG4gICAgfVxuICB9XG4gIHJldHVybiByTm9kZTtcbn1cblxuLyoqXG4gKiBTYXZlcyBjb250ZXh0IGZvciB0aGlzIGNsZWFudXAgZnVuY3Rpb24gaW4gTFZpZXcuY2xlYW51cEluc3RhbmNlcy5cbiAqXG4gKiBPbiB0aGUgZmlyc3QgdGVtcGxhdGUgcGFzcywgc2F2ZXMgaW4gVFZpZXc6XG4gKiAtIENsZWFudXAgZnVuY3Rpb25cbiAqIC0gSW5kZXggb2YgY29udGV4dCB3ZSBqdXN0IHNhdmVkIGluIExWaWV3LmNsZWFudXBJbnN0YW5jZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQ2xlYW51cFdpdGhDb250ZXh0KGxWaWV3OiBMVmlldywgY29udGV4dDogYW55LCBjbGVhbnVwRm46IEZ1bmN0aW9uKTogdm9pZCB7XG4gIGNvbnN0IGxDbGVhbnVwID0gZ2V0Q2xlYW51cChsVmlldyk7XG4gIGxDbGVhbnVwLnB1c2goY29udGV4dCk7XG5cbiAgaWYgKGxWaWV3W1RWSUVXXS5maXJzdFRlbXBsYXRlUGFzcykge1xuICAgIGdldFRWaWV3Q2xlYW51cChsVmlldykucHVzaChjbGVhbnVwRm4sIGxDbGVhbnVwLmxlbmd0aCAtIDEpO1xuICB9XG59XG5cbi8qKlxuICogU2F2ZXMgdGhlIGNsZWFudXAgZnVuY3Rpb24gaXRzZWxmIGluIExWaWV3LmNsZWFudXBJbnN0YW5jZXMuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgZm9yIGZ1bmN0aW9ucyB0aGF0IGFyZSB3cmFwcGVkIHdpdGggdGhlaXIgY29udGV4dHMsIGxpa2UgaW4gcmVuZGVyZXIyXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogT24gdGhlIGZpcnN0IHRlbXBsYXRlIHBhc3MsIHRoZSBpbmRleCBvZiB0aGUgY2xlYW51cCBmdW5jdGlvbiBpcyBzYXZlZCBpbiBUVmlldy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQ2xlYW51cEZuKHZpZXc6IExWaWV3LCBjbGVhbnVwRm46IEZ1bmN0aW9uKTogdm9pZCB7XG4gIGdldENsZWFudXAodmlldykucHVzaChjbGVhbnVwRm4pO1xuXG4gIGlmICh2aWV3W1RWSUVXXS5maXJzdFRlbXBsYXRlUGFzcykge1xuICAgIGdldFRWaWV3Q2xlYW51cCh2aWV3KS5wdXNoKHZpZXdbQ0xFQU5VUF0gIS5sZW5ndGggLSAxLCBudWxsKTtcbiAgfVxufVxuXG4vLyBUT0RPOiBSZW1vdmUgdGhpcyB3aGVuIHRoZSBpc3N1ZSBpcyByZXNvbHZlZC5cbi8qKlxuICogVHNpY2tsZSBoYXMgYSBidWcgd2hlcmUgaXQgY3JlYXRlcyBhbiBpbmZpbml0ZSBsb29wIGZvciBhIGZ1bmN0aW9uIHJldHVybmluZyBpdHNlbGYuXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdGhhdCB3aWxsIGJlIHJlbW92ZWQgd2hlbiB0aGUgaXNzdWUgaXMgcmVzb2x2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci90c2lja2xlL2lzc3Vlcy8xMDA5KVxuICovXG5leHBvcnQgdHlwZSBUc2lja2xlSXNzdWUxMDA5ID0gYW55O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBUTm9kZSBvYmplY3QgZnJvbSB0aGUgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBub2RlXG4gKiBAcGFyYW0gYWRqdXN0ZWRJbmRleCBUaGUgaW5kZXggb2YgdGhlIFROb2RlIGluIFRWaWV3LmRhdGEsIGFkanVzdGVkIGZvciBIRUFERVJfT0ZGU0VUXG4gKiBAcGFyYW0gdGFnTmFtZSBUaGUgdGFnIG5hbWUgb2YgdGhlIG5vZGVcbiAqIEBwYXJhbSBhdHRycyBUaGUgYXR0cmlidXRlcyBkZWZpbmVkIG9uIHRoaXMgbm9kZVxuICogQHBhcmFtIHRWaWV3cyBBbnkgVFZpZXdzIGF0dGFjaGVkIHRvIHRoaXMgbm9kZVxuICogQHJldHVybnMgdGhlIFROb2RlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVE5vZGUoXG4gICAgdFBhcmVudDogVEVsZW1lbnROb2RlIHwgVENvbnRhaW5lck5vZGUgfCBudWxsLCB0eXBlOiBUTm9kZVR5cGUsIGFkanVzdGVkSW5kZXg6IG51bWJlcixcbiAgICB0YWdOYW1lOiBzdHJpbmcgfCBudWxsLCBhdHRyczogVEF0dHJpYnV0ZXMgfCBudWxsKTogVE5vZGUge1xuICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnROb2RlKys7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBpbmRleDogYWRqdXN0ZWRJbmRleCxcbiAgICBpbmplY3RvckluZGV4OiB0UGFyZW50ID8gdFBhcmVudC5pbmplY3RvckluZGV4IDogLTEsXG4gICAgZGlyZWN0aXZlU3RhcnQ6IC0xLFxuICAgIGRpcmVjdGl2ZUVuZDogLTEsXG4gICAgcHJvcGVydHlNZXRhZGF0YVN0YXJ0SW5kZXg6IC0xLFxuICAgIHByb3BlcnR5TWV0YWRhdGFFbmRJbmRleDogLTEsXG4gICAgZmxhZ3M6IDAsXG4gICAgcHJvdmlkZXJJbmRleGVzOiAwLFxuICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgYXR0cnM6IGF0dHJzLFxuICAgIGxvY2FsTmFtZXM6IG51bGwsXG4gICAgaW5pdGlhbElucHV0czogdW5kZWZpbmVkLFxuICAgIGlucHV0czogdW5kZWZpbmVkLFxuICAgIG91dHB1dHM6IHVuZGVmaW5lZCxcbiAgICB0Vmlld3M6IG51bGwsXG4gICAgbmV4dDogbnVsbCxcbiAgICBwcm9qZWN0aW9uTmV4dDogbnVsbCxcbiAgICBjaGlsZDogbnVsbCxcbiAgICBwYXJlbnQ6IHRQYXJlbnQsXG4gICAgc3R5bGluZ1RlbXBsYXRlOiBudWxsLFxuICAgIHByb2plY3Rpb246IG51bGwsXG4gICAgb25FbGVtZW50Q3JlYXRpb25GbnM6IG51bGwsXG4gIH07XG59XG5cblxuLyoqXG4gKiBDb25zb2xpZGF0ZXMgYWxsIGlucHV0cyBvciBvdXRwdXRzIG9mIGFsbCBkaXJlY3RpdmVzIG9uIHRoaXMgbG9naWNhbCBub2RlLlxuICpcbiAqIEBwYXJhbSB0Tm9kZUZsYWdzIG5vZGUgZmxhZ3NcbiAqIEBwYXJhbSBkaXJlY3Rpb24gd2hldGhlciB0byBjb25zaWRlciBpbnB1dHMgb3Igb3V0cHV0c1xuICogQHJldHVybnMgUHJvcGVydHlBbGlhc2VzfG51bGwgYWdncmVnYXRlIG9mIGFsbCBwcm9wZXJ0aWVzIGlmIGFueSwgYG51bGxgIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQcm9wZXJ0eUFsaWFzZXModE5vZGU6IFROb2RlLCBkaXJlY3Rpb246IEJpbmRpbmdEaXJlY3Rpb24pOiBQcm9wZXJ0eUFsaWFzZXN8XG4gICAgbnVsbCB7XG4gIGNvbnN0IHRWaWV3ID0gZ2V0TFZpZXcoKVtUVklFV107XG4gIGxldCBwcm9wU3RvcmU6IFByb3BlcnR5QWxpYXNlc3xudWxsID0gbnVsbDtcbiAgY29uc3Qgc3RhcnQgPSB0Tm9kZS5kaXJlY3RpdmVTdGFydDtcbiAgY29uc3QgZW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuXG4gIGlmIChlbmQgPiBzdGFydCkge1xuICAgIGNvbnN0IGlzSW5wdXQgPSBkaXJlY3Rpb24gPT09IEJpbmRpbmdEaXJlY3Rpb24uSW5wdXQ7XG4gICAgY29uc3QgZGVmcyA9IHRWaWV3LmRhdGE7XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgY29uc3QgZGlyZWN0aXZlRGVmID0gZGVmc1tpXSBhcyBEaXJlY3RpdmVEZWY8YW55PjtcbiAgICAgIGNvbnN0IHByb3BlcnR5QWxpYXNNYXA6IHtbcHVibGljTmFtZTogc3RyaW5nXTogc3RyaW5nfSA9XG4gICAgICAgICAgaXNJbnB1dCA/IGRpcmVjdGl2ZURlZi5pbnB1dHMgOiBkaXJlY3RpdmVEZWYub3V0cHV0cztcbiAgICAgIGZvciAobGV0IHB1YmxpY05hbWUgaW4gcHJvcGVydHlBbGlhc01hcCkge1xuICAgICAgICBpZiAocHJvcGVydHlBbGlhc01hcC5oYXNPd25Qcm9wZXJ0eShwdWJsaWNOYW1lKSkge1xuICAgICAgICAgIHByb3BTdG9yZSA9IHByb3BTdG9yZSB8fCB7fTtcbiAgICAgICAgICBjb25zdCBpbnRlcm5hbE5hbWUgPSBwcm9wZXJ0eUFsaWFzTWFwW3B1YmxpY05hbWVdO1xuICAgICAgICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gcHJvcFN0b3JlLmhhc093blByb3BlcnR5KHB1YmxpY05hbWUpO1xuICAgICAgICAgIGhhc1Byb3BlcnR5ID8gcHJvcFN0b3JlW3B1YmxpY05hbWVdLnB1c2goaSwgcHVibGljTmFtZSwgaW50ZXJuYWxOYW1lKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcFN0b3JlW3B1YmxpY05hbWVdID0gW2ksIHB1YmxpY05hbWUsIGludGVybmFsTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wU3RvcmU7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8gVGV4dFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIERpcmVjdGl2ZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBJbnN0YW50aWF0ZSBhIHJvb3QgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFudGlhdGVSb290Q29tcG9uZW50PFQ+KFxuICAgIHRWaWV3OiBUVmlldywgdmlld0RhdGE6IExWaWV3LCBkZWY6IENvbXBvbmVudERlZjxUPik6IFQge1xuICBjb25zdCByb290VE5vZGUgPSBnZXRQcmV2aW91c09yUGFyZW50VE5vZGUoKTtcbiAgaWYgKHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzKSB7XG4gICAgaWYgKGRlZi5wcm92aWRlcnNSZXNvbHZlcikgZGVmLnByb3ZpZGVyc1Jlc29sdmVyKGRlZik7XG4gICAgZ2VuZXJhdGVFeHBhbmRvSW5zdHJ1Y3Rpb25CbG9jayh0Vmlldywgcm9vdFROb2RlLCAxKTtcbiAgICBiYXNlUmVzb2x2ZURpcmVjdGl2ZSh0Vmlldywgdmlld0RhdGEsIGRlZiwgZGVmLmZhY3RvcnkpO1xuICB9XG4gIGNvbnN0IGRpcmVjdGl2ZSA9XG4gICAgICBnZXROb2RlSW5qZWN0YWJsZSh0Vmlldy5kYXRhLCB2aWV3RGF0YSwgdmlld0RhdGEubGVuZ3RoIC0gMSwgcm9vdFROb2RlIGFzIFRFbGVtZW50Tm9kZSk7XG4gIHBvc3RQcm9jZXNzQmFzZURpcmVjdGl2ZSh2aWV3RGF0YSwgcm9vdFROb2RlLCBkaXJlY3RpdmUpO1xuICByZXR1cm4gZGlyZWN0aXZlO1xufVxuXG4vKipcbiAqIFJlc29sdmUgdGhlIG1hdGNoZWQgZGlyZWN0aXZlcyBvbiBhIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEaXJlY3RpdmVzKFxuICAgIHRWaWV3OiBUVmlldywgdmlld0RhdGE6IExWaWV3LCBkaXJlY3RpdmVzOiBEaXJlY3RpdmVEZWY8YW55PltdIHwgbnVsbCwgdE5vZGU6IFROb2RlLFxuICAgIGxvY2FsUmVmczogc3RyaW5nW10gfCBudWxsKTogdm9pZCB7XG4gIC8vIFBsZWFzZSBtYWtlIHN1cmUgdG8gaGF2ZSBleHBsaWNpdCB0eXBlIGZvciBgZXhwb3J0c01hcGAuIEluZmVycmVkIHR5cGUgdHJpZ2dlcnMgYnVnIGluIHRzaWNrbGUuXG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbCh0Vmlldy5maXJzdFRlbXBsYXRlUGFzcywgdHJ1ZSwgJ3Nob3VsZCBydW4gb24gZmlyc3QgdGVtcGxhdGUgcGFzcyBvbmx5Jyk7XG4gIGNvbnN0IGV4cG9ydHNNYXA6ICh7W2tleTogc3RyaW5nXTogbnVtYmVyfSB8IG51bGwpID0gbG9jYWxSZWZzID8geycnOiAtMX0gOiBudWxsO1xuICBpZiAoZGlyZWN0aXZlcykge1xuICAgIGluaXROb2RlRmxhZ3ModE5vZGUsIHRWaWV3LmRhdGEubGVuZ3RoLCBkaXJlY3RpdmVzLmxlbmd0aCk7XG4gICAgLy8gV2hlbiB0aGUgc2FtZSB0b2tlbiBpcyBwcm92aWRlZCBieSBzZXZlcmFsIGRpcmVjdGl2ZXMgb24gdGhlIHNhbWUgbm9kZSwgc29tZSBydWxlcyBhcHBseSBpblxuICAgIC8vIHRoZSB2aWV3RW5naW5lOlxuICAgIC8vIC0gdmlld1Byb3ZpZGVycyBoYXZlIHByaW9yaXR5IG92ZXIgcHJvdmlkZXJzXG4gICAgLy8gLSB0aGUgbGFzdCBkaXJlY3RpdmUgaW4gTmdNb2R1bGUuZGVjbGFyYXRpb25zIGhhcyBwcmlvcml0eSBvdmVyIHRoZSBwcmV2aW91cyBvbmVcbiAgICAvLyBTbyB0byBtYXRjaCB0aGVzZSBydWxlcywgdGhlIG9yZGVyIGluIHdoaWNoIHByb3ZpZGVycyBhcmUgYWRkZWQgaW4gdGhlIGFycmF5cyBpcyB2ZXJ5XG4gICAgLy8gaW1wb3J0YW50LlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGVmID0gZGlyZWN0aXZlc1tpXSBhcyBEaXJlY3RpdmVEZWY8YW55PjtcbiAgICAgIGlmIChkZWYucHJvdmlkZXJzUmVzb2x2ZXIpIGRlZi5wcm92aWRlcnNSZXNvbHZlcihkZWYpO1xuICAgIH1cbiAgICBnZW5lcmF0ZUV4cGFuZG9JbnN0cnVjdGlvbkJsb2NrKHRWaWV3LCB0Tm9kZSwgZGlyZWN0aXZlcy5sZW5ndGgpO1xuICAgIGNvbnN0IGluaXRpYWxQcmVPcmRlckhvb2tzTGVuZ3RoID0gKHRWaWV3LnByZU9yZGVySG9va3MgJiYgdFZpZXcucHJlT3JkZXJIb29rcy5sZW5ndGgpIHx8IDA7XG4gICAgY29uc3QgaW5pdGlhbFByZU9yZGVyQ2hlY2tIb29rc0xlbmd0aCA9XG4gICAgICAgICh0Vmlldy5wcmVPcmRlckNoZWNrSG9va3MgJiYgdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzLmxlbmd0aCkgfHwgMDtcbiAgICBjb25zdCBub2RlSW5kZXggPSB0Tm9kZS5pbmRleCAtIEhFQURFUl9PRkZTRVQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZWYgPSBkaXJlY3RpdmVzW2ldIGFzIERpcmVjdGl2ZURlZjxhbnk+O1xuXG4gICAgICBjb25zdCBkaXJlY3RpdmVEZWZJZHggPSB0Vmlldy5kYXRhLmxlbmd0aDtcbiAgICAgIGJhc2VSZXNvbHZlRGlyZWN0aXZlKHRWaWV3LCB2aWV3RGF0YSwgZGVmLCBkZWYuZmFjdG9yeSk7XG5cbiAgICAgIHNhdmVOYW1lVG9FeHBvcnRNYXAodFZpZXcuZGF0YSAhLmxlbmd0aCAtIDEsIGRlZiwgZXhwb3J0c01hcCk7XG5cbiAgICAgIC8vIEluaXQgaG9va3MgYXJlIHF1ZXVlZCBub3cgc28gbmdPbkluaXQgaXMgY2FsbGVkIGluIGhvc3QgY29tcG9uZW50cyBiZWZvcmVcbiAgICAgIC8vIGFueSBwcm9qZWN0ZWQgY29tcG9uZW50cy5cbiAgICAgIHJlZ2lzdGVyUHJlT3JkZXJIb29rcyhcbiAgICAgICAgICBkaXJlY3RpdmVEZWZJZHgsIGRlZiwgdFZpZXcsIG5vZGVJbmRleCwgaW5pdGlhbFByZU9yZGVySG9va3NMZW5ndGgsXG4gICAgICAgICAgaW5pdGlhbFByZU9yZGVyQ2hlY2tIb29rc0xlbmd0aCk7XG4gICAgfVxuICB9XG4gIGlmIChleHBvcnRzTWFwKSBjYWNoZU1hdGNoaW5nTG9jYWxOYW1lcyh0Tm9kZSwgbG9jYWxSZWZzLCBleHBvcnRzTWFwKTtcbn1cblxuLyoqXG4gKiBJbnN0YW50aWF0ZSBhbGwgdGhlIGRpcmVjdGl2ZXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgcmVzb2x2ZWQgb24gdGhlIGN1cnJlbnQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVBbGxEaXJlY3RpdmVzKHRWaWV3OiBUVmlldywgbFZpZXc6IExWaWV3LCB0Tm9kZTogVE5vZGUpIHtcbiAgY29uc3Qgc3RhcnQgPSB0Tm9kZS5kaXJlY3RpdmVTdGFydDtcbiAgY29uc3QgZW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICBpZiAoIXRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzICYmIHN0YXJ0IDwgZW5kKSB7XG4gICAgZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKFxuICAgICAgICB0Tm9kZSBhcyBURWxlbWVudE5vZGUgfCBUQ29udGFpbmVyTm9kZSB8IFRFbGVtZW50Q29udGFpbmVyTm9kZSwgbFZpZXcpO1xuICB9XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY29uc3QgZGVmID0gdFZpZXcuZGF0YVtpXSBhcyBEaXJlY3RpdmVEZWY8YW55PjtcbiAgICBpZiAoaXNDb21wb25lbnREZWYoZGVmKSkge1xuICAgICAgYWRkQ29tcG9uZW50TG9naWMobFZpZXcsIHROb2RlLCBkZWYgYXMgQ29tcG9uZW50RGVmPGFueT4pO1xuICAgIH1cbiAgICBjb25zdCBkaXJlY3RpdmUgPSBnZXROb2RlSW5qZWN0YWJsZSh0Vmlldy5kYXRhLCBsVmlldyAhLCBpLCB0Tm9kZSBhcyBURWxlbWVudE5vZGUpO1xuICAgIHBvc3RQcm9jZXNzRGlyZWN0aXZlKGxWaWV3LCBkaXJlY3RpdmUsIGRlZiwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlc0hvc3RCaW5kaW5ncyh0VmlldzogVFZpZXcsIHZpZXdEYXRhOiBMVmlldywgdE5vZGU6IFROb2RlKSB7XG4gIGNvbnN0IHN0YXJ0ID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7XG4gIGNvbnN0IGVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDtcbiAgY29uc3QgZXhwYW5kbyA9IHRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMgITtcbiAgY29uc3QgZmlyc3RUZW1wbGF0ZVBhc3MgPSB0Vmlldy5maXJzdFRlbXBsYXRlUGFzcztcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBjb25zdCBkZWYgPSB0Vmlldy5kYXRhW2ldIGFzIERpcmVjdGl2ZURlZjxhbnk+O1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHZpZXdEYXRhW2ldO1xuICAgIGlmIChkZWYuaG9zdEJpbmRpbmdzKSB7XG4gICAgICBpbnZva2VIb3N0QmluZGluZ3NJbkNyZWF0aW9uTW9kZShkZWYsIGV4cGFuZG8sIGRpcmVjdGl2ZSwgdE5vZGUsIGZpcnN0VGVtcGxhdGVQYXNzKTtcbiAgICB9IGVsc2UgaWYgKGZpcnN0VGVtcGxhdGVQYXNzKSB7XG4gICAgICBleHBhbmRvLnB1c2gobnVsbCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VIb3N0QmluZGluZ3NJbkNyZWF0aW9uTW9kZShcbiAgICBkZWY6IERpcmVjdGl2ZURlZjxhbnk+LCBleHBhbmRvOiBFeHBhbmRvSW5zdHJ1Y3Rpb25zLCBkaXJlY3RpdmU6IGFueSwgdE5vZGU6IFROb2RlLFxuICAgIGZpcnN0VGVtcGxhdGVQYXNzOiBib29sZWFuKSB7XG4gIGNvbnN0IHByZXZpb3VzRXhwYW5kb0xlbmd0aCA9IGV4cGFuZG8ubGVuZ3RoO1xuICBzZXRDdXJyZW50RGlyZWN0aXZlRGVmKGRlZik7XG4gIGNvbnN0IGVsZW1lbnRJbmRleCA9IHROb2RlLmluZGV4IC0gSEVBREVSX09GRlNFVDtcbiAgc2V0QWN0aXZlSG9zdChkaXJlY3RpdmUsIGVsZW1lbnRJbmRleCk7XG4gIGRlZi5ob3N0QmluZGluZ3MgIShSZW5kZXJGbGFncy5DcmVhdGUsIGRpcmVjdGl2ZSwgZWxlbWVudEluZGV4KTtcbiAgc2V0QWN0aXZlSG9zdChudWxsKTtcbiAgc2V0Q3VycmVudERpcmVjdGl2ZURlZihudWxsKTtcbiAgLy8gYGhvc3RCaW5kaW5nc2AgZnVuY3Rpb24gbWF5IG9yIG1heSBub3QgY29udGFpbiBgYWxsb2NIb3N0VmFyc2AgY2FsbFxuICAvLyAoZS5nLiBpdCBtYXkgbm90IGlmIGl0IG9ubHkgY29udGFpbnMgaG9zdCBsaXN0ZW5lcnMpLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHdoZXRoZXJcbiAgLy8gYGV4cGFuZG9JbnN0cnVjdGlvbnNgIGhhcyBjaGFuZ2VkIGFuZCBpZiBub3QgLSB3ZSBzdGlsbCBwdXNoIGBob3N0QmluZGluZ3NgIHRvXG4gIC8vIGV4cGFuZG8gYmxvY2ssIHRvIG1ha2Ugc3VyZSB3ZSBleGVjdXRlIGl0IGZvciBESSBjeWNsZVxuICBpZiAocHJldmlvdXNFeHBhbmRvTGVuZ3RoID09PSBleHBhbmRvLmxlbmd0aCAmJiBmaXJzdFRlbXBsYXRlUGFzcykge1xuICAgIGV4cGFuZG8ucHVzaChkZWYuaG9zdEJpbmRpbmdzKTtcbiAgfVxufVxuXG4vKipcbiogR2VuZXJhdGVzIGEgbmV3IGJsb2NrIGluIFRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMgZm9yIHRoaXMgbm9kZS5cbipcbiogRWFjaCBleHBhbmRvIGJsb2NrIHN0YXJ0cyB3aXRoIHRoZSBlbGVtZW50IGluZGV4ICh0dXJuZWQgbmVnYXRpdmUgc28gd2UgY2FuIGRpc3Rpbmd1aXNoXG4qIGl0IGZyb20gdGhlIGhvc3RWYXIgY291bnQpIGFuZCB0aGUgZGlyZWN0aXZlIGNvdW50LiBTZWUgbW9yZSBpbiBWSUVXX0RBVEEubWQuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRXhwYW5kb0luc3RydWN0aW9uQmxvY2soXG4gICAgdFZpZXc6IFRWaWV3LCB0Tm9kZTogVE5vZGUsIGRpcmVjdGl2ZUNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKFxuICAgICAgICAgICAgICAgICAgIHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzLCB0cnVlLFxuICAgICAgICAgICAgICAgICAgICdFeHBhbmRvIGJsb2NrIHNob3VsZCBvbmx5IGJlIGdlbmVyYXRlZCBvbiBmaXJzdCB0ZW1wbGF0ZSBwYXNzLicpO1xuXG4gIGNvbnN0IGVsZW1lbnRJbmRleCA9IC0odE5vZGUuaW5kZXggLSBIRUFERVJfT0ZGU0VUKTtcbiAgY29uc3QgcHJvdmlkZXJTdGFydEluZGV4ID0gdE5vZGUucHJvdmlkZXJJbmRleGVzICYgVE5vZGVQcm92aWRlckluZGV4ZXMuUHJvdmlkZXJzU3RhcnRJbmRleE1hc2s7XG4gIGNvbnN0IHByb3ZpZGVyQ291bnQgPSB0Vmlldy5kYXRhLmxlbmd0aCAtIHByb3ZpZGVyU3RhcnRJbmRleDtcbiAgKHRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMgfHwgKHRWaWV3LmV4cGFuZG9JbnN0cnVjdGlvbnMgPSBbXG4gICBdKSkucHVzaChlbGVtZW50SW5kZXgsIHByb3ZpZGVyQ291bnQsIGRpcmVjdGl2ZUNvdW50KTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzIGEgZGlyZWN0aXZlIG9uIHRoZSBjdXJyZW50IG5vZGUgYWZ0ZXIgaXRzIGNyZWF0aW9uLlxuICovXG5mdW5jdGlvbiBwb3N0UHJvY2Vzc0RpcmVjdGl2ZTxUPihcbiAgICB2aWV3RGF0YTogTFZpZXcsIGRpcmVjdGl2ZTogVCwgZGVmOiBEaXJlY3RpdmVEZWY8VD4sIGRpcmVjdGl2ZURlZklkeDogbnVtYmVyKTogdm9pZCB7XG4gIGNvbnN0IHByZXZpb3VzT3JQYXJlbnRUTm9kZSA9IGdldFByZXZpb3VzT3JQYXJlbnRUTm9kZSgpO1xuICBwb3N0UHJvY2Vzc0Jhc2VEaXJlY3RpdmUodmlld0RhdGEsIHByZXZpb3VzT3JQYXJlbnRUTm9kZSwgZGlyZWN0aXZlKTtcbiAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQocHJldmlvdXNPclBhcmVudFROb2RlLCAncHJldmlvdXNPclBhcmVudFROb2RlJyk7XG4gIGlmIChwcmV2aW91c09yUGFyZW50VE5vZGUgJiYgcHJldmlvdXNPclBhcmVudFROb2RlLmF0dHJzKSB7XG4gICAgc2V0SW5wdXRzRnJvbUF0dHJzKGRpcmVjdGl2ZURlZklkeCwgZGlyZWN0aXZlLCBkZWYsIHByZXZpb3VzT3JQYXJlbnRUTm9kZSk7XG4gIH1cblxuICBpZiAodmlld0RhdGFbVFZJRVddLmZpcnN0VGVtcGxhdGVQYXNzICYmIGRlZi5jb250ZW50UXVlcmllcykge1xuICAgIHByZXZpb3VzT3JQYXJlbnRUTm9kZS5mbGFncyB8PSBUTm9kZUZsYWdzLmhhc0NvbnRlbnRRdWVyeTtcbiAgfVxuXG4gIGlmIChpc0NvbXBvbmVudERlZihkZWYpKSB7XG4gICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudFZpZXdCeUluZGV4KHByZXZpb3VzT3JQYXJlbnRUTm9kZS5pbmRleCwgdmlld0RhdGEpO1xuICAgIGNvbXBvbmVudFZpZXdbQ09OVEVYVF0gPSBkaXJlY3RpdmU7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGxpZ2h0ZXIgdmVyc2lvbiBvZiBwb3N0UHJvY2Vzc0RpcmVjdGl2ZSgpIHRoYXQgaXMgdXNlZCBmb3IgdGhlIHJvb3QgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBwb3N0UHJvY2Vzc0Jhc2VEaXJlY3RpdmU8VD4oXG4gICAgbFZpZXc6IExWaWV3LCBwcmV2aW91c09yUGFyZW50VE5vZGU6IFROb2RlLCBkaXJlY3RpdmU6IFQpOiB2b2lkIHtcbiAgY29uc3QgbmF0aXZlID0gZ2V0TmF0aXZlQnlUTm9kZShwcmV2aW91c09yUGFyZW50VE5vZGUsIGxWaWV3KTtcblxuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RXF1YWwoXG4gICAgICAgICAgICAgICAgICAgbFZpZXdbQklORElOR19JTkRFWF0sIGxWaWV3W1RWSUVXXS5iaW5kaW5nU3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAnZGlyZWN0aXZlcyBzaG91bGQgYmUgY3JlYXRlZCBiZWZvcmUgYW55IGJpbmRpbmdzJyk7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRQcmV2aW91c0lzUGFyZW50KGdldElzUGFyZW50KCkpO1xuXG4gIGF0dGFjaFBhdGNoRGF0YShkaXJlY3RpdmUsIGxWaWV3KTtcbiAgaWYgKG5hdGl2ZSkge1xuICAgIGF0dGFjaFBhdGNoRGF0YShuYXRpdmUsIGxWaWV3KTtcbiAgfVxufVxuXG5cblxuLyoqXG4qIE1hdGNoZXMgdGhlIGN1cnJlbnQgbm9kZSBhZ2FpbnN0IGFsbCBhdmFpbGFibGUgc2VsZWN0b3JzLlxuKiBJZiBhIGNvbXBvbmVudCBpcyBtYXRjaGVkIChhdCBtb3N0IG9uZSksIGl0IGlzIHJldHVybmVkIGluIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBhcnJheS5cbiovXG5mdW5jdGlvbiBmaW5kRGlyZWN0aXZlTWF0Y2hlcyh0VmlldzogVFZpZXcsIHZpZXdEYXRhOiBMVmlldywgdE5vZGU6IFROb2RlKTogRGlyZWN0aXZlRGVmPGFueT5bXXxcbiAgICBudWxsIHtcbiAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKHRWaWV3LmZpcnN0VGVtcGxhdGVQYXNzLCB0cnVlLCAnc2hvdWxkIHJ1biBvbiBmaXJzdCB0ZW1wbGF0ZSBwYXNzIG9ubHknKTtcbiAgY29uc3QgcmVnaXN0cnkgPSB0Vmlldy5kaXJlY3RpdmVSZWdpc3RyeTtcbiAgbGV0IG1hdGNoZXM6IGFueVtdfG51bGwgPSBudWxsO1xuICBpZiAocmVnaXN0cnkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZWYgPSByZWdpc3RyeVtpXSBhcyBDb21wb25lbnREZWY8YW55PnwgRGlyZWN0aXZlRGVmPGFueT47XG4gICAgICBpZiAoaXNOb2RlTWF0Y2hpbmdTZWxlY3Rvckxpc3QodE5vZGUsIGRlZi5zZWxlY3RvcnMgISwgLyogaXNQcm9qZWN0aW9uTW9kZSAqLyBmYWxzZSkpIHtcbiAgICAgICAgbWF0Y2hlcyB8fCAobWF0Y2hlcyA9IFtdKTtcbiAgICAgICAgZGlQdWJsaWNJbkluamVjdG9yKFxuICAgICAgICAgICAgZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKFxuICAgICAgICAgICAgICAgIGdldFByZXZpb3VzT3JQYXJlbnRUTm9kZSgpIGFzIFRFbGVtZW50Tm9kZSB8IFRDb250YWluZXJOb2RlIHwgVEVsZW1lbnRDb250YWluZXJOb2RlLFxuICAgICAgICAgICAgICAgIHZpZXdEYXRhKSxcbiAgICAgICAgICAgIHZpZXdEYXRhLCBkZWYudHlwZSk7XG5cbiAgICAgICAgaWYgKGlzQ29tcG9uZW50RGVmKGRlZikpIHtcbiAgICAgICAgICBpZiAodE5vZGUuZmxhZ3MgJiBUTm9kZUZsYWdzLmlzQ29tcG9uZW50KSB0aHJvd011bHRpcGxlQ29tcG9uZW50RXJyb3IodE5vZGUpO1xuICAgICAgICAgIHROb2RlLmZsYWdzID0gVE5vZGVGbGFncy5pc0NvbXBvbmVudDtcblxuICAgICAgICAgIC8vIFRoZSBjb21wb25lbnQgaXMgYWx3YXlzIHN0b3JlZCBmaXJzdCB3aXRoIGRpcmVjdGl2ZXMgYWZ0ZXIuXG4gICAgICAgICAgbWF0Y2hlcy51bnNoaWZ0KGRlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0Y2hlcy5wdXNoKGRlZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbi8qKiBTdG9yZXMgaW5kZXggb2YgY29tcG9uZW50J3MgaG9zdCBlbGVtZW50IHNvIGl0IHdpbGwgYmUgcXVldWVkIGZvciB2aWV3IHJlZnJlc2ggZHVyaW5nIENELiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXVlQ29tcG9uZW50SW5kZXhGb3JDaGVjayhwcmV2aW91c09yUGFyZW50VE5vZGU6IFROb2RlKTogdm9pZCB7XG4gIGNvbnN0IHRWaWV3ID0gZ2V0TFZpZXcoKVtUVklFV107XG4gIG5nRGV2TW9kZSAmJlxuICAgICAgYXNzZXJ0RXF1YWwodFZpZXcuZmlyc3RUZW1wbGF0ZVBhc3MsIHRydWUsICdTaG91bGQgb25seSBiZSBjYWxsZWQgaW4gZmlyc3QgdGVtcGxhdGUgcGFzcy4nKTtcbiAgKHRWaWV3LmNvbXBvbmVudHMgfHwgKHRWaWV3LmNvbXBvbmVudHMgPSBbXSkpLnB1c2gocHJldmlvdXNPclBhcmVudFROb2RlLmluZGV4KTtcbn1cblxuXG4vKiogQ2FjaGVzIGxvY2FsIG5hbWVzIGFuZCB0aGVpciBtYXRjaGluZyBkaXJlY3RpdmUgaW5kaWNlcyBmb3IgcXVlcnkgYW5kIHRlbXBsYXRlIGxvb2t1cHMuICovXG5mdW5jdGlvbiBjYWNoZU1hdGNoaW5nTG9jYWxOYW1lcyhcbiAgICB0Tm9kZTogVE5vZGUsIGxvY2FsUmVmczogc3RyaW5nW10gfCBudWxsLCBleHBvcnRzTWFwOiB7W2tleTogc3RyaW5nXTogbnVtYmVyfSk6IHZvaWQge1xuICBpZiAobG9jYWxSZWZzKSB7XG4gICAgY29uc3QgbG9jYWxOYW1lczogKHN0cmluZyB8IG51bWJlcilbXSA9IHROb2RlLmxvY2FsTmFtZXMgPSBbXTtcblxuICAgIC8vIExvY2FsIG5hbWVzIG11c3QgYmUgc3RvcmVkIGluIHROb2RlIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgbG9jYWxSZWZzIGFyZSBkZWZpbmVkXG4gICAgLy8gaW4gdGhlIHRlbXBsYXRlIHRvIGVuc3VyZSB0aGUgZGF0YSBpcyBsb2FkZWQgaW4gdGhlIHNhbWUgc2xvdHMgYXMgdGhlaXIgcmVmc1xuICAgIC8vIGluIHRoZSB0ZW1wbGF0ZSAoZm9yIHRlbXBsYXRlIHF1ZXJpZXMpLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxSZWZzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGV4cG9ydHNNYXBbbG9jYWxSZWZzW2kgKyAxXV07XG4gICAgICBpZiAoaW5kZXggPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKGBFeHBvcnQgb2YgbmFtZSAnJHtsb2NhbFJlZnNbaSArIDFdfScgbm90IGZvdW5kIWApO1xuICAgICAgbG9jYWxOYW1lcy5wdXNoKGxvY2FsUmVmc1tpXSwgaW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiogQnVpbGRzIHVwIGFuIGV4cG9ydCBtYXAgYXMgZGlyZWN0aXZlcyBhcmUgY3JlYXRlZCwgc28gbG9jYWwgcmVmcyBjYW4gYmUgcXVpY2tseSBtYXBwZWRcbiogdG8gdGhlaXIgZGlyZWN0aXZlIGluc3RhbmNlcy5cbiovXG5mdW5jdGlvbiBzYXZlTmFtZVRvRXhwb3J0TWFwKFxuICAgIGluZGV4OiBudW1iZXIsIGRlZjogRGlyZWN0aXZlRGVmPGFueT58IENvbXBvbmVudERlZjxhbnk+LFxuICAgIGV4cG9ydHNNYXA6IHtba2V5OiBzdHJpbmddOiBudW1iZXJ9IHwgbnVsbCkge1xuICBpZiAoZXhwb3J0c01hcCkge1xuICAgIGlmIChkZWYuZXhwb3J0QXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVmLmV4cG9ydEFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4cG9ydHNNYXBbZGVmLmV4cG9ydEFzW2ldXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKGRlZiBhcyBDb21wb25lbnREZWY8YW55PikudGVtcGxhdGUpIGV4cG9ydHNNYXBbJyddID0gaW5kZXg7XG4gIH1cbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgZmxhZ3Mgb24gdGhlIGN1cnJlbnQgbm9kZSwgc2V0dGluZyBhbGwgaW5kaWNlcyB0byB0aGUgaW5pdGlhbCBpbmRleCxcbiAqIHRoZSBkaXJlY3RpdmUgY291bnQgdG8gMCwgYW5kIGFkZGluZyB0aGUgaXNDb21wb25lbnQgZmxhZy5cbiAqIEBwYXJhbSBpbmRleCB0aGUgaW5pdGlhbCBpbmRleFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdE5vZGVGbGFncyh0Tm9kZTogVE5vZGUsIGluZGV4OiBudW1iZXIsIG51bWJlck9mRGlyZWN0aXZlczogbnVtYmVyKSB7XG4gIGNvbnN0IGZsYWdzID0gdE5vZGUuZmxhZ3M7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChcbiAgICAgICAgICAgICAgICAgICBmbGFncyA9PT0gMCB8fCBmbGFncyA9PT0gVE5vZGVGbGFncy5pc0NvbXBvbmVudCwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAnZXhwZWN0ZWQgbm9kZSBmbGFncyB0byBub3QgYmUgaW5pdGlhbGl6ZWQnKTtcblxuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Tm90RXF1YWwoXG4gICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZEaXJlY3RpdmVzLCB0Tm9kZS5kaXJlY3RpdmVFbmQgLSB0Tm9kZS5kaXJlY3RpdmVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAnUmVhY2hlZCB0aGUgbWF4IG51bWJlciBvZiBkaXJlY3RpdmVzJyk7XG4gIC8vIFdoZW4gdGhlIGZpcnN0IGRpcmVjdGl2ZSBpcyBjcmVhdGVkIG9uIGEgbm9kZSwgc2F2ZSB0aGUgaW5kZXhcbiAgdE5vZGUuZmxhZ3MgPSBmbGFncyAmIFROb2RlRmxhZ3MuaXNDb21wb25lbnQ7XG4gIHROb2RlLmRpcmVjdGl2ZVN0YXJ0ID0gaW5kZXg7XG4gIHROb2RlLmRpcmVjdGl2ZUVuZCA9IGluZGV4ICsgbnVtYmVyT2ZEaXJlY3RpdmVzO1xuICB0Tm9kZS5wcm92aWRlckluZGV4ZXMgPSBpbmRleDtcbn1cblxuZnVuY3Rpb24gYmFzZVJlc29sdmVEaXJlY3RpdmU8VD4oXG4gICAgdFZpZXc6IFRWaWV3LCB2aWV3RGF0YTogTFZpZXcsIGRlZjogRGlyZWN0aXZlRGVmPFQ+LFxuICAgIGRpcmVjdGl2ZUZhY3Rvcnk6ICh0OiBUeXBlPFQ+fCBudWxsKSA9PiBhbnkpIHtcbiAgdFZpZXcuZGF0YS5wdXNoKGRlZik7XG4gIGNvbnN0IG5vZGVJbmplY3RvckZhY3RvcnkgPSBuZXcgTm9kZUluamVjdG9yRmFjdG9yeShkaXJlY3RpdmVGYWN0b3J5LCBpc0NvbXBvbmVudERlZihkZWYpLCBudWxsKTtcbiAgdFZpZXcuYmx1ZXByaW50LnB1c2gobm9kZUluamVjdG9yRmFjdG9yeSk7XG4gIHZpZXdEYXRhLnB1c2gobm9kZUluamVjdG9yRmFjdG9yeSk7XG59XG5cbmZ1bmN0aW9uIGFkZENvbXBvbmVudExvZ2ljPFQ+KFxuICAgIGxWaWV3OiBMVmlldywgcHJldmlvdXNPclBhcmVudFROb2RlOiBUTm9kZSwgZGVmOiBDb21wb25lbnREZWY8VD4pOiB2b2lkIHtcbiAgY29uc3QgbmF0aXZlID0gZ2V0TmF0aXZlQnlUTm9kZShwcmV2aW91c09yUGFyZW50VE5vZGUsIGxWaWV3KTtcblxuICBjb25zdCB0VmlldyA9IGdldE9yQ3JlYXRlVFZpZXcoXG4gICAgICBkZWYudGVtcGxhdGUsIGRlZi5jb25zdHMsIGRlZi52YXJzLCBkZWYuZGlyZWN0aXZlRGVmcywgZGVmLnBpcGVEZWZzLCBkZWYudmlld1F1ZXJ5LFxuICAgICAgZGVmLnNjaGVtYXMpO1xuXG4gIC8vIE9ubHkgY29tcG9uZW50IHZpZXdzIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgdmlldyB0cmVlIGRpcmVjdGx5LiBFbWJlZGRlZCB2aWV3cyBhcmVcbiAgLy8gYWNjZXNzZWQgdGhyb3VnaCB0aGVpciBjb250YWluZXJzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmVtb3ZlZCAvIHJlLWFkZGVkIGxhdGVyLlxuICBjb25zdCByZW5kZXJlckZhY3RvcnkgPSBsVmlld1tSRU5ERVJFUl9GQUNUT1JZXTtcbiAgY29uc3QgY29tcG9uZW50VmlldyA9IGFkZFRvVmlld1RyZWUoXG4gICAgICBsVmlldywgY3JlYXRlTFZpZXcoXG4gICAgICAgICAgICAgICAgIGxWaWV3LCB0VmlldywgbnVsbCwgZGVmLm9uUHVzaCA/IExWaWV3RmxhZ3MuRGlydHkgOiBMVmlld0ZsYWdzLkNoZWNrQWx3YXlzLFxuICAgICAgICAgICAgICAgICBsVmlld1twcmV2aW91c09yUGFyZW50VE5vZGUuaW5kZXhdLCBwcmV2aW91c09yUGFyZW50VE5vZGUgYXMgVEVsZW1lbnROb2RlLFxuICAgICAgICAgICAgICAgICByZW5kZXJlckZhY3RvcnksIGxWaWV3W1JFTkRFUkVSX0ZBQ1RPUlldLmNyZWF0ZVJlbmRlcmVyKG5hdGl2ZSBhcyBSRWxlbWVudCwgZGVmKSkpO1xuXG4gIGNvbXBvbmVudFZpZXdbVF9IT1NUXSA9IHByZXZpb3VzT3JQYXJlbnRUTm9kZSBhcyBURWxlbWVudE5vZGU7XG5cbiAgLy8gQ29tcG9uZW50IHZpZXcgd2lsbCBhbHdheXMgYmUgY3JlYXRlZCBiZWZvcmUgYW55IGluamVjdGVkIExDb250YWluZXJzLFxuICAvLyBzbyB0aGlzIGlzIGEgcmVndWxhciBlbGVtZW50LCB3cmFwIGl0IHdpdGggdGhlIGNvbXBvbmVudCB2aWV3XG4gIGxWaWV3W3ByZXZpb3VzT3JQYXJlbnRUTm9kZS5pbmRleF0gPSBjb21wb25lbnRWaWV3O1xuXG4gIGlmIChsVmlld1tUVklFV10uZmlyc3RUZW1wbGF0ZVBhc3MpIHtcbiAgICBxdWV1ZUNvbXBvbmVudEluZGV4Rm9yQ2hlY2socHJldmlvdXNPclBhcmVudFROb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgaW5pdGlhbCBpbnB1dCBwcm9wZXJ0aWVzIG9uIGRpcmVjdGl2ZSBpbnN0YW5jZXMgZnJvbSBhdHRyaWJ1dGUgZGF0YVxuICpcbiAqIEBwYXJhbSBkaXJlY3RpdmVJbmRleCBJbmRleCBvZiB0aGUgZGlyZWN0aXZlIGluIGRpcmVjdGl2ZXMgYXJyYXlcbiAqIEBwYXJhbSBpbnN0YW5jZSBJbnN0YW5jZSBvZiB0aGUgZGlyZWN0aXZlIG9uIHdoaWNoIHRvIHNldCB0aGUgaW5pdGlhbCBpbnB1dHNcbiAqIEBwYXJhbSBpbnB1dHMgVGhlIGxpc3Qgb2YgaW5wdXRzIGZyb20gdGhlIGRpcmVjdGl2ZSBkZWZcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgc3RhdGljIGRhdGEgZm9yIHRoaXMgbm9kZVxuICovXG5mdW5jdGlvbiBzZXRJbnB1dHNGcm9tQXR0cnM8VD4oXG4gICAgZGlyZWN0aXZlSW5kZXg6IG51bWJlciwgaW5zdGFuY2U6IFQsIGRlZjogRGlyZWN0aXZlRGVmPFQ+LCB0Tm9kZTogVE5vZGUpOiB2b2lkIHtcbiAgbGV0IGluaXRpYWxJbnB1dERhdGEgPSB0Tm9kZS5pbml0aWFsSW5wdXRzIGFzIEluaXRpYWxJbnB1dERhdGEgfCB1bmRlZmluZWQ7XG4gIGlmIChpbml0aWFsSW5wdXREYXRhID09PSB1bmRlZmluZWQgfHwgZGlyZWN0aXZlSW5kZXggPj0gaW5pdGlhbElucHV0RGF0YS5sZW5ndGgpIHtcbiAgICBpbml0aWFsSW5wdXREYXRhID0gZ2VuZXJhdGVJbml0aWFsSW5wdXRzKGRpcmVjdGl2ZUluZGV4LCBkZWYuaW5wdXRzLCB0Tm9kZSk7XG4gIH1cblxuICBjb25zdCBpbml0aWFsSW5wdXRzOiBJbml0aWFsSW5wdXRzfG51bGwgPSBpbml0aWFsSW5wdXREYXRhW2RpcmVjdGl2ZUluZGV4XTtcbiAgaWYgKGluaXRpYWxJbnB1dHMpIHtcbiAgICBjb25zdCBzZXRJbnB1dCA9IGRlZi5zZXRJbnB1dDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluaXRpYWxJbnB1dHMubGVuZ3RoOykge1xuICAgICAgY29uc3QgcHVibGljTmFtZSA9IGluaXRpYWxJbnB1dHNbaSsrXTtcbiAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gaW5pdGlhbElucHV0c1tpKytdO1xuICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsSW5wdXRzW2krK107XG4gICAgICBpZiAoc2V0SW5wdXQpIHtcbiAgICAgICAgZGVmLnNldElucHV0ICEoaW5zdGFuY2UsIHZhbHVlLCBwdWJsaWNOYW1lLCBwcml2YXRlTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoaW5zdGFuY2UgYXMgYW55KVtwcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgaW5pdGlhbElucHV0RGF0YSBmb3IgYSBub2RlIGFuZCBzdG9yZXMgaXQgaW4gdGhlIHRlbXBsYXRlJ3Mgc3RhdGljIHN0b3JhZ2VcbiAqIHNvIHN1YnNlcXVlbnQgdGVtcGxhdGUgaW52b2NhdGlvbnMgZG9uJ3QgaGF2ZSB0byByZWNhbGN1bGF0ZSBpdC5cbiAqXG4gKiBpbml0aWFsSW5wdXREYXRhIGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBzZXQgYXMgaW5wdXQgcHJvcGVydGllc1xuICogZm9yIGRpcmVjdGl2ZXMgb24gdGhpcyBub2RlLCBidXQgb25seSBvbmNlIG9uIGNyZWF0aW9uLiBXZSBuZWVkIHRoaXMgYXJyYXkgdG8gc3VwcG9ydFxuICogdGhlIGNhc2Ugd2hlcmUgeW91IHNldCBhbiBASW5wdXQgcHJvcGVydHkgb2YgYSBkaXJlY3RpdmUgdXNpbmcgYXR0cmlidXRlLWxpa2Ugc3ludGF4LlxuICogZS5nLiBpZiB5b3UgaGF2ZSBhIGBuYW1lYCBASW5wdXQsIHlvdSBjYW4gc2V0IGl0IG9uY2UgbGlrZSB0aGlzOlxuICpcbiAqIDxteS1jb21wb25lbnQgbmFtZT1cIkJlc3NcIj48L215LWNvbXBvbmVudD5cbiAqXG4gKiBAcGFyYW0gZGlyZWN0aXZlSW5kZXggSW5kZXggdG8gc3RvcmUgdGhlIGluaXRpYWwgaW5wdXQgZGF0YVxuICogQHBhcmFtIGlucHV0cyBUaGUgbGlzdCBvZiBpbnB1dHMgZnJvbSB0aGUgZGlyZWN0aXZlIGRlZlxuICogQHBhcmFtIHROb2RlIFRoZSBzdGF0aWMgZGF0YSBvbiB0aGlzIG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJbml0aWFsSW5wdXRzKFxuICAgIGRpcmVjdGl2ZUluZGV4OiBudW1iZXIsIGlucHV0czoge1trZXk6IHN0cmluZ106IHN0cmluZ30sIHROb2RlOiBUTm9kZSk6IEluaXRpYWxJbnB1dERhdGEge1xuICBjb25zdCBpbml0aWFsSW5wdXREYXRhOiBJbml0aWFsSW5wdXREYXRhID0gdE5vZGUuaW5pdGlhbElucHV0cyB8fCAodE5vZGUuaW5pdGlhbElucHV0cyA9IFtdKTtcbiAgaW5pdGlhbElucHV0RGF0YVtkaXJlY3RpdmVJbmRleF0gPSBudWxsO1xuXG4gIGNvbnN0IGF0dHJzID0gdE5vZGUuYXR0cnMgITtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGF0dHJzLmxlbmd0aCkge1xuICAgIGNvbnN0IGF0dHJOYW1lID0gYXR0cnNbaV07XG4gICAgaWYgKGF0dHJOYW1lID09PSBBdHRyaWJ1dGVNYXJrZXIuTmFtZXNwYWNlVVJJKSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWxsb3cgaW5wdXRzIG9uIG5hbWVzcGFjZWQgYXR0cmlidXRlcy5cbiAgICAgIGkgKz0gNDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhpdCBhbnkgb3RoZXIgYXR0cmlidXRlIG1hcmtlcnMsIHdlJ3JlIGRvbmUgYW55d2F5LiBOb25lIG9mIHRob3NlIGFyZSB2YWxpZCBpbnB1dHMuXG4gICAgaWYgKHR5cGVvZiBhdHRyTmFtZSA9PT0gJ251bWJlcicpIGJyZWFrO1xuXG4gICAgY29uc3QgbWluaWZpZWRJbnB1dE5hbWUgPSBpbnB1dHNbYXR0ck5hbWVdO1xuICAgIGNvbnN0IGF0dHJWYWx1ZSA9IGF0dHJzW2kgKyAxXTtcblxuICAgIGlmIChtaW5pZmllZElucHV0TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBpbnB1dHNUb1N0b3JlOiBJbml0aWFsSW5wdXRzID1cbiAgICAgICAgICBpbml0aWFsSW5wdXREYXRhW2RpcmVjdGl2ZUluZGV4XSB8fCAoaW5pdGlhbElucHV0RGF0YVtkaXJlY3RpdmVJbmRleF0gPSBbXSk7XG4gICAgICBpbnB1dHNUb1N0b3JlLnB1c2goYXR0ck5hbWUsIG1pbmlmaWVkSW5wdXROYW1lLCBhdHRyVmFsdWUgYXMgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBpICs9IDI7XG4gIH1cbiAgcmV0dXJuIGluaXRpYWxJbnB1dERhdGE7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIFZpZXdDb250YWluZXIgJiBWaWV3XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBMQ29udGFpbmVyLCBlaXRoZXIgZnJvbSBhIGNvbnRhaW5lciBpbnN0cnVjdGlvbiwgb3IgZm9yIGEgVmlld0NvbnRhaW5lclJlZi5cbiAqXG4gKiBAcGFyYW0gaG9zdE5hdGl2ZSBUaGUgaG9zdCBlbGVtZW50IGZvciB0aGUgTENvbnRhaW5lclxuICogQHBhcmFtIGhvc3RUTm9kZSBUaGUgaG9zdCBUTm9kZSBmb3IgdGhlIExDb250YWluZXJcbiAqIEBwYXJhbSBjdXJyZW50VmlldyBUaGUgcGFyZW50IHZpZXcgb2YgdGhlIExDb250YWluZXJcbiAqIEBwYXJhbSBuYXRpdmUgVGhlIG5hdGl2ZSBjb21tZW50IGVsZW1lbnRcbiAqIEBwYXJhbSBpc0ZvclZpZXdDb250YWluZXJSZWYgT3B0aW9uYWwgYSBmbGFnIGluZGljYXRpbmcgdGhlIFZpZXdDb250YWluZXJSZWYgY2FzZVxuICogQHJldHVybnMgTENvbnRhaW5lclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTENvbnRhaW5lcihcbiAgICBob3N0TmF0aXZlOiBSRWxlbWVudCB8IFJDb21tZW50IHwgU3R5bGluZ0NvbnRleHQgfCBMVmlldywgY3VycmVudFZpZXc6IExWaWV3LCBuYXRpdmU6IFJDb21tZW50LFxuICAgIHROb2RlOiBUTm9kZSwgaXNGb3JWaWV3Q29udGFpbmVyUmVmPzogYm9vbGVhbik6IExDb250YWluZXIge1xuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RG9tTm9kZShuYXRpdmUpO1xuICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcoY3VycmVudFZpZXcpO1xuICBjb25zdCBsQ29udGFpbmVyOiBMQ29udGFpbmVyID0gW1xuICAgIGhvc3ROYXRpdmUsICAvLyBob3N0IG5hdGl2ZVxuICAgIHRydWUsICAgICAgICAvLyBCb29sZWFuIGB0cnVlYCBpbiB0aGlzIHBvc2l0aW9uIHNpZ25pZmllcyB0aGF0IHRoaXMgaXMgYW4gYExDb250YWluZXJgXG4gICAgaXNGb3JWaWV3Q29udGFpbmVyUmVmID8gLTEgOiAwLCAgLy8gYWN0aXZlIGluZGV4XG4gICAgY3VycmVudFZpZXcsICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50XG4gICAgbnVsbCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dFxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJpZXNcbiAgICB0Tm9kZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0X2hvc3RcbiAgICBuYXRpdmUsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuYXRpdmVcbiAgICBbXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aWV3c1xuICBdO1xuICBuZ0Rldk1vZGUgJiYgYXR0YWNoTENvbnRhaW5lckRlYnVnKGxDb250YWluZXIpO1xuICByZXR1cm4gbENvbnRhaW5lcjtcbn1cblxuXG4vKipcbiAqIEdvZXMgb3ZlciBkeW5hbWljIGVtYmVkZGVkIHZpZXdzIChvbmVzIGNyZWF0ZWQgdGhyb3VnaCBWaWV3Q29udGFpbmVyUmVmIEFQSXMpIGFuZCByZWZyZXNoZXMgdGhlbVxuICogYnkgZXhlY3V0aW5nIGFuIGFzc29jaWF0ZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHJlZnJlc2hEeW5hbWljRW1iZWRkZWRWaWV3cyhsVmlldzogTFZpZXcpIHtcbiAgZm9yIChsZXQgY3VycmVudCA9IGxWaWV3W0NISUxEX0hFQURdOyBjdXJyZW50ICE9PSBudWxsOyBjdXJyZW50ID0gY3VycmVudFtORVhUXSkge1xuICAgIC8vIE5vdGU6IGN1cnJlbnQgY2FuIGJlIGFuIExWaWV3IG9yIGFuIExDb250YWluZXIgaW5zdGFuY2UsIGJ1dCBoZXJlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWRcbiAgICAvLyBpbiBMQ29udGFpbmVyLiBXZSBjYW4gdGVsbCBpdCdzIGFuIExDb250YWluZXIgYmVjYXVzZSBpdHMgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgTFZpZXdcbiAgICAvLyBoZWFkZXIuXG4gICAgaWYgKGN1cnJlbnQubGVuZ3RoIDwgSEVBREVSX09GRlNFVCAmJiBjdXJyZW50W0FDVElWRV9JTkRFWF0gPT09IC0xKSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBjdXJyZW50IGFzIExDb250YWluZXI7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lcltWSUVXU10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZHluYW1pY1ZpZXdEYXRhID0gY29udGFpbmVyW1ZJRVdTXVtpXTtcbiAgICAgICAgLy8gVGhlIGRpcmVjdGl2ZXMgYW5kIHBpcGVzIGFyZSBub3QgbmVlZGVkIGhlcmUgYXMgYW4gZXhpc3RpbmcgdmlldyBpcyBvbmx5IGJlaW5nIHJlZnJlc2hlZC5cbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQoZHluYW1pY1ZpZXdEYXRhW1RWSUVXXSwgJ1RWaWV3IG11c3QgYmUgYWxsb2NhdGVkJyk7XG4gICAgICAgIHJlbmRlckVtYmVkZGVkVGVtcGxhdGUoZHluYW1pY1ZpZXdEYXRhLCBkeW5hbWljVmlld0RhdGFbVFZJRVddLCBkeW5hbWljVmlld0RhdGFbQ09OVEVYVF0gISk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogUmVmcmVzaGVzIGNvbXBvbmVudHMgYnkgZW50ZXJpbmcgdGhlIGNvbXBvbmVudCB2aWV3IGFuZCBwcm9jZXNzaW5nIGl0cyBiaW5kaW5ncywgcXVlcmllcywgZXRjLlxuICpcbiAqIEBwYXJhbSBhZGp1c3RlZEVsZW1lbnRJbmRleCAgRWxlbWVudCBpbmRleCBpbiBMVmlld1tdIChhZGp1c3RlZCBmb3IgSEVBREVSX09GRlNFVClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudFJlZnJlc2goYWRqdXN0ZWRFbGVtZW50SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnREYXRhSW5SYW5nZShsVmlldywgYWRqdXN0ZWRFbGVtZW50SW5kZXgpO1xuICBjb25zdCBob3N0VmlldyA9IGdldENvbXBvbmVudFZpZXdCeUluZGV4KGFkanVzdGVkRWxlbWVudEluZGV4LCBsVmlldyk7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnROb2RlVHlwZShsVmlld1tUVklFV10uZGF0YVthZGp1c3RlZEVsZW1lbnRJbmRleF0gYXMgVE5vZGUsIFROb2RlVHlwZS5FbGVtZW50KTtcblxuICAvLyBPbmx5IGF0dGFjaGVkIENoZWNrQWx3YXlzIGNvbXBvbmVudHMgb3IgYXR0YWNoZWQsIGRpcnR5IE9uUHVzaCBjb21wb25lbnRzIHNob3VsZCBiZSBjaGVja2VkXG4gIGlmICh2aWV3QXR0YWNoZWRUb0NoYW5nZURldGVjdG9yKGhvc3RWaWV3KSAmJlxuICAgICAgaG9zdFZpZXdbRkxBR1NdICYgKExWaWV3RmxhZ3MuQ2hlY2tBbHdheXMgfCBMVmlld0ZsYWdzLkRpcnR5KSkge1xuICAgIHN5bmNWaWV3V2l0aEJsdWVwcmludChob3N0Vmlldyk7XG4gICAgY2hlY2tWaWV3KGhvc3RWaWV3LCBob3N0Vmlld1tDT05URVhUXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBTeW5jcyBhbiBMVmlldyBpbnN0YW5jZSB3aXRoIGl0cyBibHVlcHJpbnQgaWYgdGhleSBoYXZlIGdvdHRlbiBvdXQgb2Ygc3luYy5cbiAqXG4gKiBUeXBpY2FsbHksIGJsdWVwcmludHMgYW5kIHRoZWlyIHZpZXcgaW5zdGFuY2VzIHNob3VsZCBhbHdheXMgYmUgaW4gc3luYywgc28gdGhlIGxvb3AgaGVyZVxuICogd2lsbCBiZSBza2lwcGVkLiBIb3dldmVyLCBjb25zaWRlciB0aGlzIGNhc2Ugb2YgdHdvIGNvbXBvbmVudHMgc2lkZS1ieS1zaWRlOlxuICpcbiAqIEFwcCB0ZW1wbGF0ZTpcbiAqIGBgYFxuICogPGNvbXA+PC9jb21wPlxuICogPGNvbXA+PC9jb21wPlxuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyB3aWxsIGhhcHBlbjpcbiAqIDEuIEFwcCB0ZW1wbGF0ZSBiZWdpbnMgcHJvY2Vzc2luZy5cbiAqIDIuIEZpcnN0IDxjb21wPiBpcyBtYXRjaGVkIGFzIGEgY29tcG9uZW50IGFuZCBpdHMgTFZpZXcgaXMgY3JlYXRlZC5cbiAqIDMuIFNlY29uZCA8Y29tcD4gaXMgbWF0Y2hlZCBhcyBhIGNvbXBvbmVudCBhbmQgaXRzIExWaWV3IGlzIGNyZWF0ZWQuXG4gKiA0LiBBcHAgdGVtcGxhdGUgY29tcGxldGVzIHByb2Nlc3NpbmcsIHNvIGl0J3MgdGltZSB0byBjaGVjayBjaGlsZCB0ZW1wbGF0ZXMuXG4gKiA1LiBGaXJzdCA8Y29tcD4gdGVtcGxhdGUgaXMgY2hlY2tlZC4gSXQgaGFzIGEgZGlyZWN0aXZlLCBzbyBpdHMgZGVmIGlzIHB1c2hlZCB0byBibHVlcHJpbnQuXG4gKiA2LiBTZWNvbmQgPGNvbXA+IHRlbXBsYXRlIGlzIGNoZWNrZWQuIEl0cyBibHVlcHJpbnQgaGFzIGJlZW4gdXBkYXRlZCBieSB0aGUgZmlyc3RcbiAqIDxjb21wPiB0ZW1wbGF0ZSwgYnV0IGl0cyBMVmlldyB3YXMgY3JlYXRlZCBiZWZvcmUgdGhpcyB1cGRhdGUsIHNvIGl0IGlzIG91dCBvZiBzeW5jLlxuICpcbiAqIE5vdGUgdGhhdCBlbWJlZGRlZCB2aWV3cyBpbnNpZGUgbmdGb3IgbG9vcHMgd2lsbCBuZXZlciBiZSBvdXQgb2Ygc3luYyBiZWNhdXNlIHRoZXNlIHZpZXdzXG4gKiBhcmUgcHJvY2Vzc2VkIGFzIHNvb24gYXMgdGhleSBhcmUgY3JlYXRlZC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50VmlldyBUaGUgdmlldyB0byBzeW5jXG4gKi9cbmZ1bmN0aW9uIHN5bmNWaWV3V2l0aEJsdWVwcmludChjb21wb25lbnRWaWV3OiBMVmlldykge1xuICBjb25zdCBjb21wb25lbnRUVmlldyA9IGNvbXBvbmVudFZpZXdbVFZJRVddO1xuICBmb3IgKGxldCBpID0gY29tcG9uZW50Vmlldy5sZW5ndGg7IGkgPCBjb21wb25lbnRUVmlldy5ibHVlcHJpbnQubGVuZ3RoOyBpKyspIHtcbiAgICBjb21wb25lbnRWaWV3W2ldID0gY29tcG9uZW50VFZpZXcuYmx1ZXByaW50W2ldO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBMVmlldyBvciBMQ29udGFpbmVyIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgdmlldyB0cmVlLlxuICpcbiAqIFRoaXMgc3RydWN0dXJlIHdpbGwgYmUgdXNlZCB0byB0cmF2ZXJzZSB0aHJvdWdoIG5lc3RlZCB2aWV3cyB0byByZW1vdmUgbGlzdGVuZXJzXG4gKiBhbmQgY2FsbCBvbkRlc3Ryb3kgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSBsVmlldyBUaGUgdmlldyB3aGVyZSBMVmlldyBvciBMQ29udGFpbmVyIHNob3VsZCBiZSBhZGRlZFxuICogQHBhcmFtIGFkanVzdGVkSG9zdEluZGV4IEluZGV4IG9mIHRoZSB2aWV3J3MgaG9zdCBub2RlIGluIExWaWV3W10sIGFkanVzdGVkIGZvciBoZWFkZXJcbiAqIEBwYXJhbSBsVmlld09yTENvbnRhaW5lciBUaGUgTFZpZXcgb3IgTENvbnRhaW5lciB0byBhZGQgdG8gdGhlIHZpZXcgdHJlZVxuICogQHJldHVybnMgVGhlIHN0YXRlIHBhc3NlZCBpblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9WaWV3VHJlZTxUIGV4dGVuZHMgTFZpZXd8TENvbnRhaW5lcj4obFZpZXc6IExWaWV3LCBsVmlld09yTENvbnRhaW5lcjogVCk6IFQge1xuICAvLyBUT0RPKGJlbmxlc2gvbWlza28pOiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGluY29ycmVjdCwgYmVjYXVzZSBpdCBhbHdheXMgYWRkcyB0aGUgTENvbnRhaW5lciB0b1xuICAvLyB0aGUgZW5kIG9mIHRoZSBxdWV1ZSwgd2hpY2ggbWVhbnMgaWYgdGhlIGRldmVsb3BlciByZXRyaWV2ZXMgdGhlIExDb250YWluZXJzIGZyb20gUk5vZGVzIG91dCBvZlxuICAvLyBvcmRlciwgdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBydW4gb3V0IG9mIG9yZGVyLCBhcyB0aGUgYWN0IG9mIHJldHJpZXZpbmcgdGhlIHRoZSBMQ29udGFpbmVyXG4gIC8vIGZyb20gdGhlIFJOb2RlIGlzIHdoYXQgYWRkcyBpdCB0byB0aGUgcXVldWUuXG4gIGlmIChsVmlld1tDSElMRF9IRUFEXSkge1xuICAgIGxWaWV3W0NISUxEX1RBSUxdICFbTkVYVF0gPSBsVmlld09yTENvbnRhaW5lcjtcbiAgfSBlbHNlIHtcbiAgICBsVmlld1tDSElMRF9IRUFEXSA9IGxWaWV3T3JMQ29udGFpbmVyO1xuICB9XG4gIGxWaWV3W0NISUxEX1RBSUxdID0gbFZpZXdPckxDb250YWluZXI7XG4gIHJldHVybiBsVmlld09yTENvbnRhaW5lcjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLyBDaGFuZ2UgZGV0ZWN0aW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuLyoqXG4gKiBNYXJrcyBjdXJyZW50IHZpZXcgYW5kIGFsbCBhbmNlc3RvcnMgZGlydHkuXG4gKlxuICogUmV0dXJucyB0aGUgcm9vdCB2aWV3IGJlY2F1c2UgaXQgaXMgZm91bmQgYXMgYSBieXByb2R1Y3Qgb2YgbWFya2luZyB0aGUgdmlldyB0cmVlXG4gKiBkaXJ0eSwgYW5kIGNhbiBiZSB1c2VkIGJ5IG1ldGhvZHMgdGhhdCBjb25zdW1lIG1hcmtWaWV3RGlydHkoKSB0byBlYXNpbHkgc2NoZWR1bGVcbiAqIGNoYW5nZSBkZXRlY3Rpb24uIE90aGVyd2lzZSwgc3VjaCBtZXRob2RzIHdvdWxkIG5lZWQgdG8gdHJhdmVyc2UgdXAgdGhlIHZpZXcgdHJlZVxuICogYW4gYWRkaXRpb25hbCB0aW1lIHRvIGdldCB0aGUgcm9vdCB2aWV3IGFuZCBzY2hlZHVsZSBhIHRpY2sgb24gaXQuXG4gKlxuICogQHBhcmFtIGxWaWV3IFRoZSBzdGFydGluZyBMVmlldyB0byBtYXJrIGRpcnR5XG4gKiBAcmV0dXJucyB0aGUgcm9vdCBMVmlld1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWFya1ZpZXdEaXJ0eShsVmlldzogTFZpZXcpOiBMVmlld3xudWxsIHtcbiAgd2hpbGUgKGxWaWV3KSB7XG4gICAgbFZpZXdbRkxBR1NdIHw9IExWaWV3RmxhZ3MuRGlydHk7XG4gICAgY29uc3QgcGFyZW50ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXcpO1xuICAgIC8vIFN0b3AgdHJhdmVyc2luZyB1cCBhcyBzb29uIGFzIHlvdSBmaW5kIGEgcm9vdCB2aWV3IHRoYXQgd2Fzbid0IGF0dGFjaGVkIHRvIGFueSBjb250YWluZXJcbiAgICBpZiAoaXNSb290VmlldyhsVmlldykgJiYgIXBhcmVudCkge1xuICAgICAgcmV0dXJuIGxWaWV3O1xuICAgIH1cbiAgICAvLyBjb250aW51ZSBvdGhlcndpc2VcbiAgICBsVmlldyA9IHBhcmVudCAhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbi8qKlxuICogVXNlZCB0byBzY2hlZHVsZSBjaGFuZ2UgZGV0ZWN0aW9uIG9uIHRoZSB3aG9sZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBVbmxpa2UgYHRpY2tgLCBgc2NoZWR1bGVUaWNrYCBjb2FsZXNjZXMgbXVsdGlwbGUgY2FsbHMgaW50byBvbmUgY2hhbmdlIGRldGVjdGlvbiBydW4uXG4gKiBJdCBpcyB1c3VhbGx5IGNhbGxlZCBpbmRpcmVjdGx5IGJ5IGNhbGxpbmcgYG1hcmtEaXJ0eWAgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZVxuICogcmUtcmVuZGVyZWQuXG4gKlxuICogVHlwaWNhbGx5IGBzY2hlZHVsZVRpY2tgIHVzZXMgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgdG8gY29hbGVzY2UgbXVsdGlwbGVcbiAqIGBzY2hlZHVsZVRpY2tgIHJlcXVlc3RzLiBUaGUgc2NoZWR1bGluZyBmdW5jdGlvbiBjYW4gYmUgb3ZlcnJpZGRlbiBpblxuICogYHJlbmRlckNvbXBvbmVudGAncyBgc2NoZWR1bGVyYCBvcHRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVRpY2socm9vdENvbnRleHQ6IFJvb3RDb250ZXh0LCBmbGFnczogUm9vdENvbnRleHRGbGFncykge1xuICBjb25zdCBub3RoaW5nU2NoZWR1bGVkID0gcm9vdENvbnRleHQuZmxhZ3MgPT09IFJvb3RDb250ZXh0RmxhZ3MuRW1wdHk7XG4gIHJvb3RDb250ZXh0LmZsYWdzIHw9IGZsYWdzO1xuXG4gIGlmIChub3RoaW5nU2NoZWR1bGVkICYmIHJvb3RDb250ZXh0LmNsZWFuID09IF9DTEVBTl9QUk9NSVNFKSB7XG4gICAgbGV0IHJlczogbnVsbHwoKHZhbDogbnVsbCkgPT4gdm9pZCk7XG4gICAgcm9vdENvbnRleHQuY2xlYW4gPSBuZXcgUHJvbWlzZTxudWxsPigocikgPT4gcmVzID0gcik7XG4gICAgcm9vdENvbnRleHQuc2NoZWR1bGVyKCgpID0+IHtcbiAgICAgIGlmIChyb290Q29udGV4dC5mbGFncyAmIFJvb3RDb250ZXh0RmxhZ3MuRGV0ZWN0Q2hhbmdlcykge1xuICAgICAgICByb290Q29udGV4dC5mbGFncyAmPSB+Um9vdENvbnRleHRGbGFncy5EZXRlY3RDaGFuZ2VzO1xuICAgICAgICB0aWNrUm9vdENvbnRleHQocm9vdENvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdENvbnRleHQuZmxhZ3MgJiBSb290Q29udGV4dEZsYWdzLkZsdXNoUGxheWVycykge1xuICAgICAgICByb290Q29udGV4dC5mbGFncyAmPSB+Um9vdENvbnRleHRGbGFncy5GbHVzaFBsYXllcnM7XG4gICAgICAgIGNvbnN0IHBsYXllckhhbmRsZXIgPSByb290Q29udGV4dC5wbGF5ZXJIYW5kbGVyO1xuICAgICAgICBpZiAocGxheWVySGFuZGxlcikge1xuICAgICAgICAgIHBsYXllckhhbmRsZXIuZmx1c2hQbGF5ZXJzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcm9vdENvbnRleHQuY2xlYW4gPSBfQ0xFQU5fUFJPTUlTRTtcbiAgICAgIHJlcyAhKG51bGwpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrUm9vdENvbnRleHQocm9vdENvbnRleHQ6IFJvb3RDb250ZXh0KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm9vdENvbnRleHQuY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvb3RDb21wb25lbnQgPSByb290Q29udGV4dC5jb21wb25lbnRzW2ldO1xuICAgIHJlbmRlckNvbXBvbmVudE9yVGVtcGxhdGUocmVhZFBhdGNoZWRMVmlldyhyb290Q29tcG9uZW50KSAhLCByb290Q29tcG9uZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0Q2hhbmdlc0ludGVybmFsPFQ+KHZpZXc6IExWaWV3LCBjb250ZXh0OiBUKSB7XG4gIGNvbnN0IHJlbmRlcmVyRmFjdG9yeSA9IHZpZXdbUkVOREVSRVJfRkFDVE9SWV07XG5cbiAgaWYgKHJlbmRlcmVyRmFjdG9yeS5iZWdpbikgcmVuZGVyZXJGYWN0b3J5LmJlZ2luKCk7XG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNDcmVhdGlvbk1vZGUodmlldykpIHtcbiAgICAgIGNoZWNrVmlldyh2aWV3LCBjb250ZXh0KTsgIC8vIGNyZWF0aW9uIG1vZGUgcGFzc1xuICAgIH1cbiAgICBjaGVja1ZpZXcodmlldywgY29udGV4dCk7ICAvLyB1cGRhdGUgbW9kZSBwYXNzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaGFuZGxlRXJyb3IodmlldywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChyZW5kZXJlckZhY3RvcnkuZW5kKSByZW5kZXJlckZhY3RvcnkuZW5kKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IHBlcmZvcm0gY2hhbmdlIGRldGVjdGlvbiBvbiBhIHJvb3QgdmlldyBhbmQgaXRzIGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHdoaWNoIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RDaGFuZ2VzSW5Sb290VmlldyhsVmlldzogTFZpZXcpOiB2b2lkIHtcbiAgdGlja1Jvb3RDb250ZXh0KGxWaWV3W0NPTlRFWFRdIGFzIFJvb3RDb250ZXh0KTtcbn1cblxuXG4vKipcbiAqIENoZWNrcyB0aGUgY2hhbmdlIGRldGVjdG9yIGFuZCBpdHMgY2hpbGRyZW4sIGFuZCB0aHJvd3MgaWYgYW55IGNoYW5nZXMgYXJlIGRldGVjdGVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiBkZXZlbG9wbWVudCBtb2RlIHRvIHZlcmlmeSB0aGF0IHJ1bm5pbmcgY2hhbmdlIGRldGVjdGlvbiBkb2Vzbid0XG4gKiBpbnRyb2R1Y2Ugb3RoZXIgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTm9DaGFuZ2VzPFQ+KGNvbXBvbmVudDogVCk6IHZvaWQge1xuICBjb25zdCB2aWV3ID0gZ2V0Q29tcG9uZW50Vmlld0J5SW5zdGFuY2UoY29tcG9uZW50KTtcbiAgY2hlY2tOb0NoYW5nZXNJbnRlcm5hbDxUPih2aWV3LCBjb21wb25lbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOb0NoYW5nZXNJbnRlcm5hbDxUPih2aWV3OiBMVmlldywgY29udGV4dDogVCkge1xuICBzZXRDaGVja05vQ2hhbmdlc01vZGUodHJ1ZSk7XG4gIHRyeSB7XG4gICAgZGV0ZWN0Q2hhbmdlc0ludGVybmFsKHZpZXcsIGNvbnRleHQpO1xuICB9IGZpbmFsbHkge1xuICAgIHNldENoZWNrTm9DaGFuZ2VzTW9kZShmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgdGhlIGNoYW5nZSBkZXRlY3RvciBvbiBhIHJvb3QgdmlldyBhbmQgaXRzIGNvbXBvbmVudHMsIGFuZCB0aHJvd3MgaWYgYW55IGNoYW5nZXMgYXJlXG4gKiBkZXRlY3RlZC5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSB0byB2ZXJpZnkgdGhhdCBydW5uaW5nIGNoYW5nZSBkZXRlY3Rpb24gZG9lc24ndFxuICogaW50cm9kdWNlIG90aGVyIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHdoaWNoIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHNob3VsZCBiZSBjaGVja2VkIG9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOb0NoYW5nZXNJblJvb3RWaWV3KGxWaWV3OiBMVmlldyk6IHZvaWQge1xuICBzZXRDaGVja05vQ2hhbmdlc01vZGUodHJ1ZSk7XG4gIHRyeSB7XG4gICAgZGV0ZWN0Q2hhbmdlc0luUm9vdFZpZXcobFZpZXcpO1xuICB9IGZpbmFsbHkge1xuICAgIHNldENoZWNrTm9DaGFuZ2VzTW9kZShmYWxzZSk7XG4gIH1cbn1cblxuLyoqIENoZWNrcyB0aGUgdmlldyBvZiB0aGUgY29tcG9uZW50IHByb3ZpZGVkLiBEb2VzIG5vdCBnYXRlIG9uIGRpcnR5IGNoZWNrcyBvciBleGVjdXRlIGRvQ2hlY2suICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tWaWV3PFQ+KGhvc3RWaWV3OiBMVmlldywgY29tcG9uZW50OiBUKSB7XG4gIGNvbnN0IGhvc3RUVmlldyA9IGhvc3RWaWV3W1RWSUVXXTtcbiAgY29uc3Qgb2xkVmlldyA9IGVudGVyVmlldyhob3N0VmlldywgaG9zdFZpZXdbVF9IT1NUXSk7XG4gIGNvbnN0IHRlbXBsYXRlRm4gPSBob3N0VFZpZXcudGVtcGxhdGUgITtcbiAgY29uc3QgY3JlYXRpb25Nb2RlID0gaXNDcmVhdGlvbk1vZGUoaG9zdFZpZXcpO1xuXG4gIHRyeSB7XG4gICAgcmVzZXRQcmVPcmRlckhvb2tGbGFncyhob3N0Vmlldyk7XG4gICAgbmFtZXNwYWNlSFRNTCgpO1xuICAgIGNyZWF0aW9uTW9kZSAmJiBleGVjdXRlVmlld1F1ZXJ5Rm4oUmVuZGVyRmxhZ3MuQ3JlYXRlLCBob3N0VFZpZXcsIGNvbXBvbmVudCk7XG5cbiAgICAvLyBSZXNldCB0aGUgc2VsZWN0ZWQgaW5kZXggc28gd2UgY2FuIGFzc2VydCB0aGF0IGBzZWxlY3RgIHdhcyBjYWxsZWQgbGF0ZXJcbiAgICBuZ0Rldk1vZGUgJiYgc2V0U2VsZWN0ZWRJbmRleCgtMSk7XG5cbiAgICB0ZW1wbGF0ZUZuKGdldFJlbmRlckZsYWdzKGhvc3RWaWV3KSwgY29tcG9uZW50KTtcblxuICAgIHJlZnJlc2hEZXNjZW5kYW50Vmlld3MoaG9zdFZpZXcpO1xuICAgIC8vIE9ubHkgY2hlY2sgdmlldyBxdWVyaWVzIGFnYWluIGluIGNyZWF0aW9uIG1vZGUgaWYgdGhlcmUgYXJlIHN0YXRpYyB2aWV3IHF1ZXJpZXNcbiAgICBpZiAoIWNyZWF0aW9uTW9kZSB8fCBob3N0VFZpZXcuc3RhdGljVmlld1F1ZXJpZXMpIHtcbiAgICAgIGV4ZWN1dGVWaWV3UXVlcnlGbihSZW5kZXJGbGFncy5VcGRhdGUsIGhvc3RUVmlldywgY29tcG9uZW50KTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgbGVhdmVWaWV3KG9sZFZpZXcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVWaWV3UXVlcnlGbjxUPihmbGFnczogUmVuZGVyRmxhZ3MsIHRWaWV3OiBUVmlldywgY29tcG9uZW50OiBUKTogdm9pZCB7XG4gIGNvbnN0IHZpZXdRdWVyeSA9IHRWaWV3LnZpZXdRdWVyeTtcbiAgaWYgKHZpZXdRdWVyeSkge1xuICAgIHNldEN1cnJlbnRRdWVyeUluZGV4KHRWaWV3LnZpZXdRdWVyeVN0YXJ0SW5kZXgpO1xuICAgIHZpZXdRdWVyeShmbGFncywgY29tcG9uZW50KTtcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8gQmluZGluZ3MgJiBpbnRlcnBvbGF0aW9uc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYmluZGluZyBtZXRhZGF0YSBmb3IgYSBwYXJ0aWN1bGFyIGJpbmRpbmcgYW5kIHN0b3JlcyBpdCBpblxuICogVFZpZXcuZGF0YS4gVGhlc2UgYXJlIGdlbmVyYXRlZCBpbiBvcmRlciB0byBzdXBwb3J0IERlYnVnRWxlbWVudC5wcm9wZXJ0aWVzLlxuICpcbiAqIEVhY2ggYmluZGluZyAvIGludGVycG9sYXRpb24gd2lsbCBoYXZlIG9uZSAoaW5jbHVkaW5nIGF0dHJpYnV0ZSBiaW5kaW5ncylcbiAqIGJlY2F1c2UgYXQgdGhlIHRpbWUgb2YgYmluZGluZywgd2UgZG9uJ3Qga25vdyB0byB3aGljaCBpbnN0cnVjdGlvbiB0aGUgYmluZGluZ1xuICogYmVsb25ncy4gSXQgaXMgYWx3YXlzIHN0b3JlZCBpbiBUVmlldy5kYXRhIGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBiaW5kaW5nXG4gKiB2YWx1ZSBpbiBMVmlldyAoZS5nLiBmb3IgaW50ZXJwb2xhdGlvbjgsIGl0IHdvdWxkIGJlIHN0b3JlZCBhdCB0aGUgaW5kZXggb2ZcbiAqIHRoZSA4dGggdmFsdWUpLlxuICpcbiAqIEBwYXJhbSBsVmlldyBUaGUgTFZpZXcgdGhhdCBjb250YWlucyB0aGUgY3VycmVudCBiaW5kaW5nIGluZGV4LlxuICogQHBhcmFtIHByZWZpeCBUaGUgc3RhdGljIHByZWZpeCBzdHJpbmdcbiAqIEBwYXJhbSBzdWZmaXggVGhlIHN0YXRpYyBzdWZmaXggc3RyaW5nXG4gKlxuICogQHJldHVybnMgTmV3bHkgY3JlYXRlZCBiaW5kaW5nIG1ldGFkYXRhIHN0cmluZyBmb3IgdGhpcyBiaW5kaW5nIG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQmluZGluZ01ldGFkYXRhKGxWaWV3OiBMVmlldywgcHJlZml4ID0gJycsIHN1ZmZpeCA9ICcnKTogc3RyaW5nfG51bGwge1xuICBjb25zdCB0RGF0YSA9IGxWaWV3W1RWSUVXXS5kYXRhO1xuICBjb25zdCBsYXN0QmluZGluZ0luZGV4ID0gbFZpZXdbQklORElOR19JTkRFWF0gLSAxO1xuICBjb25zdCB2YWx1ZSA9IElOVEVSUE9MQVRJT05fREVMSU1JVEVSICsgcHJlZml4ICsgSU5URVJQT0xBVElPTl9ERUxJTUlURVIgKyBzdWZmaXg7XG5cbiAgcmV0dXJuIHREYXRhW2xhc3RCaW5kaW5nSW5kZXhdID09IG51bGwgPyAodERhdGFbbGFzdEJpbmRpbmdJbmRleF0gPSB2YWx1ZSkgOiBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgQ0xFQU5fUFJPTUlTRSA9IF9DTEVBTl9QUk9NSVNFO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVROb2RlSW5wdXRzKHROb2RlOiBUTm9kZSB8IG51bGwpOiBQcm9wZXJ0eUFsaWFzZXN8bnVsbCB7XG4gIC8vIElmIHROb2RlLmlucHV0cyBpcyB1bmRlZmluZWQsIGEgbGlzdGVuZXIgaGFzIGNyZWF0ZWQgb3V0cHV0cywgYnV0IGlucHV0cyBoYXZlbid0XG4gIC8vIHlldCBiZWVuIGNoZWNrZWQuXG4gIGlmICh0Tm9kZSkge1xuICAgIGlmICh0Tm9kZS5pbnB1dHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gbWFyayBpbnB1dHMgYXMgY2hlY2tlZFxuICAgICAgdE5vZGUuaW5wdXRzID0gZ2VuZXJhdGVQcm9wZXJ0eUFsaWFzZXModE5vZGUsIEJpbmRpbmdEaXJlY3Rpb24uSW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm4gdE5vZGUuaW5wdXRzO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGVhbnVwKHZpZXc6IExWaWV3KTogYW55W10ge1xuICAvLyB0b3AgbGV2ZWwgdmFyaWFibGVzIHNob3VsZCBub3QgYmUgZXhwb3J0ZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKFBFUkZfTk9URVMubWQpXG4gIHJldHVybiB2aWV3W0NMRUFOVVBdIHx8ICh2aWV3W0NMRUFOVVBdID0gW10pO1xufVxuXG5mdW5jdGlvbiBnZXRUVmlld0NsZWFudXAodmlldzogTFZpZXcpOiBhbnlbXSB7XG4gIHJldHVybiB2aWV3W1RWSUVXXS5jbGVhbnVwIHx8ICh2aWV3W1RWSUVXXS5jbGVhbnVwID0gW10pO1xufVxuXG4vKipcbiAqIFRoZXJlIGFyZSBjYXNlcyB3aGVyZSB0aGUgc3ViIGNvbXBvbmVudCdzIHJlbmRlcmVyIG5lZWRzIHRvIGJlIGluY2x1ZGVkXG4gKiBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVyIChzZWUgdGhlIGNvbXBvbmVudFN5bnRoZXRpY0hvc3QqIGluc3RydWN0aW9ucykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQ29tcG9uZW50UmVuZGVyZXIodE5vZGU6IFROb2RlLCBsVmlldzogTFZpZXcpOiBSZW5kZXJlcjMge1xuICBjb25zdCBjb21wb25lbnRMVmlldyA9IGxWaWV3W3ROb2RlLmluZGV4XSBhcyBMVmlldztcbiAgcmV0dXJuIGNvbXBvbmVudExWaWV3W1JFTkRFUkVSXTtcbn1cblxuLyoqIEhhbmRsZXMgYW4gZXJyb3IgdGhyb3duIGluIGFuIExWaWV3LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGxWaWV3OiBMVmlldywgZXJyb3I6IGFueSk6IHZvaWQge1xuICBjb25zdCBpbmplY3RvciA9IGxWaWV3W0lOSkVDVE9SXTtcbiAgY29uc3QgZXJyb3JIYW5kbGVyID0gaW5qZWN0b3IgPyBpbmplY3Rvci5nZXQoRXJyb3JIYW5kbGVyLCBudWxsKSA6IG51bGw7XG4gIGVycm9ySGFuZGxlciAmJiBlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZXJyb3IpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgaW5wdXRzIG9mIGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgbm9kZSB0byBjb3JyZXNwb25kaW5nIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBsVmlldyB0aGUgYExWaWV3YCB3aGljaCBjb250YWlucyB0aGUgZGlyZWN0aXZlcy5cbiAqIEBwYXJhbSBpbnB1dEFsaWFzZXMgbWFwcGluZyBiZXR3ZWVuIHRoZSBwdWJsaWMgXCJpbnB1dFwiIG5hbWUgYW5kIHByaXZhdGVseS1rbm93bixcbiAqIHBvc3NpYmx5IG1pbmlmaWVkLCBwcm9wZXJ0eSBuYW1lcyB0byB3cml0ZSB0by5cbiAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnB1dHNGb3JQcm9wZXJ0eShsVmlldzogTFZpZXcsIGlucHV0czogUHJvcGVydHlBbGlhc1ZhbHVlLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7KSB7XG4gICAgY29uc3QgaW5kZXggPSBpbnB1dHNbaSsrXSBhcyBudW1iZXI7XG4gICAgY29uc3QgcHVibGljTmFtZSA9IGlucHV0c1tpKytdIGFzIHN0cmluZztcbiAgICBjb25zdCBwcml2YXRlTmFtZSA9IGlucHV0c1tpKytdIGFzIHN0cmluZztcbiAgICBjb25zdCBpbnN0YW5jZSA9IGxWaWV3W2luZGV4XTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGF0YUluUmFuZ2UobFZpZXcsIGluZGV4KTtcbiAgICBjb25zdCBkZWYgPSB0Vmlldy5kYXRhW2luZGV4XSBhcyBEaXJlY3RpdmVEZWY8YW55PjtcbiAgICBjb25zdCBzZXRJbnB1dCA9IGRlZi5zZXRJbnB1dDtcbiAgICBpZiAoc2V0SW5wdXQpIHtcbiAgICAgIGRlZi5zZXRJbnB1dCAhKGluc3RhbmNlLCB2YWx1ZSwgcHVibGljTmFtZSwgcHJpdmF0ZU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZVtwcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ViewEncapsulation } from '../metadata/view';\nimport { assertDefined } from '../util/assert';\nimport { assertLContainer, assertLView } from './assert';\nimport { attachPatchData } from './context_discovery';\nimport { NATIVE, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { NodeInjectorFactory } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CHILD_HEAD, CLEANUP, FLAGS, NEXT, PARENT, QUERIES, RENDERER, TVIEW, T_HOST, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { renderStringify } from './util/misc_utils';\nimport { findComponentView, getLViewParent } from './util/view_traversal_utils';\nimport { getNativeByTNode, isComponent, isLContainer, isLView, isRootView, unwrapRNode, viewAttachedToContainer } from './util/view_utils';\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\nexport function getLContainer(tNode, embeddedView) {\n    ngDevMode && assertLView(embeddedView);\n    var container = embeddedView[PARENT];\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n        return isLContainer(container) ? container : null;\n    }\n    else {\n        ngDevMode && assertLContainer(container);\n        // This is a inline view node (e.g. embeddedViewStart)\n        return container;\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    var container = getLContainer(tViewNode, view);\n    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param viewToWalk the view to walk\n * @param action identifies the action to be performed on the elements\n * @param renderer the current renderer.\n * @param renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    var e_1, _a;\n    var rootTNode = viewToWalk[TVIEW].node;\n    var projectionNodeIndex = -1;\n    var currentView = viewToWalk;\n    var tNode = rootTNode.child;\n    while (tNode) {\n        var nextTNode = null;\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), tNode, beforeNode);\n            var nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], tNode, beforeNode);\n                if (nodeOrContainer[VIEWS].length) {\n                    currentView = nodeOrContainer[VIEWS][0];\n                    nextTNode = currentView[TVIEW].node;\n                    // When the walker enters a container, then the beforeNode has to become the local native\n                    // comment node.\n                    beforeNode = nodeOrContainer[NATIVE];\n                }\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            var lContainer = currentView[tNode.index];\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], tNode, beforeNode);\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            var componentView = findComponentView(currentView);\n            var componentHost = componentView[T_HOST];\n            var head = componentHost.projection[tNode.projection];\n            if (Array.isArray(head)) {\n                try {\n                    for (var head_1 = tslib_1.__values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                        var nativeNode = head_1_1.value;\n                        executeNodeAction(action, renderer, renderParent, nativeNode, tNode, beforeNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else {\n                // Must store both the TNode and the view because this projection node could be nested\n                // deeply inside embedded views, and we need to get back down to this particular nested\n                // view.\n                projectionNodeStack[++projectionNodeIndex] = tNode;\n                projectionNodeStack[++projectionNodeIndex] = currentView;\n                if (head) {\n                    currentView = componentView[PARENT];\n                    nextTNode = currentView[TVIEW].data[head.index];\n                }\n            }\n        }\n        else {\n            // Otherwise, this is a View\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.projectionNext === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = projectionNodeStack[projectionNodeIndex--];\n                tNode = projectionNodeStack[projectionNodeIndex--];\n            }\n            if (tNode.flags & 2 /* isProjected */) {\n                nextTNode = tNode.projectionNext;\n            }\n            else if (tNode.type === 4 /* ElementContainer */) {\n                nextTNode = tNode.child || tNode.next;\n            }\n            else {\n                nextTNode = tNode.next;\n            }\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[T_HOST];\n                if (tNode === null || tNode === rootTNode)\n                    return;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = getLViewParent(currentView);\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */) {\n                    /**\n                     * If current lView doesn't have next pointer, we try to find it by going up parents\n                     * chain until:\n                     * - we find an lView with a next pointer\n                     * - or find a tNode with a parent that has a next pointer\n                     * - or find a lContainer\n                     * - or reach root TNode (in which case we exit, since we traversed all nodes)\n                     */\n                    while (!currentView[NEXT] && currentView[PARENT] &&\n                        !(tNode.parent && tNode.parent.next)) {\n                        if (tNode === rootTNode)\n                            return;\n                        currentView = currentView[PARENT];\n                        if (isLContainer(currentView)) {\n                            tNode = currentView[T_HOST];\n                            currentView = currentView[PARENT];\n                            beforeNode = currentView[tNode.index][NATIVE];\n                            break;\n                        }\n                        tNode = currentView[T_HOST];\n                    }\n                    if (currentView[NEXT]) {\n                        currentView = currentView[NEXT];\n                        nextTNode = currentView[T_HOST];\n                    }\n                    else {\n                        nextTNode = tNode.type === 4 /* ElementContainer */ && tNode.child || tNode.next;\n                    }\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction executeNodeAction(action, renderer, parent, node, tNode, beforeNode) {\n    if (action === 0 /* Insert */) {\n        nativeInsertBefore(renderer, parent, node, beforeNode || null);\n    }\n    else if (action === 1 /* Detach */) {\n        nativeRemoveNode(renderer, node, isComponent(tNode));\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        renderer.destroyNode(node);\n    }\n}\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n        renderer.createTextNode(renderStringify(value));\n}\nexport function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    var renderParent = getContainerRenderParent(viewToWalk[TVIEW].node, viewToWalk);\n    ngDevMode && assertNodeType(viewToWalk[TVIEW].node, 2 /* View */);\n    if (renderParent) {\n        var renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param lView the `LView` to be detached.\n */\nexport function renderDetachView(lView) {\n    walkTNodeTree(lView, 1 /* Detach */, lView[RENDERER], null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    var lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView);\n    }\n    while (lViewOrLContainer) {\n        var next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            var views = lViewOrLContainer[VIEWS];\n            if (views.length > 0)\n                next = views[0];\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                cleanUpView(lViewOrLContainer);\n                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n            }\n            cleanUpView(lViewOrLContainer || rootView);\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nexport function insertView(lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    var views = lContainer[VIEWS];\n    ngDevMode && assertDefined(views, 'Container must have views');\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        lView[QUERIES].insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer, removeIndex) {\n    var views = lContainer[VIEWS];\n    var viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = viewToDetach[NEXT];\n    }\n    views.splice(removeIndex, 1);\n    addRemoveViewFromContainer(viewToDetach, false);\n    if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n        !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n        viewToDetach[QUERIES].removeView();\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* Attached */;\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param lContainer The container from which to remove a view\n * @param removeIndex The index of the view to remove\n */\nexport function removeView(lContainer, removeIndex) {\n    var view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex);\n    destroyLView(view);\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param view The view to be destroyed.\n */\nexport function destroyLView(view) {\n    if (!(view[FLAGS] & 256 /* Destroyed */)) {\n        var renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n            walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n        }\n        destroyViewTree(view);\n    }\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state\n * @param rootView The rootView, so we don't propagate too far up the view tree\n * @returns The correct parent LViewOrLContainer\n */\nexport function getParentState(lViewOrLContainer, rootView) {\n    var tNode;\n    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return getLContainer(tNode, lViewOrLContainer);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param view The LView to clean up\n */\nfunction cleanUpView(view) {\n    if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        view[FLAGS] &= ~128 /* Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        view[FLAGS] |= 256 /* Destroyed */;\n        executeOnDestroys(view);\n        removeListeners(view);\n        var hostTNode = view[T_HOST];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            view[RENDERER].destroy();\n        }\n        // For embedded views still attached to a container: remove query result from this view.\n        if (viewAttachedToContainer(view) && view[QUERIES]) {\n            view[QUERIES].removeView();\n        }\n    }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction removeListeners(lView) {\n    var tCleanup = lView[TVIEW].cleanup;\n    if (tCleanup != null) {\n        var lCleanup = lView[CLEANUP];\n        for (var i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a listener with the native renderer\n                var idxOrTargetGetter = tCleanup[i + 1];\n                var target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                var listener = lCleanup[tCleanup[i + 2]];\n                var useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // DOM listener\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else if (typeof tCleanup[i] === 'number') {\n                // This is a listener with renderer2 (cleanup fn can be found by index)\n                var cleanupFn = lCleanup[tCleanup[i]];\n                cleanupFn();\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                var context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(view) {\n    var tView = view[TVIEW];\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (var i = 0; i < destroyHooks.length; i += 2) {\n            var context = view[destroyHooks[i]];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                destroyHooks[i + 1].call(context);\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n */\nfunction getRenderParent(tNode, currentView) {\n    // Nodes of the top-most view can be inserted eagerly.\n    if (isRootView(currentView)) {\n        return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    var parent = getHighestElementOrICUContainer(tNode).parent;\n    // If the parent is null, then we are inserting across views: either into an embedded view or a\n    // component view.\n    if (parent == null) {\n        var hostTNode = currentView[T_HOST];\n        if (hostTNode.type === 2 /* View */) {\n            // We are inserting a root element of an embedded view We might delay insertion of children\n            // for a given view if it is disconnected. This might happen for 2 main reasons:\n            // - view is not inserted into any container(view was created but not inserted yet)\n            // - view is inserted into a container but the container itself is not inserted into the DOM\n            // (container might be part of projection or child of a view that is not inserted yet).\n            // In other words we can insert children of a given view if this view was inserted into a\n            // container and the container itself has its render parent determined.\n            return getContainerRenderParent(hostTNode, currentView);\n        }\n        else {\n            // We are inserting a root element of the component view into the component host element and\n            // it should always be eager.\n            return getHostNative(currentView);\n        }\n    }\n    else {\n        ngDevMode && assertNodeType(parent, 3 /* Element */);\n        if (parent.flags & 1 /* isComponent */) {\n            var tData = currentView[TVIEW].data;\n            var tNode_1 = tData[parent.index];\n            var encapsulation = tData[tNode_1.directiveStart].encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation !== ViewEncapsulation.ShadowDom &&\n                encapsulation !== ViewEncapsulation.Native) {\n                return null;\n            }\n        }\n        return getNativeByTNode(parent, currentView);\n    }\n}\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n */\nfunction getHostNative(currentView) {\n    ngDevMode && assertLView(currentView);\n    var hostTNode = currentView[T_HOST];\n    return hostTNode && hostTNode.type === 3 /* Element */ ?\n        getNativeByTNode(hostTNode, getLViewParent(currentView)) :\n        null;\n}\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nexport function nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\nfunction nativeAppendChild(renderer, parent, child) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.appendChild(parent, child);\n    }\n    else {\n        parent.appendChild(child);\n    }\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n    if (beforeNode) {\n        nativeInsertBefore(renderer, parent, child, beforeNode);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.removeChild(parent, child, isHostElement);\n    }\n    else {\n        parent.removeChild(child);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n */\nexport function nativeParentNode(renderer, node) {\n    return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nexport function nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Finds a native \"anchor\" node for cases where we can't append a native child directly\n * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n * @param parentTNode\n * @param lView\n */\nfunction getNativeAnchorNode(parentTNode, lView) {\n    if (parentTNode.type === 2 /* View */) {\n        var lContainer = getLContainer(parentTNode, lView);\n        var views = lContainer[VIEWS];\n        var index = views.indexOf(lView);\n        return getBeforeNodeForView(index, views, lContainer[NATIVE]);\n    }\n    else if (parentTNode.type === 4 /* ElementContainer */ ||\n        parentTNode.type === 5 /* IcuContainer */) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * The element insertion might be delayed {@link canInsertNativeNode}.\n *\n * @param childEl The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n * @param currentView The current LView\n * @returns Whether or not the child was appended\n */\nexport function appendChild(childEl, childTNode, currentView) {\n    var e_2, _a;\n    var renderParent = getRenderParent(childTNode, currentView);\n    if (renderParent != null) {\n        var renderer = currentView[RENDERER];\n        var parentTNode = childTNode.parent || currentView[T_HOST];\n        var anchorNode = getNativeAnchorNode(parentTNode, currentView);\n        if (Array.isArray(childEl)) {\n            try {\n                for (var childEl_1 = tslib_1.__values(childEl), childEl_1_1 = childEl_1.next(); !childEl_1_1.done; childEl_1_1 = childEl_1.next()) {\n                    var nativeNode = childEl_1_1.value;\n                    nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (childEl_1_1 && !childEl_1_1.done && (_a = childEl_1.return)) _a.call(childEl_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n        }\n    }\n}\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param tNode The starting TNode for which we should skip element and ICU containers\n * @returns The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode) {\n    while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n        tNode.parent.type === 5 /* IcuContainer */)) {\n        tNode = tNode.parent;\n    }\n    return tNode;\n}\nexport function getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        var view = views[index + 1];\n        var viewTNode = view[T_HOST];\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nexport function nativeRemoveNode(renderer, rNode, isHostElement) {\n    var nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n * stored on a component host level.\n * @param lView A LView where nodes are inserted (target VLview)\n * @param tProjectionNode A projection node where previously re-distribution should be appended\n * (target insertion place)\n * @param selectorIndex A bucket from where nodes to project should be taken\n * @param componentView A where projectable nodes were initially created (source view)\n */\nexport function appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n    var projectedView = componentView[PARENT];\n    var componentNode = componentView[T_HOST];\n    var nodeToProject = componentNode.projection[selectorIndex];\n    if (Array.isArray(nodeToProject)) {\n        appendChild(nodeToProject, tProjectionNode, lView);\n    }\n    else {\n        while (nodeToProject) {\n            if (nodeToProject.type === 1 /* Projection */) {\n                appendProjectedNodes(lView, tProjectionNode, nodeToProject.projection, findComponentView(projectedView));\n            }\n            else {\n                // This flag must be set now or we won't know that this node is projected\n                // if the nodes are inserted into a container later.\n                nodeToProject.flags |= 2 /* isProjected */;\n                appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n            }\n            nodeToProject = nodeToProject.projectionNext;\n        }\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param projectedTNode The TNode to be projected\n * @param tProjectionNode The projection (ng-content) TNode\n * @param currentView Current LView\n * @param projectionView Projection view (view above current)\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    var native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    var nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        var views = nodeOrContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            var ngContainerChildTNode = projectedTNode.child;\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChangesInRootView, checkNoChangesInternal, detectChangesInRootView, detectChangesInternal, markViewDirty, storeCleanupFn } from './instructions/shared';\nimport { FLAGS, HOST, T_HOST } from './interfaces/view';\nimport { destroyLView, renderDetachView } from './node_manipulation';\nimport { findComponentView, getLViewParent } from './util/view_traversal_utils';\nimport { getNativeByTNode } from './util/view_utils';\nvar ViewRef = /** @class */ (function () {\n    function ViewRef(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * @internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n        get: function () {\n            if (this._lView[HOST] == null) {\n                var tView = this._lView[T_HOST];\n                return collectNativeNodes(this._lView, tView, []);\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"context\", {\n        get: function () { return this._context ? this._context : this._lookUpContext(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: function () {\n            return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewRef.prototype.destroy = function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            var index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    };\n    ViewRef.prototype.onDestroy = function (callback) { storeCleanupFn(this._lView, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    ViewRef.prototype.markForCheck = function () { markViewDirty(this._lView); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    ViewRef.prototype.detach = function () { this._lView[FLAGS] &= ~128 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    ViewRef.prototype.reattach = function () { this._lView[FLAGS] |= 128 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    ViewRef.prototype.detectChanges = function () { detectChangesInternal(this._lView, this.context); };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    ViewRef.prototype.checkNoChanges = function () { checkNoChangesInternal(this._lView, this.context); };\n    ViewRef.prototype.attachToViewContainerRef = function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    ViewRef.prototype.detachFromAppRef = function () {\n        this._appRef = null;\n        renderDetachView(this._lView);\n    };\n    ViewRef.prototype.attachToAppRef = function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    ViewRef.prototype._lookUpContext = function () {\n        return this._context = getLViewParent(this._lView)[this._componentIndex];\n    };\n    return ViewRef;\n}());\nexport { ViewRef };\n/** @internal */\nvar RootViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null, -1) || this;\n        _this._view = _view;\n        return _this;\n    }\n    RootViewRef.prototype.detectChanges = function () { detectChangesInRootView(this._view); };\n    RootViewRef.prototype.checkNoChanges = function () { checkNoChangesInRootView(this._view); };\n    Object.defineProperty(RootViewRef.prototype, \"context\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return RootViewRef;\n}(ViewRef));\nexport { RootViewRef };\nfunction collectNativeNodes(lView, parentTNode, result) {\n    var tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        var nativeNode = getNativeByTNode(tNodeChild, lView);\n        nativeNode && result.push(nativeNode);\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        else if (tNodeChild.type === 1 /* Projection */) {\n            var componentView = findComponentView(lView);\n            var componentHost = componentView[T_HOST];\n            var parentView = getLViewParent(componentView);\n            var currentProjectedNode = componentHost.projection[tNodeChild.projection];\n            while (currentProjectedNode && parentView) {\n                result.push(getNativeByTNode(currentProjectedNode, parentView));\n                currentProjectedNode = currentProjectedNode.next;\n            }\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined, assertGreaterThan, assertLessThan } from '../util/assert';\nimport { NodeInjector, getParentInjectorLocation } from './di';\nimport { addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate } from './instructions/shared';\nimport { ACTIVE_INDEX, NATIVE, VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { CONTEXT, QUERIES, RENDERER, T_HOST } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView } from './node_manipulation';\nimport { getParentInjectorTNode } from './node_util';\nimport { getLView, getPreviousOrParentTNode } from './state';\nimport { getParentInjectorView, hasParentInjector } from './util/injector_utils';\nimport { findComponentView } from './util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByTNode, isComponent, isLContainer, isRootView, viewAttachedToContainer } from './util/view_utils';\nimport { ViewRef } from './view_ref';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\nvar R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ElementRef_, _super);\n            function ElementRef_() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return ElementRef_;\n        }(ElementRefToken));\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\nvar R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nexport function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = /** @class */ (function (_super) {\n            tslib_1.__extends(TemplateRef_, _super);\n            function TemplateRef_(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                var _this = _super.call(this) || this;\n                _this._declarationParentView = _declarationParentView;\n                _this.elementRef = elementRef;\n                _this._tView = _tView;\n                _this._hostLContainer = _hostLContainer;\n                _this._injectorIndex = _injectorIndex;\n                return _this;\n            }\n            TemplateRef_.prototype.createEmbeddedView = function (context, container, index) {\n                var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                var viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = lView[T_HOST];\n                return viewRef;\n            };\n            return TemplateRef_;\n        }(TemplateRefToken));\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        var hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews, hostContainer, hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\nvar R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    var previousTNode = getPreviousOrParentTNode();\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ViewContainerRef_, _super);\n            function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                var _this = _super.call(this) || this;\n                _this._lContainer = _lContainer;\n                _this._hostTNode = _hostTNode;\n                _this._hostView = _hostView;\n                _this._viewRefs = [];\n                return _this;\n            }\n            Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                get: function () {\n                    return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                get: function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                /** @deprecated No replacement */\n                get: function () {\n                    var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                    var parentView = getParentInjectorView(parentLocation, this._hostView);\n                    var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                    return !hasParentInjector(parentLocation) || parentTNode == null ?\n                        new NodeInjector(null, this._hostView) :\n                        new NodeInjector(parentTNode, parentView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            ViewContainerRef_.prototype.clear = function () {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            };\n            ViewContainerRef_.prototype.get = function (index) { return this._viewRefs[index] || null; };\n            Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                get: function () { return this._lContainer[VIEWS].length; },\n                enumerable: true,\n                configurable: true\n            });\n            ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n                var adjustedIdx = this._adjustIndex(index);\n                var viewRef = templateRef\n                    .createEmbeddedView(context || {}, this._lContainer, adjustedIdx);\n                viewRef.attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                var contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n                }\n                var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            };\n            ViewContainerRef_.prototype.insert = function (viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                var lView = viewRef._lView;\n                var adjustedIdx = this._adjustIndex(index);\n                if (viewAttachedToContainer(lView)) {\n                    // If view is already attached, fall back to move() so we clean up\n                    // references appropriately.\n                    return this.move(viewRef, adjustedIdx);\n                }\n                insertView(lView, this._lContainer, adjustedIdx);\n                var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                viewRef.attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.move = function (viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                var index = this.indexOf(viewRef);\n                if (index !== -1)\n                    this.detach(index);\n                this.insert(viewRef, newIndex);\n                return viewRef;\n            };\n            ViewContainerRef_.prototype.indexOf = function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n            ViewContainerRef_.prototype.remove = function (index) {\n                var adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            };\n            ViewContainerRef_.prototype.detach = function (index) {\n                var adjustedIdx = this._adjustIndex(index, -1);\n                var view = detachView(this._lContainer, adjustedIdx);\n                var wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef(view, view[CONTEXT], -1) : null;\n            };\n            ViewContainerRef_.prototype._adjustIndex = function (index, shift) {\n                if (shift === void 0) { shift = 0; }\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            };\n            return ViewContainerRef_;\n        }(ViewContainerRefToken));\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    var lContainer;\n    var slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        var commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            var renderer = hostView[RENDERER];\n            var hostNative = getNativeByTNode(hostTNode, hostView);\n            var parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n        addToViewTree(hostView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nexport function createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        var componentIndex = hostTNode.directiveStart;\n        var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n        hostTNode.type === 4 /* ElementContainer */) {\n        var hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return null;\n}\nfunction getOrCreateRenderer2(view) {\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return renderer;\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nexport { ElementRef };\nexport var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\nvar SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\nvar SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL2xpbmtlci9lbGVtZW50X3JlZi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBc0NpQyxxQ0FBb0MiLCJmaWxlIjoiZWxlbWVudF9yZWYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBpbmplY3RFbGVtZW50UmVmIGFzIHJlbmRlcjNJbmplY3RFbGVtZW50UmVmIH0gZnJvbSAnLi4vcmVuZGVyMy92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5JztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIGEgbmF0aXZlIGVsZW1lbnQgaW5zaWRlIG9mIGEgVmlldy5cbiAqXG4gKiBBbiBgRWxlbWVudFJlZmAgaXMgYmFja2VkIGJ5IGEgcmVuZGVyLXNwZWNpZmljIGVsZW1lbnQuIEluIHRoZSBicm93c2VyLCB0aGlzIGlzIHVzdWFsbHkgYSBET01cbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlY3VyaXR5IFBlcm1pdHRpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgRE9NIGNhbiBtYWtlIHlvdXIgYXBwbGljYXRpb24gbW9yZSB2dWxuZXJhYmxlIHRvXG4gKiBYU1MgYXR0YWNrcy4gQ2FyZWZ1bGx5IHJldmlldyBhbnkgdXNlIG9mIGBFbGVtZW50UmVmYCBpbiB5b3VyIGNvZGUuIEZvciBtb3JlIGRldGFpbCwgc2VlIHRoZVxuICogW1NlY3VyaXR5IEd1aWRlXShodHRwOi8vZy5jby9uZy9zZWN1cml0eSkuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG4vLyBOb3RlOiBXZSBkb24ndCBleHBvc2UgdGhpbmdzIGxpa2UgYEluamVjdG9yYCwgYFZpZXdDb250YWluZXJgLCAuLi4gaGVyZSxcbi8vIGkuZS4gdXNlcnMgaGF2ZSB0byBhc2sgZm9yIHdoYXQgdGhleSBuZWVkLiBXaXRoIHRoYXQsIHdlIGNhbiBidWlsZCBiZXR0ZXIgYW5hbHlzaXMgdG9vbHNcbi8vIGFuZCBjb3VsZCBkbyBiZXR0ZXIgY29kZWdlbiBpbiB0aGUgZnV0dXJlLlxudmFyIEVsZW1lbnRSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudFJlZihuYXRpdmVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IG5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgRWxlbWVudFJlZi5fX05HX0VMRU1FTlRfSURfXyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNXSVRDSF9FTEVNRU5UX1JFRl9GQUNUT1JZKEVsZW1lbnRSZWYpOyB9O1xuICAgIHJldHVybiBFbGVtZW50UmVmO1xufSgpKTtcbmV4cG9ydCB7IEVsZW1lbnRSZWYgfTtcbmV4cG9ydCB2YXIgU1dJVENIX0VMRU1FTlRfUkVGX0ZBQ1RPUllfX1BPU1RfUjNfXyA9IHJlbmRlcjNJbmplY3RFbGVtZW50UmVmO1xudmFyIFNXSVRDSF9FTEVNRU5UX1JFRl9GQUNUT1JZX19QUkVfUjNfXyA9IG5vb3A7XG52YXIgU1dJVENIX0VMRU1FTlRfUkVGX0ZBQ1RPUlkgPSBTV0lUQ0hfRUxFTUVOVF9SRUZfRkFDVE9SWV9fUFJFX1IzX187XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './interface/defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nvar InjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\nexport { InjectionToken };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uX3Rva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvZGkvaW5qZWN0aW9uX3Rva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUlILE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFDSDtJQU1FLHdCQUFzQixLQUFhLEVBQUUsT0FHcEM7UUFIcUIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUxuQyxnQkFBZ0I7UUFDUCxtQkFBYyxHQUFHLGdCQUFnQixDQUFDO1FBUXpDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksT0FBTyxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzlCLHVFQUF1RTtZQUN2RSxpRUFBaUU7WUFDakUsdUVBQXVFO1lBQ3RFLElBQVksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUM7U0FDM0M7YUFBTSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztnQkFDdEMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksTUFBTTtnQkFDeEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQ3pCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELGlDQUFRLEdBQVIsY0FBcUIsT0FBTyxvQkFBa0IsSUFBSSxDQUFDLEtBQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0QscUJBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcblxuaW1wb3J0IHtkZWZpbmVJbmplY3RhYmxlfSBmcm9tICcuL2ludGVyZmFjZS9kZWZzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBpbiBhIERJIFByb3ZpZGVyLlxuICpcbiAqIFVzZSBhbiBgSW5qZWN0aW9uVG9rZW5gIHdoZW5ldmVyIHRoZSB0eXBlIHlvdSBhcmUgaW5qZWN0aW5nIGlzIG5vdCByZWlmaWVkIChkb2VzIG5vdCBoYXZlIGFcbiAqIHJ1bnRpbWUgcmVwcmVzZW50YXRpb24pIHN1Y2ggYXMgd2hlbiBpbmplY3RpbmcgYW4gaW50ZXJmYWNlLCBjYWxsYWJsZSB0eXBlLCBhcnJheSBvclxuICogcGFyYW1ldGVyaXplZCB0eXBlLlxuICpcbiAqIGBJbmplY3Rpb25Ub2tlbmAgaXMgcGFyYW1ldGVyaXplZCBvbiBgVGAgd2hpY2ggaXMgdGhlIHR5cGUgb2Ygb2JqZWN0IHdoaWNoIHdpbGwgYmUgcmV0dXJuZWQgYnlcbiAqIHRoZSBgSW5qZWN0b3JgLiBUaGlzIHByb3ZpZGVzIGFkZGl0aW9uYWwgbGV2ZWwgb2YgdHlwZSBzYWZldHkuXG4gKlxuICogYGBgXG4gKiBpbnRlcmZhY2UgTXlJbnRlcmZhY2Ugey4uLn1cbiAqIHZhciBteUludGVyZmFjZSA9IGluamVjdG9yLmdldChuZXcgSW5qZWN0aW9uVG9rZW48TXlJbnRlcmZhY2U+KCdTb21lVG9rZW4nKSk7XG4gKiAvLyBteUludGVyZmFjZSBpcyBpbmZlcnJlZCB0byBiZSBNeUludGVyZmFjZS5cbiAqIGBgYFxuICpcbiAqIFdoZW4gY3JlYXRpbmcgYW4gYEluamVjdGlvblRva2VuYCwgeW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIHJldHVybnNcbiAqIChwb3NzaWJseSBieSBjcmVhdGluZykgYSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXJpemVkIHR5cGUgYFRgLiBUaGlzIHNldHMgdXAgdGhlXG4gKiBgSW5qZWN0aW9uVG9rZW5gIHVzaW5nIHRoaXMgZmFjdG9yeSBhcyBhIHByb3ZpZGVyIGFzIGlmIGl0IHdhcyBkZWZpbmVkIGV4cGxpY2l0bHkgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbidzIHJvb3QgaW5qZWN0b3IuIElmIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLCB3aGljaCB0YWtlcyB6ZXJvIGFyZ3VtZW50cywgbmVlZHMgdG8gaW5qZWN0XG4gKiBkZXBlbmRlbmNpZXMsIGl0IGNhbiBkbyBzbyB1c2luZyB0aGUgYGluamVjdGAgZnVuY3Rpb24uIFNlZSBiZWxvdyBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGlmIGEgYGZhY3RvcnlgIGlzIHNwZWNpZmllZCB5b3UgY2FuIGFsc28gc3BlY2lmeSB0aGUgYHByb3ZpZGVkSW5gIG9wdGlvbiwgd2hpY2hcbiAqIG92ZXJyaWRlcyB0aGUgYWJvdmUgYmVoYXZpb3IgYW5kIG1hcmtzIHRoZSB0b2tlbiBhcyBiZWxvbmdpbmcgdG8gYSBwYXJ0aWN1bGFyIGBATmdNb2R1bGVgLiBBc1xuICogbWVudGlvbmVkIGFib3ZlLCBgJ3Jvb3QnYCBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgYHByb3ZpZGVkSW5gLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgQmFzaWMgRXhhbXBsZVxuICpcbiAqICMjIyBQbGFpbiBJbmplY3Rpb25Ub2tlblxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdJbmplY3Rpb25Ub2tlbid9XG4gKlxuICogIyMjIFRyZWUtc2hha2FibGUgSW5qZWN0aW9uVG9rZW5cbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nU2hha2FibGVJbmplY3Rpb25Ub2tlbid9XG4gKlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIEluamVjdGlvblRva2VuPFQ+IHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICByZWFkb25seSBuZ01ldGFkYXRhTmFtZSA9ICdJbmplY3Rpb25Ub2tlbic7XG5cbiAgcmVhZG9ubHkgbmdJbmplY3RhYmxlRGVmOiBuZXZlcnx1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIF9kZXNjOiBzdHJpbmcsIG9wdGlvbnM/OiB7XG4gICAgcHJvdmlkZWRJbj86IFR5cGU8YW55PnwgJ3Jvb3QnIHwgbnVsbCxcbiAgICBmYWN0b3J5OiAoKSA9PiBUXG4gIH0pIHtcbiAgICB0aGlzLm5nSW5qZWN0YWJsZURlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGhhY2sgdG8gYXNzaWduIF9fTkdfRUxFTUVOVF9JRF9fIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICAvLyBfX05HX0VMRU1FTlRfSURfXyBpcyBVc2VkIGJ5IEl2eSB0byBkZXRlcm1pbmUgYmxvb20gZmlsdGVyIGlkLlxuICAgICAgLy8gV2UgYXJlIHVzaW5nIGl0IHRvIGFzc2lnbiBgLTFgIHdoaWNoIGlzIHVzZWQgdG8gaWRlbnRpZnkgYEluamVjdG9yYC5cbiAgICAgICh0aGlzIGFzIGFueSkuX19OR19FTEVNRU5UX0lEX18gPSBvcHRpb25zO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm5nSW5qZWN0YWJsZURlZiA9IGRlZmluZUluamVjdGFibGUoe1xuICAgICAgICBwcm92aWRlZEluOiBvcHRpb25zLnByb3ZpZGVkSW4gfHwgJ3Jvb3QnLFxuICAgICAgICBmYWN0b3J5OiBvcHRpb25zLmZhY3RvcnksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gYEluamVjdGlvblRva2VuICR7dGhpcy5fZGVzY31gOyB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5qZWN0YWJsZURlZlRva2VuPFQ+IGV4dGVuZHMgSW5qZWN0aW9uVG9rZW48VD4geyBuZ0luamVjdGFibGVEZWY6IG5ldmVyOyB9XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getClosureSafeProperty } from '../util/property';\nimport { stringify } from '../util/stringify';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { inject } from './injector_compatibility';\nimport { defineInjectable } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nexport var SOURCE = '__source';\nvar _THROW_IF_NOT_FOUND = new Object();\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n);\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    NullInjector.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    Injector.create = function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */\n    Injector.ngInjectableDef = defineInjectable({\n        providedIn: 'any',\n        factory: function () { return inject(INJECTOR); },\n    });\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Injector.__NG_ELEMENT_ID__ = -1;\n    return Injector;\n}());\nexport { Injector };\nvar IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\nvar EMPTY = [];\nvar CIRCULAR = IDENT;\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nvar NG_TOKEN_PATH = 'ngTokenPath';\nexport var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nvar NULL_INJECTOR = Injector.NULL;\nvar NEW_LINE = /\\n/gm;\nvar NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        var records = this._records = new Map();\n        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n        recursivelyProcessProviders(records, providers);\n    }\n    StaticInjector.prototype.get = function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    };\n    StaticInjector.prototype.toString = function () {\n        var tokens = [], records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nfunction resolveProvider(provider) {\n    var deps = computeDeps(provider);\n    var fn = IDENT;\n    var value = EMPTY;\n    var useNew = false;\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = provider.useValue;\n    }\n    else if (provider.useFactory) {\n        fn = provider.useFactory;\n    }\n    else if (provider.useExisting) {\n        // Just use IDENT\n    }\n    else if (provider.useClass) {\n        useNew = true;\n        fn = resolveForwardRef(provider.useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            var token = resolveForwardRef(provider.provide);\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = {\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    var value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            var obj = undefined;\n            var useNew = record.useNew;\n            var fn = record.fn;\n            var depRecords = record.deps;\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    var depRecord = depRecords[i];\n                    var options = depRecord.options;\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, tslib_1.__spread([void 0], deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\nfunction computeDeps(provider) {\n    var deps = EMPTY;\n    var providerDeps = provider.deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            var options = 6 /* Default */;\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = annotation.token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if (provider.useExisting) {\n        var token = resolveForwardRef(provider.useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\nexport function catchInjectorError(e, token, injectorErrorName, source) {\n    var tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        var parts = [];\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9pbmplY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBR0gsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVqRCxPQUFPLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRTVELE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7QUFDakMsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDO0FBRXREOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQ3RDLFVBQVUsRUFDVixDQUFDLENBQVEsQ0FBRSxnRkFBZ0Y7Q0FDMUYsQ0FBQztBQUVOO0lBQUE7SUFhQSxDQUFDO0lBWkMsMEJBQUcsR0FBSCxVQUFJLEtBQVUsRUFBRSxhQUF3QztRQUF4Qyw4QkFBQSxFQUFBLG1DQUF3QztRQUN0RCxJQUFJLGFBQWEsS0FBSyxtQkFBbUIsRUFBRTtZQUN6QywwRkFB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QU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFHLENBQUM7QUFDbEgsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLElBQVksRUFBRSxHQUFRO0lBQ3pDLE9BQU8sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlL3R5cGUnO1xuaW1wb3J0IHtnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSBmcm9tICcuLi91dGlsL3Byb3BlcnR5JztcbmltcG9ydCB7c3RyaW5naWZ5fSBmcm9tICcuLi91dGlsL3N0cmluZ2lmeSc7XG5pbXBvcnQge3Jlc29sdmVGb3J3YXJkUmVmfSBmcm9tICcuL2ZvcndhcmRfcmVmJztcbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJy4vaW5qZWN0aW9uX3Rva2VuJztcbmltcG9ydCB7aW5qZWN0fSBmcm9tICcuL2luamVjdG9yX2NvbXBhdGliaWxpdHknO1xuaW1wb3J0IHtkZWZpbmVJbmplY3RhYmxlfSBmcm9tICcuL2ludGVyZmFjZS9kZWZzJztcbmltcG9ydCB7SW5qZWN0RmxhZ3N9IGZyb20gJy4vaW50ZXJmYWNlL2luamVjdG9yJztcbmltcG9ydCB7Q29uc3RydWN0b3JQcm92aWRlciwgRXhpc3RpbmdQcm92aWRlciwgRmFjdG9yeVByb3ZpZGVyLCBTdGF0aWNDbGFzc1Byb3ZpZGVyLCBTdGF0aWNQcm92aWRlciwgVmFsdWVQcm92aWRlcn0gZnJvbSAnLi9pbnRlcmZhY2UvcHJvdmlkZXInO1xuaW1wb3J0IHtJbmplY3QsIE9wdGlvbmFsLCBTZWxmLCBTa2lwU2VsZn0gZnJvbSAnLi9tZXRhZGF0YSc7XG5cbmV4cG9ydCBjb25zdCBTT1VSQ0UgPSAnX19zb3VyY2UnO1xuY29uc3QgX1RIUk9XX0lGX05PVF9GT1VORCA9IG5ldyBPYmplY3QoKTtcbmV4cG9ydCBjb25zdCBUSFJPV19JRl9OT1RfRk9VTkQgPSBfVEhST1dfSUZfTk9UX0ZPVU5EO1xuXG4vKipcbiAqIEFuIEluamVjdGlvblRva2VuIHRoYXQgZ2V0cyB0aGUgY3VycmVudCBgSW5qZWN0b3JgIGZvciBgY3JlYXRlSW5qZWN0b3IoKWAtc3R5bGUgaW5qZWN0b3JzLlxuICpcbiAqIFJlcXVlc3RpbmcgdGhpcyB0b2tlbiBpbnN0ZWFkIG9mIGBJbmplY3RvcmAgYWxsb3dzIGBTdGF0aWNJbmplY3RvcmAgdG8gYmUgdHJlZS1zaGFrZW4gZnJvbSBhXG4gKiBwcm9qZWN0LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IElOSkVDVE9SID0gbmV3IEluamVjdGlvblRva2VuPEluamVjdG9yPihcbiAgICAnSU5KRUNUT1InLFxuICAgIC0xIGFzIGFueSAgLy8gYC0xYCBpcyB1c2VkIGJ5IEl2eSBESSBzeXN0ZW0gYXMgc3BlY2lhbCB2YWx1ZSB0byByZWNvZ25pemUgaXQgYXMgYEluamVjdG9yYC5cbiAgICApO1xuXG5leHBvcnQgY2xhc3MgTnVsbEluamVjdG9yIGltcGxlbWVudHMgSW5qZWN0b3Ige1xuICBnZXQodG9rZW46IGFueSwgbm90Rm91bmRWYWx1ZTogYW55ID0gX1RIUk9XX0lGX05PVF9GT1VORCk6IGFueSB7XG4gICAgaWYgKG5vdEZvdW5kVmFsdWUgPT09IF9USFJPV19JRl9OT1RfRk9VTkQpIHtcbiAgICAgIC8vIEludGVudGlvbmFsbHkgbGVmdCBiZWhpbmQ6IFdpdGggZGV2IHRvb2xzIG9wZW4gdGhlIGRlYnVnZ2VyIHdpbGwgc3RvcCBoZXJlLiBUaGVyZSBpcyBub1xuICAgICAgLy8gcmVhc29uIHdoeSBjb3JyZWN0bHkgd3JpdHRlbiBhcHBsaWNhdGlvbiBzaG91bGQgY2F1c2UgdGhpcyBleGNlcHRpb24uXG4gICAgICAvLyBUT0RPKG1pc2tvKTogdW5jb21tZW50IHRoZSBuZXh0IGxpbmUgb25jZSBgbmdEZXZNb2RlYCB3b3JrcyB3aXRoIGNsb3N1cmUuXG4gICAgICAvLyBpZihuZ0Rldk1vZGUpIGRlYnVnZ2VyO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYE51bGxJbmplY3RvckVycm9yOiBObyBwcm92aWRlciBmb3IgJHtzdHJpbmdpZnkodG9rZW4pfSFgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnTnVsbEluamVjdG9yRXJyb3InO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBub3RGb3VuZFZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogQ29uY3JldGUgaW5qZWN0b3JzIGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cbiAqXG4gKiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIFtcIkRlcGVuZGVuY3kgSW5qZWN0aW9uIEd1aWRlXCJdKGd1aWRlL2RlcGVuZGVuY3ktaW5qZWN0aW9uKS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nSW5qZWN0b3InfVxuICpcbiAqIGBJbmplY3RvcmAgcmV0dXJucyBpdHNlbGYgd2hlbiBnaXZlbiBgSW5qZWN0b3JgIGFzIGEgdG9rZW46XG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvaW5qZWN0b3Jfc3BlYy50cyByZWdpb249J2luamVjdEluamVjdG9yJ31cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbmplY3RvciB7XG4gIHN0YXRpYyBUSFJPV19JRl9OT1RfRk9VTkQgPSBfVEhST1dfSUZfTk9UX0ZPVU5EO1xuICBzdGF0aWMgTlVMTDogSW5qZWN0b3IgPSBuZXcgTnVsbEluamVjdG9yKCk7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbiBpbnN0YW5jZSBmcm9tIHRoZSBpbmplY3RvciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdG9rZW4uXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBmcm9tIHRoZSBpbmplY3RvciBpZiBkZWZpbmVkLCBvdGhlcndpc2UgdGhlIGBub3RGb3VuZFZhbHVlYC5cbiAgICogQHRocm93cyBXaGVuIHRoZSBgbm90Rm91bmRWYWx1ZWAgaXMgYHVuZGVmaW5lZGAgb3IgYEluamVjdG9yLlRIUk9XX0lGX05PVF9GT1VORGAuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQ8VD4odG9rZW46IFR5cGU8VD58SW5qZWN0aW9uVG9rZW48VD4sIG5vdEZvdW5kVmFsdWU/OiBULCBmbGFncz86IEluamVjdEZsYWdzKTogVDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIGZyb20gdjQuMC4wIHVzZSBUeXBlPFQ+IG9yIEluamVjdGlvblRva2VuPFQ+XG4gICAqIEBzdXBwcmVzcyB7ZHVwbGljYXRlfVxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0KHRva2VuOiBhbnksIG5vdEZvdW5kVmFsdWU/OiBhbnkpOiBhbnk7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIGZyb20gdjUgdXNlIHRoZSBuZXcgc2lnbmF0dXJlIEluamVjdG9yLmNyZWF0ZShvcHRpb25zKVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10sIHBhcmVudD86IEluamVjdG9yKTogSW5qZWN0b3I7XG5cbiAgc3RhdGljIGNyZWF0ZShvcHRpb25zOiB7cHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdLCBwYXJlbnQ/OiBJbmplY3RvciwgbmFtZT86IHN0cmluZ30pOiBJbmplY3RvcjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEluamVjdG9yIHdoaWNoIGlzIGNvbmZpZ3VyZSB1c2luZyBgU3RhdGljUHJvdmlkZXJgcy5cbiAgICpcbiAgICogQHVzYWdlTm90ZXNcbiAgICogIyMjIEV4YW1wbGVcbiAgICpcbiAgICoge0BleGFtcGxlIGNvcmUvZGkvdHMvcHJvdmlkZXJfc3BlYy50cyByZWdpb249J0NvbnN0cnVjdG9yUHJvdmlkZXInfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShcbiAgICAgIG9wdGlvbnM6IFN0YXRpY1Byb3ZpZGVyW118e3Byb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSwgcGFyZW50PzogSW5qZWN0b3IsIG5hbWU/OiBzdHJpbmd9LFxuICAgICAgcGFyZW50PzogSW5qZWN0b3IpOiBJbmplY3RvciB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBuZXcgU3RhdGljSW5qZWN0b3Iob3B0aW9ucywgcGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTdGF0aWNJbmplY3RvcihvcHRpb25zLnByb3ZpZGVycywgb3B0aW9ucy5wYXJlbnQsIG9wdGlvbnMubmFtZSB8fCBudWxsKTtcbiAgICB9XG4gIH1cblxuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIG5nSW5qZWN0YWJsZURlZiA9IGRlZmluZUluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdhbnknIGFzIGFueSxcbiAgICBmYWN0b3J5OiAoKSA9PiBpbmplY3QoSU5KRUNUT1IpLFxuICB9KTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBzdGF0aWMgX19OR19FTEVNRU5UX0lEX18gPSAtMTtcbn1cblxuXG5cbmNvbnN0IElERU5UID0gZnVuY3Rpb248VD4odmFsdWU6IFQpOiBUIHtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmNvbnN0IEVNUFRZID0gPGFueVtdPltdO1xuY29uc3QgQ0lSQ1VMQVIgPSBJREVOVDtcbmNvbnN0IE1VTFRJX1BST1ZJREVSX0ZOID0gZnVuY3Rpb24oKTogYW55W10ge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbn07XG5leHBvcnQgY29uc3QgVVNFX1ZBTFVFID1cbiAgICBnZXRDbG9zdXJlU2FmZVByb3BlcnR5PFZhbHVlUHJvdmlkZXI+KHtwcm92aWRlOiBTdHJpbmcsIHVzZVZhbHVlOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5fSk7XG5jb25zdCBOR19UT0tFTl9QQVRIID0gJ25nVG9rZW5QYXRoJztcbmV4cG9ydCBjb25zdCBOR19URU1QX1RPS0VOX1BBVEggPSAnbmdUZW1wVG9rZW5QYXRoJztcbmNvbnN0IGVudW0gT3B0aW9uRmxhZ3Mge1xuICBPcHRpb25hbCA9IDEgPDwgMCxcbiAgQ2hlY2tTZWxmID0gMSA8PCAxLFxuICBDaGVja1BhcmVudCA9IDEgPDwgMixcbiAgRGVmYXVsdCA9IENoZWNrU2VsZiB8IENoZWNrUGFyZW50XG59XG5jb25zdCBOVUxMX0lOSkVDVE9SID0gSW5qZWN0b3IuTlVMTDtcbmNvbnN0IE5FV19MSU5FID0gL1xcbi9nbTtcbmNvbnN0IE5PX05FV19MSU5FID0gJ8m1JztcblxuZXhwb3J0IGNsYXNzIFN0YXRpY0luamVjdG9yIGltcGxlbWVudHMgSW5qZWN0b3Ige1xuICByZWFkb25seSBwYXJlbnQ6IEluamVjdG9yO1xuICByZWFkb25seSBzb3VyY2U6IHN0cmluZ3xudWxsO1xuXG4gIHByaXZhdGUgX3JlY29yZHM6IE1hcDxhbnksIFJlY29yZD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10sIHBhcmVudDogSW5qZWN0b3IgPSBOVUxMX0lOSkVDVE9SLCBzb3VyY2U6IHN0cmluZ3xudWxsID0gbnVsbCkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIGNvbnN0IHJlY29yZHMgPSB0aGlzLl9yZWNvcmRzID0gbmV3IE1hcDxhbnksIFJlY29yZD4oKTtcbiAgICByZWNvcmRzLnNldChcbiAgICAgICAgSW5qZWN0b3IsIDxSZWNvcmQ+e3Rva2VuOiBJbmplY3RvciwgZm46IElERU5ULCBkZXBzOiBFTVBUWSwgdmFsdWU6IHRoaXMsIHVzZU5ldzogZmFsc2V9KTtcbiAgICByZWNvcmRzLnNldChcbiAgICAgICAgSU5KRUNUT1IsIDxSZWNvcmQ+e3Rva2VuOiBJTkpFQ1RPUiwgZm46IElERU5ULCBkZXBzOiBFTVBUWSwgdmFsdWU6IHRoaXMsIHVzZU5ldzogZmFsc2V9KTtcbiAgICByZWN1cnNpdmVseVByb2Nlc3NQcm92aWRlcnMocmVjb3JkcywgcHJvdmlkZXJzKTtcbiAgfVxuXG4gIGdldDxUPih0b2tlbjogVHlwZTxUPnxJbmplY3Rpb25Ub2tlbjxUPiwgbm90Rm91bmRWYWx1ZT86IFQsIGZsYWdzPzogSW5qZWN0RmxhZ3MpOiBUO1xuICBnZXQodG9rZW46IGFueSwgbm90Rm91bmRWYWx1ZT86IGFueSk6IGFueTtcbiAgZ2V0KHRva2VuOiBhbnksIG5vdEZvdW5kVmFsdWU/OiBhbnksIGZsYWdzOiBJbmplY3RGbGFncyA9IEluamVjdEZsYWdzLkRlZmF1bHQpOiBhbnkge1xuICAgIGNvbnN0IHJlY29yZCA9IHRoaXMuX3JlY29yZHMuZ2V0KHRva2VuKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRyeVJlc29sdmVUb2tlbih0b2tlbiwgcmVjb3JkLCB0aGlzLl9yZWNvcmRzLCB0aGlzLnBhcmVudCwgbm90Rm91bmRWYWx1ZSwgZmxhZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYXRjaEluamVjdG9yRXJyb3IoZSwgdG9rZW4sICdTdGF0aWNJbmplY3RvckVycm9yJywgdGhpcy5zb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHRva2VucyA9IDxzdHJpbmdbXT5bXSwgcmVjb3JkcyA9IHRoaXMuX3JlY29yZHM7XG4gICAgcmVjb3Jkcy5mb3JFYWNoKCh2LCB0b2tlbikgPT4gdG9rZW5zLnB1c2goc3RyaW5naWZ5KHRva2VuKSkpO1xuICAgIHJldHVybiBgU3RhdGljSW5qZWN0b3JbJHt0b2tlbnMuam9pbignLCAnKX1dYDtcbiAgfVxufVxuXG50eXBlIFN1cHBvcnRlZFByb3ZpZGVyID1cbiAgICBWYWx1ZVByb3ZpZGVyIHwgRXhpc3RpbmdQcm92aWRlciB8IFN0YXRpY0NsYXNzUHJvdmlkZXIgfCBDb25zdHJ1Y3RvclByb3ZpZGVyIHwgRmFjdG9yeVByb3ZpZGVyO1xuXG5pbnRlcmZhY2UgUmVjb3JkIHtcbiAgZm46IEZ1bmN0aW9uO1xuICB1c2VOZXc6IGJvb2xlYW47XG4gIGRlcHM6IERlcGVuZGVuY3lSZWNvcmRbXTtcbiAgdmFsdWU6IGFueTtcbn1cblxuaW50ZXJmYWNlIERlcGVuZGVuY3lSZWNvcmQge1xuICB0b2tlbjogYW55O1xuICBvcHRpb25zOiBudW1iZXI7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm92aWRlcihwcm92aWRlcjogU3VwcG9ydGVkUHJvdmlkZXIpOiBSZWNvcmQge1xuICBjb25zdCBkZXBzID0gY29tcHV0ZURlcHMocHJvdmlkZXIpO1xuICBsZXQgZm46IEZ1bmN0aW9uID0gSURFTlQ7XG4gIGxldCB2YWx1ZTogYW55ID0gRU1QVFk7XG4gIGxldCB1c2VOZXc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgbGV0IHByb3ZpZGUgPSByZXNvbHZlRm9yd2FyZFJlZihwcm92aWRlci5wcm92aWRlKTtcbiAgaWYgKFVTRV9WQUxVRSBpbiBwcm92aWRlcikge1xuICAgIC8vIFdlIG5lZWQgdG8gdXNlIFVTRV9WQUxVRSBpbiBwcm92aWRlciBzaW5jZSBwcm92aWRlci51c2VWYWx1ZSBjb3VsZCBiZSBkZWZpbmVkIGFzIHVuZGVmaW5lZC5cbiAgICB2YWx1ZSA9IChwcm92aWRlciBhcyBWYWx1ZVByb3ZpZGVyKS51c2VWYWx1ZTtcbiAgfSBlbHNlIGlmICgocHJvdmlkZXIgYXMgRmFjdG9yeVByb3ZpZGVyKS51c2VGYWN0b3J5KSB7XG4gICAgZm4gPSAocHJvdmlkZXIgYXMgRmFjdG9yeVByb3ZpZGVyKS51c2VGYWN0b3J5O1xuICB9IGVsc2UgaWYgKChwcm92aWRlciBhcyBFeGlzdGluZ1Byb3ZpZGVyKS51c2VFeGlzdGluZykge1xuICAgIC8vIEp1c3QgdXNlIElERU5UXG4gIH0gZWxzZSBpZiAoKHByb3ZpZGVyIGFzIFN0YXRpY0NsYXNzUHJvdmlkZXIpLnVzZUNsYXNzKSB7XG4gICAgdXNlTmV3ID0gdHJ1ZTtcbiAgICBmbiA9IHJlc29sdmVGb3J3YXJkUmVmKChwcm92aWRlciBhcyBTdGF0aWNDbGFzc1Byb3ZpZGVyKS51c2VDbGFzcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3ZpZGUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHVzZU5ldyA9IHRydWU7XG4gICAgZm4gPSBwcm92aWRlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IHN0YXRpY0Vycm9yKFxuICAgICAgICAnU3RhdGljUHJvdmlkZXIgZG9lcyBub3QgaGF2ZSBbdXNlVmFsdWV8dXNlRmFjdG9yeXx1c2VFeGlzdGluZ3x1c2VDbGFzc10gb3IgW3Byb3ZpZGVdIGlzIG5vdCBuZXdhYmxlJyxcbiAgICAgICAgcHJvdmlkZXIpO1xuICB9XG4gIHJldHVybiB7ZGVwcywgZm4sIHVzZU5ldywgdmFsdWV9O1xufVxuXG5mdW5jdGlvbiBtdWx0aVByb3ZpZGVyTWl4RXJyb3IodG9rZW46IGFueSkge1xuICByZXR1cm4gc3RhdGljRXJyb3IoJ0Nhbm5vdCBtaXggbXVsdGkgcHJvdmlkZXJzIGFuZCByZWd1bGFyIHByb3ZpZGVycycsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlbHlQcm9jZXNzUHJvdmlkZXJzKHJlY29yZHM6IE1hcDxhbnksIFJlY29yZD4sIHByb3ZpZGVyOiBTdGF0aWNQcm92aWRlcikge1xuICBpZiAocHJvdmlkZXIpIHtcbiAgICBwcm92aWRlciA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyKTtcbiAgICBpZiAocHJvdmlkZXIgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgLy8gaWYgd2UgaGF2ZSBhbiBhcnJheSByZWN1cnNlIGludG8gdGhlIGFycmF5XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3ZpZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlY3Vyc2l2ZWx5UHJvY2Vzc1Byb3ZpZGVycyhyZWNvcmRzLCBwcm92aWRlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEZ1bmN0aW9ucyB3ZXJlIHN1cHBvcnRlZCBpbiBSZWZsZWN0aXZlSW5qZWN0b3IsIGJ1dCBhcmUgbm90IGhlcmUuIEZvciBzYWZldHkgZ2l2ZSB1c2VmdWxcbiAgICAgIC8vIGVycm9yIG1lc3NhZ2VzXG4gICAgICB0aHJvdyBzdGF0aWNFcnJvcignRnVuY3Rpb24vQ2xhc3Mgbm90IHN1cHBvcnRlZCcsIHByb3ZpZGVyKTtcbiAgICB9IGVsc2UgaWYgKHByb3ZpZGVyICYmIHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgcHJvdmlkZXIucHJvdmlkZSkge1xuICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBoYXZlIHdoYXQgbG9va3MgbGlrZSBhIHByb3ZpZGVyOiB7cHJvdmlkZTogPywgLi4uLn1cbiAgICAgIGxldCB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnByb3ZpZGUpO1xuICAgICAgY29uc3QgcmVzb2x2ZWRQcm92aWRlciA9IHJlc29sdmVQcm92aWRlcihwcm92aWRlcik7XG4gICAgICBpZiAocHJvdmlkZXIubXVsdGkgPT09IHRydWUpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIG11bHRpIHByb3ZpZGVyLlxuICAgICAgICBsZXQgbXVsdGlQcm92aWRlcjogUmVjb3JkfHVuZGVmaW5lZCA9IHJlY29yZHMuZ2V0KHRva2VuKTtcbiAgICAgICAgaWYgKG11bHRpUHJvdmlkZXIpIHtcbiAgICAgICAgICBpZiAobXVsdGlQcm92aWRlci5mbiAhPT0gTVVMVElfUFJPVklERVJfRk4pIHtcbiAgICAgICAgICAgIHRocm93IG11bHRpUHJvdmlkZXJNaXhFcnJvcih0b2tlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIENyZWF0ZSBhIHBsYWNlaG9sZGVyIGZhY3Rvcnkgd2hpY2ggd2lsbCBsb29rIHVwIHRoZSBjb25zdGl0dWVudHMgb2YgdGhlIG11bHRpIHByb3ZpZGVyLlxuICAgICAgICAgIHJlY29yZHMuc2V0KHRva2VuLCBtdWx0aVByb3ZpZGVyID0gPFJlY29yZD57XG4gICAgICAgICAgICB0b2tlbjogcHJvdmlkZXIucHJvdmlkZSxcbiAgICAgICAgICAgIGRlcHM6IFtdLFxuICAgICAgICAgICAgdXNlTmV3OiBmYWxzZSxcbiAgICAgICAgICAgIGZuOiBNVUxUSV9QUk9WSURFUl9GTixcbiAgICAgICAgICAgIHZhbHVlOiBFTVBUWVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyZWF0IHRoZSBwcm92aWRlciBhcyB0aGUgdG9rZW4uXG4gICAgICAgIHRva2VuID0gcHJvdmlkZXI7XG4gICAgICAgIG11bHRpUHJvdmlkZXIuZGVwcy5wdXNoKHt0b2tlbiwgb3B0aW9uczogT3B0aW9uRmxhZ3MuRGVmYXVsdH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVjb3JkID0gcmVjb3Jkcy5nZXQodG9rZW4pO1xuICAgICAgaWYgKHJlY29yZCAmJiByZWNvcmQuZm4gPT0gTVVMVElfUFJPVklERVJfRk4pIHtcbiAgICAgICAgdGhyb3cgbXVsdGlQcm92aWRlck1peEVycm9yKHRva2VuKTtcbiAgICAgIH1cbiAgICAgIHJlY29yZHMuc2V0KHRva2VuLCByZXNvbHZlZFByb3ZpZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgc3RhdGljRXJyb3IoJ1VuZXhwZWN0ZWQgcHJvdmlkZXInLCBwcm92aWRlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVJlc29sdmVUb2tlbihcbiAgICB0b2tlbjogYW55LCByZWNvcmQ6IFJlY29yZCB8IHVuZGVmaW5lZCwgcmVjb3JkczogTWFwPGFueSwgUmVjb3JkPiwgcGFyZW50OiBJbmplY3RvcixcbiAgICBub3RGb3VuZFZhbHVlOiBhbnksIGZsYWdzOiBJbmplY3RGbGFncyk6IGFueSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlc29sdmVUb2tlbih0b2tlbiwgcmVjb3JkLCByZWNvcmRzLCBwYXJlbnQsIG5vdEZvdW5kVmFsdWUsIGZsYWdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGVuc3VyZSB0aGF0ICdlJyBpcyBvZiB0eXBlIEVycm9yLlxuICAgIGlmICghKGUgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgIGUgPSBuZXcgRXJyb3IoZSk7XG4gICAgfVxuICAgIGNvbnN0IHBhdGg6IGFueVtdID0gZVtOR19URU1QX1RPS0VOX1BBVEhdID0gZVtOR19URU1QX1RPS0VOX1BBVEhdIHx8IFtdO1xuICAgIHBhdGgudW5zaGlmdCh0b2tlbik7XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQudmFsdWUgPT0gQ0lSQ1VMQVIpIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBDaXJjdWxhciBmbGFnLlxuICAgICAgcmVjb3JkLnZhbHVlID0gRU1QVFk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRva2VuKFxuICAgIHRva2VuOiBhbnksIHJlY29yZDogUmVjb3JkIHwgdW5kZWZpbmVkLCByZWNvcmRzOiBNYXA8YW55LCBSZWNvcmQ+LCBwYXJlbnQ6IEluamVjdG9yLFxuICAgIG5vdEZvdW5kVmFsdWU6IGFueSwgZmxhZ3M6IEluamVjdEZsYWdzKTogYW55IHtcbiAgbGV0IHZhbHVlO1xuICBpZiAocmVjb3JkICYmICEoZmxhZ3MgJiBJbmplY3RGbGFncy5Ta2lwU2VsZikpIHtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcmVjb3JkLCB0aGlzIGltcGxpZXMgdGhhdCB3ZSBkb24ndCBvd24gdGhlIHByb3ZpZGVyIGhlbmNlIGRvbid0IGtub3cgaG93XG4gICAgLy8gdG8gcmVzb2x2ZSBpdC5cbiAgICB2YWx1ZSA9IHJlY29yZC52YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gQ0lSQ1VMQVIpIHtcbiAgICAgIHRocm93IEVycm9yKE5PX05FV19MSU5FICsgJ0NpcmN1bGFyIGRlcGVuZGVuY3knKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBFTVBUWSkge1xuICAgICAgcmVjb3JkLnZhbHVlID0gQ0lSQ1VMQVI7XG4gICAgICBsZXQgb2JqID0gdW5kZWZpbmVkO1xuICAgICAgbGV0IHVzZU5ldyA9IHJlY29yZC51c2VOZXc7XG4gICAgICBsZXQgZm4gPSByZWNvcmQuZm47XG4gICAgICBsZXQgZGVwUmVjb3JkcyA9IHJlY29yZC5kZXBzO1xuICAgICAgbGV0IGRlcHMgPSBFTVBUWTtcbiAgICAgIGlmIChkZXBSZWNvcmRzLmxlbmd0aCkge1xuICAgICAgICBkZXBzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwUmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGRlcFJlY29yZDogRGVwZW5kZW5jeVJlY29yZCA9IGRlcFJlY29yZHNbaV07XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGRlcFJlY29yZC5vcHRpb25zO1xuICAgICAgICAgIGNvbnN0IGNoaWxkUmVjb3JkID1cbiAgICAgICAgICAgICAgb3B0aW9ucyAmIE9wdGlvbkZsYWdzLkNoZWNrU2VsZiA/IHJlY29yZHMuZ2V0KGRlcFJlY29yZC50b2tlbikgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVwcy5wdXNoKHRyeVJlc29sdmVUb2tlbihcbiAgICAgICAgICAgICAgLy8gQ3VycmVudCBUb2tlbiB0byByZXNvbHZlXG4gICAgICAgICAgICAgIGRlcFJlY29yZC50b2tlbixcbiAgICAgICAgICAgICAgLy8gQSByZWNvcmQgd2hpY2ggZGVzY3JpYmVzIGhvdyB0byByZXNvbHZlIHRoZSB0b2tlbi5cbiAgICAgICAgICAgICAgLy8gSWYgdW5kZWZpbmVkLCB0aGlzIG1lYW5zIHdlIGRvbid0IGhhdmUgc3VjaCBhIHJlY29yZFxuICAgICAgICAgICAgICBjaGlsZFJlY29yZCxcbiAgICAgICAgICAgICAgLy8gT3RoZXIgcmVjb3JkcyB3ZSBrbm93IGFib3V0LlxuICAgICAgICAgICAgICByZWNvcmRzLFxuICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBrbm93IGhvdyB0byByZXNvbHZlIGRlcGVuZGVuY3kgYW5kIHdlIHNob3VsZCBub3QgY2hlY2sgcGFyZW50IGZvciBpdCxcbiAgICAgICAgICAgICAgLy8gdGhhbiBwYXNzIGluIE51bGwgaW5qZWN0b3IuXG4gICAgICAgICAgICAgICFjaGlsZFJlY29yZCAmJiAhKG9wdGlvbnMgJiBPcHRpb25GbGFncy5DaGVja1BhcmVudCkgPyBOVUxMX0lOSkVDVE9SIDogcGFyZW50LFxuICAgICAgICAgICAgICBvcHRpb25zICYgT3B0aW9uRmxhZ3MuT3B0aW9uYWwgPyBudWxsIDogSW5qZWN0b3IuVEhST1dfSUZfTk9UX0ZPVU5ELFxuICAgICAgICAgICAgICBJbmplY3RGbGFncy5EZWZhdWx0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlY29yZC52YWx1ZSA9IHZhbHVlID0gdXNlTmV3ID8gbmV3IChmbiBhcyBhbnkpKC4uLmRlcHMpIDogZm4uYXBwbHkob2JqLCBkZXBzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIShmbGFncyAmIEluamVjdEZsYWdzLlNlbGYpKSB7XG4gICAgdmFsdWUgPSBwYXJlbnQuZ2V0KHRva2VuLCBub3RGb3VuZFZhbHVlLCBJbmplY3RGbGFncy5EZWZhdWx0KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVEZXBzKHByb3ZpZGVyOiBTdGF0aWNQcm92aWRlcik6IERlcGVuZGVuY3lSZWNvcmRbXSB7XG4gIGxldCBkZXBzOiBEZXBlbmRlbmN5UmVjb3JkW10gPSBFTVBUWTtcbiAgY29uc3QgcHJvdmlkZXJEZXBzOiBhbnlbXSA9XG4gICAgICAocHJvdmlkZXIgYXMgRXhpc3RpbmdQcm92aWRlciAmIFN0YXRpY0NsYXNzUHJvdmlkZXIgJiBDb25zdHJ1Y3RvclByb3ZpZGVyKS5kZXBzO1xuICBpZiAocHJvdmlkZXJEZXBzICYmIHByb3ZpZGVyRGVwcy5sZW5ndGgpIHtcbiAgICBkZXBzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm92aWRlckRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBvcHRpb25zID0gT3B0aW9uRmxhZ3MuRGVmYXVsdDtcbiAgICAgIGxldCB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyRGVwc1tpXSk7XG4gICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMCwgYW5ub3RhdGlvbnMgPSB0b2tlbjsgaiA8IGFubm90YXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgYW5ub3RhdGlvbiA9IGFubm90YXRpb25zW2pdO1xuICAgICAgICAgIGlmIChhbm5vdGF0aW9uIGluc3RhbmNlb2YgT3B0aW9uYWwgfHwgYW5ub3RhdGlvbiA9PSBPcHRpb25hbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfCBPcHRpb25GbGFncy5PcHRpb25hbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFubm90YXRpb24gaW5zdGFuY2VvZiBTa2lwU2VsZiB8fCBhbm5vdGF0aW9uID09IFNraXBTZWxmKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyAmIH5PcHRpb25GbGFncy5DaGVja1NlbGY7XG4gICAgICAgICAgfSBlbHNlIGlmIChhbm5vdGF0aW9uIGluc3RhbmNlb2YgU2VsZiB8fCBhbm5vdGF0aW9uID09IFNlbGYpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zICYgfk9wdGlvbkZsYWdzLkNoZWNrUGFyZW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIEluamVjdCkge1xuICAgICAgICAgICAgdG9rZW4gPSAoYW5ub3RhdGlvbiBhcyBJbmplY3QpLnRva2VuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKGFubm90YXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVwcy5wdXNoKHt0b2tlbiwgb3B0aW9uc30pO1xuICAgIH1cbiAgfSBlbHNlIGlmICgocHJvdmlkZXIgYXMgRXhpc3RpbmdQcm92aWRlcikudXNlRXhpc3RpbmcpIHtcbiAgICBjb25zdCB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKChwcm92aWRlciBhcyBFeGlzdGluZ1Byb3ZpZGVyKS51c2VFeGlzdGluZyk7XG4gICAgZGVwcyA9IFt7dG9rZW4sIG9wdGlvbnM6IE9wdGlvbkZsYWdzLkRlZmF1bHR9XTtcbiAgfSBlbHNlIGlmICghcHJvdmlkZXJEZXBzICYmICEoVVNFX1ZBTFVFIGluIHByb3ZpZGVyKSkge1xuICAgIC8vIHVzZVZhbHVlICYgdXNlRXhpc3RpbmcgYXJlIHRoZSBvbmx5IG9uZXMgd2hpY2ggYXJlIGV4ZW1wdCBmcm9tIGRlcHMgYWxsIG90aGVycyBuZWVkIGl0LlxuICAgIHRocm93IHN0YXRpY0Vycm9yKCdcXCdkZXBzXFwnIHJlcXVpcmVkJywgcHJvdmlkZXIpO1xuICB9XG4gIHJldHVybiBkZXBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2F0Y2hJbmplY3RvckVycm9yKFxuICAgIGU6IGFueSwgdG9rZW46IGFueSwgaW5qZWN0b3JFcnJvck5hbWU6IHN0cmluZywgc291cmNlOiBzdHJpbmcgfCBudWxsKTogbmV2ZXIge1xuICBjb25zdCB0b2tlblBhdGg6IGFueVtdID0gZVtOR19URU1QX1RPS0VOX1BBVEhdO1xuICBpZiAodG9rZW5bU09VUkNFXSkge1xuICAgIHRva2VuUGF0aC51bnNoaWZ0KHRva2VuW1NPVVJDRV0pO1xuICB9XG4gIGUubWVzc2FnZSA9IGZvcm1hdEVycm9yKCdcXG4nICsgZS5tZXNzYWdlLCB0b2tlblBhdGgsIGluamVjdG9yRXJyb3JOYW1lLCBzb3VyY2UpO1xuICBlW05HX1RPS0VOX1BBVEhdID0gdG9rZW5QYXRoO1xuICBlW05HX1RFTVBfVE9LRU5fUEFUSF0gPSBudWxsO1xuICB0aHJvdyBlO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihcbiAgICB0ZXh0OiBzdHJpbmcsIG9iajogYW55LCBpbmplY3RvckVycm9yTmFtZTogc3RyaW5nLCBzb3VyY2U6IHN0cmluZyB8IG51bGwgPSBudWxsKTogc3RyaW5nIHtcbiAgdGV4dCA9IHRleHQgJiYgdGV4dC5jaGFyQXQoMCkgPT09ICdcXG4nICYmIHRleHQuY2hhckF0KDEpID09IE5PX05FV19MSU5FID8gdGV4dC5zdWJzdHIoMikgOiB0ZXh0O1xuICBsZXQgY29udGV4dCA9IHN0cmluZ2lmeShvYmopO1xuICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb250ZXh0ID0gb2JqLm1hcChzdHJpbmdpZnkpLmpvaW4oJyAtPiAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIGxldCBwYXJ0cyA9IDxzdHJpbmdbXT5bXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIHBhcnRzLnB1c2goXG4gICAgICAgICAgICBrZXkgKyAnOicgKyAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHN0cmluZ2lmeSh2YWx1ZSkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29udGV4dCA9IGB7JHtwYXJ0cy5qb2luKCcsICcpfX1gO1xuICB9XG4gIHJldHVybiBgJHtpbmplY3RvckVycm9yTmFtZX0ke3NvdXJjZSA/ICcoJyArIHNvdXJjZSArICcpJyA6ICcnfVske2NvbnRleHR9XTogJHt0ZXh0LnJlcGxhY2UoTkVXX0xJTkUsICdcXG4gICcpfWA7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0Vycm9yKHRleHQ6IHN0cmluZywgb2JqOiBhbnkpOiBFcnJvciB7XG4gIHJldHVybiBuZXcgRXJyb3IoZm9ybWF0RXJyb3IodGV4dCwgb2JqLCAnU3RhdGljSW5qZWN0b3JFcnJvcicpKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './injection_token';\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport var APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9kaS9zY29wZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHakQ7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FDdEMsMEVBQTBFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnLi9pbmplY3Rpb25fdG9rZW4nO1xuXG5cbi8qKlxuICogQW4gaW50ZXJuYWwgdG9rZW4gd2hvc2UgcHJlc2VuY2UgaW4gYW4gaW5qZWN0b3IgaW5kaWNhdGVzIHRoYXQgdGhlIGluamVjdG9yIHNob3VsZCB0cmVhdCBpdHNlbGZcbiAqIGFzIGEgcm9vdCBzY29wZWQgaW5qZWN0b3Igd2hlbiBwcm9jZXNzaW5nIHJlcXVlc3RzIGZvciB1bmtub3duIHRva2VucyB3aGljaCBtYXkgaW5kaWNhdGVcbiAqIHRoZXkgYXJlIHByb3ZpZGVkIGluIHRoZSByb290IHNjb3BlLlxuICovXG5leHBvcnQgY29uc3QgQVBQX1JPT1QgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oXG4gICAgJ1RoZSBwcmVzZW5jZSBvZiB0aGlzIHRva2VuIG1hcmtzIGFuIGluamVjdG9yIGFzIGJlaW5nIHRoZSByb290IGluamVjdG9yLicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util/stringify';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, Injector, NG_TEMP_TOKEN_PATH, NullInjector, USE_VALUE, catchInjectorError } from './injector';\nimport { inject, injectArgs, setCurrentInjector } from './injector_compatibility';\nimport { getInjectableDef, getInjectorDef } from './interface/defs';\nimport { InjectFlags } from './interface/injector';\nimport { APP_ROOT } from './scope';\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nvar NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nvar CIRCULAR = {};\nvar EMPTY_ARRAY = [];\n/**\n * A lazily initialized NullInjector.\n */\nvar NULL_INJECTOR = undefined;\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport function createInjector(defType, parent, additionalProviders, name) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent, name);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent, source) {\n        if (source === void 0) { source = null; }\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        this._destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        var dedupStack = [];\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n        additionalProviders && deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n        // Source name, used for debugging\n        this.source = source || (def instanceof Array ? null : stringify(def));\n    }\n    Object.defineProperty(R3Injector.prototype, \"destroyed\", {\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        get: function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    R3Injector.prototype.destroy = function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    R3Injector.prototype.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        this.assertNotDestroyed();\n        // Set the injection context.\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    var def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, flags & InjectFlags.Optional ? null : notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    R3Injector.prototype.assertNotDestroyed = function () {\n        if (this._destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     */\n    R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        var def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            var defName = stringify(defType);\n            throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n        }\n        // Check for multiple imports of the same module\n        var isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        var providers = (ngModule !== undefined) && defOrWrappedDef.providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents, dedupStack); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        var defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            var injectorType_1 = defOrWrappedDef;\n            deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        var ngModuleType = defOrWrappedDef.ngModule;\n        deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModuleType, providers); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        var record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider;\n            multiRecord_1.multi.push(provider);\n        }\n        else {\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    R3Injector.prototype.hydrate = function (token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(\"Cannot instantiate cyclic dependency! \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = record.factory();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return record.value;\n    };\n    R3Injector.prototype.injectableDefInScope = function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nexport { R3Injector };\nfunction injectableDefOrInjectorDefFactory(token) {\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef === null) {\n        var injectorDef = getInjectorDef(token);\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        else if (token instanceof Function) {\n            var paramLength = token.length;\n            if (paramLength > 0) {\n                var args = new Array(paramLength).fill('?');\n                throw new Error(\"Can't resolve all parameters for \" + stringify(token) + \": (\" + args.join(', ') + \").\");\n            }\n            return function () { return new token(); };\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\nfunction providerToRecord(provider, ngModuleType, providers) {\n    var factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(provider, ngModuleType, providers) {\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = function () { return resolveForwardRef(provider.useValue); };\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(resolveForwardRef(provider.useExisting)); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, tslib_1.__spread(injectArgs(provider.deps || []))); };\n        }\n        else {\n            var classRef_1 = resolveForwardRef(provider &&\n                (provider.useClass || provider.provide));\n            if (!classRef_1) {\n                var ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });\n                    ngModuleDetail =\n                        \" - only instances of Provider and Type are allowed, got: [\" + providerDetail.join(', ') + \"]\";\n                }\n                throw new Error(\"Invalid provider for the NgModule '\" + stringify(ngModuleType) + \"'\" + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), tslib_1.__spread([void 0], injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef_1);\n            }\n        }\n    }\n    return factory;\n}\nfunction makeRecord(factory, value, multi) {\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\nfunction isExistingProvider(value) {\n    return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n    return !!(value && value.useFactory);\n}\nexport function isTypeProvider(value) {\n    return typeof value === 'function';\n}\nexport function isClassProvider(value) {\n    return !!value.useClass;\n}\nfunction hasDeps(value) {\n    return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar InertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        var body = xhr.response.body;\n        body.removeChild(body.firstChild);\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            var body = new window\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body;\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n        // Prefer using <template> element if supported.\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (this.defaultDoc.documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            var attrib = elAttrs.item(i);\n            var attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        var childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(childNode);\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\nexport { InertBodyHelper };\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!window.DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/* A pattern that matches safe srcset values */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX3Nhbml0aXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUNILElBQU0sZ0JBQWdCLEdBQUcsNkRBQTZELENBQUM7QUFFdkYsK0NBQStDO0FBQy9DLElBQU0sbUJBQW1CLEdBQUcsOENBQThDLENBQUM7QUFFM0Usd0ZBQXdGO0FBQ3hGLElBQU0sZ0JBQWdCLEdBQ2xCLHNJQUFzSSxDQUFDO0FBRTNJLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVztJQUN0QyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUUzRSxJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBd0MsR0FBRyx1Q0FBb0MsQ0FBQyxDQUFDO0tBQy9GO0lBRUQsT0FBTyxTQUFTLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQWM7SUFDM0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7aXNEZXZNb2RlfSBmcm9tICcuLi91dGlsL2lzX2Rldl9tb2RlJztcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hlcyBhIHN1YnNldCBvZiBVUkxzIHRoYXQgd2lsbCBub3QgY2F1c2Ugc2NyaXB0XG4gKiBleGVjdXRpb24gaWYgdXNlZCBpbiBVUkwgY29udGV4dCB3aXRoaW4gYSBIVE1MIGRvY3VtZW50LiBTcGVjaWZpY2FsbHksIHRoaXNcbiAqIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGVzIGlmIChjb21tZW50IGZyb20gaGVyZSBvbiBhbmQgcmVnZXggY29waWVkIGZyb21cbiAqIFNveSdzIEVzY2FwaW5nQ29udmVudGlvbnMpOlxuICogKDEpIEVpdGhlciBhbiBhbGxvd2VkIHByb3RvY29sIChodHRwLCBodHRwcywgbWFpbHRvIG9yIGZ0cCkuXG4gKiAoMikgb3Igbm8gcHJvdG9jb2wuICBBIHByb3RvY29sIG11c3QgYmUgZm9sbG93ZWQgYnkgYSBjb2xvbi4gVGhlIGJlbG93XG4gKiAgICAgYWxsb3dzIHRoYXQgYnkgYWxsb3dpbmcgY29sb25zIG9ubHkgYWZ0ZXIgb25lIG9mIHRoZSBjaGFyYWN0ZXJzIFsvPyNdLlxuICogICAgIEEgY29sb24gYWZ0ZXIgYSBoYXNoICgjKSBtdXN0IGJlIGluIHRoZSBmcmFnbWVudC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSAoPykgbXVzdCBiZSBpbiBhIHF1ZXJ5LlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhIHNpbmdsZSBzb2xpZHVzICgvKSBtdXN0IGJlIGluIGEgcGF0aC5cbiAqICAgICBPdGhlcndpc2UsIGEgY29sb24gYWZ0ZXIgYSBkb3VibGUgc29saWR1cyAoLy8pIG11c3QgYmUgaW4gdGhlIGF1dGhvcml0eVxuICogICAgIChiZWZvcmUgcG9ydCkuXG4gKlxuICogVGhlIHBhdHRlcm4gZGlzYWxsb3dzICYsIHVzZWQgaW4gSFRNTCBlbnRpdHkgZGVjbGFyYXRpb25zIGJlZm9yZVxuICogb25lIG9mIHRoZSBjaGFyYWN0ZXJzIGluIFsvPyNdLiBUaGlzIGRpc2FsbG93cyBIVE1MIGVudGl0aWVzIHVzZWQgaW4gdGhlXG4gKiBwcm90b2NvbCBuYW1lLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuLCBlLmcuIFwiaCYjMTE2O3RwXCIgZm9yIFwiaHR0cFwiLlxuICogSXQgYWxzbyBkaXNhbGxvd3MgSFRNTCBlbnRpdGllcyBpbiB0aGUgZmlyc3QgcGF0aCBwYXJ0IG9mIGEgcmVsYXRpdmUgcGF0aCxcbiAqIGUuZy4gXCJmb28mbHQ7YmFyL2JhelwiLiAgT3VyIGV4aXN0aW5nIGVzY2FwaW5nIGZ1bmN0aW9ucyBzaG91bGQgbm90IHByb2R1Y2VcbiAqIHRoYXQuIE1vcmUgaW1wb3J0YW50bHksIGl0IGRpc2FsbG93cyBtYXNraW5nIG9mIGEgY29sb24sXG4gKiBlLmcuIFwiamF2YXNjcmlwdCYjNTg7Li4uXCIuXG4gKlxuICogVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gd2FzIHRha2VuIGZyb20gdGhlIENsb3N1cmUgc2FuaXRpemF0aW9uIGxpYnJhcnkuXG4gKi9cbmNvbnN0IFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuXG4vKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgc3Jjc2V0IHZhbHVlcyAqL1xuY29uc3QgU0FGRV9TUkNTRVRfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fGZpbGUpOnxbXiY6Lz8jXSooPzpbLz8jXXwkKSkvZ2k7XG5cbi8qKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy4gKi9cbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPVxuICAgIC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9zYW5pdGl6ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHVybCA9IFN0cmluZyh1cmwpO1xuICBpZiAodXJsLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IHVybC5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSkgcmV0dXJuIHVybDtcblxuICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICBjb25zb2xlLndhcm4oYFdBUk5JTkc6IHNhbml0aXppbmcgdW5zYWZlIFVSTCB2YWx1ZSAke3VybH0gKHNlZSBodHRwOi8vZy5jby9uZy9zZWN1cml0eSN4c3MpYCk7XG4gIH1cblxuICByZXR1cm4gJ3Vuc2FmZTonICsgdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVTcmNzZXQoc3Jjc2V0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBzcmNzZXQgPSBTdHJpbmcoc3Jjc2V0KTtcbiAgcmV0dXJuIHNyY3NldC5zcGxpdCgnLCcpLm1hcCgoc3Jjc2V0KSA9PiBfc2FuaXRpemVVcmwoc3Jjc2V0LnRyaW0oKSkpLmpvaW4oJywgJyk7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { isDevMode } from '../util/is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\nfunction tagSet(tags) {\n    var e_1, _a;\n    var res = {};\n    try {\n        for (var _b = tslib_1.__values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var t = _c.value;\n            res[t] = true;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return res;\n}\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var e_2, _a;\n    var res = {};\n    try {\n        for (var sets_1 = tslib_1.__values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n            var s = sets_1_1.value;\n            for (var v in s) {\n                if (s.hasOwnProperty(v))\n                    res[v] = true;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nexport var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nexport var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nexport var SRCSET_ATTRS = tagSet('srcset');\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nexport var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nvar SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar SanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var current = el.firstChild;\n        var traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                var next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    SanitizingHtmlSerializer.prototype.startElement = function (element) {\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var elAttr = elAttrs.item(i);\n            var attrName = elAttr.name;\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            var value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    };\n    SanitizingHtmlSerializer.prototype.endElement = function (current) {\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var hi = match.charCodeAt(0);\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var mXSSAttempts = 5;\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        var sanitizer = new SanitizingHtmlSerializer();\n        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\nexport function getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport var SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nvar Sanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\nexport { Sanitizer };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vc2VjdXJpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxlQU9YO0FBUEQsV0FBWSxlQUFlO0lBQ3pCLHFEQUFRLENBQUE7SUFDUixxREFBUSxDQUFBO0lBQ1IsdURBQVMsQ0FBQTtJQUNULHlEQUFVLENBQUE7SUFDVixtREFBTyxDQUFBO0lBQ1AscUVBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQVBXLGVBQWUsS0FBZixlQUFlLFFBTzFCO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQUE7SUFFQSxDQUFDO0lBQUQsZ0JBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBBIFNlY3VyaXR5Q29udGV4dCBtYXJrcyBhIGxvY2F0aW9uIHRoYXQgaGFzIGRhbmdlcm91cyBzZWN1cml0eSBpbXBsaWNhdGlvbnMsIGUuZy4gYSBET00gcHJvcGVydHlcbiAqIGxpa2UgYGlubmVySFRNTGAgdGhhdCBjb3VsZCBjYXVzZSBDcm9zcyBTaXRlIFNjcmlwdGluZyAoWFNTKSBzZWN1cml0eSBidWdzIHdoZW4gaW1wcm9wZXJseVxuICogaGFuZGxlZC5cbiAqXG4gKiBTZWUgRG9tU2FuaXRpemVyIGZvciBtb3JlIGRldGFpbHMgb24gc2VjdXJpdHkgaW4gQW5ndWxhciBhcHBsaWNhdGlvbnMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBTZWN1cml0eUNvbnRleHQge1xuICBOT05FID0gMCxcbiAgSFRNTCA9IDEsXG4gIFNUWUxFID0gMixcbiAgU0NSSVBUID0gMyxcbiAgVVJMID0gNCxcbiAgUkVTT1VSQ0VfVVJMID0gNSxcbn1cblxuLyoqXG4gKiBTYW5pdGl6ZXIgaXMgdXNlZCBieSB0aGUgdmlld3MgdG8gc2FuaXRpemUgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIHZhbHVlcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTYW5pdGl6ZXIge1xuICBhYnN0cmFjdCBzYW5pdGl6ZShjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIHZhbHVlOiB7fXxzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../util/is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nvar COLOR_FNS = '(?:rgb|hsl)a?';\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nvar CSS3_FNS = '(?:calc|attr)';\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n */\nfunction hasBalancedQuotes(value) {\n    var outsideSingle = true;\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global as _global } from './global';\nvar _symbolIterator = null;\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9zeW1ib2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFJM0MsSUFBSSxlQUFlLEdBQVEsSUFBSSxDQUFDO0FBQ2hDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUNwQixJQUFNLFFBQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxRQUFNLElBQUksUUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM3QixlQUFlLEdBQUcsUUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNuQzthQUFNO1lBQ0wsMEJBQTBCO1lBQzFCLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3BDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxNQUFNO29CQUNsQyxHQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzVELGVBQWUsR0FBRyxHQUFHLENBQUM7aUJBQ3ZCO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtnbG9iYWwgYXMgX2dsb2JhbH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vLyBXaGVuIFN5bWJvbC5pdGVyYXRvciBkb2Vzbid0IGV4aXN0LCByZXRyaWV2ZXMgdGhlIGtleSB1c2VkIGluIGVzNi1zaGltXG5kZWNsYXJlIGNvbnN0IFN5bWJvbDogYW55O1xubGV0IF9zeW1ib2xJdGVyYXRvcjogYW55ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpOiBzdHJpbmd8c3ltYm9sIHtcbiAgaWYgKCFfc3ltYm9sSXRlcmF0b3IpIHtcbiAgICBjb25zdCBTeW1ib2wgPSBfZ2xvYmFsWydTeW1ib2wnXTtcbiAgICBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgX3N5bWJvbEl0ZXJhdG9yID0gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE1hcC5wcm90b3R5cGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJlxuICAgICAgICAgICAgKE1hcCBhcyBhbnkpLnByb3RvdHlwZVtrZXldID09PSBNYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICBfc3ltYm9sSXRlcmF0b3IgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zeW1ib2xJdGVyYXRvcjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { areIterablesEqual, isListLikeIterable } from './iterable';\n// JS has NaN !== NaN\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\nexport function devModeEqual(a, b) {\n    var isListLikeIterableA = isListLikeIterable(a);\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvY29tcGFyaXNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHakUscUJBQXFCO0FBQ3JCLE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBTSxFQUFFLENBQU07SUFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUN6QyxJQUFNLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsRUFBRTtRQUM5QyxPQUFPLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDOUM7U0FBTTtRQUNMLElBQU0sU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztRQUMxRSxJQUFNLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLFNBQVMsRUFBRTtZQUMxRSxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDN0I7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXJlSXRlcmFibGVzRXF1YWwsIGlzTGlzdExpa2VJdGVyYWJsZX0gZnJvbSAnLi9pdGVyYWJsZSc7XG5cblxuLy8gSlMgaGFzIE5hTiAhPT0gTmFOXG5leHBvcnQgZnVuY3Rpb24gbG9vc2VJZGVudGljYWwoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgdHlwZW9mIGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBiID09PSAnbnVtYmVyJyAmJiBpc05hTihhKSAmJiBpc05hTihiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldk1vZGVFcXVhbChhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICBjb25zdCBpc0xpc3RMaWtlSXRlcmFibGVBID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGEpO1xuICBjb25zdCBpc0xpc3RMaWtlSXRlcmFibGVCID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGIpO1xuICBpZiAoaXNMaXN0TGlrZUl0ZXJhYmxlQSAmJiBpc0xpc3RMaWtlSXRlcmFibGVCKSB7XG4gICAgcmV0dXJuIGFyZUl0ZXJhYmxlc0VxdWFsKGEsIGIsIGRldk1vZGVFcXVhbCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXNBT2JqZWN0ID0gYSAmJiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbiAgICBjb25zdCBpc0JPYmplY3QgPSBiICYmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpO1xuICAgIGlmICghaXNMaXN0TGlrZUl0ZXJhYmxlQSAmJiBpc0FPYmplY3QgJiYgIWlzTGlzdExpa2VJdGVyYWJsZUIgJiYgaXNCT2JqZWN0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvb3NlSWRlbnRpY2FsKGEsIGIpO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../util/comparison';\nimport { getSymbolIterator } from '../util/symbol';\nexport function devModeEqual(a, b) {\n    var isListLikeIterableA = isListLikeIterable(a);\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n */\nvar WrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\nexport { WrappedValue };\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nexport function areIterablesEqual(a, b, comparator) {\n    var iterator1 = a[getSymbolIterator()]();\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        var item1 = iterator1.next();\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var iterator = obj[getSymbolIterator()]();\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n */\nexport function isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvbGFuZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFJSDs7R0FFRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBUTtJQUNoQywyQ0FBMkM7SUFDM0MscUVBQXFFO0lBQ3JFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0FBQ2pELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBMEI7SUFDckQsc0RBQXNEO0lBQ3RELDRFQUE0RTtJQUM1RSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgYXJndW1lbnQgaXMgc2hhcGVkIGxpa2UgYSBQcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2Uob2JqOiBhbnkpOiBvYmogaXMgUHJvbWlzZTxhbnk+IHtcbiAgLy8gYWxsb3cgYW55IFByb21pc2UvQSsgY29tcGxpYW50IHRoZW5hYmxlLlxuICAvLyBJdCdzIHVwIHRvIHRoZSBjYWxsZXIgdG8gZW5zdXJlIHRoYXQgb2JqLnRoZW4gY29uZm9ybXMgdG8gdGhlIHNwZWNcbiAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIE9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmo6IGFueSB8IE9ic2VydmFibGU8YW55Pik6IG9iaiBpcyBPYnNlcnZhYmxlPGFueT4ge1xuICAvLyBUT0RPOiB1c2UgaXNPYnNlcnZhYmxlIG9uY2Ugd2UgdXBkYXRlIHBhc3MgcnhqcyA2LjFcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCM2MTAtMjAxOC0wNS0wM1xuICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iai5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbic7XG59XG4iXX0=","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/ (function () {\n    function Subscription(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function') {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport var config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = typeof Symbol === 'function'\n    ? /*@__PURE__*/ Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        _this._parentSubscription = null;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        destinationOrNext.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        this._parentSubscription = null;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nvar Observable = /*@__PURE__*/ (function () {\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;\n        if (closed_1 || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/// <reference types=\"rxjs\" />\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nvar EventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n        var schedulerFn;\n        var errorFn = function (err) { return null; };\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\nexport { EventEmitter };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/interface/defs';\nimport { inject } from '../../di/injector_compatibility';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport var angularCoreEnv = {\n    'ɵdefineBase': r3.defineBase,\n    'ɵdefineComponent': r3.defineComponent,\n    'ɵdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': r3.defineNgModule,\n    'ɵdefinePipe': r3.definePipe,\n    'ɵdirectiveInject': r3.directiveInject,\n    'ɵgetFactoryOf': r3.getFactoryOf,\n    'ɵgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': r3.injectAttribute,\n    'ɵtemplateRefExtractor': r3.templateRefExtractor,\n    'ɵNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ɵProvidersFeature': r3.ProvidersFeature,\n    'ɵInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ɵelementAttribute': r3.elementAttribute,\n    'ɵbind': r3.bind,\n    'ɵcontainer': r3.container,\n    'ɵnextContext': r3.nextContext,\n    'ɵcontainerRefreshStart': r3.containerRefreshStart,\n    'ɵcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ɵnamespaceHTML': r3.namespaceHTML,\n    'ɵnamespaceMathML': r3.namespaceMathML,\n    'ɵnamespaceSVG': r3.namespaceSVG,\n    'ɵenableBindings': r3.enableBindings,\n    'ɵdisableBindings': r3.disableBindings,\n    'ɵallocHostVars': r3.allocHostVars,\n    'ɵelementStart': r3.elementStart,\n    'ɵelementEnd': r3.elementEnd,\n    'ɵelement': r3.element,\n    'ɵelementContainerStart': r3.elementContainerStart,\n    'ɵelementContainerEnd': r3.elementContainerEnd,\n    'ɵpureFunction0': r3.pureFunction0,\n    'ɵpureFunction1': r3.pureFunction1,\n    'ɵpureFunction2': r3.pureFunction2,\n    'ɵpureFunction3': r3.pureFunction3,\n    'ɵpureFunction4': r3.pureFunction4,\n    'ɵpureFunction5': r3.pureFunction5,\n    'ɵpureFunction6': r3.pureFunction6,\n    'ɵpureFunction7': r3.pureFunction7,\n    'ɵpureFunction8': r3.pureFunction8,\n    'ɵpureFunctionV': r3.pureFunctionV,\n    'ɵgetCurrentView': r3.getCurrentView,\n    'ɵrestoreView': r3.restoreView,\n    'ɵinterpolation1': r3.interpolation1,\n    'ɵinterpolation2': r3.interpolation2,\n    'ɵinterpolation3': r3.interpolation3,\n    'ɵinterpolation4': r3.interpolation4,\n    'ɵinterpolation5': r3.interpolation5,\n    'ɵinterpolation6': r3.interpolation6,\n    'ɵinterpolation7': r3.interpolation7,\n    'ɵinterpolation8': r3.interpolation8,\n    'ɵinterpolationV': r3.interpolationV,\n    'ɵlistener': r3.listener,\n    'ɵload': r3.load,\n    'ɵprojection': r3.projection,\n    'ɵelementProperty': r3.elementProperty,\n    'ɵcomponentHostSyntheticProperty': r3.componentHostSyntheticProperty,\n    'ɵcomponentHostSyntheticListener': r3.componentHostSyntheticListener,\n    'ɵpipeBind1': r3.pipeBind1,\n    'ɵpipeBind2': r3.pipeBind2,\n    'ɵpipeBind3': r3.pipeBind3,\n    'ɵpipeBind4': r3.pipeBind4,\n    'ɵpipeBindV': r3.pipeBindV,\n    'ɵprojectionDef': r3.projectionDef,\n    'ɵpipe': r3.pipe,\n    'ɵqueryRefresh': r3.queryRefresh,\n    'ɵviewQuery': r3.viewQuery,\n    'ɵstaticViewQuery': r3.staticViewQuery,\n    'ɵstaticContentQuery': r3.staticContentQuery,\n    'ɵloadViewQuery': r3.loadViewQuery,\n    'ɵcontentQuery': r3.contentQuery,\n    'ɵloadContentQuery': r3.loadContentQuery,\n    'ɵreference': r3.reference,\n    'ɵelementHostAttrs': r3.elementHostAttrs,\n    'ɵelementStyling': r3.elementStyling,\n    'ɵelementStylingMap': r3.elementStylingMap,\n    'ɵelementStyleProp': r3.elementStyleProp,\n    'ɵelementStylingApply': r3.elementStylingApply,\n    'ɵelementClassProp': r3.elementClassProp,\n    'ɵelementHostStyling': r3.elementHostStyling,\n    'ɵelementHostStylingMap': r3.elementHostStylingMap,\n    'ɵelementHostStyleProp': r3.elementHostStyleProp,\n    'ɵelementHostStylingApply': r3.elementHostStylingApply,\n    'ɵelementHostClassProp': r3.elementHostClassProp,\n    'ɵselect': r3.select,\n    'ɵtemplate': r3.template,\n    'ɵtext': r3.text,\n    'ɵtextBinding': r3.textBinding,\n    'ɵembeddedViewStart': r3.embeddedViewStart,\n    'ɵembeddedViewEnd': r3.embeddedViewEnd,\n    'ɵi18n': r3.i18n,\n    'ɵi18nAttributes': r3.i18nAttributes,\n    'ɵi18nExp': r3.i18nExp,\n    'ɵi18nStart': r3.i18nStart,\n    'ɵi18nEnd': r3.i18nEnd,\n    'ɵi18nApply': r3.i18nApply,\n    'ɵi18nPostprocess': r3.i18nPostprocess,\n    'ɵresolveWindow': r3.resolveWindow,\n    'ɵresolveDocument': r3.resolveDocument,\n    'ɵresolveBody': r3.resolveBody,\n    'ɵsetComponentScope': r3.setComponentScope,\n    'ɵsetNgModuleScope': r3.setNgModuleScope,\n    'ɵsanitizeHtml': sanitization.sanitizeHtml,\n    'ɵsanitizeStyle': sanitization.sanitizeStyle,\n    'ɵdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitization.sanitizeScript,\n    'ɵsanitizeUrl': sanitization.sanitizeUrl,\n    'ɵsanitizeUrlOrResourceUrl': sanitization.sanitizeUrlOrResourceUrl\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nvar ComponentRef = /** @class */ (function () {\n    function ComponentRef() {\n    }\n    return ComponentRef;\n}());\nexport { ComponentRef };\n/**\n * @publicApi\n */\nvar ComponentFactory = /** @class */ (function () {\n    function ComponentFactory() {\n    }\n    return ComponentFactory;\n}());\nexport { ComponentFactory };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBVUg7Ozs7OztHQU1HO0FBQ0g7SUFBQTtJQTRDQSxDQUFDO0lBQUQsbUJBQUM7QUFBRCxDQUFDLEFBNUNELElBNENDOztBQUVEOztHQUVHO0FBQ0g7SUFBQTtJQTJCQSxDQUFDO0lBQUQsdUJBQUM7QUFBRCxDQUFDLEFBM0JELElBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmfSBmcm9tICcuLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nO1xuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5cbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnLi9lbGVtZW50X3JlZic7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuL25nX21vZHVsZV9mYWN0b3J5JztcbmltcG9ydCB7Vmlld1JlZn0gZnJvbSAnLi92aWV3X3JlZic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbXBvbmVudCBjcmVhdGVkIGJ5IGEgYENvbXBvbmVudEZhY3RvcnlgLlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIHJlbGF0ZWQgb2JqZWN0cyxcbiAqIGFuZCBwcm92aWRlcyB0aGUgbWVhbnMgb2YgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50UmVmPEM+IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0IG9yIGFuY2hvciBbZWxlbWVudF0oZ3VpZGUvZ2xvc3NhcnkjZWxlbWVudCkgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGxvY2F0aW9uKCk6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBbZGVwZW5kZW5jeSBpbmplY3Rvcl0oZ3VpZGUvZ2xvc3NhcnkjaW5qZWN0b3IpIGZvciB0aGlzIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbmplY3RvcigpOiBJbmplY3RvcjtcblxuICAvKipcbiAgICogVGhpcyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgaW5zdGFuY2UoKTogQztcblxuICAvKipcbiAgICogVGhlIFtob3N0IHZpZXddKGd1aWRlL2dsb3NzYXJ5I3ZpZXctdHJlZSkgZGVmaW5lZCBieSB0aGUgdGVtcGxhdGVcbiAgICogZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGhvc3RWaWV3KCk6IFZpZXdSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBjaGFuZ2UgZGV0ZWN0b3IgZm9yIHRoaXMgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IGNoYW5nZURldGVjdG9yUmVmKCk6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHR5cGUuXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kIGFsbCBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICovXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcblxuICAvKipcbiAgICogQSBsaWZlY3ljbGUgaG9vayB0aGF0IHByb3ZpZGVzIGFkZGl0aW9uYWwgZGV2ZWxvcGVyLWRlZmluZWQgY2xlYW51cFxuICAgKiBmdW5jdGlvbmFsaXR5IGZvciB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgY2xlYW5zIHVwIGRldmVsb3Blci1kZWZpbmVkIGRhdGFcbiAgICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29tcG9uZW50LiBDYWxsZWQgd2hlbiB0aGUgYGRlc3Ryb3koKWAgbWV0aG9kIGlzIGludm9rZWQuXG4gICAqL1xuICBhYnN0cmFjdCBvbkRlc3Ryb3koY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZDtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnRGYWN0b3J5PEM+IHtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyBIVE1MIHNlbGVjdG9yLlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IHNlbGVjdG9yKCk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQncyB0eXBlXG4gICAqL1xuICBhYnN0cmFjdCBnZXQgY29tcG9uZW50VHlwZSgpOiBUeXBlPGFueT47XG4gIC8qKlxuICAgKiBTZWxlY3RvciBmb3IgYWxsIDxuZy1jb250ZW50PiBlbGVtZW50cyBpbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0IG5nQ29udGVudFNlbGVjdG9ycygpOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSBpbnB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBpbnB1dHMoKToge3Byb3BOYW1lOiBzdHJpbmcsIHRlbXBsYXRlTmFtZTogc3RyaW5nfVtdO1xuICAvKipcbiAgICogVGhlIG91dHB1dHMgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFic3RyYWN0IGdldCBvdXRwdXRzKCk6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29tcG9uZW50LlxuICAgKi9cbiAgYWJzdHJhY3QgY3JlYXRlKFxuICAgICAgaW5qZWN0b3I6IEluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlPzogc3RyaW5nfGFueSxcbiAgICAgIG5nTW9kdWxlPzogTmdNb2R1bGVSZWY8YW55Pik6IENvbXBvbmVudFJlZjxDPjtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util/stringify';\nimport { ComponentFactory } from './component_factory';\nexport function noComponentFactoryError(component) {\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nvar ERROR_COMPONENT = 'ngComponent';\nexport function getComponent(error) {\n    return error[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * @publicApi\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\nexport { ComponentFactoryBoundToModule };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUlILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUU1QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUduRSxNQUFNLFVBQVUsdUJBQXVCLENBQUMsU0FBbUI7SUFDekQsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUNmLG9DQUFrQyxTQUFTLENBQUMsU0FBUyxDQUFDLG1EQUFnRCxDQUFDLENBQUM7SUFDM0csS0FBYSxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM1QyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxJQUFNLGVBQWUsR0FBRyxhQUFhLENBQUM7QUFFdEMsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3ZDLE9BQVEsS0FBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFHRDtJQUFBO0lBSUEsQ0FBQztJQUhDLCtEQUF1QixHQUF2QixVQUEyQixTQUFvQztRQUM3RCxNQUFNLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBRUQ7O0dBRUc7QUFDSDtJQUFBO0lBR0EsQ0FBQztJQUZRLDZCQUFJLEdBQTZCLElBQUksNkJBQTZCLEVBQUUsQ0FBQztJQUU5RSwrQkFBQztDQUFBLEFBSEQsSUFHQztTQUhxQix3QkFBd0I7QUFLOUM7SUFHRSx5Q0FDSSxTQUFrQyxFQUFVLE9BQWlDLEVBQ3JFLFNBQTJCO1FBRFMsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDckUsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFKL0IsZUFBVSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO1FBS3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztJQUVELGlFQUF1QixHQUF2QixVQUEyQixTQUFvQztRQUM3RCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDNUIsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osTUFBTSx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDSCxzQ0FBQztBQUFELENBQUMsQUF0QkQsSUFzQkM7O0FBRUQ7SUFBc0QseURBQW1CO0lBT3ZFLHVDQUFvQixPQUE0QixFQUFVLFFBQTBCO1FBQXBGLFlBQ0UsaUJBQU8sU0FNUjtRQVBtQixhQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFVLGNBQVEsR0FBUixRQUFRLENBQWtCO1FBRWxGLEtBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxLQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDM0MsS0FBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUNyRCxLQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDN0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztJQUNqQyxDQUFDO0lBRUQsOENBQU0sR0FBTixVQUNJLFFBQWtCLEVBQUUsZ0JBQTBCLEVBQUUsa0JBQStCLEVBQy9FLFFBQTJCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQ3RCLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUF0QkQsQ0FBc0QsZ0JBQWdCLEdBc0JyRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvdHlwZSc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuXG5pbXBvcnQge0NvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZn0gZnJvbSAnLi9jb21wb25lbnRfZmFjdG9yeSc7XG5pbXBvcnQge05nTW9kdWxlUmVmfSBmcm9tICcuL25nX21vZHVsZV9mYWN0b3J5JztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudDogRnVuY3Rpb24pIHtcbiAgY29uc3QgZXJyb3IgPSBFcnJvcihcbiAgICAgIGBObyBjb21wb25lbnQgZmFjdG9yeSBmb3VuZCBmb3IgJHtzdHJpbmdpZnkoY29tcG9uZW50KX0uIERpZCB5b3UgYWRkIGl0IHRvIEBOZ01vZHVsZS5lbnRyeUNvbXBvbmVudHM/YCk7XG4gIChlcnJvciBhcyBhbnkpW0VSUk9SX0NPTVBPTkVOVF0gPSBjb21wb25lbnQ7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuY29uc3QgRVJST1JfQ09NUE9ORU5UID0gJ25nQ29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudChlcnJvcjogRXJyb3IpOiBUeXBlPGFueT4ge1xuICByZXR1cm4gKGVycm9yIGFzIGFueSlbRVJST1JfQ09NUE9ORU5UXTtcbn1cblxuXG5jbGFzcyBfTnVsbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciBpbXBsZW1lbnRzIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB7XG4gIHJlc29sdmVDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDoge25ldyAoLi4uYXJnczogYW55W10pOiBUfSk6IENvbXBvbmVudEZhY3Rvcnk8VD4ge1xuICAgIHRocm93IG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIge1xuICBzdGF0aWMgTlVMTDogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gbmV3IF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk7XG4gIGFic3RyYWN0IHJlc29sdmVDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDogVHlwZTxUPik6IENvbXBvbmVudEZhY3Rvcnk8VD47XG59XG5cbmV4cG9ydCBjbGFzcyBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGltcGxlbWVudHMgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHtcbiAgcHJpdmF0ZSBfZmFjdG9yaWVzID0gbmV3IE1hcDxhbnksIENvbXBvbmVudEZhY3Rvcnk8YW55Pj4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGZhY3RvcmllczogQ29tcG9uZW50RmFjdG9yeTxhbnk+W10sIHByaXZhdGUgX3BhcmVudDogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgcHJpdmF0ZSBfbmdNb2R1bGU6IE5nTW9kdWxlUmVmPGFueT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY3Rvcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZmFjdG9yeSA9IGZhY3Rvcmllc1tpXTtcbiAgICAgIHRoaXMuX2ZhY3Rvcmllcy5zZXQoZmFjdG9yeS5jb21wb25lbnRUeXBlLCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlQ29tcG9uZW50RmFjdG9yeTxUPihjb21wb25lbnQ6IHtuZXcgKC4uLmFyZ3M6IGFueVtdKTogVH0pOiBDb21wb25lbnRGYWN0b3J5PFQ+IHtcbiAgICBsZXQgZmFjdG9yeSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQoY29tcG9uZW50KTtcbiAgICBpZiAoIWZhY3RvcnkgJiYgdGhpcy5fcGFyZW50KSB7XG4gICAgICBmYWN0b3J5ID0gdGhpcy5fcGFyZW50LnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCk7XG4gICAgfVxuICAgIGlmICghZmFjdG9yeSkge1xuICAgICAgdGhyb3cgbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZShmYWN0b3J5LCB0aGlzLl9uZ01vZHVsZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlPEM+IGV4dGVuZHMgQ29tcG9uZW50RmFjdG9yeTxDPiB7XG4gIHJlYWRvbmx5IHNlbGVjdG9yOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNvbXBvbmVudFR5cGU6IFR5cGU8YW55PjtcbiAgcmVhZG9ubHkgbmdDb250ZW50U2VsZWN0b3JzOiBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgaW5wdXRzOiB7cHJvcE5hbWU6IHN0cmluZywgdGVtcGxhdGVOYW1lOiBzdHJpbmd9W107XG4gIHJlYWRvbmx5IG91dHB1dHM6IHtwcm9wTmFtZTogc3RyaW5nLCB0ZW1wbGF0ZU5hbWU6IHN0cmluZ31bXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8Qz4sIHByaXZhdGUgbmdNb2R1bGU6IE5nTW9kdWxlUmVmPGFueT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0b3IgPSBmYWN0b3J5LnNlbGVjdG9yO1xuICAgIHRoaXMuY29tcG9uZW50VHlwZSA9IGZhY3RvcnkuY29tcG9uZW50VHlwZTtcbiAgICB0aGlzLm5nQ29udGVudFNlbGVjdG9ycyA9IGZhY3RvcnkubmdDb250ZW50U2VsZWN0b3JzO1xuICAgIHRoaXMuaW5wdXRzID0gZmFjdG9yeS5pbnB1dHM7XG4gICAgdGhpcy5vdXRwdXRzID0gZmFjdG9yeS5vdXRwdXRzO1xuICB9XG5cbiAgY3JlYXRlKFxuICAgICAgaW5qZWN0b3I6IEluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzPzogYW55W11bXSwgcm9vdFNlbGVjdG9yT3JOb2RlPzogc3RyaW5nfGFueSxcbiAgICAgIG5nTW9kdWxlPzogTmdNb2R1bGVSZWY8YW55Pik6IENvbXBvbmVudFJlZjxDPiB7XG4gICAgcmV0dXJuIHRoaXMuZmFjdG9yeS5jcmVhdGUoXG4gICAgICAgIGluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzLCByb290U2VsZWN0b3JPck5vZGUsIG5nTW9kdWxlIHx8IHRoaXMubmdNb2R1bGUpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * @publicApi\n */\nvar RenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\nexport { RenderComponentType };\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nvar RenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\nexport { RenderDebugInfo };\n/**\n * @deprecated Use the `Renderer2` instead.\n * @publicApi\n */\nvar Renderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\nexport { Renderer };\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @publicApi\n */\nvar RootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\nexport { RootRenderer };\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nvar RendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\nexport { RendererFactory2 };\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport var RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nexport { Renderer2 };\nexport var SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\nvar SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\nvar SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL3JlbmRlci9hcGkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBeUgrQixtQ0FBa0MiLCJmaWxlIjoiYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICcuLi9kaS9pbmplY3Rpb25fdG9rZW4nO1xuaW1wb3J0IHsgaW5qZWN0UmVuZGVyZXIyIGFzIHJlbmRlcjNJbmplY3RSZW5kZXJlcjIgfSBmcm9tICcuLi9yZW5kZXIzL3ZpZXdfZW5naW5lX2NvbXBhdGliaWxpdHknO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBgUmVuZGVyZXJUeXBlMmAgKGFuZCBgUmVuZGVyZXIyYCkgaW5zdGVhZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFJlbmRlckNvbXBvbmVudFR5cGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyQ29tcG9uZW50VHlwZShpZCwgdGVtcGxhdGVVcmwsIHNsb3RDb3VudCwgZW5jYXBzdWxhdGlvbiwgc3R5bGVzLCBhbmltYXRpb25zKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVVybCA9IHRlbXBsYXRlVXJsO1xuICAgICAgICB0aGlzLnNsb3RDb3VudCA9IHNsb3RDb3VudDtcbiAgICAgICAgdGhpcy5lbmNhcHN1bGF0aW9uID0gZW5jYXBzdWxhdGlvbjtcbiAgICAgICAgdGhpcy5zdHlsZXMgPSBzdHlsZXM7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IGFuaW1hdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJDb21wb25lbnRUeXBlO1xufSgpKTtcbmV4cG9ydCB7IFJlbmRlckNvbXBvbmVudFR5cGUgfTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgRGVidWcgaW5mbyBpcyBoYW5kbGVkIGludGVybmFsbHkgaW4gdGhlIHZpZXcgZW5naW5lIG5vdy5cbiAqL1xudmFyIFJlbmRlckRlYnVnSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJEZWJ1Z0luZm8oKSB7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJEZWJ1Z0luZm87XG59KCkpO1xuZXhwb3J0IHsgUmVuZGVyRGVidWdJbmZvIH07XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYFJlbmRlcmVyMmAgaW5zdGVhZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlcmVyKCkge1xuICAgIH1cbiAgICByZXR1cm4gUmVuZGVyZXI7XG59KCkpO1xuZXhwb3J0IHsgUmVuZGVyZXIgfTtcbmV4cG9ydCB2YXIgUmVuZGVyZXIySW50ZXJjZXB0b3IgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1JlbmRlcmVyMkludGVyY2VwdG9yJyk7XG4vKipcbiAqIEluamVjdGFibGUgc2VydmljZSB0aGF0IHByb3ZpZGVzIGEgbG93LWxldmVsIGludGVyZmFjZSBmb3IgbW9kaWZ5aW5nIHRoZSBVSS5cbiAqXG4gKiBVc2UgdGhpcyBzZXJ2aWNlIHRvIGJ5cGFzcyBBbmd1bGFyJ3MgdGVtcGxhdGluZyBhbmQgbWFrZSBjdXN0b20gVUkgY2hhbmdlcyB0aGF0IGNhbid0IGJlXG4gKiBleHByZXNzZWQgZGVjbGFyYXRpdmVseS4gRm9yIGV4YW1wbGUgaWYgeW91IG5lZWQgdG8gc2V0IGEgcHJvcGVydHkgb3IgYW4gYXR0cmlidXRlIHdob3NlIG5hbWUgaXNcbiAqIG5vdCBzdGF0aWNhbGx5IGtub3duLCB1c2Uge0BsaW5rIFJlbmRlcmVyI3NldEVsZW1lbnRQcm9wZXJ0eSBzZXRFbGVtZW50UHJvcGVydHl9IG9yXG4gKiB7QGxpbmsgUmVuZGVyZXIjc2V0RWxlbWVudEF0dHJpYnV0ZSBzZXRFbGVtZW50QXR0cmlidXRlfSByZXNwZWN0aXZlbHkuXG4gKlxuICogSWYgeW91IGFyZSBpbXBsZW1lbnRpbmcgYSBjdXN0b20gcmVuZGVyZXIsIHlvdSBtdXN0IGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCBSZW5kZXJlciBpbXBsZW1lbnRhdGlvbiBpcyBgRG9tUmVuZGVyZXJgLiBBbHNvIGF2YWlsYWJsZSBpcyBgV2ViV29ya2VyUmVuZGVyZXJgLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgUmVuZGVyZXJGYWN0b3J5MmAgaW5zdGVhZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFJvb3RSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSb290UmVuZGVyZXIoKSB7XG4gICAgfVxuICAgIHJldHVybiBSb290UmVuZGVyZXI7XG59KCkpO1xuZXhwb3J0IHsgUm9vdFJlbmRlcmVyIH07XG4vKipcbiAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGEgY3VzdG9tIHJlbmRlcmVyIHRoYXQgaW1wbGVtZW50cyB0aGUgYFJlbmRlcmVyMmAgYmFzZSBjbGFzcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBSZW5kZXJlckZhY3RvcnkyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlcmVyRmFjdG9yeTIoKSB7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJlckZhY3RvcnkyO1xufSgpKTtcbmV4cG9ydCB7IFJlbmRlcmVyRmFjdG9yeTIgfTtcbi8qKlxuICogRmxhZ3MgZm9yIHJlbmRlcmVyLXNwZWNpZmljIHN0eWxlIG1vZGlmaWVycy5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHZhciBSZW5kZXJlclN0eWxlRmxhZ3MyO1xuKGZ1bmN0aW9uIChSZW5kZXJlclN0eWxlRmxhZ3MyKSB7XG4gICAgLyoqXG4gICAgICogTWFya3MgYSBzdHlsZSBhcyBpbXBvcnRhbnQuXG4gICAgICovXG4gICAgUmVuZGVyZXJTdHlsZUZsYWdzMltSZW5kZXJlclN0eWxlRmxhZ3MyW1wiSW1wb3J0YW50XCJdID0gMV0gPSBcIkltcG9ydGFudFwiO1xuICAgIC8qKlxuICAgICAqIE1hcmtzIGEgc3R5bGUgYXMgdXNpbmcgZGFzaCBjYXNlIG5hbWluZyAodGhpcy1pcy1kYXNoLWNhc2UpLlxuICAgICAqL1xuICAgIFJlbmRlcmVyU3R5bGVGbGFnczJbUmVuZGVyZXJTdHlsZUZsYWdzMltcIkRhc2hDYXNlXCJdID0gMl0gPSBcIkRhc2hDYXNlXCI7XG59KShSZW5kZXJlclN0eWxlRmxhZ3MyIHx8IChSZW5kZXJlclN0eWxlRmxhZ3MyID0ge30pKTtcbi8qKlxuICogRXh0ZW5kIHRoaXMgYmFzZSBjbGFzcyB0byBpbXBsZW1lbnQgY3VzdG9tIHJlbmRlcmluZy4gQnkgZGVmYXVsdCwgQW5ndWxhclxuICogcmVuZGVycyBhIHRlbXBsYXRlIGludG8gRE9NLiBZb3UgY2FuIHVzZSBjdXN0b20gcmVuZGVyaW5nIHRvIGludGVyY2VwdFxuICogcmVuZGVyaW5nIGNhbGxzLCBvciB0byByZW5kZXIgdG8gc29tZXRoaW5nIG90aGVyIHRoYW4gRE9NLlxuICpcbiAqIENyZWF0ZSB5b3VyIGN1c3RvbSByZW5kZXJlciB1c2luZyBgUmVuZGVyZXJGYWN0b3J5MmAuXG4gKlxuICogVXNlIGEgY3VzdG9tIHJlbmRlcmVyIHRvIGJ5cGFzcyBBbmd1bGFyJ3MgdGVtcGxhdGluZyBhbmRcbiAqIG1ha2UgY3VzdG9tIFVJIGNoYW5nZXMgdGhhdCBjYW4ndCBiZSBleHByZXNzZWQgZGVjbGFyYXRpdmVseS5cbiAqIEZvciBleGFtcGxlIGlmIHlvdSBuZWVkIHRvIHNldCBhIHByb3BlcnR5IG9yIGFuIGF0dHJpYnV0ZSB3aG9zZSBuYW1lIGlzXG4gKiBub3Qgc3RhdGljYWxseSBrbm93biwgdXNlIHRoZSBgc2V0UHJvcGVydHkoKWAgb3JcbiAqIGBzZXRBdHRyaWJ1dGUoKWAgbWV0aG9kLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFJlbmRlcmVyMiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlcjIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgUmVuZGVyZXIyLl9fTkdfRUxFTUVOVF9JRF9fID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gU1dJVENIX1JFTkRFUkVSMl9GQUNUT1JZKCk7IH07XG4gICAgcmV0dXJuIFJlbmRlcmVyMjtcbn0oKSk7XG5leHBvcnQgeyBSZW5kZXJlcjIgfTtcbmV4cG9ydCB2YXIgU1dJVENIX1JFTkRFUkVSMl9GQUNUT1JZX19QT1NUX1IzX18gPSByZW5kZXIzSW5qZWN0UmVuZGVyZXIyO1xudmFyIFNXSVRDSF9SRU5ERVJFUjJfRkFDVE9SWV9fUFJFX1IzX18gPSBub29wO1xudmFyIFNXSVRDSF9SRU5ERVJFUjJfRkFDVE9SWSA9IFNXSVRDSF9SRU5ERVJFUjJfRkFDVE9SWV9fUFJFX1IzX187XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nvar Version = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\nexport { Version };\n/**\n * @publicApi\n */\nexport var VERSION = new Version('8.0.0-beta.10+123.sha-a6809e0.with-local-changes');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7R0FJRztBQUNIO0lBS0UsaUJBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQzs7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXByZXNlbnRzIHRoZSB2ZXJzaW9uIG9mIEFuZ3VsYXJcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJzaW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IG1ham9yOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBtaW5vcjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcGF0Y2g6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZnVsbDogc3RyaW5nKSB7XG4gICAgdGhpcy5tYWpvciA9IGZ1bGwuc3BsaXQoJy4nKVswXTtcbiAgICB0aGlzLm1pbm9yID0gZnVsbC5zcGxpdCgnLicpWzFdO1xuICAgIHRoaXMucGF0Y2ggPSBmdWxsLnNwbGl0KCcuJykuc2xpY2UoMikuam9pbignLicpO1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IG5ldyBWZXJzaW9uKCcwLjAuMC1QTEFDRUhPTERFUicpO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { isObservable } from '../util/lang';\nimport { stringify } from '../util/stringify';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\nvar RendererV1TokenKey = tokenKey(RendererV1);\nvar Renderer2TokenKey = tokenKey(Renderer2);\nvar ElementRefTokenKey = tokenKey(ElementRef);\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nvar InjectorRefTokenKey = tokenKey(Injector);\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = tslib_1.__read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\nexport function createPipeInstance(view, def) {\n    // deps are looked up from component.\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n}\nexport function createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var outputObservable = instance[output.propName];\n            if (isObservable(outputObservable)) {\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    var providerData = asProviderData(view, def.nodeIndex);\n    var directive = providerData.instance;\n    var changed = false;\n    var changes = undefined;\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\nfunction _createProviderInstance(view, def) {\n    // private services can see other private services\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n        case 256 /* TypeValueProvider */:\n            return providerDef.value;\n    }\n}\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, tslib_1.__spread([void 0], depValues)))();\n    }\n}\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, tslib_1.__spread(depValues));\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && elDef.element.componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = elDef.parent;\n    }\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (elDef.element.template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                        elDef.element.publicProviders)[tokenKey];\n                    if (providerDef_1) {\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = viewParentEl(searchView);\n        searchView = searchView.parent;\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\nfunction findCompView(view, elDef, allowPrivateServices) {\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        var compView = asElementData(view, def.parent.nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    var binding = def.bindings[bindingIdx];\n    var propName = binding.name;\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        var binding_1 = def.bindings[bindingIdx];\n        changes[binding_1.nonMinifiedName] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    var nodes = view.def.nodes;\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        var nodeDef = nodes[i];\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { assertLView } from '../assert';\nimport { discoverLocalRefs, getComponentAtNodeIndex, getDirectivesAtNodeIndex, getLContext } from '../context_discovery';\nimport { NodeInjector } from '../di';\nimport { CLEANUP, CONTEXT, FLAGS, HOST, TVIEW } from '../interfaces/view';\nimport { renderStringify } from './misc_utils';\nimport { getLViewParent, getRootContext } from './view_traversal_utils';\nimport { unwrapRNode } from './view_utils';\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport function getComponent(element) {\n    var context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return context.component;\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport function getContext(element) {\n    var context = loadLContextFromNode(element);\n    return context.lView[CONTEXT];\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * @param element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @publicApi\n */\nexport function getViewComponent(element) {\n    var context = loadLContext(element);\n    var lView = context.lView;\n    var parent;\n    ngDevMode && assertLView(lView);\n    while (lView[HOST] === null && (parent = getLViewParent(lView))) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = parent;\n    }\n    return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getRootComponents(target) {\n    return tslib_1.__spread(getRootContext(target).components);\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getInjector(target) {\n    var context = loadLContext(target);\n    var tNode = context.lView[TVIEW].data[context.nodeIndex];\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n * @publicApi\n */\nexport function getInjectionTokens(element) {\n    var context = loadLContext(element, false);\n    if (!context)\n        return [];\n    var lView = context.lView;\n    var tView = lView[TVIEW];\n    var tNode = tView.data[context.nodeIndex];\n    var providerTokens = [];\n    var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    var endIndex = tNode.directiveEnd;\n    for (var i = startIndex; i < endIndex; i++) {\n        var value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getDirectives(target) {\n    var context = loadLContext(target);\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\nexport function loadLContext(target, throwOnNotFound) {\n    if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n    var context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? \"Unable to find context associated with \" + renderStringify(target) :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getLocalRefs(target) {\n    var context = loadLContext(target);\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param directive Component or Directive for which the host element should be retrieved.\n *\n * @publicApi\n */\nexport function getHostElement(directive) {\n    return getLContext(directive).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component) {\n    var hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\nexport function loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return loadLContext(node);\n}\nexport function isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @publicApi\n */\nexport function getListeners(element) {\n    var lContext = loadLContextFromNode(element);\n    var lView = lContext.lView;\n    var tView = lView[TVIEW];\n    var lCleanup = lView[CLEANUP];\n    var tCleanup = tView.cleanup;\n    var listeners = [];\n    if (tCleanup && lCleanup) {\n        for (var i = 0; i < tCleanup.length;) {\n            var firstParam = tCleanup[i++];\n            var secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                var name_1 = firstParam;\n                var listenerElement = unwrapRNode(lView[secondParam]);\n                var callback = lCleanup[tCleanup[i++]];\n                var useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                var useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType } from './assert';\nimport { getComponentDef } from './definition';\nimport { diPublicInInjector, getOrCreateNodeInjectorForNode } from './di';\nimport { registerPostOrderHooks, registerPreOrderHooks } from './hooks';\nimport { CLEAN_PROMISE, addToViewTree, createLView, createNodeAtIndex, createTView, getOrCreateTView, initNodeFlags, instantiateRootComponent, invokeHostBindingsInCreationMode, locateHostElement, queueComponentIndexForCheck, refreshDescendantViews } from './instructions/shared';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, FLAGS, HEADER_OFFSET, HOST, RENDERER, TVIEW } from './interfaces/view';\nimport { applyOnCreateInstructions } from './node_util';\nimport { enterView, getPreviousOrParentTNode, leaveView, resetComponentState } from './state';\nimport { renderInitialClasses, renderInitialStyles } from './styling/class_and_style_bindings';\nimport { publishDefaultGlobalUtils } from './util/global_utils';\nimport { defaultScheduler, renderStringify } from './util/misc_utils';\nimport { getRootContext } from './util/view_traversal_utils';\nimport { readPatchedLView, resetPreOrderHookFlags } from './util/view_utils';\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport var NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + renderStringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    var sanitizer = opts.sanitizer || null;\n    var componentDef = getComponentDef(componentType);\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    var componentTag = componentDef.selectors[0][0];\n    var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    var rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n        16 /* CheckAlways */ | 512 /* IsRoot */;\n    var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    var rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n    var oldView = enterView(rootView, null);\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        addToViewTree(rootView, componentView);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~4 /* CreationMode */;\n        resetPreOrderHookFlags(rootView);\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    var tView = rootView[TVIEW];\n    var tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    var componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    var tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    var component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    if (componentDef.contentQueries) {\n        componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n    }\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        var expando = tView.expandoInstructions;\n        invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n        rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n    }\n    if (rootTNode.stylingTemplate) {\n        var native = componentView[HOST];\n        renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n    }\n    return component;\n}\nexport function createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component, def) {\n    var rootTView = readPatchedLView(component)[TVIEW];\n    var dirIndex = rootTView.data.length - 1;\n    registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector_compatibility';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { assertDefined } from '../util/assert';\nimport { VERSION } from '../version';\nimport { NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR } from '../view/provider';\nimport { assertComponentType } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { NodeInjector } from './di';\nimport { addToViewTree, assignTViewNodeToLView, createLView, createTView, elementCreate, locateHostElement, refreshDescendantViews } from './instructions/shared';\nimport { domRendererFactory3, isProceduralRenderer } from './interfaces/renderer';\nimport { TVIEW } from './interfaces/view';\nimport { enterView, leaveView } from './state';\nimport { defaultScheduler } from './util/misc_utils';\nimport { getTNode } from './util/view_utils';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    function ComponentFactoryResolver(ngModule) {\n        var _this = _super.call(this) || this;\n        _this.ngModule = ngModule;\n        return _this;\n    }\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n        ngDevMode && assertComponentType(component);\n        var componentDef = getComponentDef(component);\n        return new ComponentFactory(componentDef, this.ngModule);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\nfunction toRefArray(map) {\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () { return defaultScheduler; },\n});\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: function (token, notFoundValue, flags) {\n            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        }\n    };\n}\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nvar ComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    function ComponentFactory(componentDef, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.ngModule = ngModule;\n        _this.componentType = componentDef.type;\n        _this.selector = componentDef.selectors[0][0];\n        // The component definition does not include the wildcard ('*') selector in its list.\n        // It is implicitly expected as the first item in the projectable nodes array.\n        _this.ngContentSelectors =\n            componentDef.ngContentSelectors ? tslib_1.__spread(['*'], componentDef.ngContentSelectors) : [];\n        _this.isBoundToModule = !!ngModule;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n        var sanitizer = rootViewInjector.get(Sanitizer, null);\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        var oldLView = enterView(rootLView, null);\n        var component;\n        var tElementNode;\n        try {\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = getTNode(0, rootLView);\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n        }\n        var componentRef = new ComponentRef(this.componentType, component, createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode.child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\nexport { ComponentFactory };\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nvar ComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this._rootLView = _rootLView;\n        _this._tNode = _tNode;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n        _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        _this.componentType = componentType;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef.prototype, \"injector\", {\n        get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentRef.prototype.destroy = function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n        !this.hostView.destroyed && this.hostView.destroy();\n    };\n    ComponentRef.prototype.onDestroy = function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\nexport { ComponentRef };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DECLARATION_VIEW, T_HOST } from './interfaces/view';\nimport { getParentInjectorViewOffset } from './util/injector_utils';\nexport function applyOnCreateInstructions(tNode) {\n    // there may be some instructions that need to run in a specific\n    // order because the CREATE block in a directive runs before the\n    // CREATE block in a template. To work around this instructions\n    // can get access to the function array below and defer any code\n    // to run after the element is created.\n    var fns;\n    if (fns = tNode.onElementCreationFns) {\n        for (var i = 0; i < fns.length; i++) {\n            fns[i]();\n        }\n        tNode.onElementCreationFns = null;\n    }\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @param startTNode The TNode instance of the starting element\n * @returns The TNode of the parent injector\n */\nexport function getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        var injectorIndex = startTNode.parent.injectorIndex;\n        var parentTNode_1 = startTNode.parent;\n        while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n            parentTNode_1 = parentTNode_1.parent;\n        }\n        return parentTNode_1;\n    }\n    var viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    var parentView = startView;\n    var parentTNode = startView[T_HOST];\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = parentView[DECLARATION_VIEW];\n        parentTNode = parentView[T_HOST];\n        viewOffset--;\n    }\n    return parentTNode;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV91dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9ub2RlX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFDLGdCQUFnQixFQUFTLE1BQU0sRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRWxFLE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxLQUFZO0lBQ3BELGdFQUFnRTtJQUNoRSxnRUFBZ0U7SUFDaEUsK0RBQStEO0lBQy9ELGdFQUFnRTtJQUNoRSx1Q0FBdUM7SUFDdkMsSUFBSSxHQUFvQixDQUFDO0lBQ3pCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsRUFBRTtRQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNWO1FBQ0QsS0FBSyxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztLQUNuQztBQUNILENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FDbEMsUUFBa0MsRUFBRSxTQUFnQixFQUFFLFVBQWlCO0lBRXpFLElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUMvRCxtQkFBbUI7UUFDbkIsSUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDdEQsSUFBSSxhQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNwQyxPQUFPLGFBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLGFBQWEsSUFBSSxhQUFXLENBQUMsYUFBYSxFQUFFO1lBQy9FLGFBQVcsR0FBRyxhQUFXLENBQUMsTUFBTSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxhQUFXLENBQUM7S0FDcEI7SUFDRCxJQUFJLFVBQVUsR0FBRywyQkFBMkIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxtQkFBbUI7SUFDbkIsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQzNCLElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQWlCLENBQUM7SUFDcEQsK0JBQStCO0lBQy9CLE9BQU8sVUFBVSxHQUFHLENBQUMsRUFBRTtRQUNyQixVQUFVLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFHLENBQUM7UUFDNUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQWlCLENBQUM7UUFDakQsVUFBVSxFQUFFLENBQUM7S0FDZDtJQUNELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7UmVsYXRpdmVJbmplY3RvckxvY2F0aW9ufSBmcm9tICcuL2ludGVyZmFjZXMvaW5qZWN0b3InO1xuaW1wb3J0IHtUQ29udGFpbmVyTm9kZSwgVEVsZW1lbnROb2RlLCBUTm9kZX0gZnJvbSAnLi9pbnRlcmZhY2VzL25vZGUnO1xuaW1wb3J0IHtERUNMQVJBVElPTl9WSUVXLCBMVmlldywgVF9IT1NUfSBmcm9tICcuL2ludGVyZmFjZXMvdmlldyc7XG5pbXBvcnQge2dldFBhcmVudEluamVjdG9yVmlld09mZnNldH0gZnJvbSAnLi91dGlsL2luamVjdG9yX3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5T25DcmVhdGVJbnN0cnVjdGlvbnModE5vZGU6IFROb2RlKSB7XG4gIC8vIHRoZXJlIG1heSBiZSBzb21lIGluc3RydWN0aW9ucyB0aGF0IG5lZWQgdG8gcnVuIGluIGEgc3BlY2lmaWNcbiAgLy8gb3JkZXIgYmVjYXVzZSB0aGUgQ1JFQVRFIGJsb2NrIGluIGEgZGlyZWN0aXZlIHJ1bnMgYmVmb3JlIHRoZVxuICAvLyBDUkVBVEUgYmxvY2sgaW4gYSB0ZW1wbGF0ZS4gVG8gd29yayBhcm91bmQgdGhpcyBpbnN0cnVjdGlvbnNcbiAgLy8gY2FuIGdldCBhY2Nlc3MgdG8gdGhlIGZ1bmN0aW9uIGFycmF5IGJlbG93IGFuZCBkZWZlciBhbnkgY29kZVxuICAvLyB0byBydW4gYWZ0ZXIgdGhlIGVsZW1lbnQgaXMgY3JlYXRlZC5cbiAgbGV0IGZuczogRnVuY3Rpb25bXXxudWxsO1xuICBpZiAoZm5zID0gdE5vZGUub25FbGVtZW50Q3JlYXRpb25GbnMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgICAgZm5zW2ldKCk7XG4gICAgfVxuICAgIHROb2RlLm9uRWxlbWVudENyZWF0aW9uRm5zID0gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFVud3JhcHMgYSBwYXJlbnQgaW5qZWN0b3IgbG9jYXRpb24gbnVtYmVyIHRvIGZpbmQgdGhlIHZpZXcgb2Zmc2V0IGZyb20gdGhlIGN1cnJlbnQgaW5qZWN0b3IsXG4gKiB0aGVuIHdhbGtzIHVwIHRoZSBkZWNsYXJhdGlvbiB2aWV3IHRyZWUgdW50aWwgdGhlIFROb2RlIG9mIHRoZSBwYXJlbnQgaW5qZWN0b3IgaXMgZm91bmQuXG4gKlxuICogQHBhcmFtIGxvY2F0aW9uIFRoZSBsb2NhdGlvbiBvZiB0aGUgcGFyZW50IGluamVjdG9yLCB3aGljaCBjb250YWlucyB0aGUgdmlldyBvZmZzZXRcbiAqIEBwYXJhbSBzdGFydFZpZXcgVGhlIExWaWV3IGluc3RhbmNlIGZyb20gd2hpY2ggdG8gc3RhcnQgd2Fsa2luZyB1cCB0aGUgdmlldyB0cmVlXG4gKiBAcGFyYW0gc3RhcnRUTm9kZSBUaGUgVE5vZGUgaW5zdGFuY2Ugb2YgdGhlIHN0YXJ0aW5nIGVsZW1lbnRcbiAqIEByZXR1cm5zIFRoZSBUTm9kZSBvZiB0aGUgcGFyZW50IGluamVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnRJbmplY3RvclROb2RlKFxuICAgIGxvY2F0aW9uOiBSZWxhdGl2ZUluamVjdG9yTG9jYXRpb24sIHN0YXJ0VmlldzogTFZpZXcsIHN0YXJ0VE5vZGU6IFROb2RlKTogVEVsZW1lbnROb2RlfFxuICAgIFRDb250YWluZXJOb2RlfG51bGwge1xuICBpZiAoc3RhcnRUTm9kZS5wYXJlbnQgJiYgc3RhcnRUTm9kZS5wYXJlbnQuaW5qZWN0b3JJbmRleCAhPT0gLTEpIHtcbiAgICAvLyB2aWV3IG9mZnNldCBpcyAwXG4gICAgY29uc3QgaW5qZWN0b3JJbmRleCA9IHN0YXJ0VE5vZGUucGFyZW50LmluamVjdG9ySW5kZXg7XG4gICAgbGV0IHBhcmVudFROb2RlID0gc3RhcnRUTm9kZS5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudFROb2RlLnBhcmVudCAhPSBudWxsICYmIGluamVjdG9ySW5kZXggPT0gcGFyZW50VE5vZGUuaW5qZWN0b3JJbmRleCkge1xuICAgICAgcGFyZW50VE5vZGUgPSBwYXJlbnRUTm9kZS5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRUTm9kZTtcbiAgfVxuICBsZXQgdmlld09mZnNldCA9IGdldFBhcmVudEluamVjdG9yVmlld09mZnNldChsb2NhdGlvbik7XG4gIC8vIHZpZXcgb2Zmc2V0IGlzIDFcbiAgbGV0IHBhcmVudFZpZXcgPSBzdGFydFZpZXc7XG4gIGxldCBwYXJlbnRUTm9kZSA9IHN0YXJ0Vmlld1tUX0hPU1RdIGFzIFRFbGVtZW50Tm9kZTtcbiAgLy8gdmlldyBvZmZzZXQgaXMgc3VwZXJpb3IgdG8gMVxuICB3aGlsZSAodmlld09mZnNldCA+IDEpIHtcbiAgICBwYXJlbnRWaWV3ID0gcGFyZW50Vmlld1tERUNMQVJBVElPTl9WSUVXXSAhO1xuICAgIHBhcmVudFROb2RlID0gcGFyZW50Vmlld1tUX0hPU1RdIGFzIFRFbGVtZW50Tm9kZTtcbiAgICB2aWV3T2Zmc2V0LS07XG4gIH1cbiAgcmV0dXJuIHBhcmVudFROb2RlO1xufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { INJECTOR, Injector } from '../di/injector';\nimport { InjectFlags } from '../di/interface/injector';\nimport { createInjector } from '../di/r3_injector';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined } from '../util/assert';\nimport { stringify } from '../util/stringify';\nimport { ComponentFactoryResolver } from './component_ref';\nimport { getNgModuleDef } from './definition';\nimport { maybeUnwrapFn } from './util/misc_utils';\nvar COMPONENT_FACTORY_RESOLVER = {\n    provide: viewEngine_ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver,\n    deps: [viewEngine_NgModuleRef],\n};\nvar NgModuleRef = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleRef, _super);\n    function NgModuleRef(ngModuleType, _parent) {\n        var _this = _super.call(this) || this;\n        _this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.injector = _this;\n        _this.destroyCbs = [];\n        var ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n        var additionalProviders = [\n            {\n                provide: viewEngine_NgModuleRef,\n                useValue: _this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        _this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType));\n        _this.instance = _this.get(ngModuleType);\n        return _this;\n    }\n    NgModuleRef.prototype.get = function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }\n        if (token === Injector || token === viewEngine_NgModuleRef || token === INJECTOR) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    };\n    Object.defineProperty(NgModuleRef.prototype, \"componentFactoryResolver\", {\n        get: function () {\n            return this.get(viewEngine_ComponentFactoryResolver);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgModuleRef.prototype.destroy = function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        var injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        this.destroyCbs.forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    NgModuleRef.prototype.onDestroy = function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    };\n    return NgModuleRef;\n}(viewEngine_NgModuleRef));\nexport { NgModuleRef };\nvar NgModuleFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    NgModuleFactory.prototype.create = function (parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(viewEngine_NgModuleFactory));\nexport { NgModuleFactory };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfbW9kdWxlX3JlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvbmdfbW9kdWxlX3JlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFckQsT0FBTyxFQUFhLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRTdELE9BQU8sRUFBQyx3QkFBd0IsSUFBSSxtQ0FBbUMsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ3JILE9BQU8sRUFBc0IsZUFBZSxJQUFJLDBCQUEwQixFQUFFLFdBQVcsSUFBSSxzQkFBc0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRXRKLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUM1QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFJaEQsSUFBTSwwQkFBMEIsR0FBbUI7SUFDakQsT0FBTyxFQUFFLG1DQUFtQztJQUM1QyxRQUFRLEVBQUUsd0JBQXdCO0lBQ2xDLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDO0NBQy9CLENBQUM7QUFFRjtJQUFvQyx1Q0FBeUI7SUFTM0QscUJBQVksWUFBcUIsRUFBUyxPQUFzQjtRQUFoRSxZQUNFLGlCQUFPLFNBaUJSO1FBbEJ5QyxhQUFPLEdBQVAsT0FBTyxDQUFlO1FBUmhFLDREQUE0RDtRQUM1RCwwQkFBb0IsR0FBZ0IsRUFBRSxDQUFDO1FBR3ZDLGNBQVEsR0FBYSxLQUFJLENBQUM7UUFFMUIsZ0JBQVUsR0FBd0IsRUFBRSxDQUFDO1FBSW5DLElBQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxTQUFTLElBQUksYUFBYSxDQUNULFdBQVcsRUFDWCxlQUFhLFNBQVMsQ0FBQyxZQUFZLENBQUMsMENBQXVDLENBQUMsQ0FBQztRQUU5RixLQUFJLENBQUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDLFdBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFNLG1CQUFtQixHQUFxQjtZQUM1QztnQkFDRSxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixRQUFRLEVBQUUsS0FBSTthQUNmO1lBQ0QsMEJBQTBCO1NBQzNCLENBQUM7UUFDRixLQUFJLENBQUMsV0FBVyxHQUFHLGNBQWMsQ0FDN0IsWUFBWSxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQWUsQ0FBQztRQUN2RixLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7O0lBQ3pDLENBQUM7SUFFRCx5QkFBRyxHQUFILFVBQUksS0FBVSxFQUFFLGFBQWdELEVBQzVELFdBQThDO1FBRGxDLDhCQUFBLEVBQUEsZ0JBQXFCLFFBQVEsQ0FBQyxrQkFBa0I7UUFDNUQsNEJBQUEsRUFBQSxjQUEyQixXQUFXLENBQUMsT0FBTztRQUNoRCxJQUFJLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLHNCQUFzQixJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDaEYsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsc0JBQUksaURBQXdCO2FBQTVCO1lBQ0UsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFDdkQsQ0FBQzs7O09BQUE7SUFFRCw2QkFBTyxHQUFQO1FBQ0UsU0FBUyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFDMUUsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxVQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxFQUFFLEVBQUosQ0FBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUNELCtCQUFTLEdBQVQsVUFBVSxRQUFvQjtRQUM1QixTQUFTLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsVUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBcERELENBQW9DLHNCQUFzQixHQW9EekQ7O0FBRUQ7SUFBd0MsMkNBQTZCO0lBQ25FLHlCQUFtQixVQUFtQjtRQUF0QyxZQUEwQyxpQkFBTyxTQUFHO1FBQWpDLGdCQUFVLEdBQVYsVUFBVSxDQUFTOztJQUFhLENBQUM7SUFFcEQsZ0NBQU0sR0FBTixVQUFPLGNBQTZCO1FBQ2xDLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBTkQsQ0FBd0MsMEJBQTBCLEdBTWpFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0lOSkVDVE9SLCBJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtJbmplY3RGbGFnc30gZnJvbSAnLi4vZGkvaW50ZXJmYWNlL2luamVjdG9yJztcbmltcG9ydCB7U3RhdGljUHJvdmlkZXJ9IGZyb20gJy4uL2RpL2ludGVyZmFjZS9wcm92aWRlcic7XG5pbXBvcnQge1IzSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yfSBmcm9tICcuLi9kaS9yM19pbmplY3Rvcic7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGFzIHZpZXdFbmdpbmVfQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyfSBmcm9tICcuLi9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnlfcmVzb2x2ZXInO1xuaW1wb3J0IHtJbnRlcm5hbE5nTW9kdWxlUmVmLCBOZ01vZHVsZUZhY3RvcnkgYXMgdmlld0VuZ2luZV9OZ01vZHVsZUZhY3RvcnksIE5nTW9kdWxlUmVmIGFzIHZpZXdFbmdpbmVfTmdNb2R1bGVSZWZ9IGZyb20gJy4uL2xpbmtlci9uZ19tb2R1bGVfZmFjdG9yeSc7XG5pbXBvcnQge05nTW9kdWxlRGVmfSBmcm9tICcuLi9tZXRhZGF0YS9uZ19tb2R1bGUnO1xuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnLi4vdXRpbC9zdHJpbmdpZnknO1xuaW1wb3J0IHtDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJ9IGZyb20gJy4vY29tcG9uZW50X3JlZic7XG5pbXBvcnQge2dldE5nTW9kdWxlRGVmfSBmcm9tICcuL2RlZmluaXRpb24nO1xuaW1wb3J0IHttYXliZVVud3JhcEZufSBmcm9tICcuL3V0aWwvbWlzY191dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmdNb2R1bGVUeXBlPFQgPSBhbnk+IGV4dGVuZHMgVHlwZTxUPiB7IG5nTW9kdWxlRGVmOiBOZ01vZHVsZURlZjxUPjsgfVxuXG5jb25zdCBDT01QT05FTlRfRkFDVE9SWV9SRVNPTFZFUjogU3RhdGljUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IHZpZXdFbmdpbmVfQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICB1c2VDbGFzczogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBkZXBzOiBbdmlld0VuZ2luZV9OZ01vZHVsZVJlZl0sXG59O1xuXG5leHBvcnQgY2xhc3MgTmdNb2R1bGVSZWY8VD4gZXh0ZW5kcyB2aWV3RW5naW5lX05nTW9kdWxlUmVmPFQ+IGltcGxlbWVudHMgSW50ZXJuYWxOZ01vZHVsZVJlZjxUPiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpyZXF1aXJlLWludGVybmFsLXdpdGgtdW5kZXJzY29yZVxuICBfYm9vdHN0cmFwQ29tcG9uZW50czogVHlwZTxhbnk+W10gPSBbXTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnJlcXVpcmUtaW50ZXJuYWwtd2l0aC11bmRlcnNjb3JlXG4gIF9yM0luamVjdG9yOiBSM0luamVjdG9yO1xuICBpbmplY3RvcjogSW5qZWN0b3IgPSB0aGlzO1xuICBpbnN0YW5jZTogVDtcbiAgZGVzdHJveUNiczogKCgpID0+IHZvaWQpW118bnVsbCA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKG5nTW9kdWxlVHlwZTogVHlwZTxUPiwgcHVibGljIF9wYXJlbnQ6IEluamVjdG9yfG51bGwpIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobmdNb2R1bGVUeXBlKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChcbiAgICAgICAgICAgICAgICAgICAgIG5nTW9kdWxlRGVmLFxuICAgICAgICAgICAgICAgICAgICAgYE5nTW9kdWxlICcke3N0cmluZ2lmeShuZ01vZHVsZVR5cGUpfScgaXMgbm90IGEgc3VidHlwZSBvZiAnTmdNb2R1bGVUeXBlJy5gKTtcblxuICAgIHRoaXMuX2Jvb3RzdHJhcENvbXBvbmVudHMgPSBtYXliZVVud3JhcEZuKG5nTW9kdWxlRGVmICEuYm9vdHN0cmFwKTtcbiAgICBjb25zdCBhZGRpdGlvbmFsUHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICAgICAge1xuICAgICAgICBwcm92aWRlOiB2aWV3RW5naW5lX05nTW9kdWxlUmVmLFxuICAgICAgICB1c2VWYWx1ZTogdGhpcyxcbiAgICAgIH0sXG4gICAgICBDT01QT05FTlRfRkFDVE9SWV9SRVNPTFZFUlxuICAgIF07XG4gICAgdGhpcy5fcjNJbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKFxuICAgICAgICBuZ01vZHVsZVR5cGUsIF9wYXJlbnQsIGFkZGl0aW9uYWxQcm92aWRlcnMsIHN0cmluZ2lmeShuZ01vZHVsZVR5cGUpKSBhcyBSM0luamVjdG9yO1xuICAgIHRoaXMuaW5zdGFuY2UgPSB0aGlzLmdldChuZ01vZHVsZVR5cGUpO1xuICB9XG5cbiAgZ2V0KHRva2VuOiBhbnksIG5vdEZvdW5kVmFsdWU6IGFueSA9IEluamVjdG9yLlRIUk9XX0lGX05PVF9GT1VORCxcbiAgICAgIGluamVjdEZsYWdzOiBJbmplY3RGbGFncyA9IEluamVjdEZsYWdzLkRlZmF1bHQpOiBhbnkge1xuICAgIGlmICh0b2tlbiA9PT0gSW5qZWN0b3IgfHwgdG9rZW4gPT09IHZpZXdFbmdpbmVfTmdNb2R1bGVSZWYgfHwgdG9rZW4gPT09IElOSkVDVE9SKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3IzSW5qZWN0b3IuZ2V0KHRva2VuLCBub3RGb3VuZFZhbHVlLCBpbmplY3RGbGFncyk7XG4gIH1cblxuICBnZXQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk6IHZpZXdFbmdpbmVfQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXQodmlld0VuZ2luZV9Db21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xuICB9XG5cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZCh0aGlzLmRlc3Ryb3lDYnMsICdOZ01vZHVsZSBhbHJlYWR5IGRlc3Ryb3llZCcpO1xuICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5fcjNJbmplY3RvcjtcbiAgICAhaW5qZWN0b3IuZGVzdHJveWVkICYmIGluamVjdG9yLmRlc3Ryb3koKTtcbiAgICB0aGlzLmRlc3Ryb3lDYnMgIS5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgIHRoaXMuZGVzdHJveUNicyA9IG51bGw7XG4gIH1cbiAgb25EZXN0cm95KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodGhpcy5kZXN0cm95Q2JzLCAnTmdNb2R1bGUgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICB0aGlzLmRlc3Ryb3lDYnMgIS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmdNb2R1bGVGYWN0b3J5PFQ+IGV4dGVuZHMgdmlld0VuZ2luZV9OZ01vZHVsZUZhY3Rvcnk8VD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbW9kdWxlVHlwZTogVHlwZTxUPikgeyBzdXBlcigpOyB9XG5cbiAgY3JlYXRlKHBhcmVudEluamVjdG9yOiBJbmplY3RvcnxudWxsKTogdmlld0VuZ2luZV9OZ01vZHVsZVJlZjxUPiB7XG4gICAgcmV0dXJuIG5ldyBOZ01vZHVsZVJlZih0aGlzLm1vZHVsZVR5cGUsIHBhcmVudEluamVjdG9yKTtcbiAgfVxufVxuIl19","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var PLATFORM_BROWSER_ID = 'browser';\nexport var PLATFORM_SERVER_ID = 'server';\nexport var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1faWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL3BsYXRmb3JtX2lkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztBQUM3QyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFDM0MsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsa0JBQWtCLENBQUM7QUFDekQsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsaUJBQWlCLENBQUM7QUFFdkQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFVBQWtCO0lBQ2xELE9BQU8sVUFBVSxLQUFLLG1CQUFtQixDQUFDO0FBQzVDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsVUFBa0I7SUFDakQsT0FBTyxVQUFVLEtBQUssa0JBQWtCLENBQUM7QUFDM0MsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxVQUFrQjtJQUNwRCxPQUFPLFVBQVUsS0FBSyxzQkFBc0IsQ0FBQztBQUMvQyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFVBQWtCO0lBQ25ELE9BQU8sVUFBVSxLQUFLLHFCQUFxQixDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBjb25zdCBQTEFURk9STV9CUk9XU0VSX0lEID0gJ2Jyb3dzZXInO1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX1NFUlZFUl9JRCA9ICdzZXJ2ZXInO1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX1dPUktFUl9BUFBfSUQgPSAnYnJvd3NlcldvcmtlckFwcCc7XG5leHBvcnQgY29uc3QgUExBVEZPUk1fV09SS0VSX1VJX0lEID0gJ2Jyb3dzZXJXb3JrZXJVaSc7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIGJyb3dzZXIgcGxhdGZvcm0uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkOiBPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBsYXRmb3JtSWQgPT09IFBMQVRGT1JNX0JST1dTRVJfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHNlcnZlciBwbGF0Zm9ybS5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhdGZvcm1TZXJ2ZXIocGxhdGZvcm1JZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHJldHVybiBwbGF0Zm9ybUlkID09PSBQTEFURk9STV9TRVJWRVJfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHdlYiB3b3JrZXIgYXBwIHBsYXRmb3JtLlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQbGF0Zm9ybVdvcmtlckFwcChwbGF0Zm9ybUlkOiBPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIHBsYXRmb3JtSWQgPT09IFBMQVRGT1JNX1dPUktFUl9BUFBfSUQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgcGxhdGZvcm0gaWQgcmVwcmVzZW50cyBhIHdlYiB3b3JrZXIgVUkgcGxhdGZvcm0uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYXRmb3JtV29ya2VyVWkocGxhdGZvcm1JZDogT2JqZWN0KTogYm9vbGVhbiB7XG4gIHJldHVybiBwbGF0Zm9ybUlkID09PSBQTEFURk9STV9XT1JLRVJfVUlfSUQ7XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * @publicApi\n */\nvar PlatformLocation = /** @class */ (function () {\n    function PlatformLocation() {\n    }\n    return PlatformLocation;\n}());\nexport { PlatformLocation };\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1fbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL2xvY2F0aW9uL3BsYXRmb3JtX2xvY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNIO0lBQUE7SUFnQkEsQ0FBQztJQUFELHVCQUFDO0FBQUQsQ0FBQyxBQWhCRCxJQWdCQzs7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFlLHNCQUFzQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBhbiBhcHBsaWNhdGlvbiBkZXZlbG9wZXIuIEluc3RlYWQsIHVzZVxuICoge0BsaW5rIExvY2F0aW9ufS5cbiAqXG4gKiBgUGxhdGZvcm1Mb2NhdGlvbmAgZW5jYXBzdWxhdGVzIGFsbCBjYWxscyB0byBET00gYXBpcywgd2hpY2ggYWxsb3dzIHRoZSBSb3V0ZXIgdG8gYmUgcGxhdGZvcm1cbiAqIGFnbm9zdGljLlxuICogVGhpcyBtZWFucyB0aGF0IHdlIGNhbiBoYXZlIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBvZiBgUGxhdGZvcm1Mb2NhdGlvbmAgZm9yIHRoZSBkaWZmZXJlbnRcbiAqIHBsYXRmb3JtcyB0aGF0IGFuZ3VsYXIgc3VwcG9ydHMuIEZvciBleGFtcGxlLCBgQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlcmAgcHJvdmlkZXMgYW5cbiAqIGltcGxlbWVudGF0aW9uIHNwZWNpZmljIHRvIHRoZSBicm93c2VyIGVudmlyb25tZW50LCB3aGlsZSBgQGFuZ3VsYXIvcGxhdGZvcm0td2Vid29ya2VyYCBwcm92aWRlc1xuICogb25lIHN1aXRhYmxlIGZvciB1c2Ugd2l0aCB3ZWIgd29ya2Vycy5cbiAqXG4gKiBUaGUgYFBsYXRmb3JtTG9jYXRpb25gIGNsYXNzIGlzIHVzZWQgZGlyZWN0bHkgYnkgYWxsIGltcGxlbWVudGF0aW9ucyBvZiB7QGxpbmsgTG9jYXRpb25TdHJhdGVneX1cbiAqIHdoZW4gdGhleSBuZWVkIHRvIGludGVyYWN0IHdpdGggdGhlIERPTSBhcGlzIGxpa2UgcHVzaFN0YXRlLCBwb3BTdGF0ZSwgZXRjLi4uXG4gKlxuICoge0BsaW5rIExvY2F0aW9uU3RyYXRlZ3l9IGluIHR1cm4gaXMgdXNlZCBieSB0aGUge0BsaW5rIExvY2F0aW9ufSBzZXJ2aWNlIHdoaWNoIGlzIHVzZWQgZGlyZWN0bHlcbiAqIGJ5IHRoZSB7QGxpbmsgUm91dGVyfSBpbiBvcmRlciB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHJvdXRlcy4gU2luY2UgYWxsIGludGVyYWN0aW9ucyBiZXR3ZWVuIHtAbGlua1xuICogUm91dGVyfSAvXG4gKiB7QGxpbmsgTG9jYXRpb259IC8ge0BsaW5rIExvY2F0aW9uU3RyYXRlZ3l9IGFuZCBET00gYXBpcyBmbG93IHRocm91Z2ggdGhlIGBQbGF0Zm9ybUxvY2F0aW9uYFxuICogY2xhc3MgdGhleSBhcmUgYWxsIHBsYXRmb3JtIGluZGVwZW5kZW50LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBsYXRmb3JtTG9jYXRpb24ge1xuICBhYnN0cmFjdCBnZXRCYXNlSHJlZkZyb21ET00oKTogc3RyaW5nO1xuICBhYnN0cmFjdCBvblBvcFN0YXRlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZDtcbiAgYWJzdHJhY3Qgb25IYXNoQ2hhbmdlKGZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZDtcblxuICBhYnN0cmFjdCBnZXQgcGF0aG5hbWUoKTogc3RyaW5nO1xuICBhYnN0cmFjdCBnZXQgc2VhcmNoKCk6IHN0cmluZztcbiAgYWJzdHJhY3QgZ2V0IGhhc2goKTogc3RyaW5nO1xuXG4gIGFic3RyYWN0IHJlcGxhY2VTdGF0ZShzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgcHVzaFN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZDtcblxuICBhYnN0cmFjdCBmb3J3YXJkKCk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgYmFjaygpOiB2b2lkO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogSW5kaWNhdGVzIHdoZW4gYSBsb2NhdGlvbiBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBMT0NBVElPTl9JTklUSUFMSVpFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQcm9taXNlPGFueT4+KCdMb2NhdGlvbiBJbml0aWFsaXplZCcpO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJpYWxpemFibGUgdmVyc2lvbiBvZiB0aGUgZXZlbnQgZnJvbSBgb25Qb3BTdGF0ZWAgb3IgYG9uSGFzaENoYW5nZWBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25DaGFuZ2VFdmVudCB7XG4gIHR5cGU6IHN0cmluZztcbiAgc3RhdGU6IGFueTtcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25DaGFuZ2VMaXN0ZW5lciB7IChldmVudDogTG9jYXRpb25DaGFuZ2VFdmVudCk6IGFueTsgfVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @publicApi\n */\nexport var DOCUMENT = new InjectionToken('DocumentToken');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tX3Rva2Vucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbW1vbi9zcmMvZG9tX3Rva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQVcsZUFBZSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEEgREkgVG9rZW4gcmVwcmVzZW50aW5nIHRoZSBtYWluIHJlbmRlcmluZyBjb250ZXh0LiBJbiBhIGJyb3dzZXIgdGhpcyBpcyB0aGUgRE9NIERvY3VtZW50LlxuICpcbiAqIE5vdGU6IERvY3VtZW50IG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgaW4gdGhlIEFwcGxpY2F0aW9uIENvbnRleHQgd2hlbiBBcHBsaWNhdGlvbiBhbmQgUmVuZGVyaW5nXG4gKiBDb250ZXh0cyBhcmUgbm90IHRoZSBzYW1lIChlLmcuIHdoZW4gcnVubmluZyB0aGUgYXBwbGljYXRpb24gaW50byBhIFdlYiBXb3JrZXIpLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IERPQ1VNRU5UID0gbmV3IEluamVjdGlvblRva2VuPERvY3VtZW50PignRG9jdW1lbnRUb2tlbicpO1xuIl19","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../../util/comparison';\nimport { stringify } from '../../util/stringify';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\nvar trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nvar DefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n        var nextIt = this._itHead;\n        var nextRemove = this._removalsHead;\n        var addRemoveOffset = 0;\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            var record = !nextRemove ||\n                nextIt &&\n                    nextIt.currentIndex <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                nextIt :\n                nextRemove;\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = nextIt._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    var localCurrentIndex = currentIndex - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.diff = function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    DefaultIterableDiffer.prototype.onDestroy = function () { };\n    DefaultIterableDiffer.prototype.check = function (collection) {\n        var _this = this;\n        this._reset();\n        var record = this._itHead;\n        var mayBeDirty = false;\n        var index;\n        var item;\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            this.length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            this.length = index;\n        }\n        this._truncate(record);\n        this.collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._truncate = function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var prev = record._prevRemoved;\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._remove = function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._unlink = function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var prev = record._prev;\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\nexport { DefaultIterableDiffer };\nvar IterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prevDup = null;\n        /** @internal */\n        this._nextDup = null;\n        /** @internal */\n        this._prevRemoved = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextMoved = null;\n        /** @internal */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\nexport { IterableChangeRecord_ };\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\nvar _DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /** @internal */\n        this._head = null;\n        /** @internal */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    _DuplicateItemRecordList.prototype.add = function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    _DuplicateItemRecordList.prototype.remove = function (record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var prev = record._prevDup;\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nvar _DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    _DuplicateMap.prototype.put = function (record) {\n        var key = record.trackById;\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n        var key = trackById;\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    _DuplicateMap.prototype.remove = function (record) {\n        var key = record.trackById;\n        var recordList = this.map.get(key);\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/interface/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    IterableDiffers.create = function (factories, parent) {\n        if (parent != null) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    IterableDiffers.extend = function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    IterableDiffers.prototype.find = function (iterable) {\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */\n    IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical } from '../../util/comparison';\nimport { stringify } from '../../util/stringify';\nimport { isJsObject } from '../change_detection_util';\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n    DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\nexport { DefaultKeyValueDifferFactory };\nvar DefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype.diff = function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    DefaultKeyValueDiffer.prototype.check = function (map) {\n        var _this = this;\n        this._reset();\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n        if (before) {\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n        if (this._records.has(key)) {\n            var record_1 = this._records.get(key);\n            this._maybeAddToChanges(record_1, value);\n            var prev = record_1._prev;\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            this._additionsTail._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            this._changesTail._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /** @internal */\n    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\nexport { DefaultKeyValueDiffer };\nvar KeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf, defineInjectable } from '../../di';\nimport { DefaultKeyValueDifferFactory } from './default_keyvalue_differ';\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nvar KeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    KeyValueDiffers.create = function (factories, parent) {\n        if (parent) {\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    KeyValueDiffers.extend = function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    KeyValueDiffers.prototype.find = function (kv) {\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    /** @nocollapse */\n    KeyValueDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n    });\n    return KeyValueDiffers;\n}());\nexport { KeyValueDiffers };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport var MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvaTE4bi90b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkc7QUFDSCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQVMsVUFBVSxDQUFDLENBQUM7QUFFaEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFTLGNBQWMsQ0FBQyxDQUFDO0FBRXZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFTLG9CQUFvQixDQUFDLENBQUM7QUFFcEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLENBQU4sSUFBWSwwQkFJWDtBQUpELFdBQVksMEJBQTBCO0lBQ3BDLDZFQUFTLENBQUE7SUFDVCxpRkFBVyxDQUFBO0lBQ1gsK0VBQVUsQ0FBQTtBQUNaLENBQUMsRUFKVywwQkFBMEIsS0FBMUIsMEJBQTBCLFFBSXJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICcuLi9kaS9pbmplY3Rpb25fdG9rZW4nO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhpcyB0b2tlbiB0byBzZXQgdGhlIGxvY2FsZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICogSXQgaXMgdXNlZCBmb3IgaTE4biBleHRyYWN0aW9uLCBieSBpMThuIHBpcGVzIChEYXRlUGlwZSwgSTE4blBsdXJhbFBpcGUsIEN1cnJlbmN5UGlwZSxcbiAqIERlY2ltYWxQaXBlIGFuZCBQZXJjZW50UGlwZSkgYW5kIGJ5IElDVSBleHByZXNzaW9ucy5cbiAqXG4gKiBTZWUgdGhlIFtpMThuIGd1aWRlXShndWlkZS9pMThuI3NldHRpbmctdXAtbG9jYWxlKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6ICdlbi1VUycgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgTE9DQUxFX0lEID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0xvY2FsZUlkJyk7XG5cbi8qKlxuICogVXNlIHRoaXMgdG9rZW4gYXQgYm9vdHN0cmFwIHRvIHByb3ZpZGUgdGhlIGNvbnRlbnQgb2YgeW91ciB0cmFuc2xhdGlvbiBmaWxlIChgeHRiYCxcbiAqIGB4bGZgIG9yIGB4bGYyYCkgd2hlbiB5b3Ugd2FudCB0byB0cmFuc2xhdGUgeW91ciBhcHBsaWNhdGlvbiBpbiBhbm90aGVyIGxhbmd1YWdlLlxuICpcbiAqIFNlZSB0aGUgW2kxOG4gZ3VpZGVdKGd1aWRlL2kxOG4jbWVyZ2UpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRSQU5TTEFUSU9OUyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiAvLyBjb250ZW50IG9mIHlvdXIgdHJhbnNsYXRpb24gZmlsZVxuICogY29uc3QgdHJhbnNsYXRpb25zID0gJy4uLi4nO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIHByb3ZpZGVyczogW3twcm92aWRlOiBUUkFOU0xBVElPTlMsIHVzZVZhbHVlOiB0cmFuc2xhdGlvbnMgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNMQVRJT05TID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1RyYW5zbGF0aW9ucycpO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhpcyB0b2tlbiBhdCBib290c3RyYXAgdG8gc2V0IHRoZSBmb3JtYXQgb2YgeW91ciB7QGxpbmsgVFJBTlNMQVRJT05TfTogYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmAuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4biNtZXJnZSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVFJBTlNMQVRJT05TX0ZPUk1BVCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSwge1xuICogICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVFJBTlNMQVRJT05TX0ZPUk1BVCwgdXNlVmFsdWU6ICd4bGYnIH1dXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFUSU9OU19GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignVHJhbnNsYXRpb25zRm9ybWF0Jyk7XG5cbi8qKlxuICogVXNlIHRoaXMgZW51bSBhdCBib290c3RyYXAgYXMgYW4gb3B0aW9uIG9mIGBib290c3RyYXBNb2R1bGVgIHRvIGRlZmluZSB0aGUgc3RyYXRlZ3lcbiAqIHRoYXQgdGhlIGNvbXBpbGVyIHNob3VsZCB1c2UgaW4gY2FzZSBvZiBtaXNzaW5nIHRyYW5zbGF0aW9uczpcbiAqIC0gRXJyb3I6IHRocm93IGlmIHlvdSBoYXZlIG1pc3NpbmcgdHJhbnNsYXRpb25zLlxuICogLSBXYXJuaW5nIChkZWZhdWx0KTogc2hvdyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgYW5kL29yIHNoZWxsLlxuICogLSBJZ25vcmU6IGRvIG5vdGhpbmcuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4biNtaXNzaW5nLXRyYW5zbGF0aW9uKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbiAqIGltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC5tb2R1bGUnO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIG1pc3NpbmdUcmFuc2xhdGlvbjogTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3kuRXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZW51bSBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneSB7XG4gIEVycm9yID0gMCxcbiAgV2FybmluZyA9IDEsXG4gIElnbm9yZSA9IDIsXG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\nvar u = undefined;\nfunction plural(n) {\n    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nexport default [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9pMThuL2xvY2FsZV9lbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCx5Q0FBeUM7QUFDekMsK0NBQStDO0FBRS9DLElBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUVwQixTQUFTLE1BQU0sQ0FBQyxDQUFTO0lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsZUFBZTtJQUNiLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RDtRQUNFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDdEYsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7UUFDOUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7S0FDM0M7SUFDRCxDQUFDO0lBQ0Q7UUFDRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQzVELENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDcEY7WUFDRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVc7WUFDckYsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVO1NBQ2xDO0tBQ0Y7SUFDRCxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQztJQUN0RCxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5RixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzlELENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTTtDQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vLyBUSElTIENPREUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIE1PRElGWVxuLy8gU2VlIGFuZ3VsYXIvdG9vbHMvZ3VscC10YXNrcy9jbGRyL2V4dHJhY3QuanNcblxuY29uc3QgdSA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gcGx1cmFsKG46IG51bWJlcik6IG51bWJlciB7XG4gIGxldCBpID0gTWF0aC5mbG9vcihNYXRoLmFicyhuKSksIHYgPSBuLnRvU3RyaW5nKCkucmVwbGFjZSgvXlteLl0qXFwuPy8sICcnKS5sZW5ndGg7XG4gIGlmIChpID09PSAxICYmIHYgPT09IDApIHJldHVybiAxO1xuICByZXR1cm4gNTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW1xuICAnZW4nLCBbWydhJywgJ3AnXSwgWydBTScsICdQTSddLCB1XSwgW1snQU0nLCAnUE0nXSwgdSwgdV0sXG4gIFtcbiAgICBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSwgWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgICBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J10sXG4gICAgWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddXG4gIF0sXG4gIHUsXG4gIFtcbiAgICBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gICAgWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgIFtcbiAgICAgICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsXG4gICAgICAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlcidcbiAgICBdXG4gIF0sXG4gIHUsIFtbJ0InLCAnQSddLCBbJ0JDJywgJ0FEJ10sIFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXSwgMCwgWzYsIDBdLFxuICBbJ00vZC95eScsICdNTU0gZCwgeScsICdNTU1NIGQsIHknLCAnRUVFRSwgTU1NTSBkLCB5J10sXG4gIFsnaDptbSBhJywgJ2g6bW06c3MgYScsICdoOm1tOnNzIGEgeicsICdoOm1tOnNzIGEgenp6eiddLCBbJ3sxfSwgezB9JywgdSwgJ3sxfSBcXCdhdFxcJyB7MH0nLCB1XSxcbiAgWycuJywgJywnLCAnOycsICclJywgJysnLCAnLScsICdFJywgJ8OXJywgJ+KAsCcsICfiiJ4nLCAnTmFOJywgJzonXSxcbiAgWycjLCMjMC4jIyMnLCAnIywjIzAlJywgJ8KkIywjIzAuMDAnLCAnI0UwJ10sICckJywgJ1VTIERvbGxhcicsIHt9LCBwbHVyYWxcbl07XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nexport var LOCALE_DATA = {};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * @publicApi\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nexport function registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[0 /* LocaleId */];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][19 /* ExtraData */] = extraData;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21tb24vc3JjL2kxOG4vbG9jYWxlX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQThCLEVBQUUsQ0FBQztBQUV6RDs7Ozs7R0FLRztBQUNILHdGQUF3RjtBQUN4RixNQUFNLFVBQVUsa0JBQWtCLENBQUMsSUFBUyxFQUFFLFFBQXVCLEVBQUUsU0FBZTtJQUNwRixJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3JCLFFBQVEsR0FBRyxJQUFJLGtCQUEwQixDQUFDO0tBQzNDO0lBRUQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXJELFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFN0IsSUFBSSxTQUFTLEVBQUU7UUFDYixXQUFXLENBQUMsUUFBUSxDQUFDLG9CQUEyQixHQUFHLFNBQVMsQ0FBQztLQUM5RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgTE9DQUxFX0RBVEE6IHtbbG9jYWxlSWQ6IHN0cmluZ106IGFueX0gPSB7fTtcblxuLyoqXG4gKiBSZWdpc3RlciBnbG9iYWwgZGF0YSB0byBiZSB1c2VkIGludGVybmFsbHkgYnkgQW5ndWxhci4gU2VlIHRoZVxuICogW1wiSTE4biBndWlkZVwiXShndWlkZS9pMThuI2kxOG4tcGlwZXMpIHRvIGtub3cgaG93IHRvIGltcG9ydCBhZGRpdGlvbmFsIGxvY2FsZSBkYXRhLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuLy8gVGhlIHNpZ25hdHVyZSByZWdpc3RlckxvY2FsZURhdGEoZGF0YTogYW55LCBleHRyYURhdGE/OiBhbnkpIGlzIGRlcHJlY2F0ZWQgc2luY2UgdjUuMVxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlRGF0YShkYXRhOiBhbnksIGxvY2FsZUlkPzogc3RyaW5nIHwgYW55LCBleHRyYURhdGE/OiBhbnkpOiB2b2lkIHtcbiAgaWYgKHR5cGVvZiBsb2NhbGVJZCAhPT0gJ3N0cmluZycpIHtcbiAgICBleHRyYURhdGEgPSBsb2NhbGVJZDtcbiAgICBsb2NhbGVJZCA9IGRhdGFbTG9jYWxlRGF0YUluZGV4LkxvY2FsZUlkXTtcbiAgfVxuXG4gIGxvY2FsZUlkID0gbG9jYWxlSWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJyk7XG5cbiAgTE9DQUxFX0RBVEFbbG9jYWxlSWRdID0gZGF0YTtcblxuICBpZiAoZXh0cmFEYXRhKSB7XG4gICAgTE9DQUxFX0RBVEFbbG9jYWxlSWRdW0xvY2FsZURhdGFJbmRleC5FeHRyYURhdGFdID0gZXh0cmFEYXRhO1xuICB9XG59XG5cbi8qKlxuICogSW5kZXggb2YgZWFjaCB0eXBlIG9mIGxvY2FsZSBkYXRhIGZyb20gdGhlIGxvY2FsZSBkYXRhIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIExvY2FsZURhdGFJbmRleCB7XG4gIExvY2FsZUlkID0gMCxcbiAgRGF5UGVyaW9kc0Zvcm1hdCxcbiAgRGF5UGVyaW9kc1N0YW5kYWxvbmUsXG4gIERheXNGb3JtYXQsXG4gIERheXNTdGFuZGFsb25lLFxuICBNb250aHNGb3JtYXQsXG4gIE1vbnRoc1N0YW5kYWxvbmUsXG4gIEVyYXMsXG4gIEZpcnN0RGF5T2ZXZWVrLFxuICBXZWVrZW5kUmFuZ2UsXG4gIERhdGVGb3JtYXQsXG4gIFRpbWVGb3JtYXQsXG4gIERhdGVUaW1lRm9ybWF0LFxuICBOdW1iZXJTeW1ib2xzLFxuICBOdW1iZXJGb3JtYXRzLFxuICBDdXJyZW5jeVN5bWJvbCxcbiAgQ3VycmVuY3lOYW1lLFxuICBDdXJyZW5jaWVzLFxuICBQbHVyYWxDYXNlLFxuICBFeHRyYURhdGFcbn1cblxuLyoqXG4gKiBJbmRleCBvZiBlYWNoIHR5cGUgb2YgbG9jYWxlIGRhdGEgZnJvbSB0aGUgZXh0cmEgbG9jYWxlIGRhdGEgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gRXh0cmFMb2NhbGVEYXRhSW5kZXgge1xuICBFeHRyYURheVBlcmlvZEZvcm1hdHMgPSAwLFxuICBFeHRyYURheVBlcmlvZFN0YW5kYWxvbmUsXG4gIEV4dHJhRGF5UGVyaW9kc1J1bGVzXG59XG5cbi8qKlxuICogSW5kZXggb2YgZWFjaCB2YWx1ZSBpbiBjdXJyZW5jeSBkYXRhICh1c2VkIHRvIGRlc2NyaWJlIENVUlJFTkNJRVNfRU4gaW4gY3VycmVuY2llcy50cylcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ3VycmVuY3lJbmRleCB7U3ltYm9sID0gMCwgU3ltYm9sTmFycm93LCBOYk9mRGlnaXRzfVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport localeEn from './locale_en';\nimport { LOCALE_DATA } from './locale_data';\nimport { CURRENCIES_EN } from './currencies';\n/**\n * Format styles that can be used to represent numbers.\n * @see `getLocaleNumberFormat()`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var NumberFormatStyle;\n(function (NumberFormatStyle) {\n    NumberFormatStyle[NumberFormatStyle[\"Decimal\"] = 0] = \"Decimal\";\n    NumberFormatStyle[NumberFormatStyle[\"Percent\"] = 1] = \"Percent\";\n    NumberFormatStyle[NumberFormatStyle[\"Currency\"] = 2] = \"Currency\";\n    NumberFormatStyle[NumberFormatStyle[\"Scientific\"] = 3] = \"Scientific\";\n})(NumberFormatStyle || (NumberFormatStyle = {}));\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see `NgPlural`\n * @see `NgPluralCase`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi */\nexport var Plural;\n(function (Plural) {\n    Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n    Plural[Plural[\"One\"] = 1] = \"One\";\n    Plural[Plural[\"Two\"] = 2] = \"Two\";\n    Plural[Plural[\"Few\"] = 3] = \"Few\";\n    Plural[Plural[\"Many\"] = 4] = \"Many\";\n    Plural[Plural[\"Other\"] = 5] = \"Other\";\n})(Plural || (Plural = {}));\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var FormStyle;\n(function (FormStyle) {\n    FormStyle[FormStyle[\"Format\"] = 0] = \"Format\";\n    FormStyle[FormStyle[\"Standalone\"] = 1] = \"Standalone\";\n})(FormStyle || (FormStyle = {}));\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nexport var TranslationWidth;\n(function (TranslationWidth) {\n    /** 1 character for `en-US`. For example: 'S' */\n    TranslationWidth[TranslationWidth[\"Narrow\"] = 0] = \"Narrow\";\n    /** 3 characters for `en-US`. For example: 'Sun' */\n    TranslationWidth[TranslationWidth[\"Abbreviated\"] = 1] = \"Abbreviated\";\n    /** Full length for `en-US`. For example: \"Sunday\" */\n    TranslationWidth[TranslationWidth[\"Wide\"] = 2] = \"Wide\";\n    /** 2 characters for `en-US`, For example: \"Su\" */\n    TranslationWidth[TranslationWidth[\"Short\"] = 3] = \"Short\";\n})(TranslationWidth || (TranslationWidth = {}));\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see `getLocaleDateFormat()`\n * @see `getLocaleTimeFormat()``\n * @see `getLocaleDateTimeFormat()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @publicApi\n */\nexport var FormatWidth;\n(function (FormatWidth) {\n    /**\n     * For `en-US`, 'M/d/yy, h:mm a'`\n     * (Example: `6/15/15, 9:03 AM`)\n     */\n    FormatWidth[FormatWidth[\"Short\"] = 0] = \"Short\";\n    /**\n     * For `en-US`, `'MMM d, y, h:mm:ss a'`\n     * (Example: `Jun 15, 2015, 9:03:01 AM`)\n     */\n    FormatWidth[FormatWidth[\"Medium\"] = 1] = \"Medium\";\n    /**\n     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n     */\n    FormatWidth[FormatWidth[\"Long\"] = 2] = \"Long\";\n    /**\n     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n     */\n    FormatWidth[FormatWidth[\"Full\"] = 3] = \"Full\";\n})(FormatWidth || (FormatWidth = {}));\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see `getLocaleNumberSymbol()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport var NumberSymbol;\n(function (NumberSymbol) {\n    /**\n     * Decimal separator.\n     * For `en-US`, the dot character.\n     * Example : 2,345`.`67\n     */\n    NumberSymbol[NumberSymbol[\"Decimal\"] = 0] = \"Decimal\";\n    /**\n     * Grouping separator, typically for thousands.\n     * For `en-US`, the comma character.\n     * Example: 2`,`345.67\n     */\n    NumberSymbol[NumberSymbol[\"Group\"] = 1] = \"Group\";\n    /**\n     * List-item separator.\n     * Example: \"one, two, and three\"\n     */\n    NumberSymbol[NumberSymbol[\"List\"] = 2] = \"List\";\n    /**\n     * Sign for percentage (out of 100).\n     * Example: 23.4%\n     */\n    NumberSymbol[NumberSymbol[\"PercentSign\"] = 3] = \"PercentSign\";\n    /**\n     * Sign for positive numbers.\n     * Example: +23\n     */\n    NumberSymbol[NumberSymbol[\"PlusSign\"] = 4] = \"PlusSign\";\n    /**\n     * Sign for negative numbers.\n     * Example: -23\n     */\n    NumberSymbol[NumberSymbol[\"MinusSign\"] = 5] = \"MinusSign\";\n    /**\n     * Computer notation for exponential value (n times a power of 10).\n     * Example: 1.2E3\n     */\n    NumberSymbol[NumberSymbol[\"Exponential\"] = 6] = \"Exponential\";\n    /**\n     * Human-readable format of exponential.\n     * Example: 1.2x103\n     */\n    NumberSymbol[NumberSymbol[\"SuperscriptingExponent\"] = 7] = \"SuperscriptingExponent\";\n    /**\n     * Sign for permille (out of 1000).\n     * Example: 23.4‰\n     */\n    NumberSymbol[NumberSymbol[\"PerMille\"] = 8] = \"PerMille\";\n    /**\n     * Infinity, can be used with plus and minus.\n     * Example: ∞, +∞, -∞\n     */\n    NumberSymbol[NumberSymbol[\"Infinity\"] = 9] = \"Infinity\";\n    /**\n     * Not a number.\n     * Example: NaN\n     */\n    NumberSymbol[NumberSymbol[\"NaN\"] = 10] = \"NaN\";\n    /**\n     * Symbol used between time units.\n     * Example: 10:52\n     */\n    NumberSymbol[NumberSymbol[\"TimeSeparator\"] = 11] = \"TimeSeparator\";\n    /**\n     * Decimal separator for currency values (fallback to `Decimal`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyDecimal\"] = 12] = \"CurrencyDecimal\";\n    /**\n     * Group separator for currency values (fallback to `Group`).\n     * Example: $2,345.67\n     */\n    NumberSymbol[NumberSymbol[\"CurrencyGroup\"] = 13] = \"CurrencyGroup\";\n})(NumberSymbol || (NumberSymbol = {}));\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nexport var WeekDay;\n(function (WeekDay) {\n    WeekDay[WeekDay[\"Sunday\"] = 0] = \"Sunday\";\n    WeekDay[WeekDay[\"Monday\"] = 1] = \"Monday\";\n    WeekDay[WeekDay[\"Tuesday\"] = 2] = \"Tuesday\";\n    WeekDay[WeekDay[\"Wednesday\"] = 3] = \"Wednesday\";\n    WeekDay[WeekDay[\"Thursday\"] = 4] = \"Thursday\";\n    WeekDay[WeekDay[\"Friday\"] = 5] = \"Friday\";\n    WeekDay[WeekDay[\"Saturday\"] = 6] = \"Saturday\";\n})(WeekDay || (WeekDay = {}));\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleId(locale) {\n    return findLocaleData(locale)[0 /* LocaleId */];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var amPmData = [data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]];\n    var amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var daysData = [data[3 /* DaysFormat */], data[4 /* DaysStandalone */]];\n    var days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    var monthsData = [data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]];\n    var months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleEraNames(locale, width) {\n    var data = findLocaleData(locale);\n    var erasData = data[7 /* Eras */];\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale) {\n    var data = findLocaleData(locale);\n    return data[8 /* FirstDayOfWeek */];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale) {\n    var data = findLocaleData(locale);\n    return data[9 /* WeekendRange */];\n}\n/**\n * Retrieves a localized date-value formating string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formating string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[10 /* DateFormat */], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    return getLastDefinedValue(data[11 /* TimeFormat */], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale, width) {\n    var data = findLocaleData(locale);\n    var dateTimeFormatData = data[12 /* DateTimeFormat */];\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see `NumberSymbol`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale, symbol) {\n    var data = findLocaleData(locale);\n    var res = data[13 /* NumberSymbols */][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see `NumberFormatStyle`\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale, type) {\n    var data = findLocaleData(locale);\n    return data[14 /* NumberFormats */][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale) {\n    var data = findLocaleData(locale);\n    return data[15 /* CurrencySymbol */] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale) {\n    var data = findLocaleData(locale);\n    return data[16 /* CurrencyName */] || null;\n}\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nfunction getLocaleCurrencies(locale) {\n    var data = findLocaleData(locale);\n    return data[17 /* Currencies */];\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocalePluralCase(locale) {\n    var data = findLocaleData(locale);\n    return data[18 /* PluralCase */];\n}\nfunction checkFullData(data) {\n    if (!data[19 /* ExtraData */]) {\n        throw new Error(\"Missing extra locale data for the locale \\\"\" + data[0 /* LocaleId */] + \"\\\". Use \\\"registerLocaleData\\\" to load new data. See the \\\"I18n guide\\\" on angular.io to know more.\");\n    }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see `getLocaleExtraDayPeriods()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var rules = data[19 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map(function (rule) {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    });\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see `getLocaleExtraDayPeriodRules()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(locale, formStyle, width) {\n    var data = findLocaleData(locale);\n    checkFullData(data);\n    var dayPeriodsData = [\n        data[19 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\n        data[19 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\n    ];\n    var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLastDefinedValue(data, index) {\n    for (var i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time) {\n    var _a = tslib_1.__read(time.split(':'), 2), h = _a[0], m = _a[1];\n    return { hours: +h, minutes: +m };\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function findLocaleData(locale) {\n    var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    var match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    var parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.0\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code, format, locale) {\n    if (locale === void 0) { locale = 'en'; }\n    var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    var symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\nvar DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code) {\n    var digits;\n    var currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, InjectionToken, LOCALE_ID, Optional } from '@angular/core';\nimport { Plural, getLocalePluralCase } from './locale_data_api';\n/**\n * @deprecated from v5\n */\nexport var DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * @publicApi\n */\nvar NgLocalization = /** @class */ (function () {\n    function NgLocalization() {\n    }\n    return NgLocalization;\n}());\nexport { NgLocalization };\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(value, cases, ngLocalization, locale) {\n    var key = \"=\" + value;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(\"No plural message found for value \\\"\" + value + \"\\\"\");\n}\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\nvar NgLocaleLocalization = /** @class */ (function (_super) {\n    tslib_1.__extends(NgLocaleLocalization, _super);\n    function NgLocaleLocalization(locale, \n    /** @deprecated from v5 */\n    deprecatedPluralFn) {\n        var _this = _super.call(this) || this;\n        _this.locale = locale;\n        _this.deprecatedPluralFn = deprecatedPluralFn;\n        return _this;\n    }\n    NgLocaleLocalization.prototype.getPluralCategory = function (value, locale) {\n        var plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    };\n    NgLocaleLocalization = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(LOCALE_ID)),\n        tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(DEPRECATED_PLURAL_FN)),\n        tslib_1.__metadata(\"design:paramtypes\", [String, Object])\n    ], NgLocaleLocalization);\nNgLocaleLocalization.ngInjectableDef = ɵngcc0.defineInjectable({ token: NgLocaleLocalization, factory: function NgLocaleLocalization_Factory(t) { return new (t || NgLocaleLocalization)(ɵngcc0.inject(LOCALE_ID), ɵngcc0.inject(DEPRECATED_PLURAL_FN, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgLocaleLocalization, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: String, decorators: [{\r\n                type: Inject,\r\n                args: [LOCALE_ID]\r\n            }] }, { type: Object, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DEPRECATED_PLURAL_FN]\r\n            }] }]; }, { getPluralCategory: [] });\n    return NgLocaleLocalization;\n}(NgLocalization));\nexport { NgLocaleLocalization };\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @publicApi\n */\nexport function getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt(nLike, 10);\n    }\n    var n = nLike;\n    var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    var i = Math.floor(Math.abs(n));\n    var v = nDecimal.length;\n    var f = parseInt(nDecimal, 10);\n    var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    var lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './directives/ng_class';\nimport * as ɵngcc2 from './directives/ng_component_outlet';\nimport * as ɵngcc3 from './directives/ng_for_of';\nimport * as ɵngcc4 from './directives/ng_if';\nimport * as ɵngcc5 from './directives/ng_template_outlet';\nimport * as ɵngcc6 from './directives/ng_style';\nimport * as ɵngcc7 from './directives/ng_switch';\nimport * as ɵngcc8 from './directives/ng_plural';\nimport * as ɵngcc9 from './pipes/async_pipe';\nimport * as ɵngcc10 from './pipes/case_conversion_pipes';\nimport * as ɵngcc11 from './pipes/json_pipe';\nimport * as ɵngcc12 from './pipes/slice_pipe';\nimport * as ɵngcc13 from './pipes/number_pipe';\nimport * as ɵngcc14 from './pipes/date_pipe';\nimport * as ɵngcc15 from './pipes/i18n_plural_pipe';\nimport * as ɵngcc16 from './pipes/i18n_select_pipe';\nimport * as ɵngcc17 from './pipes/keyvalue_pipe';\nimport * as ɵngcc18 from './pipes/deprecated/number_pipe';\nimport * as ɵngcc19 from './pipes/deprecated/date_pipe';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModule } from '@angular/core';\nimport { COMMON_DIRECTIVES } from './directives/index';\nimport { DEPRECATED_PLURAL_FN, NgLocaleLocalization, NgLocalization, getPluralCase } from './i18n/localization';\nimport { COMMON_DEPRECATED_I18N_PIPES } from './pipes/deprecated/index';\nimport { COMMON_PIPES } from './pipes/index';\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\nvar CommonModule = /** @class */ (function () {\n    function CommonModule() {\n    }\nCommonModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: CommonModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(CommonModule, { declarations: [ɵngcc1.NgClass, ɵngcc2.NgComponentOutlet, ɵngcc3.NgForOf, ɵngcc4.NgIf, ɵngcc5.NgTemplateOutlet, ɵngcc6.NgStyle, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase, ɵngcc9.AsyncPipe, ɵngcc10.UpperCasePipe, ɵngcc10.LowerCasePipe, ɵngcc11.JsonPipe, ɵngcc12.SlicePipe, ɵngcc13.DecimalPipe, ɵngcc13.PercentPipe, ɵngcc10.TitleCasePipe, ɵngcc13.CurrencyPipe, ɵngcc14.DatePipe, ɵngcc15.I18nPluralPipe, ɵngcc16.I18nSelectPipe, ɵngcc17.KeyValuePipe], exports: [ɵngcc1.NgClass, ɵngcc2.NgComponentOutlet, ɵngcc3.NgForOf, ɵngcc4.NgIf, ɵngcc5.NgTemplateOutlet, ɵngcc6.NgStyle, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase, ɵngcc9.AsyncPipe, ɵngcc10.UpperCasePipe, ɵngcc10.LowerCasePipe, ɵngcc11.JsonPipe, ɵngcc12.SlicePipe, ɵngcc13.DecimalPipe, ɵngcc13.PercentPipe, ɵngcc10.TitleCasePipe, ɵngcc13.CurrencyPipe, ɵngcc14.DatePipe, ɵngcc15.I18nPluralPipe, ɵngcc16.I18nSelectPipe, ɵngcc17.KeyValuePipe] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CommonModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\r\n                exports: [COMMON_DIRECTIVES, COMMON_PIPES],\r\n                providers: [\r\n                    { provide: NgLocalization, useClass: NgLocaleLocalization },\r\n                ]\r\n            }]\r\n    }], function () { return []; }, null);\nCommonModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function CommonModule_Factory(t) { return new (t || CommonModule)(); }, providers: [\r\n        { provide: NgLocalization, useClass: NgLocaleLocalization },\r\n    ] });\n    return CommonModule;\n}());\nexport { CommonModule };\nvar ɵ0 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * @publicApi\n */\nvar DeprecatedI18NPipesModule = /** @class */ (function () {\n    function DeprecatedI18NPipesModule() {\n    }\nDeprecatedI18NPipesModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: DeprecatedI18NPipesModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(DeprecatedI18NPipesModule, { declarations: [ɵngcc18.DeprecatedDecimalPipe, ɵngcc18.DeprecatedPercentPipe, ɵngcc18.DeprecatedCurrencyPipe, ɵngcc19.DeprecatedDatePipe], exports: [ɵngcc18.DeprecatedDecimalPipe, ɵngcc18.DeprecatedPercentPipe, ɵngcc18.DeprecatedCurrencyPipe, ɵngcc19.DeprecatedDatePipe] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DeprecatedI18NPipesModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [COMMON_DEPRECATED_I18N_PIPES],\r\n                exports: [COMMON_DEPRECATED_I18N_PIPES],\r\n                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }]\r\n            }]\r\n    }], function () { return []; }, null);\nDeprecatedI18NPipesModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function DeprecatedI18NPipesModule_Factory(t) { return new (t || DeprecatedI18NPipesModule)(); }, providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }] });\n    return DeprecatedI18NPipesModule;\n}());\nexport { DeprecatedI18NPipesModule };\nexport { ɵ0 };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb21tb24vZXNtNS9zcmMvY29tbW9uX21vZHVsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E4Qks7Ozs7Ozs7Ozs7Ozs7OztTQVNnQjs7Ozs7Ozs7Ozs7OztLQWFoQjs7Ozs7Ozs7Ozs7Nk9BTzZCIiwiZmlsZSI6ImNvbW1vbl9tb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENPTU1PTl9ESVJFQ1RJVkVTIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2luZGV4JztcbmltcG9ydCB7IERFUFJFQ0FURURfUExVUkFMX0ZOLCBOZ0xvY2FsZUxvY2FsaXphdGlvbiwgTmdMb2NhbGl6YXRpb24sIGdldFBsdXJhbENhc2UgfSBmcm9tICcuL2kxOG4vbG9jYWxpemF0aW9uJztcbmltcG9ydCB7IENPTU1PTl9ERVBSRUNBVEVEX0kxOE5fUElQRVMgfSBmcm9tICcuL3BpcGVzL2RlcHJlY2F0ZWQvaW5kZXgnO1xuaW1wb3J0IHsgQ09NTU9OX1BJUEVTIH0gZnJvbSAnLi9waXBlcy9pbmRleCc7XG4vLyBOb3RlOiBUaGlzIGRvZXMgbm90IGNvbnRhaW4gdGhlIGxvY2F0aW9uIHByb3ZpZGVycyxcbi8vIGFzIHRoZXkgbmVlZCBzb21lIHBsYXRmb3JtIHNwZWNpZmljIGltcGxlbWVudGF0aW9ucyB0byB3b3JrLlxuLyoqXG4gKiBFeHBvcnRzIGFsbCB0aGUgYmFzaWMgQW5ndWxhciBkaXJlY3RpdmVzIGFuZCBwaXBlcyxcbiAqIHN1Y2ggYXMgYE5nSWZgLCBgTmdGb3JPZmAsIGBEZWNpbWFsUGlwZWAsIGFuZCBzbyBvbi5cbiAqIFJlLWV4cG9ydGVkIGJ5IGBCcm93c2VyTW9kdWxlYCwgd2hpY2ggaXMgaW5jbHVkZWQgYXV0b21hdGljYWxseSBpbiB0aGUgcm9vdFxuICogYEFwcE1vZHVsZWAgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IGFwcCB3aXRoIHRoZSBDTEkgYG5ld2AgY29tbWFuZC5cbiAqXG4gKiAqIFRoZSBgcHJvdmlkZXJzYCBvcHRpb25zIGNvbmZpZ3VyZSB0aGUgTmdNb2R1bGUncyBpbmplY3RvciB0byBwcm92aWRlXG4gKiBsb2NhbGl6YXRpb24gZGVwZW5kZW5jaWVzIHRvIG1lbWJlcnMuXG4gKiAqIFRoZSBgZXhwb3J0c2Agb3B0aW9ucyBtYWtlIHRoZSBkZWNsYXJlZCBkaXJlY3RpdmVzIGFuZCBwaXBlcyBhdmFpbGFibGUgZm9yIGltcG9ydFxuICogYnkgb3RoZXIgTmdNb2R1bGVzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIENvbW1vbk1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21tb25Nb2R1bGUoKSB7XG4gICAgfVxuICAgIENvbW1vbk1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIE5nTW9kdWxlKHtcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW0NPTU1PTl9ESVJFQ1RJVkVTLCBDT01NT05fUElQRVNdLFxuICAgICAgICAgICAgZXhwb3J0czogW0NPTU1PTl9ESVJFQ1RJVkVTLCBDT01NT05fUElQRVNdLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBOZ0xvY2FsaXphdGlvbiwgdXNlQ2xhc3M6IE5nTG9jYWxlTG9jYWxpemF0aW9uIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgIF0sIENvbW1vbk1vZHVsZSk7XG4gICAgcmV0dXJuIENvbW1vbk1vZHVsZTtcbn0oKSk7XG5leHBvcnQgeyBDb21tb25Nb2R1bGUgfTtcbnZhciDJtTAgPSBnZXRQbHVyYWxDYXNlO1xuLyoqXG4gKiBBIG1vZHVsZSB0aGF0IGNvbnRhaW5zIHRoZSBkZXByZWNhdGVkIGkxOG4gcGlwZXMuXG4gKlxuICogQGRlcHJlY2F0ZWQgZnJvbSB2NVxuICogQHB1YmxpY0FwaVxuICovXG52YXIgRGVwcmVjYXRlZEkxOE5QaXBlc01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXByZWNhdGVkSTE4TlBpcGVzTW9kdWxlKCkge1xuICAgIH1cbiAgICBEZXByZWNhdGVkSTE4TlBpcGVzTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgTmdNb2R1bGUoe1xuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbQ09NTU9OX0RFUFJFQ0FURURfSTE4Tl9QSVBFU10sXG4gICAgICAgICAgICBleHBvcnRzOiBbQ09NTU9OX0RFUFJFQ0FURURfSTE4Tl9QSVBFU10sXG4gICAgICAgICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IERFUFJFQ0FURURfUExVUkFMX0ZOLCB1c2VWYWx1ZTogybUwIH1dLFxuICAgICAgICB9KVxuICAgIF0sIERlcHJlY2F0ZWRJMThOUGlwZXNNb2R1bGUpO1xuICAgIHJldHVybiBEZXByZWNhdGVkSTE4TlBpcGVzTW9kdWxlO1xufSgpKTtcbmV4cG9ydCB7IERlcHJlY2F0ZWRJMThOUGlwZXNNb2R1bGUgfTtcbmV4cG9ydCB7IMm1MCB9O1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nexport var APP_ID = new InjectionToken('AppId');\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: [],\n};\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb25fdG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYXBwbGljYXRpb25fdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJcEM7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFTLE9BQU8sQ0FBQyxDQUFDO0FBRTFELE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsT0FBTyxLQUFHLFdBQVcsRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLFdBQVcsRUFBSSxDQUFDO0FBQzVELENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRztJQUNwQyxPQUFPLEVBQUUsTUFBTTtJQUNmLFVBQVUsRUFBRSwyQkFBMkI7SUFDdkMsSUFBSSxFQUFTLEVBQUU7Q0FDaEIsQ0FBQztBQUVGLFNBQVMsV0FBVztJQUNsQixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFvQixzQkFBc0IsQ0FBQyxDQUFDO0FBRWxHOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBUyxhQUFhLENBQUMsQ0FBQztBQUVyRTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQy9CLElBQUksY0FBYyxDQUE4QyxzQkFBc0IsQ0FBQyxDQUFDO0FBRTVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFTLCtCQUErQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJy4vZGknO1xuaW1wb3J0IHtDb21wb25lbnRSZWZ9IGZyb20gJy4vbGlua2VyL2NvbXBvbmVudF9mYWN0b3J5JztcblxuXG4vKipcbiAqIEEgREkgVG9rZW4gcmVwcmVzZW50aW5nIGEgdW5pcXVlIHN0cmluZyBpZCBhc3NpZ25lZCB0byB0aGUgYXBwbGljYXRpb24gYnkgQW5ndWxhciBhbmQgdXNlZFxuICogcHJpbWFyaWx5IGZvciBwcmVmaXhpbmcgYXBwbGljYXRpb24gYXR0cmlidXRlcyBhbmQgQ1NTIHN0eWxlcyB3aGVuXG4gKiB7QGxpbmsgVmlld0VuY2Fwc3VsYXRpb24jRW11bGF0ZWQgVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWR9IGlzIGJlaW5nIHVzZWQuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gYXZvaWQgcmFuZG9tbHkgZ2VuZXJhdGVkIHZhbHVlIHRvIGJlIHVzZWQgYXMgYW4gYXBwbGljYXRpb24gaWQsIHlvdSBjYW4gcHJvdmlkZVxuICogYSBjdXN0b20gdmFsdWUgdmlhIGEgREkgcHJvdmlkZXIgPCEtLSBUT0RPOiBwcm92aWRlciAtLT4gY29uZmlndXJpbmcgdGhlIHJvb3Qge0BsaW5rIEluamVjdG9yfVxuICogdXNpbmcgdGhpcyB0b2tlbi5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IEFQUF9JRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdBcHBJZCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gX2FwcElkUmFuZG9tUHJvdmlkZXJGYWN0b3J5KCkge1xuICByZXR1cm4gYCR7X3JhbmRvbUNoYXIoKX0ke19yYW5kb21DaGFyKCl9JHtfcmFuZG9tQ2hhcigpfWA7XG59XG5cbi8qKlxuICogUHJvdmlkZXJzIHRoYXQgd2lsbCBnZW5lcmF0ZSBhIHJhbmRvbSBBUFBfSURfVE9LRU4uXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBUFBfSURfUkFORE9NX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBBUFBfSUQsXG4gIHVzZUZhY3Rvcnk6IF9hcHBJZFJhbmRvbVByb3ZpZGVyRmFjdG9yeSxcbiAgZGVwczogPGFueVtdPltdLFxufTtcblxuZnVuY3Rpb24gX3JhbmRvbUNoYXIoKTogc3RyaW5nIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNSkpO1xufVxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gYSBwbGF0Zm9ybSBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX0lOSVRJQUxJWkVSID0gbmV3IEluamVjdGlvblRva2VuPEFycmF5PCgpID0+IHZvaWQ+PignUGxhdGZvcm0gSW5pdGlhbGl6ZXInKTtcblxuLyoqXG4gKiBBIHRva2VuIHRoYXQgaW5kaWNhdGVzIGFuIG9wYXF1ZSBwbGF0Zm9ybSBpZC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX0lEID0gbmV3IEluamVjdGlvblRva2VuPE9iamVjdD4oJ1BsYXRmb3JtIElEJyk7XG5cbi8qKlxuICogQWxsIGNhbGxiYWNrcyBwcm92aWRlZCB2aWEgdGhpcyB0b2tlbiB3aWxsIGJlIGNhbGxlZCBmb3IgZXZlcnkgY29tcG9uZW50IHRoYXQgaXMgYm9vdHN0cmFwcGVkLlxuICogU2lnbmF0dXJlIG9mIHRoZSBjYWxsYmFjazpcbiAqXG4gKiBgKGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmKSA9PiB2b2lkYC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSID1cbiAgICBuZXcgSW5qZWN0aW9uVG9rZW48QXJyYXk8KGNvbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+KSA9PiB2b2lkPj4oJ2FwcEJvb3RzdHJhcExpc3RlbmVyJyk7XG5cbi8qKlxuICogQSB0b2tlbiB3aGljaCBpbmRpY2F0ZXMgdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoZSBhcHBsaWNhdGlvblxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3QgUEFDS0FHRV9ST09UX1VSTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdBcHBsaWNhdGlvbiBQYWNrYWdlcyBSb290IFVSTCcpO1xuIl19","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {\n    if (destination === void 0) {\n        destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    }\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n//# sourceMappingURL=share.js.map\n","import * as ɵngcc0 from './r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    ApplicationInitStatus.prototype.runInitializers = function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        var asyncInitPromises = [];\n        var complete = function () {\n            _this.done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(APP_INITIALIZER)), tslib_1.__param(0, Optional()),\n        tslib_1.__metadata(\"design:paramtypes\", [Array])\n    ], ApplicationInitStatus);\nApplicationInitStatus.ngInjectableDef = ɵngcc0.defineInjectable({ token: ApplicationInitStatus, factory: function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵngcc0.inject(APP_INITIALIZER, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(ApplicationInitStatus, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Array, decorators: [{\r\n                type: Inject,\r\n                args: [APP_INITIALIZER]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, { appInits: [], initialized: [], done: [], donePromise: [], runInitializers: [] });\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL2FwcGxpY2F0aW9uX2luaXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBeURnRCxBQUMzQjs7Ozs7Ozs7Ozs7O3lHQUdTIiwiZmlsZSI6ImFwcGxpY2F0aW9uX2luaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vc3JjL3V0aWwvbGFuZyc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJy4vZGknO1xuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIGFuIGFwcGxpY2F0aW9uIGlzIGluaXRpYWxpemVkLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHZhciBBUFBfSU5JVElBTElaRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FwcGxpY2F0aW9uIEluaXRpYWxpemVyJyk7XG4vKipcbiAqIEEgY2xhc3MgdGhhdCByZWZsZWN0cyB0aGUgc3RhdGUgb2YgcnVubmluZyB7QGxpbmsgQVBQX0lOSVRJQUxJWkVSfXMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgQXBwbGljYXRpb25Jbml0U3RhdHVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5pdFN0YXR1cyhhcHBJbml0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFwcEluaXRzID0gYXBwSW5pdHM7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9uZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmUgPSByZXM7XG4gICAgICAgICAgICBfdGhpcy5yZWplY3QgPSByZWo7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgQXBwbGljYXRpb25Jbml0U3RhdHVzLnByb3RvdHlwZS5ydW5Jbml0aWFsaXplcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFzeW5jSW5pdFByb21pc2VzID0gW107XG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5hcHBJbml0cykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFwcEluaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaXRSZXN1bHQgPSB0aGlzLmFwcEluaXRzW2ldKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShpbml0UmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICBhc3luY0luaXRQcm9taXNlcy5wdXNoKGluaXRSZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBQcm9taXNlLmFsbChhc3luY0luaXRQcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7IGNvbXBsZXRlKCk7IH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7IF90aGlzLnJlamVjdChlKTsgfSk7XG4gICAgICAgIGlmIChhc3luY0luaXRQcm9taXNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfTtcbiAgICBBcHBsaWNhdGlvbkluaXRTdGF0dXMgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoQVBQX0lOSVRJQUxJWkVSKSksIHRzbGliXzEuX19wYXJhbSgwLCBPcHRpb25hbCgpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0FycmF5XSlcbiAgICBdLCBBcHBsaWNhdGlvbkluaXRTdGF0dXMpO1xuICAgIHJldHVybiBBcHBsaWNhdGlvbkluaXRTdGF0dXM7XG59KCkpO1xuZXhwb3J0IHsgQXBwbGljYXRpb25Jbml0U3RhdHVzIH07XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util/global';\nvar trace;\nvar events;\nexport function detectWTF() {\n    var wtf = global /** TODO #9100 */['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3RmX2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9wcm9maWxlL3d0Zl9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQTRCdEMsSUFBSSxLQUFZLENBQUM7QUFDakIsSUFBSSxNQUFjLENBQUM7QUFFbkIsTUFBTSxVQUFVLFNBQVM7SUFDdkIsSUFBTSxHQUFHLEdBQVMsTUFBYSxDQUFDLGlCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFELElBQUksR0FBRyxFQUFFO1FBQ1AsS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQixJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekIsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxTQUFpQixFQUFFLEtBQWlCO0lBQWpCLHNCQUFBLEVBQUEsWUFBaUI7SUFDOUQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBSUQsTUFBTSxVQUFVLEtBQUssQ0FBSSxLQUFZLEVBQUUsV0FBaUI7SUFDdEQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckMsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsU0FBaUIsRUFBRSxNQUFjO0lBQzlELE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBWTtJQUN2QyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Z2xvYmFsfSBmcm9tICcuLi91dGlsL2dsb2JhbCc7XG5cbi8qKlxuICogQSBzY29wZSBmdW5jdGlvbiBmb3IgdGhlIFdlYiBUcmFjaW5nIEZyYW1ld29yayAoV1RGKS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV3RmU2NvcGVGbiB7IChhcmcwPzogYW55LCBhcmcxPzogYW55KTogYW55OyB9XG5cbmludGVyZmFjZSBXVEYge1xuICB0cmFjZTogVHJhY2U7XG59XG5cbmludGVyZmFjZSBUcmFjZSB7XG4gIGV2ZW50czogRXZlbnRzO1xuICBsZWF2ZVNjb3BlKHNjb3BlOiBTY29wZSwgcmV0dXJuVmFsdWU6IGFueSk6IGFueSAvKiogVE9ETyAjOTEwMCAqLztcbiAgYmVnaW5UaW1lUmFuZ2UocmFuZ2VUeXBlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nKTogUmFuZ2U7XG4gIGVuZFRpbWVSYW5nZShyYW5nZTogUmFuZ2UpOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi87XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmFuZ2Uge31cblxuaW50ZXJmYWNlIEV2ZW50cyB7XG4gIGNyZWF0ZVNjb3BlKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFnczogYW55KTogU2NvcGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcGUgeyAoLi4uYXJnczogYW55W10gLyoqIFRPRE8gIzkxMDAgKi8pOiBhbnk7IH1cblxubGV0IHRyYWNlOiBUcmFjZTtcbmxldCBldmVudHM6IEV2ZW50cztcblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdFdURigpOiBib29sZWFuIHtcbiAgY29uc3Qgd3RmOiBXVEYgPSAoZ2xvYmFsIGFzIGFueSAvKiogVE9ETyAjOTEwMCAqLylbJ3d0ZiddO1xuICBpZiAod3RmKSB7XG4gICAgdHJhY2UgPSB3dGZbJ3RyYWNlJ107XG4gICAgaWYgKHRyYWNlKSB7XG4gICAgICBldmVudHMgPSB0cmFjZVsnZXZlbnRzJ107XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2NvcGUoc2lnbmF0dXJlOiBzdHJpbmcsIGZsYWdzOiBhbnkgPSBudWxsKTogYW55IHtcbiAgcmV0dXJuIGV2ZW50cy5jcmVhdGVTY29wZShzaWduYXR1cmUsIGZsYWdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlYXZlPFQ+KHNjb3BlOiBTY29wZSk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gbGVhdmU8VD4oc2NvcGU6IFNjb3BlLCByZXR1cm5WYWx1ZT86IFQpOiBUO1xuZXhwb3J0IGZ1bmN0aW9uIGxlYXZlPFQ+KHNjb3BlOiBTY29wZSwgcmV0dXJuVmFsdWU/OiBhbnkpOiBhbnkge1xuICB0cmFjZS5sZWF2ZVNjb3BlKHNjb3BlLCByZXR1cm5WYWx1ZSk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VGltZVJhbmdlKHJhbmdlVHlwZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZyk6IFJhbmdlIHtcbiAgcmV0dXJuIHRyYWNlLmJlZ2luVGltZVJhbmdlKHJhbmdlVHlwZSwgYWN0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZFRpbWVSYW5nZShyYW5nZTogUmFuZ2UpOiB2b2lkIHtcbiAgdHJhY2UuZW5kVGltZVJhbmdlKHJhbmdlKTtcbn1cbiJdfQ==","import * as ɵngcc0 from './r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    Console.prototype.log = function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    Console.prototype.warn = function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\nConsole.ngInjectableDef = ɵngcc0.defineInjectable({ token: Console, factory: function Console_Factory(t) { return new (t || Console)(); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(Console, [{\r\n        type: Injectable\r\n    }], function () { return []; }, { log: [], warn: [] });\n    return Console;\n}());\nexport { Console };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL2NvbnNvbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW9CTTs7OzsyREFHVSIsImZpbGUiOiJjb25zb2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICcuL2RpJztcbnZhciBDb25zb2xlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnNvbGUoKSB7XG4gICAgfVxuICAgIENvbnNvbGUucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgLy8gTm90ZTogZm9yIHJlcG9ydGluZyBlcnJvcnMgdXNlIGBET00ubG9nRXJyb3IoKWAgYXMgaXQgaXMgcGxhdGZvcm0gc3BlY2lmaWNcbiAgICBDb25zb2xlLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgQ29uc29sZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKVxuICAgIF0sIENvbnNvbGUpO1xuICAgIHJldHVybiBDb25zb2xlO1xufSgpKTtcbmV4cG9ydCB7IENvbnNvbGUgfTtcbiJdfQ==","import * as ɵngcc0 from '../r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\nimport { ComponentFactory as ComponentFactoryR3 } from '../render3/component_ref';\nimport { getComponentDef, getNgModuleDef } from '../render3/definition';\nimport { NgModuleFactory as NgModuleFactoryR3 } from '../render3/ng_module_ref';\nimport { maybeUnwrapFn } from '../render3/util/misc_utils';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nvar ModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\nexport { ModuleWithComponentFactories };\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\nvar Compiler_compileModuleSync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactoryR3(moduleType);\n};\nvar Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;\nvar Compiler_compileModuleAsync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;\nvar Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n    var moduleDef = getNgModuleDef(moduleType);\n    var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n        .reduce(function (factories, declaration) {\n        var componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactoryR3(componentDef));\n        return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n};\nvar Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\nvar Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;\nexport var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nvar Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     */\n    Compiler.prototype.clearCache = function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    Compiler.prototype.clearCacheFor = function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\nCompiler.ngInjectableDef = ɵngcc0.defineInjectable({ token: Compiler, factory: function Compiler_Factory(t) { return new (t || Compiler)(); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(Compiler, [{\r\n        type: Injectable\r\n    }], function () { return []; }, { compileModuleSync: [], compileModuleAsync: [], compileModuleAndAllComponentsSync: [], compileModuleAndAllComponentsAsync: [], clearCache: [], clearCacheFor: [], getModuleId: [] });\n    return Compiler;\n}());\nexport { Compiler };\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nvar CompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\nexport { CompilerFactory };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL2xpbmtlci9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBa0NpQyxxQ0FBb0M7Ozs7O2tDQUtuQyxzQ0FBcUM7Ozs7Ozs7Ozs7Ozs7aURBYXRCLHFEQUFvRDs7Ozs7a0RBS25ELHNEQUFxRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpRkEyQ3RCOzs7OzBOQUdoRSIsImZpbGUiOiJjb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnLi4vZGkvaW5qZWN0YWJsZSc7XG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJy4uL2RpL2luamVjdGlvbl90b2tlbic7XG5pbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5IGFzIENvbXBvbmVudEZhY3RvcnlSMyB9IGZyb20gJy4uL3JlbmRlcjMvY29tcG9uZW50X3JlZic7XG5pbXBvcnQgeyBnZXRDb21wb25lbnREZWYsIGdldE5nTW9kdWxlRGVmIH0gZnJvbSAnLi4vcmVuZGVyMy9kZWZpbml0aW9uJztcbmltcG9ydCB7IE5nTW9kdWxlRmFjdG9yeSBhcyBOZ01vZHVsZUZhY3RvcnlSMyB9IGZyb20gJy4uL3JlbmRlcjMvbmdfbW9kdWxlX3JlZic7XG5pbXBvcnQgeyBtYXliZVVud3JhcEZuIH0gZnJvbSAnLi4vcmVuZGVyMy91dGlsL21pc2NfdXRpbHMnO1xuLyoqXG4gKiBDb21iaW5hdGlvbiBvZiBOZ01vZHVsZUZhY3RvcnkgYW5kIENvbXBvbmVudEZhY3RvcnlzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIE1vZHVsZVdpdGhDb21wb25lbnRGYWN0b3JpZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlV2l0aENvbXBvbmVudEZhY3RvcmllcyhuZ01vZHVsZUZhY3RvcnksIGNvbXBvbmVudEZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLm5nTW9kdWxlRmFjdG9yeSA9IG5nTW9kdWxlRmFjdG9yeTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRGYWN0b3JpZXMgPSBjb21wb25lbnRGYWN0b3JpZXM7XG4gICAgfVxuICAgIHJldHVybiBNb2R1bGVXaXRoQ29tcG9uZW50RmFjdG9yaWVzO1xufSgpKTtcbmV4cG9ydCB7IE1vZHVsZVdpdGhDb21wb25lbnRGYWN0b3JpZXMgfTtcbmZ1bmN0aW9uIF90aHJvd0Vycm9yKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJ1bnRpbWUgY29tcGlsZXIgaXMgbm90IGxvYWRlZFwiKTtcbn1cbnZhciBDb21waWxlcl9jb21waWxlTW9kdWxlU3luY19fUFJFX1IzX18gPSBfdGhyb3dFcnJvcjtcbmV4cG9ydCB2YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZVN5bmNfX1BPU1RfUjNfXyA9IGZ1bmN0aW9uIChtb2R1bGVUeXBlKSB7XG4gICAgcmV0dXJuIG5ldyBOZ01vZHVsZUZhY3RvcnlSMyhtb2R1bGVUeXBlKTtcbn07XG52YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZVN5bmMgPSBDb21waWxlcl9jb21waWxlTW9kdWxlU3luY19fUFJFX1IzX187XG52YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFzeW5jX19QUkVfUjNfXyA9IF90aHJvd0Vycm9yO1xuZXhwb3J0IHZhciBDb21waWxlcl9jb21waWxlTW9kdWxlQXN5bmNfX1BPU1RfUjNfXyA9IGZ1bmN0aW9uIChtb2R1bGVUeXBlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDb21waWxlcl9jb21waWxlTW9kdWxlU3luY19fUE9TVF9SM19fKG1vZHVsZVR5cGUpKTtcbn07XG52YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFzeW5jID0gQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFzeW5jX19QUkVfUjNfXztcbnZhciBDb21waWxlcl9jb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50c1N5bmNfX1BSRV9SM19fID0gX3Rocm93RXJyb3I7XG5leHBvcnQgdmFyIENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luY19fUE9TVF9SM19fID0gZnVuY3Rpb24gKG1vZHVsZVR5cGUpIHtcbiAgICB2YXIgbmdNb2R1bGVGYWN0b3J5ID0gQ29tcGlsZXJfY29tcGlsZU1vZHVsZVN5bmNfX1BPU1RfUjNfXyhtb2R1bGVUeXBlKTtcbiAgICB2YXIgbW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobW9kdWxlVHlwZSk7XG4gICAgdmFyIGNvbXBvbmVudEZhY3RvcmllcyA9IG1heWJlVW53cmFwRm4obW9kdWxlRGVmLmRlY2xhcmF0aW9ucylcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoZmFjdG9yaWVzLCBkZWNsYXJhdGlvbikge1xuICAgICAgICB2YXIgY29tcG9uZW50RGVmID0gZ2V0Q29tcG9uZW50RGVmKGRlY2xhcmF0aW9uKTtcbiAgICAgICAgY29tcG9uZW50RGVmICYmIGZhY3Rvcmllcy5wdXNoKG5ldyBDb21wb25lbnRGYWN0b3J5UjMoY29tcG9uZW50RGVmKSk7XG4gICAgICAgIHJldHVybiBmYWN0b3JpZXM7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBuZXcgTW9kdWxlV2l0aENvbXBvbmVudEZhY3RvcmllcyhuZ01vZHVsZUZhY3RvcnksIGNvbXBvbmVudEZhY3Rvcmllcyk7XG59O1xudmFyIENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYyA9IENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luY19fUFJFX1IzX187XG52YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNBc3luY19fUFJFX1IzX18gPSBfdGhyb3dFcnJvcjtcbmV4cG9ydCB2YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNBc3luY19fUE9TVF9SM19fID0gZnVuY3Rpb24gKG1vZHVsZVR5cGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luY19fUE9TVF9SM19fKG1vZHVsZVR5cGUpKTtcbn07XG52YXIgQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNBc3luYyA9IENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzQXN5bmNfX1BSRV9SM19fO1xuLyoqXG4gKiBMb3ctbGV2ZWwgc2VydmljZSBmb3IgcnVubmluZyB0aGUgYW5ndWxhciBjb21waWxlciBkdXJpbmcgcnVudGltZVxuICogdG8gY3JlYXRlIHtAbGluayBDb21wb25lbnRGYWN0b3J5fXMsIHdoaWNoXG4gKiBjYW4gbGF0ZXIgYmUgdXNlZCB0byBjcmVhdGUgYW5kIHJlbmRlciBhIENvbXBvbmVudCBpbnN0YW5jZS5cbiAqXG4gKiBFYWNoIGBATmdNb2R1bGVgIHByb3ZpZGVzIGFuIG93biBgQ29tcGlsZXJgIHRvIGl0cyBpbmplY3RvcixcbiAqIHRoYXQgd2lsbCB1c2UgdGhlIGRpcmVjdGl2ZXMvcGlwZXMgb2YgdGhlIG5nIG1vZHVsZSBmb3IgY29tcGlsYXRpb25cbiAqIG9mIGNvbXBvbmVudHMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgQ29tcGlsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcGlsZXIoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21waWxlcyB0aGUgZ2l2ZW4gTmdNb2R1bGUgYW5kIGFsbCBvZiBpdHMgY29tcG9uZW50cy4gQWxsIHRlbXBsYXRlcyBvZiB0aGUgY29tcG9uZW50cyBsaXN0ZWRcbiAgICAgICAgICogaW4gYGVudHJ5Q29tcG9uZW50c2AgaGF2ZSB0byBiZSBpbmxpbmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21waWxlTW9kdWxlU3luYyA9IENvbXBpbGVyX2NvbXBpbGVNb2R1bGVTeW5jO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29tcGlsZXMgdGhlIGdpdmVuIE5nTW9kdWxlIGFuZCBhbGwgb2YgaXRzIGNvbXBvbmVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29tcGlsZU1vZHVsZUFzeW5jID0gQ29tcGlsZXJfY29tcGlsZU1vZHVsZUFzeW5jO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2FtZSBhcyB7QGxpbmsgI2NvbXBpbGVNb2R1bGVTeW5jfSBidXQgYWxzbyBjcmVhdGVzIENvbXBvbmVudEZhY3RvcmllcyBmb3IgYWxsIGNvbXBvbmVudHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYyA9IENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rICNjb21waWxlTW9kdWxlQXN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNBc3luYyA9IENvbXBpbGVyX2NvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzQXN5bmM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FjaGVzLlxuICAgICAqL1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5jbGVhckNhY2hlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgY2FjaGUgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQvbmdNb2R1bGUuXG4gICAgICovXG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNsZWFyQ2FjaGVGb3IgPSBmdW5jdGlvbiAodHlwZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlkIGZvciBhIGdpdmVuIE5nTW9kdWxlLCBpZiBvbmUgaXMgZGVmaW5lZCBhbmQga25vd24gdG8gdGhlIGNvbXBpbGVyLlxuICAgICAqL1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5nZXRNb2R1bGVJZCA9IGZ1bmN0aW9uIChtb2R1bGVUeXBlKSB7IHJldHVybiB1bmRlZmluZWQ7IH07XG4gICAgQ29tcGlsZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKClcbiAgICBdLCBDb21waWxlcik7XG4gICAgcmV0dXJuIENvbXBpbGVyO1xufSgpKTtcbmV4cG9ydCB7IENvbXBpbGVyIH07XG4vKipcbiAqIFRva2VuIHRvIHByb3ZpZGUgQ29tcGlsZXJPcHRpb25zIGluIHRoZSBwbGF0Zm9ybSBpbmplY3Rvci5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB2YXIgQ09NUElMRVJfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignY29tcGlsZXJPcHRpb25zJyk7XG4vKipcbiAqIEEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSBDb21waWxlclxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIENvbXBpbGVyRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21waWxlckZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBDb21waWxlckZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0IHsgQ29tcGlsZXJGYWN0b3J5IH07XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createScope, detectWTF, endTimeRange, leave, startTimeRange } from './wtf_impl';\n/**\n * True if WTF is enabled.\n */\nexport var wtfEnabled = detectWTF();\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nexport var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nexport var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nexport var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nexport var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3Byb2ZpbGUvcHJvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQWEsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUtuRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUV0QyxTQUFTLFNBQVMsQ0FBQyxJQUFVLEVBQUUsSUFBVTtJQUN2QyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2Qkc7QUFDSCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQ3ZCLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFDLFNBQWlCLEVBQUUsS0FBVyxJQUFLLE9BQUEsU0FBUyxFQUFULENBQVMsQ0FBQztBQUU3RTs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FDakIsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQUMsQ0FBTSxFQUFFLENBQU8sSUFBSyxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUM7QUFFaEQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQzFCLFVBQVUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxVQUFDLFNBQWlCLEVBQUUsTUFBYyxJQUFLLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztBQUU5RTs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBeUIsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQUMsQ0FBTSxJQUFLLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtXdGZTY29wZUZuLCBjcmVhdGVTY29wZSwgZGV0ZWN0V1RGLCBlbmRUaW1lUmFuZ2UsIGxlYXZlLCBzdGFydFRpbWVSYW5nZX0gZnJvbSAnLi93dGZfaW1wbCc7XG5cbmV4cG9ydCB7V3RmU2NvcGVGbn0gZnJvbSAnLi93dGZfaW1wbCc7XG5cblxuLyoqXG4gKiBUcnVlIGlmIFdURiBpcyBlbmFibGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3RmRW5hYmxlZCA9IGRldGVjdFdURigpO1xuXG5mdW5jdGlvbiBub29wU2NvcGUoYXJnMD86IGFueSwgYXJnMT86IGFueSk6IGFueSB7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0cmFjZSBzY29wZS5cbiAqXG4gKiBTY29wZXMgbXVzdCBiZSBzdHJpY3RseSBuZXN0ZWQgYW5kIGFyZSBhbmFsb2dvdXMgdG8gc3RhY2sgZnJhbWVzLCBidXRcbiAqIGRvIG5vdCBoYXZlIHRvIGZvbGxvdyB0aGUgc3RhY2sgZnJhbWVzLiBJbnN0ZWFkIGl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhleSBmb2xsb3cgbG9naWNhbFxuICogbmVzdGluZy4gWW91IG1heSB3YW50IHRvIHVzZVxuICogW0V2ZW50XG4gKiBTaWduYXR1cmVzXShodHRwOi8vZ29vZ2xlLmdpdGh1Yi5pby90cmFjaW5nLWZyYW1ld29yay9pbnN0cnVtZW50aW5nLWNvZGUuaHRtbCNjdXN0b20tZXZlbnRzKVxuICogYXMgdGhleSBhcmUgZGVmaW5lZCBpbiBXVEYuXG4gKlxuICogVXNlZCB0byBtYXJrIHNjb3BlIGVudHJ5LiBUaGUgcmV0dXJuIHZhbHVlIGlzIHVzZWQgdG8gbGVhdmUgdGhlIHNjb3BlLlxuICpcbiAqICAgICB2YXIgbXlTY29wZSA9IHd0ZkNyZWF0ZVNjb3BlKCdNeUNsYXNzI215TWV0aG9kKGFzY2lpIHNvbWVWYWwpJyk7XG4gKlxuICogICAgIHNvbWVNZXRob2QoKSB7XG4gKiAgICAgICAgdmFyIHMgPSBteVNjb3BlKCdGb28nKTsgLy8gJ0ZvbycgZ2V0cyBzdG9yZWQgaW4gdHJhY2luZyBVSVxuICogICAgICAgIC8vIERPIFNPTUUgV09SSyBIRVJFXG4gKiAgICAgICAgcmV0dXJuIHd0ZkxlYXZlKHMsIDEyMyk7IC8vIFJldHVybiB2YWx1ZSAxMjNcbiAqICAgICB9XG4gKlxuICogTm90ZSwgYWRkaW5nIHRyeS1maW5hbGx5IGJsb2NrIGFyb3VuZCB0aGUgd29yayB0byBlbnN1cmUgdGhhdCBgd3RmTGVhdmVgIGdldHMgY2FsbGVkIGNhblxuICogbmVnYXRpdmVseSBpbXBhY3QgdGhlIHBlcmZvcm1hbmNlIG9mIHlvdXIgYXBwbGljYXRpb24uIEZvciB0aGlzIHJlYXNvbiB3ZSByZWNvbW1lbmQgdGhhdFxuICogeW91IGRvbid0IGFkZCB0aGVtIHRvIGVuc3VyZSB0aGF0IGB3dGZMZWF2ZWAgZ2V0cyBjYWxsZWQuIEluIHByb2R1Y3Rpb24gYHd0ZkxlYXZlYCBpcyBhIG5vb3AgYW5kXG4gKiBzbyB0cnktZmluYWxseSBibG9jayBoYXMgbm8gdmFsdWUuIFdoZW4gZGVidWdnaW5nIHBlcmYgaXNzdWVzLCBza2lwcGluZyBgd3RmTGVhdmVgLCBkbyB0b1xuICogZXhjZXB0aW9uLCB3aWxsIHByb2R1Y2UgaW5jb3JyZWN0IHRyYWNlLCBidXQgcHJlc2VuY2Ugb2YgZXhjZXB0aW9uIHNpZ25pZmllcyBsb2dpYyBlcnJvciB3aGljaFxuICogbmVlZHMgdG8gYmUgZml4ZWQgYmVmb3JlIHRoZSBhcHAgc2hvdWxkIGJlIHByb2ZpbGVkLiBBZGQgdHJ5LWZpbmFsbHkgb25seSB3aGVuIHlvdSBleHBlY3QgdGhhdFxuICogYW4gZXhjZXB0aW9uIGlzIGV4cGVjdGVkIGR1cmluZyBub3JtYWwgZXhlY3V0aW9uIHdoaWxlIHByb2ZpbGluZy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjb25zdCB3dGZDcmVhdGVTY29wZTogKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFncz86IGFueSkgPT4gV3RmU2NvcGVGbiA9XG4gICAgd3RmRW5hYmxlZCA/IGNyZWF0ZVNjb3BlIDogKHNpZ25hdHVyZTogc3RyaW5nLCBmbGFncz86IGFueSkgPT4gbm9vcFNjb3BlO1xuXG4vKipcbiAqIFVzZWQgdG8gbWFyayBlbmQgb2YgU2NvcGUuXG4gKlxuICogLSBgc2NvcGVgIHRvIGVuZC5cbiAqIC0gYHJldHVyblZhbHVlYCAob3B0aW9uYWwpIHRvIGJlIHBhc3NlZCB0byB0aGUgV1RGLlxuICpcbiAqIFJldHVybnMgdGhlIGByZXR1cm5WYWx1ZSBmb3IgZWFzeSBjaGFpbmluZy5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IHd0ZkxlYXZlOiA8VD4oc2NvcGU6IGFueSwgcmV0dXJuVmFsdWU/OiBUKSA9PiBUID1cbiAgICB3dGZFbmFibGVkID8gbGVhdmUgOiAoczogYW55LCByPzogYW55KSA9PiByO1xuXG4vKipcbiAqIFVzZWQgdG8gbWFyayBBc3luYyBzdGFydC4gQXN5bmMgYXJlIHNpbWlsYXIgdG8gc2NvcGUgYnV0IHRoZXkgZG9uJ3QgaGF2ZSB0byBiZSBzdHJpY3RseSBuZXN0ZWQuXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW4gdGhlIGNhbGwgdG8gW2VuZEFzeW5jXS4gQXN5bmMgcmFuZ2VzIG9ubHkgd29yayBpZiBXVEYgaGFzIGJlZW5cbiAqIGVuYWJsZWQuXG4gKlxuICogICAgIHNvbWVNZXRob2QoKSB7XG4gKiAgICAgICAgdmFyIHMgPSB3dGZTdGFydFRpbWVSYW5nZSgnSFRUUDpHRVQnLCAnc29tZS51cmwnKTtcbiAqICAgICAgICB2YXIgZnV0dXJlID0gbmV3IEZ1dHVyZS5kZWxheSg1KS50aGVuKChfKSB7XG4gKiAgICAgICAgICB3dGZFbmRUaW1lUmFuZ2Uocyk7XG4gKiAgICAgICAgfSk7XG4gKiAgICAgfVxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3Qgd3RmU3RhcnRUaW1lUmFuZ2U6IChyYW5nZVR5cGU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcpID0+IGFueSA9XG4gICAgd3RmRW5hYmxlZCA/IHN0YXJ0VGltZVJhbmdlIDogKHJhbmdlVHlwZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZykgPT4gbnVsbDtcblxuLyoqXG4gKiBFbmRzIGEgYXN5bmMgdGltZSByYW5nZSBvcGVyYXRpb24uXG4gKiBbcmFuZ2VdIGlzIHRoZSByZXR1cm4gdmFsdWUgZnJvbSBbd3RmU3RhcnRUaW1lUmFuZ2VdIEFzeW5jIHJhbmdlcyBvbmx5IHdvcmsgaWYgV1RGIGhhcyBiZWVuXG4gKiBlbmFibGVkLlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY29uc3Qgd3RmRW5kVGltZVJhbmdlOiAocmFuZ2U6IGFueSkgPT4gdm9pZCA9IHd0ZkVuYWJsZWQgPyBlbmRUaW1lUmFuZ2UgOiAocjogYW55KSA9PiBudWxsO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar promise = Promise.resolve(0);\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm90YXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbC9taWNyb3Rhc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsSUFBTSxPQUFPLEdBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFJakQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQVk7SUFDNUMsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLEVBQUU7UUFDL0Isd0RBQXdEO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBUSxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyRDtTQUFNO1FBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN6RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuY29uc3QgcHJvbWlzZTogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKDApO1xuXG5kZWNsYXJlIGNvbnN0IFpvbmU6IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlTWljcm9UYXNrKGZuOiBGdW5jdGlvbikge1xuICBpZiAodHlwZW9mIFpvbmUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gdXNlIHByb21pc2UgdG8gc2NoZWR1bGUgbWljcm9UYXNrIGluc3RlYWQgb2YgdXNlIFpvbmVcbiAgICBwcm9taXNlLnRoZW4oKCkgPT4geyBmbiAmJiBmbi5hcHBseShudWxsLCBudWxsKTsgfSk7XG4gIH0gZWxzZSB7XG4gICAgWm9uZS5jdXJyZW50LnNjaGVkdWxlTWljcm9UYXNrKCdzY2hlZHVsZU1pY3JvdGFzaycsIGZuKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nvar NgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        var self = this;\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (Zone['wtfZoneSpec']) {\n            self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n        }\n        if (Zone['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n        }\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n    NgZone.assertInAngularZone = function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    NgZone.assertNotInAngularZone = function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n        return this._inner.run(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n        var zone = this._inner;\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return zone.runTask(task, applyThis, applyArgs);\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    NgZone.prototype.runOutsideAngular = function (fn) {\n        return this._outer.run(fn);\n    };\n    return NgZone;\n}());\nexport { NgZone };\nfunction noop() { }\nvar EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: { 'isAngularZone': true },\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar NoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    NoopNgZone.prototype.run = function (fn) { return fn(); };\n    NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\n    NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n    NoopNgZone.prototype.runTask = function (fn) { return fn(); };\n    return NoopNgZone;\n}());\nexport { NoopNgZone };\n//# sourceMappingURL=data:application/json;base64,","import * as ɵngcc0 from './r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { getCompilerFacade } from './compiler/compiler_facade';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { COMPILER_OPTIONS, CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { isComponentResourceResolutionQueueEmpty, resolveComponentResources } from './metadata/resource_loading';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { isDevMode } from './util/is_dev_mode';\nimport { isPromise } from './util/lang';\nimport { scheduleMicroTask } from './util/microtask';\nimport { stringify } from './util/stringify';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\nvar _platform;\nvar compileNgModuleFactory = compileNgModuleFactory__POST_R3__;\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    var compilerFactory = injector.get(CompilerFactory);\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\nexport function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    var moduleFactory = new R3NgModuleFactory(moduleType);\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    var compiler = getCompilerFacade();\n    var compilerInjector = Injector.create({ providers: compilerProviders });\n    var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n        .then(function () { return moduleFactory; });\n}\nvar isBoundToModule = isBoundToModule__POST_R3__;\nexport function isBoundToModule__PRE_R3__(cf) {\n    return cf instanceof ComponentFactoryBoundToModule;\n}\nexport function isBoundToModule__POST_R3__(cf) {\n    return cf.isBoundToModule;\n}\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nvar NgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\nexport { NgProbeToken };\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    var desc = \"Platform: \" + name;\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken) {\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n        var _this = this;\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        var ngZoneOption = options ? options.ngZone : undefined;\n        var ngZone = getNgZone(ngZoneOption);\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            var moduleRef = moduleFactory.create(ngZoneInjector);\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n            ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n        var appRef = moduleRef.injector.get(ApplicationRef);\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    PlatformRef.prototype.destroy = function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [Injector])\n    ], PlatformRef);\nPlatformRef.ngInjectableDef = ɵngcc0.defineInjectable({ token: PlatformRef, factory: function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵngcc0.inject(Injector)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(PlatformRef, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Injector }]; }, { _injector: [], _modules: [], _destroyListeners: [], _destroyed: [], bootstrapModuleFactory: [], bootstrapModule: [], _moduleDoBootstrap: [], onDestroy: [], injector: [], destroy: [], destroyed: [] });\n    return PlatformRef;\n}());\nexport { PlatformRef };\nfunction getNgZone(ngZoneOption) {\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, objs);\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        var isStable = new Observable(function (observer) {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        this.isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    ApplicationRef_1 = ApplicationRef;\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        var ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    ApplicationRef.prototype.tick = function () {\n        var _this = this;\n        var e_1, _a, e_2, _b;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        var scope = ApplicationRef_1._tickScope();\n        try {\n            this._runningTick = true;\n            try {\n                for (var _c = tslib_1.__values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var view = _d.value;\n                    view.detectChanges();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this._enforceNoNewChanges) {\n                try {\n                    for (var _e = tslib_1.__values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                        var view = _f.value;\n                        view.checkNoChanges();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    ApplicationRef.prototype.attachView = function (viewRef) {\n        var view = viewRef;\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    ApplicationRef.prototype.detachView = function (viewRef) {\n        var view = viewRef;\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    ApplicationRef.prototype._loadComponent = function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    ApplicationRef.prototype._unloadComponent = function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    ApplicationRef.prototype.ngOnDestroy = function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    var ApplicationRef_1;\n    /** @internal */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef = ApplicationRef_1 = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [NgZone, Console, Injector,\n            ErrorHandler,\n            ComponentFactoryResolver,\n            ApplicationInitStatus])\n    ], ApplicationRef);\nApplicationRef.ngInjectableDef = ɵngcc0.defineInjectable({ token: ApplicationRef, factory: function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵngcc0.inject(NgZone), ɵngcc0.inject(Console), ɵngcc0.inject(Injector), ɵngcc0.inject(ErrorHandler), ɵngcc0.inject(ComponentFactoryResolver), ɵngcc0.inject(ApplicationInitStatus)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(ApplicationRef, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }]; }, { _zone: [], _console: [], _injector: [], _exceptionHandler: [], _componentFactoryResolver: [], _initStatus: [], _bootstrapListeners: [], _views: [], _runningTick: [], _enforceNoNewChanges: [], _stable: [], componentTypes: [], components: [], isStable: [], bootstrap: [], tick: [], attachView: [], detachView: [], _loadComponent: [], _unloadComponent: [], ngOnDestroy: [], viewCount: [] });\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nfunction remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\nfunction _mergeArrays(parts) {\n    var result = [];\n    parts.forEach(function (part) { return part && result.push.apply(result, tslib_1.__spread(part)); });\n    return result;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '../r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util/microtask';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * @internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(function () {\n            _this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    Testability.prototype._watchAngularEvents = function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    Testability.prototype.increasePendingRequestCount = function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.decreasePendingRequestCount = function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    Testability.prototype.isStable = function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    Testability.prototype._runCallbacksIfReady = function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    var cb = _this._callbacks.pop();\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    Testability.prototype.getPendingTasks = function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: t.creationLocation,\n                data: t.data\n            };\n        });\n    };\n    Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n        var _this = this;\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(doneCb, timeout, updateCb);\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    Testability.prototype.findProviders = function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [NgZone])\n    ], Testability);\nTestability.ngInjectableDef = ɵngcc0.defineInjectable({ token: Testability, factory: function Testability_Factory(t) { return new (t || Testability)(ɵngcc0.inject(NgZone)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(Testability, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: NgZone }]; }, { _ngZone: [], _pendingCount: [], _isZoneStable: [], _didWork: [], _callbacks: [], taskTrackingZone: [], _watchAngularEvents: [], increasePendingRequestCount: [], decreasePendingRequestCount: [], isStable: [], _runCallbacksIfReady: [], getPendingTasks: [], addCallback: [], whenStable: [], getPendingRequestCount: [], findProviders: [] });\n    return Testability;\n}());\nexport { Testability };\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /** @internal */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], TestabilityRegistry);\nTestabilityRegistry.ngInjectableDef = ɵngcc0.defineInjectable({ token: TestabilityRegistry, factory: function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(TestabilityRegistry, [{\r\n        type: Injectable\r\n    }], function () { return []; }, { _applications: [], registerApplication: [], unregisterApplication: [], unregisterAllApplications: [], getTestability: [], getAllTestabilities: [], getAllRootElements: [], findTestabilityInTree: [] });\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    _NoopGetTestability.prototype.addToWindow = function (registry) { };\n    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nvar _testabilityGetter = new _NoopGetTestability();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util/global';\nexport * from './compiler_facade_interface';\nexport function getCompilerFacade() {\n    var globalNg = global['ng'];\n    if (!globalNg || !globalNg.ɵcompilerFacade) {\n        throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n            \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n            \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n            \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n    }\n    return globalNg.ɵcompilerFacade;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXJfZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY29tcGlsZXIvY29tcGlsZXJfZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxjQUFjLDZCQUE2QixDQUFDO0FBRTVDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsSUFBTSxRQUFRLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUMxQyxNQUFNLElBQUksS0FBSyxDQUNYLG1FQUFtRTtZQUNuRSwyRkFBMkY7WUFDM0Ysa0dBQWtHO1lBQ2xHLG1HQUFpRyxDQUFDLENBQUM7S0FDeEc7SUFDRCxPQUFPLFFBQVEsQ0FBQyxlQUFlLENBQUM7QUFDbEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7Z2xvYmFsfSBmcm9tICcuLi91dGlsL2dsb2JhbCc7XG5pbXBvcnQge0NvbXBpbGVyRmFjYWRlLCBFeHBvcnRlZENvbXBpbGVyRmFjYWRlfSBmcm9tICcuL2NvbXBpbGVyX2ZhY2FkZV9pbnRlcmZhY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21waWxlcl9mYWNhZGVfaW50ZXJmYWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBpbGVyRmFjYWRlKCk6IENvbXBpbGVyRmFjYWRlIHtcbiAgY29uc3QgZ2xvYmFsTmc6IEV4cG9ydGVkQ29tcGlsZXJGYWNhZGUgPSBnbG9iYWxbJ25nJ107XG4gIGlmICghZ2xvYmFsTmcgfHwgIWdsb2JhbE5nLsm1Y29tcGlsZXJGYWNhZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBBbmd1bGFyIEpJVCBjb21waWxhdGlvbiBmYWlsZWQ6ICdAYW5ndWxhci9jb21waWxlcicgbm90IGxvYWRlZCFcXG5gICtcbiAgICAgICAgYCAgLSBKSVQgY29tcGlsYXRpb24gaXMgZGlzY291cmFnZWQgZm9yIHByb2R1Y3Rpb24gdXNlLWNhc2VzISBDb25zaWRlciBBT1QgbW9kZSBpbnN0ZWFkLlxcbmAgK1xuICAgICAgICBgICAtIERpZCB5b3UgYm9vdHN0cmFwIHVzaW5nICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnIG9yICdAYW5ndWxhci9wbGF0Zm9ybS1zZXJ2ZXInP1xcbmAgK1xuICAgICAgICBgICAtIEFsdGVybmF0aXZlbHkgcHJvdmlkZSB0aGUgY29tcGlsZXIgd2l0aCAnaW1wb3J0IFwiQGFuZ3VsYXIvY29tcGlsZXJcIjsnIGJlZm9yZSBib290c3RyYXBwaW5nLmApO1xuICB9XG4gIHJldHVybiBnbG9iYWxOZy7JtWNvbXBpbGVyRmFjYWRlO1xufVxuIl19","/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n","/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PlatformRef, createPlatformFactory } from './application_ref';\nimport { PLATFORM_ID } from './application_tokens';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { TestabilityRegistry } from './testability/testability';\nvar _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm1fY29yZV9wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9wbGF0Zm9ybV9jb3JlX3Byb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsV0FBVyxFQUFFLHFCQUFxQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDckUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFDLFFBQVEsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFOUQsSUFBTSx3QkFBd0IsR0FBcUI7SUFDakQsMEVBQTBFO0lBQzFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFDO0lBQzNDLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBQztJQUN4QyxFQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3hDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0NBQzdCLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtQbGF0Zm9ybVJlZiwgY3JlYXRlUGxhdGZvcm1GYWN0b3J5fSBmcm9tICcuL2FwcGxpY2F0aW9uX3JlZic7XG5pbXBvcnQge1BMQVRGT1JNX0lEfSBmcm9tICcuL2FwcGxpY2F0aW9uX3Rva2Vucyc7XG5pbXBvcnQge0NvbnNvbGV9IGZyb20gJy4vY29uc29sZSc7XG5pbXBvcnQge0luamVjdG9yLCBTdGF0aWNQcm92aWRlcn0gZnJvbSAnLi9kaSc7XG5pbXBvcnQge1Rlc3RhYmlsaXR5UmVnaXN0cnl9IGZyb20gJy4vdGVzdGFiaWxpdHkvdGVzdGFiaWxpdHknO1xuXG5jb25zdCBfQ09SRV9QTEFURk9STV9QUk9WSURFUlM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gIC8vIFNldCBhIGRlZmF1bHQgcGxhdGZvcm0gbmFtZSBmb3IgcGxhdGZvcm1zIHRoYXQgZG9uJ3Qgc2V0IGl0IGV4cGxpY2l0bHkuXG4gIHtwcm92aWRlOiBQTEFURk9STV9JRCwgdXNlVmFsdWU6ICd1bmtub3duJ30sXG4gIHtwcm92aWRlOiBQbGF0Zm9ybVJlZiwgZGVwczogW0luamVjdG9yXX0sXG4gIHtwcm92aWRlOiBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBkZXBzOiBbXX0sXG4gIHtwcm92aWRlOiBDb25zb2xlLCBkZXBzOiBbXX0sXG5dO1xuXG4vKipcbiAqIFRoaXMgcGxhdGZvcm0gaGFzIHRvIGJlIGluY2x1ZGVkIGluIGFueSBvdGhlciBwbGF0Zm9ybVxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IHBsYXRmb3JtQ29yZSA9IGNyZWF0ZVBsYXRmb3JtRmFjdG9yeShudWxsLCAnY29yZScsIF9DT1JFX1BMQVRGT1JNX1BST1ZJREVSUyk7XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nimport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { IterableDiffers } from './differs/iterable_differs';\nexport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChange } from '../interface/simple_change';\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nvar keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nvar iterableDiff = [new DefaultIterableDifferFactory()];\nexport var defaultIterableDiffers = new IterableDiffers(iterableDiff);\nexport var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlX2RldGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQXdCLGVBQWUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2xGLE9BQU8sRUFBd0IsZUFBZSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFbEYsT0FBTyxFQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsb0JBQW9CLEVBQUUsZ0NBQWdDLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDNUcsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0UsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDeEUsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0UsT0FBTyxFQU1MLGVBQWUsRUFHaEIsTUFDRCw0QkFBNEIsQ0FBQztBQUM3QixPQUFPLEVBQStFLGVBQWUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRXpJLE9BQU8sRUFBQyxZQUFZLEVBQWdCLE1BQU0sNEJBQTRCLENBQUM7QUFJdkU7O0dBRUc7QUFDSCxJQUFNLFVBQVUsR0FBNEIsQ0FBQyxJQUFJLDRCQUE0QixFQUFFLENBQUMsQ0FBQztBQUVqRjs7R0FFRztBQUNILElBQU0sWUFBWSxHQUE0QixDQUFDLElBQUksNEJBQTRCLEVBQUUsQ0FBQyxDQUFDO0FBRW5GLE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RlZmF1bHRJdGVyYWJsZURpZmZlckZhY3Rvcnl9IGZyb20gJy4vZGlmZmVycy9kZWZhdWx0X2l0ZXJhYmxlX2RpZmZlcic7XG5pbXBvcnQge0RlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3Rvcnl9IGZyb20gJy4vZGlmZmVycy9kZWZhdWx0X2tleXZhbHVlX2RpZmZlcic7XG5pbXBvcnQge0l0ZXJhYmxlRGlmZmVyRmFjdG9yeSwgSXRlcmFibGVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMvaXRlcmFibGVfZGlmZmVycyc7XG5pbXBvcnQge0tleVZhbHVlRGlmZmVyRmFjdG9yeSwgS2V5VmFsdWVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMva2V5dmFsdWVfZGlmZmVycyc7XG5cbmV4cG9ydCB7V3JhcHBlZFZhbHVlLCBkZXZNb2RlRXF1YWx9IGZyb20gJy4vY2hhbmdlX2RldGVjdGlvbl91dGlsJztcbmV4cG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWZ9IGZyb20gJy4vY2hhbmdlX2RldGVjdG9yX3JlZic7XG5leHBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclN0YXR1cywgaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3l9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCB7RGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeX0gZnJvbSAnLi9kaWZmZXJzL2RlZmF1bHRfaXRlcmFibGVfZGlmZmVyJztcbmV4cG9ydCB7RGVmYXVsdEl0ZXJhYmxlRGlmZmVyfSBmcm9tICcuL2RpZmZlcnMvZGVmYXVsdF9pdGVyYWJsZV9kaWZmZXInO1xuZXhwb3J0IHtEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5fSBmcm9tICcuL2RpZmZlcnMvZGVmYXVsdF9rZXl2YWx1ZV9kaWZmZXInO1xuZXhwb3J0IHtcbiAgQ29sbGVjdGlvbkNoYW5nZVJlY29yZCxcbiAgSXRlcmFibGVDaGFuZ2VSZWNvcmQsXG4gIEl0ZXJhYmxlQ2hhbmdlcyxcbiAgSXRlcmFibGVEaWZmZXIsXG4gIEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSxcbiAgSXRlcmFibGVEaWZmZXJzLFxuICBOZ0l0ZXJhYmxlLFxuICBUcmFja0J5RnVuY3Rpb25cbn0gZnJvbVxuJy4vZGlmZmVycy9pdGVyYWJsZV9kaWZmZXJzJztcbmV4cG9ydCB7S2V5VmFsdWVDaGFuZ2VSZWNvcmQsIEtleVZhbHVlQ2hhbmdlcywgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVyRmFjdG9yeSwgS2V5VmFsdWVEaWZmZXJzfSBmcm9tICcuL2RpZmZlcnMva2V5dmFsdWVfZGlmZmVycyc7XG5leHBvcnQge1BpcGVUcmFuc2Zvcm19IGZyb20gJy4vcGlwZV90cmFuc2Zvcm0nO1xuZXhwb3J0IHtTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXN9IGZyb20gJy4uL2ludGVyZmFjZS9zaW1wbGVfY2hhbmdlJztcblxuXG5cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgT2JqZWN0YHMgYW5kIGBNYXBgcy5cbiAqL1xuY29uc3Qga2V5VmFsRGlmZjogS2V5VmFsdWVEaWZmZXJGYWN0b3J5W10gPSBbbmV3IERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkoKV07XG5cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgSXRlcmFibGVgIHR5cGVzIHN1Y2ggYXMgYEFycmF5YHMuXG4gKi9cbmNvbnN0IGl0ZXJhYmxlRGlmZjogSXRlcmFibGVEaWZmZXJGYWN0b3J5W10gPSBbbmV3IERlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkoKV07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SXRlcmFibGVEaWZmZXJzID0gbmV3IEl0ZXJhYmxlRGlmZmVycyhpdGVyYWJsZURpZmYpO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEtleVZhbHVlRGlmZmVycyA9IG5ldyBLZXlWYWx1ZURpZmZlcnMoa2V5VmFsRGlmZik7XG4iXX0=","import * as ɵngcc0 from './r3_symbols';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { SCHEDULER } from './render3/component_ref';\nimport { NgZone } from './zone';\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nexport function zoneSchedulerFactory(ngZone) {\n    var queue = [];\n    ngZone.onStable.subscribe(function () {\n        while (queue.length) {\n            queue.pop()();\n        }\n    });\n    return function (fn) { queue.push(fn); };\n}\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [ApplicationRef])\n    ], ApplicationModule);\nApplicationModule.ngModuleDef = ɵngcc0.defineNgModule({ type: ApplicationModule });\n/*@__PURE__*/ ɵngcc0.setClassMetadata(ApplicationModule, [{\r\n        type: NgModule,\r\n        args: [{ providers: APPLICATION_MODULE_PROVIDERS }]\r\n    }], function () { return [{ type: ApplicationRef }]; }, null);\nApplicationModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵngcc0.inject(ApplicationRef)); }, providers: APPLICATION_MODULE_PROVIDERS });\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvc3JjL2FwcGxpY2F0aW9uX21vZHVsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQXlGNEMsQUFDa0I7Ozs7Ozs7OzZOQUVwQyIsImZpbGUiOiJhcHBsaWNhdGlvbl9tb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBBcHBsaWNhdGlvbkluaXRTdGF0dXMgfSBmcm9tICcuL2FwcGxpY2F0aW9uX2luaXQnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25SZWYgfSBmcm9tICcuL2FwcGxpY2F0aW9uX3JlZic7XG5pbXBvcnQgeyBBUFBfSURfUkFORE9NX1BST1ZJREVSIH0gZnJvbSAnLi9hcHBsaWNhdGlvbl90b2tlbnMnO1xuaW1wb3J0IHsgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIGRlZmF1bHRJdGVyYWJsZURpZmZlcnMsIGRlZmF1bHRLZXlWYWx1ZURpZmZlcnMgfSBmcm9tICcuL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdGlvbic7XG5pbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnLi9jb25zb2xlJztcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnLi9kaSc7XG5pbXBvcnQgeyBJbmplY3QsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJy4vZGkvbWV0YWRhdGEnO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9lcnJvcl9oYW5kbGVyJztcbmltcG9ydCB7IExPQ0FMRV9JRCB9IGZyb20gJy4vaTE4bi90b2tlbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnLi9saW5rZXInO1xuaW1wb3J0IHsgQ29tcGlsZXIgfSBmcm9tICcuL2xpbmtlci9jb21waWxlcic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJy4vbWV0YWRhdGEnO1xuaW1wb3J0IHsgU0NIRURVTEVSIH0gZnJvbSAnLi9yZW5kZXIzL2NvbXBvbmVudF9yZWYnO1xuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnLi96b25lJztcbmV4cG9ydCBmdW5jdGlvbiBfaXRlcmFibGVEaWZmZXJzRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdEl0ZXJhYmxlRGlmZmVycztcbn1cbmV4cG9ydCBmdW5jdGlvbiBfa2V5VmFsdWVEaWZmZXJzRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdEtleVZhbHVlRGlmZmVycztcbn1cbmV4cG9ydCBmdW5jdGlvbiBfbG9jYWxlRmFjdG9yeShsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlIHx8ICdlbi1VUyc7XG59XG4vKipcbiAqIEEgYnVpbHQtaW4gW2RlcGVuZGVuY3kgaW5qZWN0aW9uIHRva2VuXShndWlkZS9nbG9zc2FyeSNkaS10b2tlbilcbiAqIHRoYXQgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHJvb3QgaW5qZWN0b3IgZm9yIGJvb3RzdHJhcHBpbmcuXG4gKi9cbmV4cG9ydCB2YXIgQVBQTElDQVRJT05fTU9EVUxFX1BST1ZJREVSUyA9IFtcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEFwcGxpY2F0aW9uUmVmLFxuICAgICAgICB1c2VDbGFzczogQXBwbGljYXRpb25SZWYsXG4gICAgICAgIGRlcHM6IFtOZ1pvbmUsIENvbnNvbGUsIEluamVjdG9yLCBFcnJvckhhbmRsZXIsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQXBwbGljYXRpb25Jbml0U3RhdHVzXVxuICAgIH0sXG4gICAgeyBwcm92aWRlOiBTQ0hFRFVMRVIsIGRlcHM6IFtOZ1pvbmVdLCB1c2VGYWN0b3J5OiB6b25lU2NoZWR1bGVyRmFjdG9yeSB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogQXBwbGljYXRpb25Jbml0U3RhdHVzLFxuICAgICAgICB1c2VDbGFzczogQXBwbGljYXRpb25Jbml0U3RhdHVzLFxuICAgICAgICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBBUFBfSU5JVElBTElaRVJdXVxuICAgIH0sXG4gICAgeyBwcm92aWRlOiBDb21waWxlciwgdXNlQ2xhc3M6IENvbXBpbGVyLCBkZXBzOiBbXSB9LFxuICAgIEFQUF9JRF9SQU5ET01fUFJPVklERVIsXG4gICAgeyBwcm92aWRlOiBJdGVyYWJsZURpZmZlcnMsIHVzZUZhY3Rvcnk6IF9pdGVyYWJsZURpZmZlcnNGYWN0b3J5LCBkZXBzOiBbXSB9LFxuICAgIHsgcHJvdmlkZTogS2V5VmFsdWVEaWZmZXJzLCB1c2VGYWN0b3J5OiBfa2V5VmFsdWVEaWZmZXJzRmFjdG9yeSwgZGVwczogW10gfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IExPQ0FMRV9JRCxcbiAgICAgICAgdXNlRmFjdG9yeTogX2xvY2FsZUZhY3RvcnksXG4gICAgICAgIGRlcHM6IFtbbmV3IEluamVjdChMT0NBTEVfSUQpLCBuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCldXVxuICAgIH0sXG5dO1xuLyoqXG4gKiBTY2hlZHVsZSB3b3JrIGF0IG5leHQgYXZhaWxhYmxlIHNsb3QuXG4gKlxuICogSW4gSXZ5IHRoaXMgaXMganVzdCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC4gRm9yIGNvbXBhdGliaWxpdHkgcmVhc29ucyB3aGVuIGJvb3RzdHJhcHBlZFxuICogdXNpbmcgYHBsYXRmb3JtUmVmLmJvb3RzdHJhcGAgd2UgbmVlZCB0byB1c2UgYE5nWm9uZS5vblN0YWJsZWAgYXMgdGhlIHNjaGVkdWxpbmcgbWVjaGFuaXNtLlxuICogVGhpcyBvdmVycmlkZXMgdGhlIHNjaGVkdWxpbmcgbWVjaGFuaXNtIGluIEl2eSB0byBgTmdab25lLm9uU3RhYmxlYC5cbiAqXG4gKiBAcGFyYW0gbmdab25lIE5nWm9uZSB0byB1c2UgZm9yIHNjaGVkdWxpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6b25lU2NoZWR1bGVyRmFjdG9yeShuZ1pvbmUpIHtcbiAgICB2YXIgcXVldWUgPSBbXTtcbiAgICBuZ1pvbmUub25TdGFibGUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgcXVldWUucG9wKCkoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHsgcXVldWUucHVzaChmbik7IH07XG59XG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIHJvb3QgaW5qZWN0b3IgZm9yIGFuIGFwcCB3aXRoXG4gKiBwcm92aWRlcnMgb2YgYEBhbmd1bGFyL2NvcmVgIGRlcGVuZGVuY2llcyB0aGF0IGBBcHBsaWNhdGlvblJlZmAgbmVlZHNcbiAqIHRvIGJvb3RzdHJhcCBjb21wb25lbnRzLlxuICpcbiAqIFJlLWV4cG9ydGVkIGJ5IGBCcm93c2VyTW9kdWxlYCwgd2hpY2ggaXMgaW5jbHVkZWQgYXV0b21hdGljYWxseSBpbiB0aGUgcm9vdFxuICogYEFwcE1vZHVsZWAgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IGFwcCB3aXRoIHRoZSBDTEkgYG5ld2AgY29tbWFuZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBBcHBsaWNhdGlvbk1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBJbmplY3QgQXBwbGljYXRpb25SZWYgdG8gbWFrZSBpdCBlYWdlci4uLlxuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uTW9kdWxlKGFwcFJlZikge1xuICAgIH1cbiAgICBBcHBsaWNhdGlvbk1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIE5nTW9kdWxlKHsgcHJvdmlkZXJzOiBBUFBMSUNBVElPTl9NT0RVTEVfUFJPVklERVJTIH0pLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbQXBwbGljYXRpb25SZWZdKVxuICAgIF0sIEFwcGxpY2F0aW9uTW9kdWxlKTtcbiAgICByZXR1cm4gQXBwbGljYXRpb25Nb2R1bGU7XG59KCkpO1xuZXhwb3J0IHsgQXBwbGljYXRpb25Nb2R1bGUgfTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _DOM = null;\nexport function getDOM() {\n    return _DOM;\n}\nexport function setDOM(adapter) {\n    _DOM = adapter;\n}\nexport function setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar DomAdapter = /** @class */ (function () {\n    function DomAdapter() {\n        this.resourceLoaderType = null;\n    }\n    Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\n        /**\n         * Maps attribute names to their corresponding property names for cases\n         * where attribute name doesn't match property name.\n         */\n        get: function () { return this._attrToPropMap; },\n        set: function (value) { this._attrToPropMap = value; },\n        enumerable: true,\n        configurable: true\n    });\n    return DomAdapter;\n}());\nexport { DomAdapter };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ɵparseCookieValue as parseCookieValue } from '@angular/common';\nimport { ɵglobal as global } from '@angular/core';\nimport { setRootDomAdapter } from '../dom/dom_adapter';\nimport { GenericBrowserDomAdapter } from './generic_browser_adapter';\nvar _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nvar _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nvar _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nvar nodeContains;\nif (global['Node']) {\n    nodeContains = global['Node'].prototype.contains || function (node) {\n        return !!(this.compareDocumentPosition(node) & 16);\n    };\n}\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nvar BrowserDomAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(BrowserDomAdapter, _super);\n    function BrowserDomAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\n    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\n    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };\n    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };\n    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };\n    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {\n        var _a;\n        (_a = el)[methodName].apply(_a, tslib_1.__spread(args));\n    };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.logError = function (error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    };\n    BrowserDomAdapter.prototype.log = function (error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroup = function (error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    };\n    BrowserDomAdapter.prototype.logGroupEnd = function () {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    };\n    Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\n        get: function () { return _attrToPropMap; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };\n    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };\n    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };\n    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };\n    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return function () { el.removeEventListener(evt, listener, false); };\n    };\n    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };\n    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.createEvent = function (eventType) {\n        var evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    BrowserDomAdapter.prototype.preventDefault = function (evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    };\n    BrowserDomAdapter.prototype.isPrevented = function (evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    };\n    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };\n    BrowserDomAdapter.prototype.getTemplateContent = function (el) {\n        return 'content' in el && this.isTemplateElement(el) ? el.content : null;\n    };\n    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };\n    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\n    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\n    BrowserDomAdapter.prototype.type = function (node) { return node.type; };\n    BrowserDomAdapter.prototype.content = function (node) {\n        if (this.hasProperty(node, 'content')) {\n            return node.content;\n        }\n        else {\n            return node;\n        }\n    };\n    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };\n    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };\n    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };\n    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };\n    BrowserDomAdapter.prototype.childNodesAsList = function (el) {\n        var childNodes = el.childNodes;\n        var res = new Array(childNodes.length);\n        for (var i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.clearNodes = function (el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    };\n    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };\n    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };\n    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };\n    BrowserDomAdapter.prototype.remove = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    };\n    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };\n    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {\n        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });\n    };\n    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };\n    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };\n    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };\n    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };\n    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };\n    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };\n    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };\n    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };\n    BrowserDomAdapter.prototype.createComment = function (text) { return this.getDefaultDocument().createComment(text); };\n    BrowserDomAdapter.prototype.createTemplate = function (html) {\n        var t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    };\n    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    };\n    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    };\n    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    };\n    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        var el = doc.createElement('SCRIPT');\n        el.setAttribute(attrName, attrValue);\n        return el;\n    };\n    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\n        doc = doc || this.getDefaultDocument();\n        var style = doc.createElement('style');\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    };\n    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };\n    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };\n    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };\n    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\n    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {\n        return element.getElementsByClassName(name);\n    };\n    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {\n        return element.getElementsByTagName(name);\n    };\n    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };\n    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };\n    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };\n    BrowserDomAdapter.prototype.hasClass = function (element, className) {\n        return element.classList.contains(className);\n    };\n    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    };\n    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    };\n    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };\n    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {\n        var value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    };\n    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };\n    BrowserDomAdapter.prototype.attributeMap = function (element) {\n        var res = new Map();\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            var attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    };\n    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {\n        return element.hasAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    };\n    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {\n        return element.getAttribute(attribute);\n    };\n    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };\n    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    };\n    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };\n    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    };\n    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };\n    BrowserDomAdapter.prototype.createHtmlDocument = function () {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    };\n    BrowserDomAdapter.prototype.getDefaultDocument = function () { return document; };\n    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    };\n    BrowserDomAdapter.prototype.getTitle = function (doc) { return doc.title; };\n    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { doc.title = newTitle || ''; };\n    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    };\n    BrowserDomAdapter.prototype.isTemplateElement = function (el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    };\n    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\n    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\n    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\n    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    };\n    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };\n    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };\n    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\n    BrowserDomAdapter.prototype.getHref = function (el) { return el.getAttribute('href'); };\n    BrowserDomAdapter.prototype.getEventKey = function (event) {\n        var key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = _chromeNumKeyPadMap[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    };\n    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    };\n    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\n    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\n    BrowserDomAdapter.prototype.getBaseHref = function (doc) {\n        var href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    };\n    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\n    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\n    BrowserDomAdapter.prototype.setData = function (element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    };\n    BrowserDomAdapter.prototype.getData = function (element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    };\n    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };\n    // TODO(tbosch): move this into a separate environment class once we have it\n    BrowserDomAdapter.prototype.supportsWebAnimation = function () {\n        return typeof Element.prototype['animate'] === 'function';\n    };\n    BrowserDomAdapter.prototype.performanceNow = function () {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    };\n    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\n    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };\n    BrowserDomAdapter.prototype.setCookie = function (name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    };\n    return BrowserDomAdapter;\n}(GenericBrowserDomAdapter));\nexport { BrowserDomAdapter };\nvar baseElement = null;\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = document.querySelector('base');\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\nvar urlParsingNode;\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nexport function parseCookieValue(cookieStr, name) {\n    var e_1, _a;\n    name = encodeURIComponent(name);\n    try {\n        for (var _b = tslib_1.__values(cookieStr.split(';')), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var cookie = _c.value;\n            var eqIndex = cookie.indexOf('=');\n            var _d = tslib_1.__read(eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], 2), cookieName = _d[0], cookieValue = _d[1];\n            if (cookieName.trim() === name) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tbW9uL3NyYy9jb29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxTQUFpQixFQUFFLElBQVk7O0lBQzlELElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFDaEMsS0FBcUIsSUFBQSxLQUFBLGlCQUFBLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBdEMsSUFBTSxNQUFNLFdBQUE7WUFDZixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLElBQUEsNEdBQ2tGLEVBRGpGLGtCQUFVLEVBQUUsbUJBQ3FFLENBQUM7WUFDekYsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUM5QixPQUFPLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7Ozs7Ozs7OztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29va2llVmFsdWUoY29va2llU3RyOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IHN0cmluZ3xudWxsIHtcbiAgbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcbiAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llU3RyLnNwbGl0KCc7JykpIHtcbiAgICBjb25zdCBlcUluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICBjb25zdCBbY29va2llTmFtZSwgY29va2llVmFsdWVdOiBzdHJpbmdbXSA9XG4gICAgICAgIGVxSW5kZXggPT0gLTEgPyBbY29va2llLCAnJ10gOiBbY29va2llLnNsaWNlKDAsIGVxSW5kZXgpLCBjb29raWUuc2xpY2UoZXFJbmRleCArIDEpXTtcbiAgICBpZiAoY29va2llTmFtZS50cmltKCkgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29va2llVmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DomAdapter } from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nvar GenericBrowserDomAdapter = /** @class */ (function (_super) {\n    tslib_1.__extends(GenericBrowserDomAdapter, _super);\n    function GenericBrowserDomAdapter() {\n        var _this = _super.call(this) || this;\n        _this._animationPrefix = null;\n        _this._transitionEnd = null;\n        try {\n            var element_1 = _this.createElement('div', document);\n            if (_this.getStyle(element_1, 'animationName') != null) {\n                _this._animationPrefix = '';\n            }\n            else {\n                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (var i = 0; i < domPrefixes.length; i++) {\n                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {\n                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            var transEndEventNames_1 = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames_1).forEach(function (key) {\n                if (_this.getStyle(element_1, key) != null) {\n                    _this._transitionEnd = transEndEventNames_1[key];\n                }\n            });\n        }\n        catch (_a) {\n            _this._animationPrefix = null;\n            _this._transitionEnd = null;\n        }\n        return _this;\n    }\n    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };\n    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    };\n    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\n    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\n        return typeof document.body.createShadowRoot === 'function';\n    };\n    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };\n    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };\n    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    };\n    return GenericBrowserDomAdapter;\n}(DomAdapter));\nexport { GenericBrowserDomAdapter };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpY19icm93c2VyX2FkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL2dlbmVyaWNfYnJvd3Nlcl9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJOUM7Ozs7O0dBS0c7QUFDSDtJQUF1RCxvREFBVTtJQUcvRDtRQUFBLFlBQ0UsaUJBQU8sU0FnQ1I7UUFuQ08sc0JBQWdCLEdBQWdCLElBQUksQ0FBQztRQUNyQyxvQkFBYyxHQUFnQixJQUFJLENBQUM7UUFHekMsSUFBSTtZQUNGLElBQU0sU0FBTyxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELElBQUksS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFPLEVBQUUsZUFBZSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUNuRCxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLElBQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRWpELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMzQyxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEVBQUU7d0JBQ3BFLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQzt3QkFDakUsTUFBTTtxQkFDUDtpQkFDRjthQUNGO1lBRUQsSUFBTSxvQkFBa0IsR0FBNEI7Z0JBQ2xELGdCQUFnQixFQUFFLHFCQUFxQjtnQkFDdkMsYUFBYSxFQUFFLGVBQWU7Z0JBQzlCLFdBQVcsRUFBRSwrQkFBK0I7Z0JBQzVDLFVBQVUsRUFBRSxlQUFlO2FBQzVCLENBQUM7WUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztnQkFDbEQsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUU7b0JBQ3ZDLEtBQUksQ0FBQyxjQUFjLEdBQUcsb0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQy9DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLFdBQU07WUFDTixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1lBQzdCLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQzVCOztJQUNILENBQUM7SUFFRCxzREFBbUIsR0FBbkIsVUFBb0IsRUFBZSxJQUFZLE9BQWEsRUFBRyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLG9EQUFpQixHQUFqQixVQUFrQixFQUFxQixFQUFFLE9BQWUsRUFBRSxJQUFZO1FBQ3BFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0RBQWlCLEdBQWpCLGNBQStCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3QywwREFBdUIsR0FBdkI7UUFDRSxPQUFPLE9BQVksUUFBUSxDQUFDLElBQUssQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLENBQUM7SUFDcEUsQ0FBQztJQUNELHFEQUFrQixHQUFsQixjQUErQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNGLG1EQUFnQixHQUFoQixjQUE2QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckYsb0RBQWlCLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDO0lBQ3RFLENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUFuREQsQ0FBdUQsVUFBVSxHQW1EaEUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RG9tQWRhcHRlcn0gZnJvbSAnLi4vZG9tL2RvbV9hZGFwdGVyJztcblxuXG5cbi8qKlxuICogUHJvdmlkZXMgRE9NIG9wZXJhdGlvbnMgaW4gYW55IGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gKlxuICogQHNlY3VyaXR5IFRyZWFkIGNhcmVmdWxseSEgSW50ZXJhY3Rpbmcgd2l0aCB0aGUgRE9NIGRpcmVjdGx5IGlzIGRhbmdlcm91cyBhbmRcbiAqIGNhbiBpbnRyb2R1Y2UgWFNTIHJpc2tzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyIGV4dGVuZHMgRG9tQWRhcHRlciB7XG4gIHByaXZhdGUgX2FuaW1hdGlvblByZWZpeDogc3RyaW5nfG51bGwgPSBudWxsO1xuICBwcml2YXRlIF90cmFuc2l0aW9uRW5kOiBzdHJpbmd8bnVsbCA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIGRvY3VtZW50KTtcbiAgICAgIGlmICh0aGlzLmdldFN0eWxlKGVsZW1lbnQsICdhbmltYXRpb25OYW1lJykgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb25QcmVmaXggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRvbVByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbVByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0U3R5bGUoZWxlbWVudCwgZG9tUHJlZml4ZXNbaV0gKyAnQW5pbWF0aW9uTmFtZScpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9ICctJyArIGRvbVByZWZpeGVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnLSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNFbmRFdmVudE5hbWVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICAgICAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcbiAgICAgIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKHRyYW5zRW5kRXZlbnROYW1lcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0U3R5bGUoZWxlbWVudCwga2V5KSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkVuZCA9IHRyYW5zRW5kRXZlbnROYW1lc1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9IG51bGw7XG4gICAgICB0aGlzLl90cmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBnZXREaXN0cmlidXRlZE5vZGVzKGVsOiBIVE1MRWxlbWVudCk6IE5vZGVbXSB7IHJldHVybiAoPGFueT5lbCkuZ2V0RGlzdHJpYnV0ZWROb2RlcygpOyB9XG4gIHJlc29sdmVBbmRTZXRIcmVmKGVsOiBIVE1MQW5jaG9yRWxlbWVudCwgYmFzZVVybDogc3RyaW5nLCBocmVmOiBzdHJpbmcpIHtcbiAgICBlbC5ocmVmID0gaHJlZiA9PSBudWxsID8gYmFzZVVybCA6IGJhc2VVcmwgKyAnLy4uLycgKyBocmVmO1xuICB9XG4gIHN1cHBvcnRzRE9NRXZlbnRzKCk6IGJvb2xlYW4geyByZXR1cm4gdHJ1ZTsgfVxuICBzdXBwb3J0c05hdGl2ZVNoYWRvd0RPTSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mKDxhbnk+ZG9jdW1lbnQuYm9keSkuY3JlYXRlU2hhZG93Um9vdCA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICBnZXRBbmltYXRpb25QcmVmaXgoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX2FuaW1hdGlvblByZWZpeCA/IHRoaXMuX2FuaW1hdGlvblByZWZpeCA6ICcnOyB9XG4gIGdldFRyYW5zaXRpb25FbmQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25FbmQgPyB0aGlzLl90cmFuc2l0aW9uRW5kIDogJyc7IH1cbiAgc3VwcG9ydHNBbmltYXRpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvblByZWZpeCAhPSBudWxsICYmIHRoaXMuX3RyYW5zaXRpb25FbmQgIT0gbnVsbDtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function supportsState() {\n    return !!window.history.pushState;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2Jyb3dzZXIvbG9jYXRpb24vaGlzdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxNQUFNLFVBQVUsYUFBYTtJQUMzQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdGF0ZSgpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlO1xufSJdfQ==","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT, PlatformLocation } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from '../../dom/dom_adapter';\nimport { supportsState } from './history';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\nvar BrowserPlatformLocation = /** @class */ (function (_super) {\n    tslib_1.__extends(BrowserPlatformLocation, _super);\n    function BrowserPlatformLocation(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._init();\n        return _this;\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /** @internal */\n    BrowserPlatformLocation.prototype._init = function () {\n        this.location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    };\n    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };\n    BrowserPlatformLocation.prototype.onPopState = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    };\n    BrowserPlatformLocation.prototype.onHashChange = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    };\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\n        get: function () { return this.location.pathname; },\n        set: function (newPath) { this.location.pathname = newPath; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\n        get: function () { return this.location.search; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\n        get: function () { return this.location.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    };\n    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\n    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\n    BrowserPlatformLocation = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], BrowserPlatformLocation);\nBrowserPlatformLocation.ngInjectableDef = ɵngcc0.defineInjectable({ token: BrowserPlatformLocation, factory: function BrowserPlatformLocation_Factory(t) { return new (t || BrowserPlatformLocation)(ɵngcc0.inject(DOCUMENT)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BrowserPlatformLocation, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { _init: [], location: [], _history: [], getBaseHrefFromDOM: [], onPopState: [], onHashChange: [], pathname: [], pathname: [], search: [], hash: [], pushState: [], replaceState: [], forward: [], back: [] });\n    return BrowserPlatformLocation;\n}(PlatformLocation));\nexport { BrowserPlatformLocation };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2VzbTUvc3JjL2Jyb3dzZXIvbG9jYXRpb24vYnJvd3Nlcl9wbGF0Zm9ybV9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREF3RWtELEFBQzdCOzs7Ozs7Ozs7O3FPQUdXIiwiZmlsZSI6ImJyb3dzZXJfcGxhdGZvcm1fbG9jYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRE9DVU1FTlQsIFBsYXRmb3JtTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRET00gfSBmcm9tICcuLi8uLi9kb20vZG9tX2FkYXB0ZXInO1xuaW1wb3J0IHsgc3VwcG9ydHNTdGF0ZSB9IGZyb20gJy4vaGlzdG9yeSc7XG4vKipcbiAqIGBQbGF0Zm9ybUxvY2F0aW9uYCBlbmNhcHN1bGF0ZXMgYWxsIG9mIHRoZSBkaXJlY3QgY2FsbHMgdG8gcGxhdGZvcm0gQVBJcy5cbiAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5IGJ5IGFuIGFwcGxpY2F0aW9uIGRldmVsb3Blci4gSW5zdGVhZCwgdXNlXG4gKiB7QGxpbmsgTG9jYXRpb259LlxuICovXG52YXIgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnJvd3NlclBsYXRmb3JtTG9jYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnJvd3NlclBsYXRmb3JtTG9jYXRpb24oX2RvYykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZG9jID0gX2RvYztcbiAgICAgICAgX3RoaXMuX2luaXQoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIG1vdmVkIHRvIGl0cyBvd24gbWV0aG9kIHNvIHRoYXQgYE1vY2tQbGF0Zm9ybUxvY2F0aW9uU3RyYXRlZ3lgIGNhbiBvdmVyd3JpdGUgaXRcbiAgICAvKiogQGludGVybmFsICovXG4gICAgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gZ2V0RE9NKCkuZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgdGhpcy5faGlzdG9yeSA9IGdldERPTSgpLmdldEhpc3RvcnkoKTtcbiAgICB9O1xuICAgIEJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5nZXRCYXNlSHJlZkZyb21ET00gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRET00oKS5nZXRCYXNlSHJlZih0aGlzLl9kb2MpOyB9O1xuICAgIEJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5vblBvcFN0YXRlID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGdldERPTSgpLmdldEdsb2JhbEV2ZW50VGFyZ2V0KHRoaXMuX2RvYywgJ3dpbmRvdycpLmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZm4sIGZhbHNlKTtcbiAgICB9O1xuICAgIEJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5vbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgZ2V0RE9NKCkuZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGhpcy5fZG9jLCAnd2luZG93JykuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZuLCBmYWxzZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnJvd3NlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLCBcInBhdGhuYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmxvY2F0aW9uLnBhdGhuYW1lOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQYXRoKSB7IHRoaXMubG9jYXRpb24ucGF0aG5hbWUgPSBuZXdQYXRoOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnJvd3NlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLCBcInNlYXJjaFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5sb2NhdGlvbi5zZWFyY2g7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbi5wcm90b3R5cGUsIFwiaGFzaFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5sb2NhdGlvbi5oYXNoOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbi5wcm90b3R5cGUucHVzaFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlLCB0aXRsZSwgdXJsKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1N0YXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24uaGFzaCA9IHVybDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24ucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdGl0bGUsIHVybCkge1xuICAgICAgICBpZiAoc3VwcG9ydHNTdGF0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uLmhhc2ggPSB1cmw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJyb3dzZXJQbGF0Zm9ybUxvY2F0aW9uLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9oaXN0b3J5LmZvcndhcmQoKTsgfTtcbiAgICBCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbi5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uICgpIHsgdGhpcy5faGlzdG9yeS5iYWNrKCk7IH07XG4gICAgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24gPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoRE9DVU1FTlQpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXG4gICAgXSwgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24pO1xuICAgIHJldHVybiBCcm93c2VyUGxhdGZvcm1Mb2NhdGlvbjtcbn0oUGxhdGZvcm1Mb2NhdGlvbikpO1xuZXhwb3J0IHsgQnJvd3NlclBsYXRmb3JtTG9jYXRpb24gfTtcbiJdfQ==","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { APP_INITIALIZER, ApplicationInitStatus, InjectionToken, Injector } from '@angular/core';\nimport { getDOM } from '../dom/dom_adapter';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport var TRANSITION_ID = new InjectionToken('TRANSITION_ID');\nexport function appInitializerFactory(transitionId, document, injector) {\n    return function () {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then(function () {\n            var dom = getDOM();\n            var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));\n            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })\n                .forEach(function (el) { return dom.remove(el); });\n        });\n    };\n}\nexport var SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\n        multi: true\n    },\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyYW5zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL3NlcnZlci10cmFuc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFVLGNBQWMsRUFBRSxRQUFRLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXZILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUUxQzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFakUsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFlBQW9CLEVBQUUsUUFBYSxFQUFFLFFBQWtCO0lBQzNGLE9BQU87UUFDTCwwRkFBMEY7UUFDMUYsY0FBYztRQUNkLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ25ELElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO1lBQ3JCLElBQU0sTUFBTSxHQUNSLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLEtBQUssWUFBWSxFQUF0RCxDQUFzRCxDQUFDO2lCQUN0RSxPQUFPLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFkLENBQWMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUFxQjtJQUMzRDtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxxQkFBcUI7UUFDakMsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDekMsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0FQUF9JTklUSUFMSVpFUiwgQXBwbGljYXRpb25Jbml0U3RhdHVzLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBJbmplY3RvciwgU3RhdGljUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge2dldERPTX0gZnJvbSAnLi4vZG9tL2RvbV9hZGFwdGVyJztcblxuLyoqXG4gKiBBbiBpZCB0aGF0IGlkZW50aWZpZXMgYSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGJlaW5nIGJvb3RzdHJhcHBlZCwgdGhhdCBzaG91bGRcbiAqIG1hdGNoIGFjcm9zcyB0aGUgY2xpZW50L3NlcnZlciBib3VuZGFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RSQU5TSVRJT05fSUQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXRpYWxpemVyRmFjdG9yeSh0cmFuc2l0aW9uSWQ6IHN0cmluZywgZG9jdW1lbnQ6IGFueSwgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgLy8gV2FpdCBmb3IgYWxsIGFwcGxpY2F0aW9uIGluaXRpYWxpemVycyB0byBiZSBjb21wbGV0ZWQgYmVmb3JlIHJlbW92aW5nIHRoZSBzdHlsZXMgc2V0IGJ5XG4gICAgLy8gdGhlIHNlcnZlci5cbiAgICBpbmplY3Rvci5nZXQoQXBwbGljYXRpb25Jbml0U3RhdHVzKS5kb25lUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IGRvbSA9IGdldERPTSgpO1xuICAgICAgY29uc3Qgc3R5bGVzOiBhbnlbXSA9XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGRvbS5xdWVyeVNlbGVjdG9yQWxsKGRvY3VtZW50LCBgc3R5bGVbbmctdHJhbnNpdGlvbl1gKSk7XG4gICAgICBzdHlsZXMuZmlsdGVyKGVsID0+IGRvbS5nZXRBdHRyaWJ1dGUoZWwsICduZy10cmFuc2l0aW9uJykgPT09IHRyYW5zaXRpb25JZClcbiAgICAgICAgICAuZm9yRWFjaChlbCA9PiBkb20ucmVtb3ZlKGVsKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBTRVJWRVJfVFJBTlNJVElPTl9QUk9WSURFUlM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogYXBwSW5pdGlhbGl6ZXJGYWN0b3J5LFxuICAgIGRlcHM6IFtUUkFOU0lUSU9OX0lELCBET0NVTUVOVCwgSW5qZWN0b3JdLFxuICAgIG11bHRpOiB0cnVlXG4gIH0sXG5dO1xuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { setTestabilityGetter, ɵglobal as global } from '@angular/core';\nimport { getDOM } from '../dom/dom_adapter';\nvar BrowserGetTestability = /** @class */ (function () {\n    function BrowserGetTestability() {\n    }\n    BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };\n    BrowserGetTestability.prototype.addToWindow = function (registry) {\n        global['getAngularTestability'] = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            var testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        global['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };\n        global['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };\n        var whenAllStable = function (callback /** TODO #9100 */) {\n            var testabilities = global['getAllAngularTestabilities']();\n            var count = testabilities.length;\n            var didWork = false;\n            var decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!global['frameworkStabilizers']) {\n            global['frameworkStabilizers'] = [];\n        }\n        global['frameworkStabilizers'].push(whenAllStable);\n    };\n    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        var t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    };\n    return BrowserGetTestability;\n}());\nexport { BrowserGetTestability };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGFiaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9icm93c2VyL3Rlc3RhYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBbUQsb0JBQW9CLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV4SCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUM7SUFBQTtJQXNEQSxDQUFDO0lBckRRLDBCQUFJLEdBQVgsY0FBZ0Isb0JBQW9CLENBQUMsSUFBSSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBFLDJDQUFXLEdBQVgsVUFBWSxRQUE2QjtRQUN2QyxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRyxVQUFDLElBQVMsRUFBRSxlQUErQjtZQUEvQixnQ0FBQSxFQUFBLHNCQUErQjtZQUMzRSxJQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQzFFLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtnQkFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsY0FBTSxPQUFBLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxFQUE5QixDQUE4QixDQUFDO1FBRTVFLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLGNBQU0sT0FBQSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsRUFBN0IsQ0FBNkIsQ0FBQztRQUUxRSxJQUFNLGFBQWEsR0FBRyxVQUFDLFFBQWEsQ0FBQyxpQkFBaUI7WUFDcEQsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQztZQUM3RCxJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO1lBQ2pDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFNLFNBQVMsR0FBRyxVQUFTLFFBQWEsQ0FBQyxpQkFBaUI7Z0JBQ3hELE9BQU8sR0FBRyxPQUFPLElBQUksUUFBUSxDQUFDO2dCQUM5QixLQUFLLEVBQUUsQ0FBQztnQkFDUixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7b0JBQ2QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQztZQUNGLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBUyxXQUFnQixDQUFDLGlCQUFpQjtnQkFDL0QsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsRUFBRTtZQUNuQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDckM7UUFDRCxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELHFEQUFxQixHQUFyQixVQUFzQixRQUE2QixFQUFFLElBQVMsRUFBRSxlQUF3QjtRQUV0RixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2IsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDM0U7UUFDRCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUF0REQsSUFzREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7R2V0VGVzdGFiaWxpdHksIFRlc3RhYmlsaXR5LCBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBzZXRUZXN0YWJpbGl0eUdldHRlciwgybVnbG9iYWwgYXMgZ2xvYmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtnZXRET019IGZyb20gJy4uL2RvbS9kb21fYWRhcHRlcic7XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyR2V0VGVzdGFiaWxpdHkgaW1wbGVtZW50cyBHZXRUZXN0YWJpbGl0eSB7XG4gIHN0YXRpYyBpbml0KCkgeyBzZXRUZXN0YWJpbGl0eUdldHRlcihuZXcgQnJvd3NlckdldFRlc3RhYmlsaXR5KCkpOyB9XG5cbiAgYWRkVG9XaW5kb3cocmVnaXN0cnk6IFRlc3RhYmlsaXR5UmVnaXN0cnkpOiB2b2lkIHtcbiAgICBnbG9iYWxbJ2dldEFuZ3VsYXJUZXN0YWJpbGl0eSddID0gKGVsZW06IGFueSwgZmluZEluQW5jZXN0b3JzOiBib29sZWFuID0gdHJ1ZSkgPT4ge1xuICAgICAgY29uc3QgdGVzdGFiaWxpdHkgPSByZWdpc3RyeS5maW5kVGVzdGFiaWxpdHlJblRyZWUoZWxlbSwgZmluZEluQW5jZXN0b3JzKTtcbiAgICAgIGlmICh0ZXN0YWJpbGl0eSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGVzdGFiaWxpdHkgZm9yIGVsZW1lbnQuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVzdGFiaWxpdHk7XG4gICAgfTtcblxuICAgIGdsb2JhbFsnZ2V0QWxsQW5ndWxhclRlc3RhYmlsaXRpZXMnXSA9ICgpID0+IHJlZ2lzdHJ5LmdldEFsbFRlc3RhYmlsaXRpZXMoKTtcblxuICAgIGdsb2JhbFsnZ2V0QWxsQW5ndWxhclJvb3RFbGVtZW50cyddID0gKCkgPT4gcmVnaXN0cnkuZ2V0QWxsUm9vdEVsZW1lbnRzKCk7XG5cbiAgICBjb25zdCB3aGVuQWxsU3RhYmxlID0gKGNhbGxiYWNrOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi8pID0+IHtcbiAgICAgIGNvbnN0IHRlc3RhYmlsaXRpZXMgPSBnbG9iYWxbJ2dldEFsbEFuZ3VsYXJUZXN0YWJpbGl0aWVzJ10oKTtcbiAgICAgIGxldCBjb3VudCA9IHRlc3RhYmlsaXRpZXMubGVuZ3RoO1xuICAgICAgbGV0IGRpZFdvcmsgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRlY3JlbWVudCA9IGZ1bmN0aW9uKGRpZFdvcmtfOiBhbnkgLyoqIFRPRE8gIzkxMDAgKi8pIHtcbiAgICAgICAgZGlkV29yayA9IGRpZFdvcmsgfHwgZGlkV29ya187XG4gICAgICAgIGNvdW50LS07XG4gICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgY2FsbGJhY2soZGlkV29yayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0ZXN0YWJpbGl0aWVzLmZvckVhY2goZnVuY3Rpb24odGVzdGFiaWxpdHk6IGFueSAvKiogVE9ETyAjOTEwMCAqLykge1xuICAgICAgICB0ZXN0YWJpbGl0eS53aGVuU3RhYmxlKGRlY3JlbWVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFnbG9iYWxbJ2ZyYW1ld29ya1N0YWJpbGl6ZXJzJ10pIHtcbiAgICAgIGdsb2JhbFsnZnJhbWV3b3JrU3RhYmlsaXplcnMnXSA9IFtdO1xuICAgIH1cbiAgICBnbG9iYWxbJ2ZyYW1ld29ya1N0YWJpbGl6ZXJzJ10ucHVzaCh3aGVuQWxsU3RhYmxlKTtcbiAgfVxuXG4gIGZpbmRUZXN0YWJpbGl0eUluVHJlZShyZWdpc3RyeTogVGVzdGFiaWxpdHlSZWdpc3RyeSwgZWxlbTogYW55LCBmaW5kSW5BbmNlc3RvcnM6IGJvb2xlYW4pOlxuICAgICAgVGVzdGFiaWxpdHl8bnVsbCB7XG4gICAgaWYgKGVsZW0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHQgPSByZWdpc3RyeS5nZXRUZXN0YWJpbGl0eShlbGVtKTtcbiAgICBpZiAodCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9IGVsc2UgaWYgKCFmaW5kSW5BbmNlc3RvcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZ2V0RE9NKCkuaXNTaGFkb3dSb290KGVsZW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kVGVzdGFiaWxpdHlJblRyZWUocmVnaXN0cnksIGdldERPTSgpLmdldEhvc3QoZWxlbSksIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5kVGVzdGFiaWxpdHlJblRyZWUocmVnaXN0cnksIGdldERPTSgpLnBhcmVudEVsZW1lbnQoZWxlbSksIHRydWUpO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getViewComponent } from '../render3/global_utils_api';\nimport { NATIVE, VIEWS } from '../render3/interfaces/container';\nimport { PARENT, TVIEW, T_HOST } from '../render3/interfaces/view';\nimport { getProp, getValue, isClassBasedValue } from '../render3/styling/class_and_style_bindings';\nimport { getStylingContext } from '../render3/styling/util';\nimport { getComponent, getContext, getInjectionTokens, getInjector, getListeners, getLocalRefs, isBrowserEvents, loadLContext, loadLContextFromNode } from '../render3/util/discovery_utils';\nimport { INTERPOLATION_DELIMITER, isPropMetadataString, renderStringify } from '../render3/util/misc_utils';\nimport { findComponentView } from '../render3/util/view_traversal_utils';\nimport { getComponentViewByIndex, getNativeByTNode, isComponent, isLContainer } from '../render3/util/view_utils';\nimport { assertDomNode } from '../util/assert';\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nvar DebugNode__PRE_R3__ = /** @class */ (function () {\n    function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n        get: function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n        get: function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n        get: function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n        get: function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n        get: function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__PRE_R3__;\n}());\nexport { DebugNode__PRE_R3__ };\nvar DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__PRE_R3__, _super);\n    function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    DebugElement__PRE_R3__.prototype.addChild = function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n        var _this = this;\n        var _a;\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, tslib_1.__spread([siblingIndex + 1, 0], newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                child.parent = _this;\n            });\n        }\n    };\n    DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    DebugElement__PRE_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n        get: function () {\n            return this\n                .childNodes //\n                .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__PRE_R3__;\n}(DebugNode__PRE_R3__));\nexport { DebugElement__PRE_R3__ };\n/**\n * @publicApi\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\nvar DebugNode__POST_R3__ = /** @class */ (function () {\n    function DebugNode__POST_R3__(nativeNode) {\n        this.nativeNode = nativeNode;\n    }\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n        get: function () {\n            var parent = this.nativeNode.parentNode;\n            return parent ? new DebugElement__POST_R3__(parent) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n        get: function () { return getInjector(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n        get: function () {\n            var nativeElement = this.nativeNode;\n            return nativeElement &&\n                (getComponent(nativeElement) || getViewComponent(nativeElement));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n        get: function () { return getContext(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n        get: function () {\n            return getListeners(this.nativeNode).filter(isBrowserEvents);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n        get: function () { return getLocalRefs(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n        get: function () { return getInjectionTokens(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__POST_R3__;\n}());\nvar DebugElement__POST_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__POST_R3__, _super);\n    function DebugElement__POST_R3__(nativeNode) {\n        var _this = this;\n        ngDevMode && assertDomNode(nativeNode);\n        _this = _super.call(this, nativeNode) || this;\n        return _this;\n    }\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n        get: function () {\n            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n        get: function () { return this.nativeElement.nodeName; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n        /**\n         *  Gets a map of property names to property values for an element.\n         *\n         *  This map includes:\n         *  - Regular property bindings (e.g. `[id]=\"id\"`)\n         *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n         *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n         *\n         *  It does not include:\n         *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n         *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n         */\n        get: function () {\n            var context = loadLContext(this.nativeNode);\n            var lView = context.lView;\n            var tData = lView[TVIEW].data;\n            var tNode = tData[context.nodeIndex];\n            var properties = collectPropertyBindings(tNode, lView, tData);\n            var hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n            var className = collectClassNames(this);\n            var output = tslib_1.__assign({}, properties, hostProperties);\n            if (className) {\n                output['className'] = output['className'] ? output['className'] + (\" \" + className) : className;\n            }\n            return output;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n        get: function () {\n            var attributes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    attributes[attr.name] = attr.value;\n                }\n            }\n            return attributes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n        get: function () {\n            var classes = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (isClassBasedValue(stylingContext, i)) {\n                            var className = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (typeof value == 'boolean') {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                classes[className] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eClasses = element.classList;\n                    for (var i = 0; i < eClasses.length; i++) {\n                        classes[eClasses[i]] = true;\n                    }\n                }\n            }\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n        get: function () {\n            var styles = {};\n            var element = this.nativeElement;\n            if (element) {\n                var lContext = loadLContextFromNode(element);\n                var stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n                if (stylingContext) {\n                    for (var i = 9 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                        if (!isClassBasedValue(stylingContext, i)) {\n                            var styleName = getProp(stylingContext, i);\n                            var value = getValue(stylingContext, i);\n                            if (value !== null) {\n                                // we want to ignore `null` since those don't overwrite the values.\n                                styles[styleName] = value;\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Fallback, just read DOM.\n                    var eStyles = element.style;\n                    for (var i = 0; i < eStyles.length; i++) {\n                        var name_1 = eStyles.item(i);\n                        styles[name_1] = eStyles.getPropertyValue(name_1);\n                    }\n                }\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n        get: function () {\n            var childNodes = this.nativeNode.childNodes;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n        get: function () {\n            var nativeElement = this.nativeElement;\n            if (!nativeElement)\n                return [];\n            var childNodes = nativeElement.children;\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugElement__POST_R3__.prototype.query = function (predicate) {\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, true);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n        var matches = [];\n        _queryAllR3(this, predicate, matches, false);\n        return matches;\n    };\n    DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__POST_R3__;\n}(DebugNode__POST_R3__));\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param parentElement the element from which the walk is started\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n    var context = loadLContext(parentElement.nativeNode);\n    var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    var e_1, _a;\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatchR3(getNativeByTNode(tNode, lView), predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponent(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            var componentView = getComponentViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild)\n                _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else {\n            // Otherwise, its children have to be processed.\n            if (tNode.child)\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        var nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        var lContainer = lView[tNode.index];\n        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type === 1 /* Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        var componentView = findComponentView(lView);\n        var componentHost = componentView[T_HOST];\n        var head = componentHost.projection[tNode.projection];\n        if (Array.isArray(head)) {\n            try {\n                for (var head_1 = tslib_1.__values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                    var nativeNode = head_1_1.value;\n                    _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode_1 = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode_1, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    else {\n        // Case 4: the TNode is a view.\n        if (tNode.child) {\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    // To determine the next node to be processed, we need to use the next or the projectionNext link,\n    // depending on whether the current node has been projected.\n    var nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n        _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (var i = 0; i < lContainer[VIEWS].length; i++) {\n        var childView = lContainer[VIEWS][i];\n        _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which prediccate shouold not be matched\n */\nfunction _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        var debugNode = getDebugNode(nativeNode);\n        if (debugNode && (elementsOnly ? debugNode instanceof DebugElement__POST_R3__ : true) &&\n            predicate(debugNode)) {\n            matches.push(debugNode);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    var bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n    while (bindingIndex < tNode.propertyMetadataEndIndex) {\n        var value = '';\n        var propMetadata = tData[bindingIndex];\n        while (!isPropMetadataString(propMetadata)) {\n            // This is the first value for an interpolation. We need to build up\n            // the full interpolation by combining runtime values in LView with\n            // the static interstitial values stored in TData.\n            value += renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n            propMetadata = tData[++bindingIndex];\n        }\n        value += lView[bindingIndex];\n        // Property metadata string has 3 parts: property name, prefix, and suffix\n        var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n        var propertyName = metadataParts[0];\n        // Attr bindings don't have property names and should be skipped\n        if (propertyName) {\n            // Wrap value with prefix and suffix (will be '' for normal bindings)\n            properties[propertyName] = metadataParts[1] + value + metadataParts[2];\n        }\n        bindingIndex++;\n    }\n    return properties;\n}\n/**\n * Retrieves the first binding index that holds values for this property\n * binding.\n *\n * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n * there can be multiple binding values, so we might have to loop backwards\n * from the metadata index until we find the first one.\n *\n * @param metadataIndex The index of the first property metadata string for\n * this node.\n * @param tData The data array for the current TView\n * @returns The first binding index for this binding\n */\nfunction getFirstBindingIndex(metadataIndex, tData) {\n    var currentBindingIndex = metadataIndex - 1;\n    // If the slot before the metadata holds a string, we know that this\n    // metadata applies to an interpolation with at least 2 bindings, and\n    // we need to search further to access the first binding value.\n    var currentValue = tData[currentBindingIndex];\n    // We need to iterate until we hit either a:\n    // - TNode (it is an element slot marking the end of `consts` section), OR a\n    // - metadata string (slot is attribute metadata or a previous node's property metadata)\n    while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n        currentValue = tData[--currentBindingIndex];\n    }\n    return currentBindingIndex + 1;\n}\nfunction collectHostPropertyBindings(tNode, lView, tData) {\n    var properties = {};\n    // Host binding values for a node are stored after directives on that node\n    var hostPropIndex = tNode.directiveEnd;\n    var propMetadata = tData[hostPropIndex];\n    // When we reach a value in TView.data that is not a string, we know we've\n    // hit the next node's providers and directives and should stop copying data.\n    while (typeof propMetadata === 'string') {\n        var propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n        properties[propertyName] = lView[hostPropIndex];\n        propMetadata = tData[++hostPropIndex];\n    }\n    return properties;\n}\nfunction collectClassNames(debugElement) {\n    var e_2, _a;\n    var classes = debugElement.classes;\n    var output = '';\n    try {\n        for (var _b = tslib_1.__values(Object.keys(classes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var className = _c.value;\n            if (classes[className]) {\n                output = output ? output + (\" \" + className) : className;\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return output;\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nvar _nativeNodeToDebugNode = new Map();\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\nexport function getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__(nativeNode) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * @publicApi\n */\nexport var getDebugNode = getDebugNode__POST_R3__;\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * @publicApi\n */\nexport var DebugNode = DebugNode__POST_R3__;\n/**\n * @publicApi\n */\nexport var DebugElement = DebugElement__POST_R3__;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵglobal as global } from '@angular/core';\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\nvar DASH_CASE_REGEXP = /-([a-z])/g;\nexport function camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\nexport function dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        var ng = global['ng'] = global['ng'] || {};\n        ng[name] = value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2RvbS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxPQUFPLElBQUksTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWhELElBQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDO0FBQ3JDLElBQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDO0FBR3JDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxLQUFhO0lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtRQUFDLFdBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsc0JBQWM7O1FBQUssT0FBQSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRTtJQUF4QixDQUF3QixDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxLQUFhO0lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtRQUFDLFdBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsc0JBQWM7O1FBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFO0lBQWxCLENBQWtCLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxJQUFZLEVBQUUsS0FBVTtJQUNsRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNoRCwwRUFBMEU7UUFDMUUsZ0dBQWdHO1FBQ2hHLDBGQUEwRjtRQUMxRiw4REFBOEQ7UUFDOUQsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFJLE1BQU0sQ0FBQyxJQUFJLENBQXFDLElBQUksRUFBRSxDQUFDO1FBQ2xGLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDbEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge8m1Z2xvYmFsIGFzIGdsb2JhbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IENBTUVMX0NBU0VfUkVHRVhQID0gLyhbQS1aXSkvZztcbmNvbnN0IERBU0hfQ0FTRV9SRUdFWFAgPSAvLShbYS16XSkvZztcblxuXG5leHBvcnQgZnVuY3Rpb24gY2FtZWxDYXNlVG9EYXNoQ2FzZShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsICguLi5tOiBzdHJpbmdbXSkgPT4gJy0nICsgbVsxXS50b0xvd2VyQ2FzZSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhc2hDYXNlVG9DYW1lbENhc2UoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKERBU0hfQ0FTRV9SRUdFWFAsICguLi5tOiBzdHJpbmdbXSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuLyoqXG4gKiBFeHBvcnRzIHRoZSB2YWx1ZSB1bmRlciBhIGdpdmVuIGBuYW1lYCBpbiB0aGUgZ2xvYmFsIHByb3BlcnR5IGBuZ2AuIEZvciBleGFtcGxlIGBuZy5wcm9iZWAgaWZcbiAqIGBuYW1lYCBpcyBgJ3Byb2JlJ2AuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHVuZGVyIHdoaWNoIGl0IHdpbGwgYmUgZXhwb3J0ZWQuIEtlZXAgaW4gbWluZCB0aGlzIHdpbGwgYmUgYSBwcm9wZXJ0eSBvZiB0aGVcbiAqIGdsb2JhbCBgbmdgIG9iamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXhwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0TmdWYXIobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gIGlmICh0eXBlb2YgQ09NUElMRUQgPT09ICd1bmRlZmluZWQnIHx8ICFDT01QSUxFRCkge1xuICAgIC8vIE5vdGU6IHdlIGNhbid0IGV4cG9ydCBgbmdgIHdoZW4gdXNpbmcgY2xvc3VyZSBlbmhhbmNlZCBvcHRpbWl6YXRpb24gYXM6XG4gICAgLy8gLSBjbG9zdXJlIGRlY2xhcmVzIGdsb2JhbHMgaXRzZWxmIGZvciBtaW5pZmllZCBuYW1lcywgd2hpY2ggc29tZXRpbWVzIGNsb2JiZXIgb3VyIGBuZ2AgZ2xvYmFsXG4gICAgLy8gLSB3ZSBjYW4ndCBkZWNsYXJlIGEgY2xvc3VyZSBleHRlcm4gYXMgdGhlIG5hbWVzcGFjZSBgbmdgIGlzIGFscmVhZHkgdXNlZCB3aXRoaW4gR29vZ2xlXG4gICAgLy8gICBmb3IgdHlwaW5ncyBmb3IgYW5ndWxhckpTICh2aWEgYGdvb2cucHJvdmlkZSgnbmcuLi4uJylgKS5cbiAgICBjb25zdCBuZyA9IGdsb2JhbFsnbmcnXSA9IChnbG9iYWxbJ25nJ10gYXN7W2tleTogc3RyaW5nXTogYW55fSB8IHVuZGVmaW5lZCkgfHwge307XG4gICAgbmdbbmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as core from '@angular/core';\nimport { exportNgVar } from '../util';\nvar CORE_TOKENS = {\n    'ApplicationRef': core.ApplicationRef,\n    'NgZone': core.NgZone,\n};\nvar INSPECT_GLOBAL_NAME = 'probe';\nvar CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElement(element) {\n    return core.getDebugNode(element);\n}\nexport function _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, tslib_1.__assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return function () { return inspectNativeElement; };\n}\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport var ELEMENT_PROBE_PROVIDERS = [\n    {\n        provide: core.APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [core.NgProbeToken, new core.Optional()],\n        ],\n        multi: true,\n    },\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfcHJvYmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9wbGF0Zm9ybS1icm93c2VyL3NyYy9kb20vZGVidWcvbmdfcHJvYmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE9BQU8sS0FBSyxJQUFJLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFcEMsSUFBTSxXQUFXLEdBQUc7SUFDbEIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWM7SUFDckMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO0NBQ3RCLENBQUM7QUFFRixJQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQztBQUNwQyxJQUFNLHVCQUF1QixHQUFHLFlBQVksQ0FBQztBQUU3Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE9BQVk7SUFDL0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLFVBQStCO0lBQzVELFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZELFdBQVcsQ0FBQyx1QkFBdUIsdUJBQU0sV0FBVyxFQUFLLG1CQUFtQixDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2pHLE9BQU8sY0FBTSxPQUFBLG9CQUFvQixFQUFwQixDQUFvQixDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLE1BQTJCO0lBQ3RELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQVMsRUFBRSxDQUFNLElBQUssT0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBOUIsQ0FBOEIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBb0I7SUFDdEQ7UUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWU7UUFDN0IsVUFBVSxFQUFFLGNBQWM7UUFDMUIsSUFBSSxFQUFFO1lBQ0osQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3pDO1FBQ0QsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2V4cG9ydE5nVmFyfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgQ09SRV9UT0tFTlMgPSB7XG4gICdBcHBsaWNhdGlvblJlZic6IGNvcmUuQXBwbGljYXRpb25SZWYsXG4gICdOZ1pvbmUnOiBjb3JlLk5nWm9uZSxcbn07XG5cbmNvbnN0IElOU1BFQ1RfR0xPQkFMX05BTUUgPSAncHJvYmUnO1xuY29uc3QgQ09SRV9UT0tFTlNfR0xPQkFMX05BTUUgPSAnY29yZVRva2Vucyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHtAbGluayBEZWJ1Z0VsZW1lbnR9IGZvciB0aGUgZ2l2ZW4gbmF0aXZlIERPTSBlbGVtZW50LCBvclxuICogbnVsbCBpZiB0aGUgZ2l2ZW4gbmF0aXZlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhbiBBbmd1bGFyIHZpZXcgYXNzb2NpYXRlZFxuICogd2l0aCBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3ROYXRpdmVFbGVtZW50KGVsZW1lbnQ6IGFueSk6IGNvcmUuRGVidWdOb2RlfG51bGwge1xuICByZXR1cm4gY29yZS5nZXREZWJ1Z05vZGUoZWxlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlTmdQcm9iZShjb3JlVG9rZW5zOiBjb3JlLk5nUHJvYmVUb2tlbltdKTogYW55IHtcbiAgZXhwb3J0TmdWYXIoSU5TUEVDVF9HTE9CQUxfTkFNRSwgaW5zcGVjdE5hdGl2ZUVsZW1lbnQpO1xuICBleHBvcnROZ1ZhcihDT1JFX1RPS0VOU19HTE9CQUxfTkFNRSwgey4uLkNPUkVfVE9LRU5TLCAuLi5fbmdQcm9iZVRva2Vuc1RvTWFwKGNvcmVUb2tlbnMgfHwgW10pfSk7XG4gIHJldHVybiAoKSA9PiBpbnNwZWN0TmF0aXZlRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gX25nUHJvYmVUb2tlbnNUb01hcCh0b2tlbnM6IGNvcmUuTmdQcm9iZVRva2VuW10pOiB7W25hbWU6IHN0cmluZ106IGFueX0ge1xuICByZXR1cm4gdG9rZW5zLnJlZHVjZSgocHJldjogYW55LCB0OiBhbnkpID0+IChwcmV2W3QubmFtZV0gPSB0LnRva2VuLCBwcmV2KSwge30pO1xufVxuXG4vKipcbiAqIFByb3ZpZGVycyB3aGljaCBzdXBwb3J0IGRlYnVnZ2luZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyAoZS5nLiB2aWEgYG5nLnByb2JlYCkuXG4gKi9cbmV4cG9ydCBjb25zdCBFTEVNRU5UX1BST0JFX1BST1ZJREVSUzogY29yZS5Qcm92aWRlcltdID0gW1xuICB7XG4gICAgcHJvdmlkZTogY29yZS5BUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogX2NyZWF0ZU5nUHJvYmUsXG4gICAgZGVwczogW1xuICAgICAgW2NvcmUuTmdQcm9iZVRva2VuLCBuZXcgY29yZS5PcHRpb25hbCgpXSxcbiAgICBdLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuXTtcbiJdfQ==","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, InjectionToken, NgZone } from '@angular/core';\nimport { getDOM } from '../dom_adapter';\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nvar EventManager = /** @class */ (function () {\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    function EventManager(plugins, _zone) {\n        var _this = this;\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach(function (p) { return p.manager = _this; });\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addEventListener = function (element, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    };\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     */\n    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\n        var plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    };\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    EventManager.prototype.getZone = function () { return this._zone; };\n    /** @internal */\n    EventManager.prototype._findPluginFor = function (eventName) {\n        var plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        var plugins = this._plugins;\n        for (var i = 0; i < plugins.length; i++) {\n            var plugin_1 = plugins[i];\n            if (plugin_1.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin_1);\n                return plugin_1;\n            }\n        }\n        throw new Error(\"No event manager plugin found for event \" + eventName);\n    };\n    EventManager = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(EVENT_MANAGER_PLUGINS)),\n        tslib_1.__metadata(\"design:paramtypes\", [Array, NgZone])\n    ], EventManager);\nEventManager.ngInjectableDef = ɵngcc0.defineInjectable({ token: EventManager, factory: function EventManager_Factory(t) { return new (t || EventManager)(ɵngcc0.inject(EVENT_MANAGER_PLUGINS), ɵngcc0.inject(NgZone)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(EventManager, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Array, decorators: [{\r\n                type: Inject,\r\n                args: [EVENT_MANAGER_PLUGINS]\r\n            }] }, { type: NgZone }]; }, { _zone: [], _eventNameToPlugin: [], _plugins: [], addEventListener: [], addGlobalEventListener: [], getZone: [], _findPluginFor: [] });\n    return EventManager;\n}());\nexport { EventManager };\nvar EventManagerPlugin = /** @class */ (function () {\n    function EventManagerPlugin(_doc) {\n        this._doc = _doc;\n    }\n    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n        var target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\n        }\n        return this.addEventListener(target, eventName, handler);\n    };\n    return EventManagerPlugin;\n}());\nexport { EventManagerPlugin };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2VzbTUvc3JjL2RvbS9ldmVudHMvZXZlbnRfbWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBK0V1QyxBQUNsQjs7Ozs7Ozs7OztnTEFHQSIsImZpbGUiOiJldmVudF9tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0RE9NIH0gZnJvbSAnLi4vZG9tX2FkYXB0ZXInO1xuLyoqXG4gKiBUaGUgaW5qZWN0aW9uIHRva2VuIGZvciB0aGUgZXZlbnQtbWFuYWdlciBwbHVnLWluIHNlcnZpY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdmFyIEVWRU5UX01BTkFHRVJfUExVR0lOUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignRXZlbnRNYW5hZ2VyUGx1Z2lucycpO1xuLyoqXG4gKiBBbiBpbmplY3RhYmxlIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBldmVudCBtYW5hZ2VtZW50IGZvciBBbmd1bGFyXG4gKiB0aHJvdWdoIGEgYnJvd3NlciBwbHVnLWluLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIEV2ZW50TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGUgZXZlbnQtbWFuYWdlciBzZXJ2aWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50TWFuYWdlcihwbHVnaW5zLCBfem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XG4gICAgICAgIHRoaXMuX2V2ZW50TmFtZVRvUGx1Z2luID0gbmV3IE1hcCgpO1xuICAgICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAubWFuYWdlciA9IF90aGlzOyB9KTtcbiAgICAgICAgdGhpcy5fcGx1Z2lucyA9IHBsdWdpbnMuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIGEgc3BlY2lmaWMgZWxlbWVudCBhbmQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHJlY2VpdmUgZXZlbnQgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gZm9yLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBub3RpZmljYXRpb24gb2NjdXJzLiBSZWNlaXZlcyB0aGVcbiAgICAgKiBldmVudCBvYmplY3QgYXMgYW4gYXJndW1lbnQuXG4gICAgICogQHJldHVybnMgIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGhhbmRsZXIuXG4gICAgICovXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICB2YXIgcGx1Z2luID0gdGhpcy5fZmluZFBsdWdpbkZvcihldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gcGx1Z2luLmFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGdsb2JhbCBoYW5kbGVyIGZvciBhbiBldmVudCBpbiBhIHRhcmdldCB2aWV3LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHRhcmdldCBmb3IgZ2xvYmFsIGV2ZW50IG5vdGlmaWNhdGlvbnMuIE9uZSBvZiBcIndpbmRvd1wiLCBcImRvY3VtZW50XCIsIG9yIFwiYm9keVwiLlxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBvY2N1cnMuIFJlY2VpdmVzIHRoZVxuICAgICAqIGV2ZW50IG9iamVjdCBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBoYW5kbGVyLlxuICAgICAqL1xuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUuYWRkR2xvYmFsRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICB2YXIgcGx1Z2luID0gdGhpcy5fZmluZFBsdWdpbkZvcihldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gcGx1Z2luLmFkZEdsb2JhbEV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBjb21waWxhdGlvbiB6b25lIGluIHdoaWNoIGV2ZW50IGxpc3RlbmVycyBhcmUgcmVnaXN0ZXJlZC5cbiAgICAgKi9cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLmdldFpvbmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl96b25lOyB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLl9maW5kUGx1Z2luRm9yID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICB2YXIgcGx1Z2luID0gdGhpcy5fZXZlbnROYW1lVG9QbHVnaW4uZ2V0KGV2ZW50TmFtZSk7XG4gICAgICAgIGlmIChwbHVnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwbHVnaW47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsdWdpbnMgPSB0aGlzLl9wbHVnaW5zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwbHVnaW5fMSA9IHBsdWdpbnNbaV07XG4gICAgICAgICAgICBpZiAocGx1Z2luXzEuc3VwcG9ydHMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TmFtZVRvUGx1Z2luLnNldChldmVudE5hbWUsIHBsdWdpbl8xKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGx1Z2luXzE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXZlbnQgbWFuYWdlciBwbHVnaW4gZm91bmQgZm9yIGV2ZW50IFwiICsgZXZlbnROYW1lKTtcbiAgICB9O1xuICAgIEV2ZW50TWFuYWdlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDAsIEluamVjdChFVkVOVF9NQU5BR0VSX1BMVUdJTlMpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0FycmF5LCBOZ1pvbmVdKVxuICAgIF0sIEV2ZW50TWFuYWdlcik7XG4gICAgcmV0dXJuIEV2ZW50TWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBFdmVudE1hbmFnZXIgfTtcbnZhciBFdmVudE1hbmFnZXJQbHVnaW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRNYW5hZ2VyUGx1Z2luKF9kb2MpIHtcbiAgICAgICAgdGhpcy5fZG9jID0gX2RvYztcbiAgICB9XG4gICAgRXZlbnRNYW5hZ2VyUGx1Z2luLnByb3RvdHlwZS5hZGRHbG9iYWxFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0RE9NKCkuZ2V0R2xvYmFsRXZlbnRUYXJnZXQodGhpcy5fZG9jLCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGV2ZW50IHRhcmdldCBcIiArIHRhcmdldCArIFwiIGZvciBldmVudCBcIiArIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlbnRNYW5hZ2VyUGx1Z2luO1xufSgpKTtcbmV4cG9ydCB7IEV2ZW50TWFuYWdlclBsdWdpbiB9O1xuIl19","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from './dom_adapter';\nvar SharedStylesHost = /** @class */ (function () {\n    function SharedStylesHost() {\n        /** @internal */\n        this._stylesSet = new Set();\n    }\n    SharedStylesHost.prototype.addStyles = function (styles) {\n        var _this = this;\n        var additions = new Set();\n        styles.forEach(function (style) {\n            if (!_this._stylesSet.has(style)) {\n                _this._stylesSet.add(style);\n                additions.add(style);\n            }\n        });\n        this.onStylesAdded(additions);\n    };\n    SharedStylesHost.prototype.onStylesAdded = function (additions) { };\n    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };\nSharedStylesHost.ngInjectableDef = ɵngcc0.defineInjectable({ token: SharedStylesHost, factory: function SharedStylesHost_Factory(t) { return new (t || SharedStylesHost)(); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SharedStylesHost, [{\r\n        type: Injectable\r\n    }], function () { return []; }, { _stylesSet: [], addStyles: [], onStylesAdded: [], getAllStyles: [] });\n    return SharedStylesHost;\n}());\nexport { SharedStylesHost };\nvar DomSharedStylesHost = /** @class */ (function (_super) {\n    tslib_1.__extends(DomSharedStylesHost, _super);\n    function DomSharedStylesHost(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._hostNodes = new Set();\n        _this._styleNodes = new Set();\n        _this._hostNodes.add(_doc.head);\n        return _this;\n    }\n    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\n        var _this = this;\n        styles.forEach(function (style) {\n            var styleEl = _this._doc.createElement('style');\n            styleEl.textContent = style;\n            _this._styleNodes.add(host.appendChild(styleEl));\n        });\n    };\n    DomSharedStylesHost.prototype.addHost = function (hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    };\n    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\n    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\n        var _this = this;\n        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });\n    };\n    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };\n    DomSharedStylesHost = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], DomSharedStylesHost);\nDomSharedStylesHost.ngInjectableDef = ɵngcc0.defineInjectable({ token: DomSharedStylesHost, factory: function DomSharedStylesHost_Factory(t) { return new (t || DomSharedStylesHost)(ɵngcc0.inject(DOCUMENT)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DomSharedStylesHost, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { _addStylesToHost: [], addHost: [], removeHost: [], onStylesAdded: [], ngOnDestroy: [] });\n    return DomSharedStylesHost;\n}(SharedStylesHost));\nexport { DomSharedStylesHost };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3NhbmRib3gvaXZ5LWJ1bmRsZS1zaXplL25vZGVfbW9kdWxlcy9AYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2VzbTUvc3JjL2RvbS9zaGFyZWRfc3R5bGVzX2hvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tHQTRCa0c7Ozs7NEdBR3pFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4Q0FnQ3FCLEFBQ3pCOzs7Ozs7Ozs7O2lIQUdPIiwiZmlsZSI6InNoYXJlZF9zdHlsZXNfaG9zdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldERPTSB9IGZyb20gJy4vZG9tX2FkYXB0ZXInO1xudmFyIFNoYXJlZFN0eWxlc0hvc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hhcmVkU3R5bGVzSG9zdCgpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9zdHlsZXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIFNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLmFkZFN0eWxlcyA9IGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFkZGl0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgc3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9zdHlsZXNTZXQuaGFzKHN0eWxlKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zdHlsZXNTZXQuYWRkKHN0eWxlKTtcbiAgICAgICAgICAgICAgICBhZGRpdGlvbnMuYWRkKHN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub25TdHlsZXNBZGRlZChhZGRpdGlvbnMpO1xuICAgIH07XG4gICAgU2hhcmVkU3R5bGVzSG9zdC5wcm90b3R5cGUub25TdHlsZXNBZGRlZCA9IGZ1bmN0aW9uIChhZGRpdGlvbnMpIHsgfTtcbiAgICBTaGFyZWRTdHlsZXNIb3N0LnByb3RvdHlwZS5nZXRBbGxTdHlsZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3N0eWxlc1NldCk7IH07XG4gICAgU2hhcmVkU3R5bGVzSG9zdCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKVxuICAgIF0sIFNoYXJlZFN0eWxlc0hvc3QpO1xuICAgIHJldHVybiBTaGFyZWRTdHlsZXNIb3N0O1xufSgpKTtcbmV4cG9ydCB7IFNoYXJlZFN0eWxlc0hvc3QgfTtcbnZhciBEb21TaGFyZWRTdHlsZXNIb3N0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERvbVNoYXJlZFN0eWxlc0hvc3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9tU2hhcmVkU3R5bGVzSG9zdChfZG9jKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9kb2MgPSBfZG9jO1xuICAgICAgICBfdGhpcy5faG9zdE5vZGVzID0gbmV3IFNldCgpO1xuICAgICAgICBfdGhpcy5fc3R5bGVOb2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuX2hvc3ROb2Rlcy5hZGQoX2RvYy5oZWFkKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEb21TaGFyZWRTdHlsZXNIb3N0LnByb3RvdHlwZS5fYWRkU3R5bGVzVG9Ib3N0ID0gZnVuY3Rpb24gKHN0eWxlcywgaG9zdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZUVsID0gX3RoaXMuX2RvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgc3R5bGVFbC50ZXh0Q29udGVudCA9IHN0eWxlO1xuICAgICAgICAgICAgX3RoaXMuX3N0eWxlTm9kZXMuYWRkKGhvc3QuYXBwZW5kQ2hpbGQoc3R5bGVFbCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIERvbVNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLmFkZEhvc3QgPSBmdW5jdGlvbiAoaG9zdE5vZGUpIHtcbiAgICAgICAgdGhpcy5fYWRkU3R5bGVzVG9Ib3N0KHRoaXMuX3N0eWxlc1NldCwgaG9zdE5vZGUpO1xuICAgICAgICB0aGlzLl9ob3N0Tm9kZXMuYWRkKGhvc3ROb2RlKTtcbiAgICB9O1xuICAgIERvbVNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLnJlbW92ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdE5vZGUpIHsgdGhpcy5faG9zdE5vZGVzLmRlbGV0ZShob3N0Tm9kZSk7IH07XG4gICAgRG9tU2hhcmVkU3R5bGVzSG9zdC5wcm90b3R5cGUub25TdHlsZXNBZGRlZCA9IGZ1bmN0aW9uIChhZGRpdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5faG9zdE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGhvc3ROb2RlKSB7IHJldHVybiBfdGhpcy5fYWRkU3R5bGVzVG9Ib3N0KGFkZGl0aW9ucywgaG9zdE5vZGUpOyB9KTtcbiAgICB9O1xuICAgIERvbVNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9zdHlsZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlTm9kZSkgeyByZXR1cm4gZ2V0RE9NKCkucmVtb3ZlKHN0eWxlTm9kZSk7IH0pOyB9O1xuICAgIERvbVNoYXJlZFN0eWxlc0hvc3QgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoRE9DVU1FTlQpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXG4gICAgXSwgRG9tU2hhcmVkU3R5bGVzSG9zdCk7XG4gICAgcmV0dXJuIERvbVNoYXJlZFN0eWxlc0hvc3Q7XG59KFNoYXJlZFN0eWxlc0hvc3QpKTtcbmV4cG9ydCB7IERvbVNoYXJlZFN0eWxlc0hvc3QgfTtcbiJdfQ==","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injectable, RendererStyleFlags2, ViewEncapsulation } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { DomSharedStylesHost } from './shared_styles_host';\nexport var NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\nvar COMPONENT_REGEX = /%COMP%/g;\nexport var COMPONENT_VARIABLE = '%COMP%';\nexport var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nexport var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\nexport function shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function flattenStyles(compId, styles, target) {\n    for (var i = 0; i < styles.length; i++) {\n        var style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\nfunction decoratePreventDefault(eventHandler) {\n    return function (event) {\n        var allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    };\n}\nvar DomRendererFactory2 = /** @class */ (function () {\n    function DomRendererFactory2(eventManager, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    DomRendererFactory2.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                var renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer =\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                renderer.applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    var styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    };\n    DomRendererFactory2.prototype.begin = function () { };\n    DomRendererFactory2.prototype.end = function () { };\n    DomRendererFactory2 = tslib_1.__decorate([\n        tslib_1.__metadata(\"design:paramtypes\", [EventManager, DomSharedStylesHost])\n    ], DomRendererFactory2);\nDomRendererFactory2.ngInjectableDef = ɵngcc0.defineInjectable({ token: DomRendererFactory2, factory: function DomRendererFactory2_Factory(t) { return new (t || DomRendererFactory2)(ɵngcc0.inject(EventManager), ɵngcc0.inject(DomSharedStylesHost)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DomRendererFactory2, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: EventManager }, { type: DomSharedStylesHost }]; }, { eventManager: [], sharedStylesHost: [], rendererByCompId: [], defaultRenderer: [], createRenderer: [], begin: [], end: [] });\n    return DomRendererFactory2;\n}());\nexport { DomRendererFactory2 };\nvar DefaultDomRenderer2 = /** @class */ (function () {\n    function DefaultDomRenderer2(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    DefaultDomRenderer2.prototype.destroy = function () { };\n    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {\n        if (namespace) {\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n            // will result in undefined, so we just return the namespace here.\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    };\n    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };\n    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };\n    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\n    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    };\n    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n        var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    };\n    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\n    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\n    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + \":\" + name;\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    };\n    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        if (namespace) {\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            var namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n                // which is wrong.\n                el.removeAttribute(namespace + \":\" + name);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    };\n    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\n    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\n    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    };\n    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    };\n    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    };\n    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };\n    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n        }\n        return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n    };\n    return DefaultDomRenderer2;\n}());\nvar AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\n    }\n}\nvar EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {\n    tslib_1.__extends(EmulatedEncapsulationDomRenderer2, _super);\n    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.component = component;\n        var styles = flattenStyles(component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        _this.contentAttr = shimContentAttribute(component.id);\n        _this.hostAttr = shimHostAttribute(component.id);\n        return _this;\n    }\n    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\n    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {\n        var el = _super.prototype.createElement.call(this, parent, name);\n        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\n        return el;\n    };\n    return EmulatedEncapsulationDomRenderer2;\n}(DefaultDomRenderer2));\nvar ShadowDomRenderer = /** @class */ (function (_super) {\n    tslib_1.__extends(ShadowDomRenderer, _super);\n    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.sharedStylesHost = sharedStylesHost;\n        _this.hostEl = hostEl;\n        _this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        }\n        else {\n            _this.shadowRoot = hostEl.createShadowRoot();\n        }\n        _this.sharedStylesHost.addHost(_this.shadowRoot);\n        var styles = flattenStyles(component.id, component.styles, []);\n        for (var i = 0; i < styles.length; i++) {\n            var styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            _this.shadowRoot.appendChild(styleEl);\n        }\n        return _this;\n    }\n    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };\n    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };\n    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {\n        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);\n    };\n    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\n    };\n    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {\n        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);\n    };\n    ShadowDomRenderer.prototype.parentNode = function (node) {\n        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));\n    };\n    return ShadowDomRenderer;\n}(DefaultDomRenderer2));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\nvar ɵ0 = function (v) {\n    return '__zone_symbol__' + v;\n};\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nvar __symbol__ = (typeof Zone !== 'undefined') && Zone['__symbol__'] || ɵ0;\nvar ADD_EVENT_LISTENER = __symbol__('addEventListener');\nvar REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\nvar symbolNames = {};\nvar FALSE = 'FALSE';\nvar ANGULAR = 'ANGULAR';\nvar NATIVE_ADD_LISTENER = 'addEventListener';\nvar NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\nvar stopSymbol = '__zone_symbol__propagationStopped';\nvar stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\nvar blackListedEvents = (typeof Zone !== 'undefined') && Zone[__symbol__('BLACK_LISTED_EVENTS')];\nvar blackListedMap;\nif (blackListedEvents) {\n    blackListedMap = {};\n    blackListedEvents.forEach(function (eventName) { blackListedMap[eventName] = eventName; });\n}\nvar isBlackListedEvent = function (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n};\nvar ɵ1 = isBlackListedEvent;\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nvar globalListener = function (event) {\n    var symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    var taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    var args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        var taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        var copiedTasks = taskDatas.slice();\n        for (var i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (event[stopSymbol] === true) {\n                break;\n            }\n            var taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n};\nvar ɵ2 = globalListener;\nvar DomEventsPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(DomEventsPlugin, _super);\n    function DomEventsPlugin(doc, ngZone, platformId) {\n        var _this = _super.call(this, doc) || this;\n        _this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            _this.patchEvent();\n        }\n        return _this;\n    }\n    DomEventsPlugin.prototype.patchEvent = function () {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (Event.prototype[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        var delegate = Event.prototype[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // should call native delegate in case\n            // in some environment part of the application\n            // will not use the patched Event\n            delegate && delegate.apply(this, arguments);\n        };\n    };\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    DomEventsPlugin.prototype.supports = function (eventName) { return true; };\n    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        /**\n         * This code is about to add a listener to the DOM. If Zone.js is present, than\n         * `addEventListener` has been patched. The patched code adds overhead in both\n         * memory and speed (3x slower) than native. For this reason if we detect that\n         * Zone.js is present we use a simple version of zone aware addEventListener instead.\n         * The result is faster registration and the zone will be restored.\n         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n         * will not be invoked\n         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n         *\n         * NOTE: it is possible that the element is from different iframe, and so we\n         * have to check before we execute the method.\n         */\n        var self = this;\n        var zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        var callback = handler;\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            var symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            var taskDatas = element[symbolName];\n            var globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = element[symbolName] = [];\n            }\n            var zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                var callbackRegistered = false;\n                for (var i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return function () { return _this.removeEventListener(element, eventName, callback); };\n    };\n    DomEventsPlugin.prototype.removeEventListener = function (target, eventName, callback) {\n        var underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        var symbolName = symbolNames[eventName];\n        var taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        var found = false;\n        for (var i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    };\n    DomEventsPlugin = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(PLATFORM_ID)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object, NgZone, Object])\n    ], DomEventsPlugin);\nDomEventsPlugin.ngInjectableDef = ɵngcc0.defineInjectable({ token: DomEventsPlugin, factory: function DomEventsPlugin_Factory(t) { return new (t || DomEventsPlugin)(ɵngcc0.inject(DOCUMENT), ɵngcc0.inject(NgZone), ɵngcc0.inject(PLATFORM_ID, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DomEventsPlugin, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: NgZone }, { type: Object, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, { patchEvent: [], supports: [], addEventListener: [], removeEventListener: [] });\n    return DomEventsPlugin;\n}(EventManagerPlugin));\nexport { DomEventsPlugin };\nexport { ɵ0, ɵ1, ɵ2 };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, InjectionToken, Optional, ɵConsole as Console } from '@angular/core';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * Supported HammerJS recognizer event names.\n */\nvar EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport var HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nvar HammerGestureConfig = /** @class */ (function () {\n    function HammerGestureConfig() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n        * Maps gesture event names to a set of configuration options\n        * that specify overrides to the default values for specific properties.\n        *\n        * The key is a supported event name to be configured,\n        * and the options object contains a set of properties, with override values\n        * to be applied to the named recognizer event.\n        * For example, to disable recognition of the rotate event, specify\n        *  `{\"rotate\": {\"enable\": false}}`.\n        *\n        * Properties that are not present take the HammerJS default values.\n        * For information about which properties are supported for which events,\n        * and their allowed and default values, see\n        * [HammerJS documentation](http://hammerjs.github.io/).\n        *\n        */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    HammerGestureConfig.prototype.buildHammer = function (element) {\n        var mc = new Hammer(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (var eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    };\nHammerGestureConfig.ngInjectableDef = ɵngcc0.defineInjectable({ token: HammerGestureConfig, factory: function HammerGestureConfig_Factory(t) { return new (t || HammerGestureConfig)(); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(HammerGestureConfig, [{\r\n        type: Injectable\r\n    }], function () { return []; }, { events: [], overrides: [], buildHammer: [] });\n    return HammerGestureConfig;\n}());\nexport { HammerGestureConfig };\nvar HammerGesturesPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(HammerGesturesPlugin, _super);\n    function HammerGesturesPlugin(doc, _config, console, loader) {\n        var _this = _super.call(this, doc) || this;\n        _this._config = _config;\n        _this.console = console;\n        _this.loader = loader;\n        return _this;\n    }\n    HammerGesturesPlugin.prototype.supports = function (eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!window.Hammer && !this.loader) {\n            this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because Hammer.JS is not \" +\n                \"loaded and no custom loader has been specified.\");\n            return false;\n        }\n        return true;\n    };\n    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        var zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!window.Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            var cancelRegistration_1 = false;\n            var deregister_1 = function () { cancelRegistration_1 = true; };\n            this.loader()\n                .then(function () {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!window.Hammer) {\n                    _this.console.warn(\"The custom HAMMER_LOADER completed, but Hammer.JS is not present.\");\n                    deregister_1 = function () { };\n                    return;\n                }\n                if (!cancelRegistration_1) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister_1 = _this.addEventListener(element, eventName, handler);\n                }\n            })\n                .catch(function () {\n                _this.console.warn(\"The \\\"\" + eventName + \"\\\" event cannot be bound because the custom \" +\n                    \"Hammer.JS loader failed.\");\n                deregister_1 = function () { };\n            });\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return function () { deregister_1(); };\n        }\n        return zone.runOutsideAngular(function () {\n            // Creating the manager bind events, must be done outside of angular\n            var mc = _this._config.buildHammer(element);\n            var callback = function (eventObj) {\n                zone.runGuarded(function () { handler(eventObj); });\n            };\n            mc.on(eventName, callback);\n            return function () {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            };\n        });\n    };\n    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\n    HammerGesturesPlugin = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__param(1, Inject(HAMMER_GESTURE_CONFIG)),\n        tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(HAMMER_LOADER)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object, HammerGestureConfig, Console, Object])\n    ], HammerGesturesPlugin);\nHammerGesturesPlugin.ngInjectableDef = ɵngcc0.defineInjectable({ token: HammerGesturesPlugin, factory: function HammerGesturesPlugin_Factory(t) { return new (t || HammerGesturesPlugin)(ɵngcc0.inject(DOCUMENT), ɵngcc0.inject(HAMMER_GESTURE_CONFIG), ɵngcc0.inject(Console), ɵngcc0.inject(HAMMER_LOADER, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(HammerGesturesPlugin, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: HammerGestureConfig, decorators: [{\r\n                type: Inject,\r\n                args: [HAMMER_GESTURE_CONFIG]\r\n            }] }, { type: Console }, { type: Object, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [HAMMER_LOADER]\r\n            }] }]; }, { supports: [], addEventListener: [], isCustomEvent: [] });\n    return HammerGesturesPlugin;\n}(EventManagerPlugin));\nexport { HammerGesturesPlugin };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { getDOM } from '../dom_adapter';\nimport { EventManagerPlugin } from './event_manager';\n/**\n * Defines supported modifiers for key events.\n */\nvar MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nvar ɵ0 = function (event) { return event.altKey; }, ɵ1 = function (event) { return event.ctrlKey; }, ɵ2 = function (event) { return event.metaKey; }, ɵ3 = function (event) { return event.shiftKey; };\n/**\n * Retrieves modifiers from key-event objects.\n */\nvar MODIFIER_KEY_GETTERS = {\n    'alt': ɵ0,\n    'control': ɵ1,\n    'meta': ɵ2,\n    'shift': ɵ3\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nvar KeyEventsPlugin = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyEventsPlugin, _super);\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    function KeyEventsPlugin(doc) {\n        return _super.call(this, doc) || this;\n    }\n    KeyEventsPlugin_1 = KeyEventsPlugin;\n    /**\n      * Reports whether a named key event is supported.\n      * @param eventName The event name to query.\n      * @return True if the named key event is supported.\n     */\n    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin_1.parseEventName(eventName) != null; };\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n    */\n    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var parsedEvent = KeyEventsPlugin_1.parseEventName(eventName);\n        var outsideHandler = KeyEventsPlugin_1.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(function () {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    };\n    KeyEventsPlugin.parseEventName = function (eventName) {\n        var parts = eventName.toLowerCase().split('.');\n        var domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        var key = KeyEventsPlugin_1._normalizeKey(parts.pop());\n        var fullKey = '';\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            var index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        var result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    };\n    KeyEventsPlugin.getEventFullKey = function (event) {\n        var fullKey = '';\n        var key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            if (modifierName != key) {\n                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        });\n        fullKey += key;\n        return fullKey;\n    };\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {\n        return function (event /** TODO #9100 */) {\n            if (KeyEventsPlugin_1.getEventFullKey(event) === fullKey) {\n                zone.runGuarded(function () { return handler(event); });\n            }\n        };\n    };\n    /** @internal */\n    KeyEventsPlugin._normalizeKey = function (keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    };\n    var KeyEventsPlugin_1;\n    KeyEventsPlugin = KeyEventsPlugin_1 = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], KeyEventsPlugin);\nKeyEventsPlugin.ngInjectableDef = ɵngcc0.defineInjectable({ token: KeyEventsPlugin, factory: function KeyEventsPlugin_Factory(t) { return new (t || KeyEventsPlugin)(ɵngcc0.inject(DOCUMENT)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(KeyEventsPlugin, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { supports: [], addEventListener: [] });\n    return KeyEventsPlugin;\n}(EventManagerPlugin));\nexport { KeyEventsPlugin };\nexport { ɵ0, ɵ1, ɵ2, ɵ3 };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeStyle as _sanitizeStyle, ɵ_sanitizeUrl as _sanitizeUrl } from '@angular/core';\nexport { SecurityContext };\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nvar DomSanitizer = /** @class */ (function () {\n    function DomSanitizer() {\n    }\n    return DomSanitizer;\n}());\nexport { DomSanitizer };\nvar DomSanitizerImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(DomSanitizerImpl, _super);\n    function DomSanitizerImpl(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return value;\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return _sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return _sanitizeStyle(value);\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return _sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +\n                \"(see http://g.co/ng/security#xss)\");\n        }\n    };\n    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\n    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\n        return new SafeResourceUrlImpl(value);\n    };\n    DomSanitizerImpl = tslib_1.__decorate([\n        tslib_1.__param(0, Inject(DOCUMENT)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], DomSanitizerImpl);\nDomSanitizerImpl.ngInjectableDef = ɵngcc0.defineInjectable({ token: DomSanitizerImpl, factory: function DomSanitizerImpl_Factory(t) { return new (t || DomSanitizerImpl)(ɵngcc0.inject(DOCUMENT)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DomSanitizerImpl, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { sanitize: [], checkNotSafeValue: [], bypassSecurityTrustHtml: [], bypassSecurityTrustStyle: [], bypassSecurityTrustScript: [], bypassSecurityTrustUrl: [], bypassSecurityTrustResourceUrl: [] });\n    return DomSanitizerImpl;\n}(DomSanitizer));\nexport { DomSanitizerImpl };\nvar SafeValueImpl = /** @class */ (function () {\n    function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    SafeValueImpl.prototype.toString = function () {\n        return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\n            \" (see http://g.co/ng/security#xss)\";\n    };\n    return SafeValueImpl;\n}());\nvar SafeHtmlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeHtmlImpl, _super);\n    function SafeHtmlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\n    return SafeHtmlImpl;\n}(SafeValueImpl));\nvar SafeStyleImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeStyleImpl, _super);\n    function SafeStyleImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\n    return SafeStyleImpl;\n}(SafeValueImpl));\nvar SafeScriptImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeScriptImpl, _super);\n    function SafeScriptImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\n    return SafeScriptImpl;\n}(SafeValueImpl));\nvar SafeUrlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeUrlImpl, _super);\n    function SafeUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\n    return SafeUrlImpl;\n}(SafeValueImpl));\nvar SafeResourceUrlImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeResourceUrlImpl, _super);\n    function SafeResourceUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\n    return SafeResourceUrlImpl;\n}(SafeValueImpl));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CommonModule, DOCUMENT, PlatformLocation, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID } from '@angular/common';\nimport { APP_ID, ApplicationModule, ErrorHandler, Inject, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, RendererFactory2, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore, ɵAPP_ROOT as APP_ROOT, ɵConsole as Console } from '@angular/core';\nimport { BrowserDomAdapter } from './browser/browser_adapter';\nimport { BrowserPlatformLocation } from './browser/location/browser_platform_location';\nimport { SERVER_TRANSITION_PROVIDERS, TRANSITION_ID } from './browser/server-transition';\nimport { BrowserGetTestability } from './browser/testability';\nimport { ELEMENT_PROBE_PROVIDERS } from './dom/debug/ng_probe';\nimport { DomRendererFactory2 } from './dom/dom_renderer';\nimport { DomEventsPlugin } from './dom/events/dom_events';\nimport { EVENT_MANAGER_PLUGINS, EventManager } from './dom/events/event_manager';\nimport { HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin } from './dom/events/hammer_gestures';\nimport { KeyEventsPlugin } from './dom/events/key_events';\nimport { DomSharedStylesHost, SharedStylesHost } from './dom/shared_styles_host';\nimport { DomSanitizer, DomSanitizerImpl } from './security/dom_sanitization_service';\nexport var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT] },\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\n];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport var BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT] },\n];\n/**\n * @publicApi\n */\nexport var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\nexport function initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\nexport function errorHandler() {\n    return new ErrorHandler();\n}\nexport function _document() {\n    return document;\n}\nexport var BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: APP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nvar BrowserModule = /** @class */ (function () {\n    function BrowserModule(parentModule) {\n        if (parentModule) {\n            throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\n        }\n    }\n    BrowserModule_1 = BrowserModule;\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    BrowserModule.withServerTransition = function (params) {\n        return {\n            ngModule: BrowserModule_1,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    };\n    var BrowserModule_1;\n    BrowserModule = BrowserModule_1 = tslib_1.__decorate([\n        tslib_1.__param(0, Optional()), tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Inject(BrowserModule_1)),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], BrowserModule);\nBrowserModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: BrowserModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(BrowserModule, { exports: function () { return [CommonModule, ApplicationModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BrowserModule, [{\r\n        type: NgModule,\r\n        args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] }]\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }, {\r\n                type: Inject,\r\n                args: [BrowserModule_1]\r\n            }] }]; }, null);\nBrowserModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function BrowserModule_Factory(t) { return new (t || BrowserModule)(ɵngcc0.inject(BrowserModule_1, 12)); }, providers: BROWSER_MODULE_PROVIDERS, imports: [CommonModule, ApplicationModule] });\n    return BrowserModule;\n}());\nexport { BrowserModule };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@Component({ selector: 'hello-world', template: 'Hello World!' })\nexport class AppComponent { }\n\n@NgModule({ declarations: [AppComponent], imports: [BrowserModule], bootstrap: [AppComponent] })\nexport class AppModule { }\n","import { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport * as i0 from \"@angular/core\";\nvar AppComponent = /** @class */ (function () {\n    function AppComponent() {\n    }\n    AppComponent.ngComponentDef = i0.ɵdefineComponent({ type: AppComponent, selectors: [[\"hello-world\"]], factory: function AppComponent_Factory(t) { return new (t || AppComponent)(); }, consts: 1, vars: 0, template: function AppComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵtext(0, \"Hello World!\");\n        } }, encapsulation: 2 });\n    return AppComponent;\n}());\nexport { AppComponent };\n/*@__PURE__*/ i0.ɵsetClassMetadata(AppComponent, [{\n        type: Component,\n        args: [{ selector: 'hello-world', template: 'Hello World!' }]\n    }], null, null);\nvar AppModule = /** @class */ (function () {\n    function AppModule() {\n    }\n    AppModule.ngModuleDef = i0.ɵdefineNgModule({ type: AppModule, bootstrap: [AppComponent] });\n    AppModule.ngInjectorDef = i0.defineInjector({ factory: function AppModule_Factory(t) { return new (t || AppModule)(); }, imports: [[BrowserModule]] });\n    return AppModule;\n}());\nexport { AppModule };\n/*@__PURE__*/ i0.ɵsetNgModuleScope(AppModule, { declarations: [AppComponent], imports: [BrowserModule] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AppModule, [{\n        type: NgModule,\n        args: [{ declarations: [AppComponent], imports: [BrowserModule], bootstrap: [AppComponent] }]\n    }], null, null);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDataInRange, assertDefined, assertEqual } from '../../util/assert';\nimport { isProceduralRenderer } from '../interfaces/renderer';\nimport { BINDING_INDEX, HEADER_OFFSET, RENDERER, TVIEW } from '../interfaces/view';\nimport { appendChild, createTextNode } from '../node_manipulation';\nimport { getLView, setIsParent } from '../state';\nimport { NO_CHANGE } from '../tokens';\nimport { renderStringify } from '../util/misc_utils';\nimport { getNativeByIndex } from '../util/view_utils';\nimport { createNodeAtIndex } from './shared';\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Value to write. This value will be stringified.\n */\nexport function text(index, value) {\n    var lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    var textNative = createTextNode(value, lView[RENDERER]);\n    var tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @param index Index of the node in the data array.\n * @param value Stringified value to write.\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        var lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var element = getNativeByIndex(index, lView);\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, renderStringify(value)) :\n            element.textContent = renderStringify(value);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvaW5zdHJ1Y3Rpb25zL3RleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVoRixPQUFPLEVBQVEsb0JBQW9CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDakYsT0FBTyxFQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRSxPQUFPLEVBQUMsUUFBUSxFQUFFLFdBQVcsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUMvQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFM0M7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLEtBQWEsRUFBRSxLQUFXO0lBQzdDLElBQU0sS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLFNBQVMsSUFBSSxXQUFXLENBQ1AsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsRUFDcEQsa0RBQWtELENBQUMsQ0FBQztJQUNyRSxTQUFTLElBQUksU0FBUyxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDaEQsSUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLG1CQUFxQixVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWxGLCtCQUErQjtJQUMvQixXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsV0FBVyxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUksS0FBYSxFQUFFLEtBQW9CO0lBQ2hFLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QixJQUFNLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUN6QixTQUFTLElBQUksaUJBQWlCLENBQUMsS0FBSyxFQUFFLEtBQUssR0FBRyxhQUFhLENBQUMsQ0FBQztRQUM3RCxJQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFpQixDQUFDO1FBQy9ELFNBQVMsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLDZCQUE2QixDQUFDLENBQUM7UUFDbkUsU0FBUyxJQUFJLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QyxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsT0FBTyxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDL0U7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHthc3NlcnREYXRhSW5SYW5nZSwgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RXF1YWx9IGZyb20gJy4uLy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7VE5vZGVUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2VzL25vZGUnO1xuaW1wb3J0IHtSVGV4dCwgaXNQcm9jZWR1cmFsUmVuZGVyZXJ9IGZyb20gJy4uL2ludGVyZmFjZXMvcmVuZGVyZXInO1xuaW1wb3J0IHtCSU5ESU5HX0lOREVYLCBIRUFERVJfT0ZGU0VULCBSRU5ERVJFUiwgVFZJRVd9IGZyb20gJy4uL2ludGVyZmFjZXMvdmlldyc7XG5pbXBvcnQge2FwcGVuZENoaWxkLCBjcmVhdGVUZXh0Tm9kZX0gZnJvbSAnLi4vbm9kZV9tYW5pcHVsYXRpb24nO1xuaW1wb3J0IHtnZXRMVmlldywgc2V0SXNQYXJlbnR9IGZyb20gJy4uL3N0YXRlJztcbmltcG9ydCB7Tk9fQ0hBTkdFfSBmcm9tICcuLi90b2tlbnMnO1xuaW1wb3J0IHtyZW5kZXJTdHJpbmdpZnl9IGZyb20gJy4uL3V0aWwvbWlzY191dGlscyc7XG5pbXBvcnQge2dldE5hdGl2ZUJ5SW5kZXh9IGZyb20gJy4uL3V0aWwvdmlld191dGlscyc7XG5pbXBvcnQge2NyZWF0ZU5vZGVBdEluZGV4fSBmcm9tICcuL3NoYXJlZCc7XG5cbi8qKlxuICogQ3JlYXRlIHN0YXRpYyB0ZXh0IG5vZGVcbiAqXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgdGhlIG5vZGUgaW4gdGhlIGRhdGEgYXJyYXlcbiAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byB3cml0ZS4gVGhpcyB2YWx1ZSB3aWxsIGJlIHN0cmluZ2lmaWVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dChpbmRleDogbnVtYmVyLCB2YWx1ZT86IGFueSk6IHZvaWQge1xuICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChcbiAgICAgICAgICAgICAgICAgICBsVmlld1tCSU5ESU5HX0lOREVYXSwgbFZpZXdbVFZJRVddLmJpbmRpbmdTdGFydEluZGV4LFxuICAgICAgICAgICAgICAgICAgICd0ZXh0IG5vZGVzIHNob3VsZCBiZSBjcmVhdGVkIGJlZm9yZSBhbnkgYmluZGluZ3MnKTtcbiAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlckNyZWF0ZVRleHROb2RlKys7XG4gIGNvbnN0IHRleHROYXRpdmUgPSBjcmVhdGVUZXh0Tm9kZSh2YWx1ZSwgbFZpZXdbUkVOREVSRVJdKTtcbiAgY29uc3QgdE5vZGUgPSBjcmVhdGVOb2RlQXRJbmRleChpbmRleCwgVE5vZGVUeXBlLkVsZW1lbnQsIHRleHROYXRpdmUsIG51bGwsIG51bGwpO1xuXG4gIC8vIFRleHQgbm9kZXMgYXJlIHNlbGYgY2xvc2luZy5cbiAgc2V0SXNQYXJlbnQoZmFsc2UpO1xuICBhcHBlbmRDaGlsZCh0ZXh0TmF0aXZlLCB0Tm9kZSwgbFZpZXcpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0ZXh0IG5vZGUgd2l0aCBiaW5kaW5nXG4gKiBCaW5kaW5ncyBzaG91bGQgYmUgaGFuZGxlZCBleHRlcm5hbGx5IHdpdGggdGhlIHByb3BlciBpbnRlcnBvbGF0aW9uKDEtOCkgbWV0aG9kXG4gKlxuICogQHBhcmFtIGluZGV4IEluZGV4IG9mIHRoZSBub2RlIGluIHRoZSBkYXRhIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIFN0cmluZ2lmaWVkIHZhbHVlIHRvIHdyaXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dEJpbmRpbmc8VD4oaW5kZXg6IG51bWJlciwgdmFsdWU6IFQgfCBOT19DSEFOR0UpOiB2b2lkIHtcbiAgaWYgKHZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERhdGFJblJhbmdlKGxWaWV3LCBpbmRleCArIEhFQURFUl9PRkZTRVQpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBnZXROYXRpdmVCeUluZGV4KGluZGV4LCBsVmlldykgYXMgYW55IGFzIFJUZXh0O1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGVsZW1lbnQsICduYXRpdmUgZWxlbWVudCBzaG91bGQgZXhpc3QnKTtcbiAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyU2V0VGV4dCsrO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gbFZpZXdbUkVOREVSRVJdO1xuICAgIGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSA/IHJlbmRlcmVyLnNldFZhbHVlKGVsZW1lbnQsIHJlbmRlclN0cmluZ2lmeSh2YWx1ZSkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gcmVuZGVyU3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvc3VyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWwvY2xvc3VyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBYztJQUMxQyxPQUFPLEVBQUUsR0FBRyxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUMsQ0FBQztBQUM3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIENvbnZpbmNlIGNsb3N1cmUgY29tcGlsZXIgdGhhdCB0aGUgd3JhcHBlZCBmdW5jdGlvbiBoYXMgbm8gc2lkZS1lZmZlY3RzLlxuICpcbiAqIENsb3N1cmUgY29tcGlsZXIgYWx3YXlzIGFzc3VtZXMgdGhhdCBgdG9TdHJpbmdgIGhhcyBubyBzaWRlLWVmZmVjdHMuIFdlIHVzZSB0aGlzIHF1aXJrIHRvXG4gKiBhbGxvdyB1cyB0byBleGVjdXRlIGEgZnVuY3Rpb24gYnV0IGhhdmUgY2xvc3VyZSBjb21waWxlciBtYXJrIHRoZSBjYWxsIGFzIG5vLXNpZGUtZWZmZWN0cy5cbiAqIEl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSByZXR1cm4gdmFsdWUgZm9yIHRoZSBgbm9TaWRlRWZmZWN0c2AgZnVuY3Rpb24gYmUgYXNzaWduZWRcbiAqIHRvIHNvbWV0aGluZyB3aGljaCBpcyByZXRhaW5lZCBvdGhlcndpc2UgdGhlIGNhbGwgdG8gYG5vU2lkZUVmZmVjdHNgIHdpbGwgYmUgcmVtb3ZlZCBieSBjbG9zdXJlXG4gKiBjb21waWxlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vU2lkZUVmZmVjdHMoZm46ICgpID0+IHZvaWQpOiBzdHJpbmcge1xuICByZXR1cm4gJycgKyB7dG9TdHJpbmc6IGZufTtcbn0iXX0=","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nenableProdMode();\n\nplatformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));\n\n// import('lazy');\n// import('lazy.1');\n"],"sourceRoot":""}