{"version":3,"sources":["webpack:///./src/app/shared/copier.service.ts","webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts","webpack:///./src/app/custom-elements/code/code.component.ts.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/Immediate.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/asap.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.module.ts","webpack:///./src/app/custom-elements/code/code.module.ts.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/overlay.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/layout.es5.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/snack-bar.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","CopierService","prototype","createFake","text","docElem","document","documentElement","isRTL","getAttribute","this","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","length","removeFake","removeChild","copyText","execCommand","err","CdkPortalOutlet","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","PortalModule","PortalInjector","_angular_core__WEBPACK_IMPORTED_MODULE_0__","tslib__WEBPACK_IMPORTED_MODULE_1__","throwPortalAlreadyAttachedError","Error","Portal","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","template","context","templateRef","elementRef","undefined","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","ngDirectiveDef","type","selectors","factory","t","exportAs","features","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","inputs","outputs","ngModuleDef","ngInjectorDef","_parentInjector","_customTokens","token","notFoundValue","CodeComponent","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_3__","app_shared_copier_service__WEBPACK_IMPORTED_MODULE_4__","app_shared_logger_service__WEBPACK_IMPORTED_MODULE_5__","_angular_common__WEBPACK_IMPORTED_MODULE_6__","_c0","_c1","_c2","_c3","_c4","_c5","CodeComponent_button_2_Template","rf","ctx","_r85","$event","doCopy","ctx_r82","ariaLabel","snackbar","pretty","copier","logger","codeFormatted","_code","code","trim","formatDisplayedCode","showMissingCodeMessage","_header","header","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","split","line","lineIndent","search","Math","min","map","substr","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","subscribe","c","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","log","open","duration","error","linenums","parseInt","isNaN","match","ngComponentDef","viewQuery","_t","first","hideCopy","consts","vars","directives","encapsulation","nextHandle","tasksByHandle","AsapAction_AsapAction","AsapAction","scheduler","work","tslib_es6","requestAsyncId","id","delay","actions","push","scheduled","cb","flush","bind","handle","Promise","resolve","then","runIfPresent","recycleAsyncId","AsapScheduler_AsapScheduler","AsapScheduler","apply","arguments","action","active","count","shift","execute","state","unsubscribe","asap","CodeModule","_angular_common__WEBPACK_IMPORTED_MODULE_1__","_angular_material__WEBPACK_IMPORTED_MODULE_3__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_4__","app_shared_copier_service__WEBPACK_IMPORTED_MODULE_5__","providers","imports","overlay_es5_BlockScrollStrategy","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coercion_es5","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","overlay_es5_ScrollStrategyOptions","ScrollStrategyOptions","noop","close","config","block","reposition","ngInjectableDef","core","scrolling_es5","common","providedIn","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","keys","k","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","overlay_es5_OverlayKeyboardDispatcher","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","splice","removeEventListener","overlay_es5_OverlayContainer","OverlayContainer","_containerElement","getContainerElement","_createContainer","container","overlay_es5_OverlayRef","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_keydownEventsObservable","Observable","observer","subscription","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","takeUntil","merge","children","overlay_es5_FlexibleConnectedPositionStrategy","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","withPositions","positions","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","key","hasOwnProperty","mediaQueryStyleNode","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","overlay_es5_OverlayPositionBuilder","OverlayPositionBuilder","global","flexibleConnectedTo","platform_es5","nextUniqueId","overlay_es5_Overlay","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","portal_es5","bidi_es5","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","overlay_es5_OverlayModule","OverlayModule","mediaQueriesForWebkitCompatibility","Set","layout_es5_MediaMatcher","MediaMatcher","_matchMedia","matchMedia","noopMatchMedia","query","WEBKIT","has","sheet","insertRule","e","console","createEmptyStyleRule","matches","media","addListener","removeListener","layout_es5_BreakpointObserver","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","isMatched","splitQueries","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","debounceTime","breakpointStates","response","breakpoints","queryListener","output","fromEventPattern","addHandler","removeHandler","resultSelector","args","isArray","subscriber","retValue","handler","isFunction","listener","startWith","nextMql","queries","a1","a2","concat","snack_bar_es5_MatSnackBarModule","snack_bar_es5_MatSnackBar","SimpleSnackBar_div_2_Template","_r230","ctx_r228","data","MatSnackBarContainer_ng_template_0_Template","snack_bar_es5_MatSnackBarRef","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","snack_bar_es5_SimpleSnackBar","SimpleSnackBar","snackBarRef","hostBindings","elIndex","message","hasAction","button_es5","changeDetection","matSnackBarAnimations","snackBarState","animations","opacity","snack_bar_es5_MatSnackBarContainer","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_assertNotAttached","_applySnackBarClasses","onAnimationEnd","toState","fromState","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","Array","animation","MatSnackBarModule","core_es5","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","_attachSnackBarContainer","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","$implicit","_createInjector","contentRef","state$$1","_animateSnackBar","announce","isLeft","isRight","a11y_es5","PrettyPrinter","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","prettyPrintOne","getPrettyPrintOne","ppo","msg"],"mappings":"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","file":"default~code-code-example-module-ngfactory~code-code-tabs-module-ngfactory.2ee7ae1d2311890560d1.js","sourcesContent":["/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const docElem = document.documentElement!;\n      const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || docElem.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            /** @type {?} */\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\nCdkPortal.ngDirectiveDef = ɵngcc0.ɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"cdkPortal\", \"\"], [\"\", \"portal\", \"\"]], factory: function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵdirectiveInject(TemplateRef), ɵngcc0.ɵdirectiveInject(ViewContainerRef)); }, exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵInheritDefinitionFeature] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdk-portal], [cdkPortal], [portal]',\r\n                exportAs: 'cdkPortal'\r\n            }]\r\n    }], function () { return [{ type: TemplateRef }, { type: ViewContainerRef }]; }, null);\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\nCdkPortalOutlet.ngDirectiveDef = ɵngcc0.ɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"], [\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], factory: function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵdirectiveInject(ComponentFactoryResolver), ɵngcc0.ɵdirectiveInject(ViewContainerRef)); }, inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\", \"cdkPortalHost\"], features: [ɵngcc0.ɵInheritDefinitionFeature] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\r\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\r\n                inputs: ['portal: cdkPortalOutlet']\r\n            }]\r\n    }], function () { return [{ type: ComponentFactoryResolver }, { type: ViewContainerRef }]; }, { portal: [], portal: [], attachedRef: [], ngOnInit: [], _isInitialized: [], ngOnDestroy: [], _attachedPortal: [], _attachedRef: [], attachComponentPortal: [], attachTemplatePortal: [], attached: [{\r\n            type: Output\r\n        }] });\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\nPortalModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: PortalModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\r\n        CdkPortalOutlet], exports: [CdkPortal,\r\n        CdkPortalOutlet] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(PortalModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkPortal, CdkPortalOutlet],\r\n                declarations: [CdkPortal, CdkPortalOutlet]\r\n            }]\r\n    }], function () { return []; }, null);\nPortalModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        /** @type {?} */\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n\n//# sourceMappingURL=portal.es5.js.map","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string { return this._header; }\n  private _header: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer') codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), err => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ?\n        (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"./pretty-printer.service\";\nimport * as i3 from \"app/shared/copier.service\";\nimport * as i4 from \"app/shared/logger.service\";\nimport * as i5 from \"@angular/common\";\nvar _c0 = [\"codeContainer\"];\nvar _c1 = [\"class\", \"material-icons copy-button no-print\", \"title\", \"Copy code snippet\", 3, \"aria-label\", \"click\", 4, \"ngIf\"];\nvar _c2 = [1, \"animated\", \"fadeIn\"];\nvar _c3 = [\"codeContainer\", \"\"];\nvar _c4 = [\"title\", \"Copy code snippet\", 1, \"material-icons\", \"copy-button\", \"no-print\", 3, \"aria-label\", \"click\"];\nvar _c5 = [\"aria-hidden\", \"true\"];\nfunction CodeComponent_button_2_Template(rf, ctx) { if (rf & 1) {\n    var _r85 = i0.ɵgetCurrentView();\n    i0.ɵelementStart(0, \"button\", _c4);\n    i0.ɵlistener(\"click\", function CodeComponent_button_2_Template_button_click_0_listener($event) { i0.ɵrestoreView(_r85); var ctx_r84 = i0.ɵnextContext(); return ctx_r84.doCopy(); });\n    i0.ɵtext(1, \"\\n        \");\n    i0.ɵelementStart(2, \"span\", _c5);\n    i0.ɵtext(3, \"content_copy\");\n    i0.ɵelementEnd();\n    i0.ɵtext(4, \"\\n      \");\n    i0.ɵelementEnd();\n} if (rf & 2) {\n    var ctx_r82 = i0.ɵnextContext();\n    i0.ɵselect(0);\n    i0.ɵelementAttribute(0, \"aria-label\", i0.ɵbind(ctx_r82.ariaLabel));\n} }\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nvar DEFAULT_LINE_NUMS_COUNT = 10;\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\nvar CodeComponent = /** @class */ (function () {\n    function CodeComponent(snackbar, pretty, copier, logger) {\n        this.snackbar = snackbar;\n        this.pretty = pretty;\n        this.copier = copier;\n        this.logger = logger;\n        this.ariaLabel = '';\n        this.codeFormatted = new EventEmitter();\n    }\n    Object.defineProperty(CodeComponent.prototype, \"code\", {\n        get: function () { return this._code; },\n        /** Code that should be formatted with current inputs and displayed in the view. */\n        set: function (code) {\n            this._code = code;\n            if (!this._code || !this._code.trim()) {\n                this.showMissingCodeMessage();\n            }\n            else {\n                this.formatDisplayedCode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CodeComponent.prototype, \"header\", {\n        get: function () { return this._header; },\n        /** Optional header to be displayed above the code. */\n        set: function (header) {\n            this._header = header;\n            this.ariaLabel = this.header ? \"Copy code snippet from \" + this.header : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CodeComponent.prototype.ngOnChanges = function () {\n        // If some inputs have changed and there is code displayed, update the view with the latest\n        // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    };\n    CodeComponent.prototype.formatDisplayedCode = function () {\n        var _this = this;\n        var leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n        this.pretty\n            .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n            .pipe(tap(function () { return _this.codeFormatted.emit(); }))\n            .subscribe(function (c) { return _this.setCodeHtml(c); }, function (err) { });\n    };\n    /** Sets the message showing that the code could not be found. */\n    CodeComponent.prototype.showMissingCodeMessage = function () {\n        var src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n        var srcMsg = src ? \" for\\n\" + src : '.';\n        this.setCodeHtml(\"<p class=\\\"code-missing\\\">The code sample is missing\" + srcMsg + \"</p>\");\n    };\n    /** Sets the innerHTML of the code container to the provided code string. */\n    CodeComponent.prototype.setCodeHtml = function (formattedCode) {\n        // **Security:** Code example content is provided by docs authors and as such its considered to\n        // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    };\n    /** Gets the textContent of the displayed code element. */\n    CodeComponent.prototype.getCodeText = function () {\n        // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n        // container as text, before prettifying it.\n        // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    };\n    /** Copies the code snippet to the user's clipboard. */\n    CodeComponent.prototype.doCopy = function () {\n        var code = this.codeText;\n        var successfullyCopied = this.copier.copyText(code);\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        }\n        else {\n            this.logger.error(new Error(\"ERROR copying code to clipboard: \\\"\" + code + \"\\\"\"));\n            this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n        }\n    };\n    /** Gets the calculated value of linenums (boolean/number). */\n    CodeComponent.prototype.getLinenums = function (code) {\n        var linenums = typeof this.linenums === 'boolean' ? this.linenums :\n            this.linenums === 'true' ? true :\n                this.linenums === 'false' ? false :\n                    typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n                        this.linenums;\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums) ?\n            (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n    };\n    CodeComponent.ngComponentDef = i0.ɵdefineComponent({ type: CodeComponent, selectors: [[\"aio-code\"]], factory: function CodeComponent_Factory(t) { return new (t || CodeComponent)(i0.ɵdirectiveInject(i1.MatSnackBar), i0.ɵdirectiveInject(i2.PrettyPrinter), i0.ɵdirectiveInject(i3.CopierService), i0.ɵdirectiveInject(i4.Logger)); }, viewQuery: function CodeComponent_Query(rf, ctx) { if (rf & 1) {\n            i0.ɵviewQuery(_c0, true, null);\n        } if (rf & 2) {\n            var _t;\n            (i0.ɵqueryRefresh((_t = i0.ɵloadViewQuery())) && (ctx.codeContainer = _t.first));\n        } }, inputs: { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", header: \"header\" }, outputs: { codeFormatted: \"codeFormatted\" }, features: [i0.ɵNgOnChangesFeature()], consts: 7, vars: 2, template: function CodeComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵelementStart(0, \"pre\");\n            i0.ɵelementStyling();\n            i0.ɵtext(1, \"      \");\n            i0.ɵtemplate(2, CodeComponent_button_2_Template, 5, 1, \"button\", _c1);\n            i0.ɵtext(3, \"\\n      \");\n            i0.ɵelement(4, \"code\", _c2, _c3);\n            i0.ɵtext(6, \"\\n    \");\n            i0.ɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵelementStylingMap(0, i0.ɵinterpolation1(\"prettyprint lang-\", ctx.language, \"\"));\n            i0.ɵelementStylingApply(0);\n            i0.ɵselect(2);\n            i0.ɵelementProperty(2, \"ngIf\", i0.ɵbind(!ctx.hideCopy));\n        } }, directives: [i5.NgIf], encapsulation: 2 });\n    return CodeComponent;\n}());\nexport { CodeComponent };\n/*@__PURE__*/ i0.ɵsetClassMetadata(CodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aio-code',\n                template: \"\\n    <pre class=\\\"prettyprint lang-{{language}}\\\">\\n      <button *ngIf=\\\"!hideCopy\\\" class=\\\"material-icons copy-button no-print\\\"\\n        title=\\\"Copy code snippet\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        (click)=\\\"doCopy()\\\">\\n        <span aria-hidden=\\\"true\\\">content_copy</span>\\n      </button>\\n      <code class=\\\"animated fadeIn\\\" #codeContainer></code>\\n    </pre>\\n    \"\n            }]\n    }], function () { return [{ type: i1.MatSnackBar }, { type: i2.PrettyPrinter }, { type: i3.CopierService }, { type: i4.Logger }]; }, { hideCopy: [{\n            type: Input\n        }], language: [{\n            type: Input\n        }], linenums: [{\n            type: Input\n        }], path: [{\n            type: Input\n        }], region: [{\n            type: Input\n        }], header: [{\n            type: Input\n        }], codeFormatted: [{\n            type: Output\n        }], codeContainer: [{\n            type: ViewChild,\n            args: ['codeContainer']\n        }] });\nfunction leftAlign(text) {\n    var indent = Number.MAX_VALUE;\n    var lines = text.split('\\n');\n    lines.forEach(function (line) {\n        var lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n    return lines.map(function (line) { return line.substr(indent); }).join('\\n').trim();\n}\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport * as i0 from \"@angular/core\";\nvar CodeModule = /** @class */ (function () {\n    function CodeModule() {\n    }\n    CodeModule.ngModuleDef = i0.ɵdefineNgModule({ type: CodeModule });\n    CodeModule.ngInjectorDef = i0.defineInjector({ factory: function CodeModule_Factory(t) { return new (t || CodeModule)(); }, providers: [PrettyPrinter, CopierService], imports: [[CommonModule, MatSnackBarModule]] });\n    return CodeModule;\n}());\nexport { CodeModule };\n/*@__PURE__*/ i0.ɵsetNgModuleScope(CodeModule, { declarations: [CodeComponent], imports: [CommonModule, MatSnackBarModule], exports: [CodeComponent] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(CodeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatSnackBarModule],\n                declarations: [CodeComponent],\n                entryComponents: [CodeComponent],\n                exports: [CodeComponent],\n                providers: [PrettyPrinter, CopierService]\n            }]\n    }], null, null);\n","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { __assign, __extends } from 'tslib';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar  /**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nBlockScrollStrategy = /** @class */ (function () {\n    function BlockScrollStrategy(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    function () { };\n    /** Blocks page-level scroll while the attached overlay is open. */\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.enable = /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            var root = /** @type {?} */ ((this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.disable = /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._isEnabled) {\n            /** @type {?} */\n            var html = /** @type {?} */ ((this._document.documentElement));\n            /** @type {?} */\n            var body = /** @type {?} */ ((this._document.body));\n            /** @type {?} */\n            var htmlStyle = /** @type {?} */ (html.style);\n            /** @type {?} */\n            var bodyStyle = /** @type {?} */ (body.style);\n            /** @type {?} */\n            var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype._canBeEnabled = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var html = /** @type {?} */ ((this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        var body = this._document.body;\n        /** @type {?} */\n        var viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar  /**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nCloseScrollStrategy = /** @class */ (function () {\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = function () {\n            _this.disable();\n            if (_this._overlayRef.hasAttached()) {\n                _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables the closing of the attached overlay on scroll. */\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.enable = /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        var stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(function () {\n                /** @type {?} */\n                var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((_this._config)).threshold))) {\n                    _this._detach();\n                }\n                else {\n                    _this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    };\n    /** Disables the closing the attached overlay on scroll. */\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.disable = /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return CloseScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nvar  /**\n * Scroll strategy that doesn't do anything.\n */\nNoopScrollStrategy = /** @class */ (function () {\n    function NoopScrollStrategy() {\n    }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.enable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.disable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.attach = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    return NoopScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(function (containerBounds) {\n        /** @type {?} */\n        var outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        var outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        var outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        var outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(function (scrollContainerRect) {\n        /** @type {?} */\n        var clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        var clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        var clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        var clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar  /**\n * Strategy that will update the element position as the user is scrolling.\n */\nRepositionScrollStrategy = /** @class */ (function () {\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables repositioning of the attached overlay on scroll. */\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.enable = /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            var throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                _this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (_this._config && _this._config.autoClose) {\n                    /** @type {?} */\n                    var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                    /** @type {?} */\n                    var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        _this.disable();\n                        _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                    }\n                }\n            });\n        }\n    };\n    /** Disables repositioning of the attached overlay on scroll. */\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.disable = /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return RepositionScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /** @class */ (function () {\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = function () { return new NoopScrollStrategy(); };\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n        /**\n         * Block scrolling.\n         */\n        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n        this._document = document;\n    }\n    /** @nocollapse */\n    ScrollStrategyOptions.ctorParameters = function () { return [\n        { type: ScrollDispatcher },\n        { type: ViewportRuler },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ngInjectableDef = ɵngcc0.defineInjectable({ token: ScrollStrategyOptions, factory: function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.inject(ScrollDispatcher), ɵngcc0.inject(ViewportRuler), ɵngcc0.inject(NgZone), ɵngcc0.inject(DOCUMENT)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: ScrollDispatcher }, { type: ViewportRuler }, { type: NgZone }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { _scrollDispatcher: [], _viewportRuler: [], _ngZone: [], noop: [], close: [], block: [], reposition: [], _document: [] });\n    return ScrollStrategyOptions;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nvar  /**\n * Initial configuration used when creating an overlay.\n */\nOverlayConfig = /** @class */ (function () {\n    function OverlayConfig(config) {\n        var _this = this;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(function (k) {\n                /** @type {?} */\n                var key = /** @type {?} */ (k);\n                if (typeof config[key] !== 'undefined') {\n                    _this[key] = config[key];\n                }\n            });\n        }\n    }\n    return OverlayConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar  /**\n * The points of the origin element and the overlay element to connect.\n */\nConnectionPositionPair = /** @class */ (function () {\n    function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nvar  /**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nScrollingVisibility = /** @class */ (function () {\n    function ScrollingVisibility() {\n    }\n    return ScrollingVisibility;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\n    function ConnectedOverlayPositionChange(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    /** @nocollapse */\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\n        { type: ConnectionPositionPair },\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n    ]; };\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\n    function OverlayKeyboardDispatcher(document) {\n        var _this = this;\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = function (event) {\n            /** @type {?} */\n            var overlays = _this._attachedOverlays;\n            for (var i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._detach();\n    };\n    /** Add a new overlay to the list of attached overlay refs. */\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.add = /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    };\n    /** Remove an overlay from the list of attached overlay refs. */\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.remove = /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    };\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype._detach = /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    function () {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    };\n    /** @nocollapse */\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ngInjectableDef = ɵngcc0.defineInjectable({ token: OverlayKeyboardDispatcher, factory: function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.inject(DOCUMENT)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { _attachedOverlays: [], _keydownListener: [], _document: [], ngOnDestroy: [], add: [], _isAttached: [], remove: [], _detach: [] });\n    return OverlayKeyboardDispatcher;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ ((\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nvar OverlayContainer = /** @class */ (function () {\n    function OverlayContainer(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    };\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    /** @nocollapse */\n    OverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ngInjectableDef = ɵngcc0.defineInjectable({ token: OverlayContainer, factory: function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.inject(DOCUMENT)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { _document: [], ngOnDestroy: [], getContainerElement: [], _createContainer: [], _containerElement: [] });\n    return OverlayContainer;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar  /**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nOverlayRef = /** @class */ (function () {\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        var _this = this;\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = Observable.create(function (observer) {\n            /** @type {?} */\n            var subscription = _this._keydownEvents.subscribe(observer);\n            _this._keydownEventSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /** The overlay's HTML element */\n        get: /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n        /** The overlay's backdrop HTML element. */\n        get: /**\n         * The overlay's backdrop HTML element.\n         * @return {?}\n         */\n        function () {\n            return this._backdropElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n        /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         */\n        get: /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         * @return {?}\n         */\n        function () {\n            return this._host;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(function () {\n            // The overlay could've been detached before the zone has stabilized.\n            if (_this.hasAttached()) {\n                _this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    OverlayRef.prototype.detach = /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    function () {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        var detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    };\n    /** Cleans up the overlay from the DOM. */\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    };\n    /** Whether the overlay has attached content. */\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    function () {\n        return this._portalOutlet.hasAttached();\n    };\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    function () {\n        return this._backdropClick.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been attached. */\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.attachments = /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    function () {\n        return this._attachments.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been detached. */\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachments = /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    function () {\n        return this._detachments.asObservable();\n    };\n    /** Gets an observable of keydown events targeted to this overlay. */\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.keydownEvents = /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    function () {\n        return this._keydownEventsObservable;\n    };\n    /** Gets the the current overlay configuration, which is immutable. */\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    OverlayRef.prototype.getConfig = /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    function () {\n        return this._config;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    function () {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    };\n    /** Switches to a new position strategy and updates the overlay position. */\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePositionStrategy = /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    function (strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    };\n    /** Update the size properties of the overlay. */\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    function (sizeConfig) {\n        this._config = __assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    };\n    /** Sets the LTR/RTL direction for the overlay. */\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    OverlayRef.prototype.setDirection = /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        this._config = __assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    };\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype.getDirection = /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    };\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementDirection = /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        this._host.setAttribute('dir', this.getDirection());\n    };\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementSize = /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function (event) { return _this._backdropClick.next(event); });\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(function () {\n                requestAnimationFrame(function () {\n                    if (_this._backdropElement) {\n                        _this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    function () {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    };\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            /** @type {?} */\n            var timeoutId_1 = void 0;\n            /** @type {?} */\n            var finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                clearTimeout(timeoutId_1);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(function () {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach_1);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId_1 = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach_1, 500); });\n        }\n    };\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    OverlayRef.prototype._toggleClasses = /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (element, cssClasses, isAdd) {\n        /** @type {?} */\n        var classList = element.classList;\n        coerceArray(cssClasses).forEach(function (cssClass) {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    };\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    OverlayRef.prototype._detachContentWhenStable = /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(function () {\n            /** @type {?} */\n            var subscription = _this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(_this._attachments, _this._detachments)))\n                .subscribe(function () {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                    if (_this._pane && _this._config.panelClass) {\n                        _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                    }\n                    if (_this._host && _this._host.parentElement) {\n                        _this._previousHostParent = _this._host.parentElement;\n                        _this._previousHostParent.removeChild(_this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    };\n    return OverlayRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nFlexibleConnectedPositionStrategy = /** @class */ (function () {\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        var _this = this;\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create(function (observer) {\n            /** @type {?} */\n            var subscription = _this._positionChanges.subscribe(observer);\n            _this._positionChangeSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attaches this position strategy to an overlay. */\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.attach = /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var _this = this;\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            _this._isInitialRender = true;\n            _this.apply();\n        });\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        var originRect = this._originRect;\n        /** @type {?} */\n        var overlayRect = this._overlayRect;\n        /** @type {?} */\n        var viewportRect = this._viewportRect;\n        /** @type {?} */\n        var flexibleFits = [];\n        /** @type {?} */\n        var fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(originRect, pos);\n            /** @type {?} */\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            /** @type {?} */\n            var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect: overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            var bestFit = null;\n            /** @type {?} */\n            var bestScore = -1;\n            for (var _b = 0, flexibleFits_1 = flexibleFits; _b < flexibleFits_1.length; _b++) {\n                var fit = flexibleFits_1[_b];\n                /** @type {?} */\n                var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    };\n    /**\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    };\n    /** Cleanup after the element gets destroyed. */\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.dispose = /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, /** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            }));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            var lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPositions = /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    };\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    function (margin) {\n        this._viewportMargin = margin;\n        return this;\n    };\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    function (flexibleDimensions) {\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    };\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    function (growAfterOpen) {\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    };\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPush = /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    function (canPush) {\n        if (canPush === void 0) { canPush = true; }\n        this._canPush = canPush;\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        if (isLocked === void 0) { isLocked = true; }\n        this._positionLocked = isLocked;\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    function (selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originRect, pos) {\n        /** @type {?} */\n        var x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            var startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            var endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        var y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originPoint, overlayRect, pos) {\n        /** @type {?} */\n        var overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        var overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    };\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    function (point, overlay, viewport, position) {\n        var x = point.x, y = point.y;\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        /** @type {?} */\n        var leftOverflow = 0 - x;\n        /** @type {?} */\n        var rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        var topOverflow = 0 - y;\n        /** @type {?} */\n        var bottomOverflow = (y + overlay.height) - viewport.height;\n        /** @type {?} */\n        var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        var visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea: visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    };\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    function (fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            var availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            var availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            var minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            var minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            var verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            var horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    };\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    function (start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        /** @type {?} */\n        var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        /** @type {?} */\n        var pushX = 0;\n        /** @type {?} */\n        var pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width < viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height < viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    };\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    function (position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            var scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    };\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        var elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        var xOrigin;\n        /** @type {?} */\n        var yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n        }\n    };\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        /** @type {?} */\n        var height;\n        /** @type {?} */\n        var top;\n        /** @type {?} */\n        var bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            var previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        /** @type {?} */\n        var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        /** @type {?} */\n        var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        var width;\n        /** @type {?} */\n        var left;\n        /** @type {?} */\n        var right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            var previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: /** @type {?} */ ((top)), left: /** @type {?} */ ((left)), bottom: /** @type {?} */ ((bottom)), right: /** @type {?} */ ((right)), width: width, height: height };\n    };\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        var styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            var maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            var maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    };\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    };\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    };\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    function (originPoint, position) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        /** @type {?} */\n        var transformString = '';\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += \"translateX(\" + offsetX + \"px) \";\n        }\n        if (offsetY) {\n            transformString += \"translateY(\" + offsetY + \"px)\";\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    };\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({ top: null, bottom: null });\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        var virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            /** @type {?} */\n            var documentHeight = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    };\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({ left: null, right: null });\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        var horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            var documentWidth = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var originBounds = this._origin.getBoundingClientRect();\n        /** @type {?} */\n        var overlayBounds = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        var scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var width = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        var height = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    };\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._isRtl = /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    function () {\n        return this._overlayRef.getDirection() === 'rtl';\n    };\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    function () {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    };\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOffset = /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    function (position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    };\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    function () {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(function (pair) {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    };\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._addPanelClasses = /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    function (cssClasses) {\n        var _this = this;\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(function (cssClass) {\n                if (_this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    _this._appliedPanelClasses.push(cssClass);\n                    _this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    };\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(function (cssClass) { return _this._pane.classList.remove(cssClass); });\n            this._appliedPanelClasses = [];\n        }\n    };\n    return FlexibleConnectedPositionStrategy;\n}());\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nConnectedPositionStrategy = /** @class */ (function () {\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /** Whether the we're dealing with an RTL context */\n        get: /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /** Emits an event when the connection point changes. */\n        get: /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        function () {\n            return this._positionStrategy.positionChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach this position strategy to an overlay. */\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.attach = /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    };\n    /** Disposes all resources used by the position strategy. */\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.dispose();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.detach = /**\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.detach();\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.apply();\n    };\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.reapplyLastPosition();\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    function (originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    function (dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    };\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withPositions = /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nGlobalPositionStrategy = /** @class */ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.attach = /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    };\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.apply = /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        var config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    };\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        var parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    };\n    return GlobalPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = /** @class */ (function () {\n    function OverlayPositionBuilder(_viewportRuler, _document, \n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    };\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef\n     */\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    function (elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    /** @nocollapse */\n    OverlayPositionBuilder.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform, decorators: [{ type: Optional }] },\n        { type: OverlayContainer, decorators: [{ type: Optional }] }\n    ]; };\n    /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ngInjectableDef = ɵngcc0.defineInjectable({ token: OverlayPositionBuilder, factory: function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.inject(ViewportRuler), ɵngcc0.inject(DOCUMENT), ɵngcc0.inject(Platform, 8), ɵngcc0.inject(OverlayContainer, 8)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: ViewportRuler }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: Platform, decorators: [{\r\n                type: Optional\r\n            }] }, { type: OverlayContainer, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { _viewportRuler: [], _document: [], _platform: [], _overlayContainer: [], global: [], connectedTo: [], flexibleConnectedTo: [] });\n    return OverlayPositionBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nvar nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /** @class */ (function () {\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    function (config) {\n        /** @type {?} */\n        var host = this._createHostElement();\n        /** @type {?} */\n        var pane = this._createPaneElement(host);\n        /** @type {?} */\n        var portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    };\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    Overlay.prototype.position = /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    function (host) {\n        /** @type {?} */\n        var pane = this._document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    Overlay.prototype._createHostElement = /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    function () {\n        /** @type {?} */\n        var host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    Overlay.prototype._createPortalOutlet = /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    function (pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    /** @nocollapse */\n    Overlay.ctorParameters = function () { return [\n        { type: ScrollStrategyOptions },\n        { type: OverlayContainer },\n        { type: ComponentFactoryResolver },\n        { type: OverlayPositionBuilder },\n        { type: OverlayKeyboardDispatcher },\n        { type: Injector },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Directionality },\n        { type: Location, decorators: [{ type: Optional }] }\n    ]; };\nOverlay.ngInjectableDef = ɵngcc0.defineInjectable({ token: Overlay, factory: function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.inject(ScrollStrategyOptions), ɵngcc0.inject(OverlayContainer), ɵngcc0.inject(ComponentFactoryResolver), ɵngcc0.inject(OverlayPositionBuilder), ɵngcc0.inject(OverlayKeyboardDispatcher), ɵngcc0.inject(Injector), ɵngcc0.inject(NgZone), ɵngcc0.inject(DOCUMENT), ɵngcc0.inject(Directionality), ɵngcc0.inject(Location, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(Overlay, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: Injector }, { type: NgZone }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: Directionality }, { type: Location, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { scrollStrategies: [], _overlayContainer: [], _componentFactoryResolver: [], _positionBuilder: [], _keyboardDispatcher: [], _injector: [], _ngZone: [], _document: [], _directionality: [], _location: [], create: [], position: [], _createPaneElement: [], _createHostElement: [], _createPortalOutlet: [], _appRef: [] });\n    return Overlay;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nvar defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar CdkOverlayOrigin = /** @class */ (function () {\n    function CdkOverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    /** @nocollapse */\n    CdkOverlayOrigin.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\nCdkOverlayOrigin.ngDirectiveDef = ɵngcc0.ɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], factory: function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵdirectiveInject(ElementRef)); }, exportAs: [\"cdkOverlayOrigin\"] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n                exportAs: 'cdkOverlayOrigin'\r\n            }]\r\n    }], function () { return [{ type: ElementRef }]; }, { elementRef: [] });\n    return CdkOverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nvar CdkConnectedOverlay = /** @class */ (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n        /** The offset in pixels for the overlay connection point on the x-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        function () { return this._offsetX; },\n        set: /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n        /** The offset in pixels for the overlay connection point on the y-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        function () { return this._offsetY; },\n        set: /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n        /** Whether or not the overlay should attach a backdrop. */\n        get: /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        function () { return this._hasBackdrop; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n        /** Whether or not the overlay should be locked when scrolling. */\n        get: /**\n         * Whether or not the overlay should be locked when scrolling.\n         * @return {?}\n         */\n        function () { return this._lockPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._lockPosition = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        get: /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         * @return {?}\n         */\n        function () { return this._flexibleDimensions; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._flexibleDimensions = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        get: /**\n         * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n         * @return {?}\n         */\n        function () { return this._growAfterOpen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        get: /**\n         * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n         * @return {?}\n         */\n        function () { return this._push; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._push = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n        /** The associated overlay reference. */\n        get: /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n        /** The element's layout direction. */\n        get: /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyOverlay();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createOverlay = /**\n     * Creates an overlay\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n            _this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                _this._detachOverlay();\n            }\n        });\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._buildConfig = /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    };\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._updatePositionStrategy = /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    function (positionStrategy) {\n        var _this = this;\n        /** @type {?} */\n        var positions = this.positions.map(function (currentPosition) { return ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || _this.offsetX,\n            offsetY: currentPosition.offsetY || _this.offsetY\n        }); });\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createPositionStrategy = /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n        return strategy;\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._attachOverlay = /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                _this.backdropClick.emit(event);\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._detachOverlay = /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._destroyOverlay = /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /** @nocollapse */\n    CdkConnectedOverlay.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: TemplateRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    CdkConnectedOverlay.propDecorators = {\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n        backdropClick: [{ type: Output }],\n        positionChange: [{ type: Output }],\n        attach: [{ type: Output }],\n        detach: [{ type: Output }],\n        overlayKeydown: [{ type: Output }]\n    };\nCdkConnectedOverlay.ngDirectiveDef = ɵngcc0.ɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], factory: function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵdirectiveInject(Overlay), ɵngcc0.ɵdirectiveInject(TemplateRef), ɵngcc0.ɵdirectiveInject(ViewContainerRef), ɵngcc0.ɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵdirectiveInject(Directionality, 8)); }, inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵNgOnChangesFeature()] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n                exportAs: 'cdkConnectedOverlay'\r\n            }]\r\n    }], function () { return [{ type: Overlay }, { type: TemplateRef }, { type: ViewContainerRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\r\n            }] }, { type: Directionality, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { _overlay: [], _dir: [], _hasBackdrop: [], _lockPosition: [], _growAfterOpen: [], _flexibleDimensions: [], _push: [], _backdropSubscription: [], viewportMargin: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayViewportMargin']\r\n        }], open: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayOpen']\r\n        }], backdropClick: [{\r\n            type: Output\r\n        }], positionChange: [{\r\n            type: Output\r\n        }], attach: [{\r\n            type: Output\r\n        }], detach: [{\r\n            type: Output\r\n        }], overlayKeydown: [{\r\n            type: Output\r\n        }], _templatePortal: [], _scrollStrategyFactory: [], scrollStrategy: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayScrollStrategy']\r\n        }], offsetX: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayOffsetX']\r\n        }], offsetX: [], offsetY: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayOffsetY']\r\n        }], offsetY: [], hasBackdrop: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayHasBackdrop']\r\n        }], hasBackdrop: [], lockPosition: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayLockPosition']\r\n        }], lockPosition: [], flexibleDimensions: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayFlexibleDimensions']\r\n        }], flexibleDimensions: [], growAfterOpen: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayGrowAfterOpen']\r\n        }], growAfterOpen: [], push: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayPush']\r\n        }], push: [], overlayRef: [], dir: [], ngOnDestroy: [], ngOnChanges: [], _createOverlay: [], positions: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayPositions']\r\n        }], _overlayRef: [], _buildConfig: [], _position: [], _updatePositionStrategy: [], _createPositionStrategy: [], _attachOverlay: [], _detachOverlay: [], _destroyOverlay: [], origin: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayOrigin']\r\n        }], width: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayWidth']\r\n        }], height: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayHeight']\r\n        }], minWidth: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayMinWidth']\r\n        }], minHeight: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayMinHeight']\r\n        }], backdropClass: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayBackdropClass']\r\n        }], panelClass: [{\r\n            type: Input,\r\n            args: ['cdkConnectedOverlayPanelClass']\r\n        }] });\n    return CdkConnectedOverlay;\n}());\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/** *\n * \\@docs-private\n  @type {?} */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar OverlayModule = /** @class */ (function () {\n    function OverlayModule() {\n    }\nOverlayModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: OverlayModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\r\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\r\n        CdkOverlayOrigin,\r\n        ScrollingModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [BidiModule, PortalModule, ScrollingModule],\r\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\r\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\r\n                providers: [\r\n                    Overlay,\r\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n                ]\r\n            }]\r\n    }], function () { return []; }, null);\nOverlayModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\r\n        Overlay,\r\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\r\n        ScrollingModule] });\n    return OverlayModule;\n}());\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer(_document) {\n        return _super.call(this, _document) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        var fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        var parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._getEventName = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    function () {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    };\n    /** @nocollapse */\n    FullscreenOverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\nFullscreenOverlayContainer.ngInjectableDef = ɵngcc0.defineInjectable({ token: FullscreenOverlayContainer, factory: function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.inject(DOCUMENT)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { ngOnDestroy: [], _createContainer: [], _adjustParentForFullscreenChange: [], _addFullscreenChangeListener: [], _fullScreenListener: [], _getEventName: [], _fullScreenEventName: [], getFullscreenElement: [] });\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n\n//# sourceMappingURL=overlay.es5.js.map","import * as ɵngcc0 from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\nLayoutModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: LayoutModule });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\r\n        type: NgModule\r\n    }], function () { return []; }, null);\nLayoutModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n    return LayoutModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\nvar mediaQueriesForWebkitCompatibility = new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\nvar mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nvar MediaMatcher = /** @class */ (function () {\n    function MediaMatcher(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    MediaMatcher.prototype.matchMedia = /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    };\n    /** @nocollapse */\n    MediaMatcher.ctorParameters = function () { return [\n        { type: Platform }\n    ]; };\n    /** @nocollapse */ MediaMatcher.ngInjectableDef = defineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(inject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ngInjectableDef = ɵngcc0.defineInjectable({ token: MediaMatcher, factory: function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.inject(Platform)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: Platform }]; }, { platform: [], _matchMedia: [], matchMedia: [] });\n    return MediaMatcher;\n}());\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css'); /** @type {?} */\n            ((document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            (/** @type {?} */ (mediaQueryStyleNode.sheet))\n                .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return /** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: function () { },\n        removeListener: function () { }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nvar BreakpointObserver = /** @class */ (function () {\n    function BreakpointObserver(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    BreakpointObserver.prototype.ngOnDestroy = /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    function () {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    };\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    BreakpointObserver.prototype.isMatched = /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; });\n    };\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    BreakpointObserver.prototype.observe = /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        var observables = queries.map(function (query) { return _this._registerQuery(query).observable; });\n        return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(function (breakpointStates) {\n            /** @type {?} */\n            var response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(function (state) {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    };\n    /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    BreakpointObserver.prototype._registerQuery = /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        var _this = this;\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return /** @type {?} */ ((this._queries.get(query)));\n        }\n        /** @type {?} */\n        var mql = this.mediaMatcher.matchMedia(query);\n        /** @type {?} */\n        var queryListener;\n        /** @type {?} */\n        var queryObservable = fromEventPattern(\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        function (listener) {\n            queryListener = function (e) { return _this.zone.run(function () { return listener(e); }); };\n            mql.addListener(queryListener);\n        }, function () { return mql.removeListener(queryListener); })\n            .pipe(takeUntil(this._destroySubject), startWith(mql), map(function (nextMql) { return ({ query: query, matches: nextMql.matches }); }));\n        /** @type {?} */\n        var output = { observable: queryObservable, mql: mql };\n        this._queries.set(query, output);\n        return output;\n    };\n    /** @nocollapse */\n    BreakpointObserver.ctorParameters = function () { return [\n        { type: MediaMatcher },\n        { type: NgZone }\n    ]; };\n    /** @nocollapse */ BreakpointObserver.ngInjectableDef = defineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(inject(MediaMatcher), inject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ngInjectableDef = ɵngcc0.defineInjectable({ token: BreakpointObserver, factory: function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.inject(MediaMatcher), ɵngcc0.inject(NgZone)); }, providedIn: 'root' });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: MediaMatcher }, { type: NgZone }]; }, { mediaMatcher: [], zone: [], _queries: [], _destroySubject: [], ngOnDestroy: [], isMatched: [], observe: [], _registerQuery: [] });\n    return BreakpointObserver;\n}());\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map(function (query) { return query.split(','); })\n        .reduce(function (a1, a2) { return a1.concat(a2); })\n        .map(function (query) { return query.trim(); });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nvar Breakpoints = {\n    XSmall: '(max-width: 599px)',\n    Small: '(min-width: 600px) and (max-width: 959px)',\n    Medium: '(min-width: 960px) and (max-width: 1279px)',\n    Large: '(min-width: 1280px) and (max-width: 1919px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599px) and (orientation: portrait), ' +\n        '(max-width: 959px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n\n//# sourceMappingURL=layout.es5.js.map","/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var e = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                e[_i] = arguments[_i];\n            }\n            return subscriber.next(e.length === 1 ? e[0] : e);\n        };\n        var retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return function () { return removeHandler(handler, retValue); };\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map\n","import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends, __assign } from 'tslib';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nconst _c0 = [1, \"mat-simple-snackbar\"];\nconst _c1 = [\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"];\nconst _c2 = [1, \"mat-simple-snackbar-action\"];\nconst _c3 = [\"mat-button\", \"\", 3, \"click\"];\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    const _r230 = ɵngcc0.ɵgetCurrentView();\r\n    ɵngcc0.ɵelementStart(0, \"div\", _c2);\r\n    ɵngcc0.ɵelementStart(1, \"button\", _c3);\r\n    ɵngcc0.ɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵrestoreView(_r230); const ctx_r229 = ɵngcc0.ɵnextContext(); return ctx_r229.action(); });\r\n    ɵngcc0.ɵtext(2);\r\n    ɵngcc0.ɵelementEnd();\r\n    ɵngcc0.ɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r228 = ɵngcc0.ɵnextContext();\r\n    ɵngcc0.ɵselect(2);\r\n    ɵngcc0.ɵtextBinding(2, ɵngcc0.ɵinterpolation1(\"\", ctx_r228.data.action, \"\"));\r\n} }\nconst _c4 = [\"role\", \"alert\", 1, \"mat-snack-bar-container\"];\nconst _c5 = [\"cdkPortalOutlet\", \"\"];\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nvar  /**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nMatSnackBarRef = /** @class */ (function () {\n    function MatSnackBarRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n    }\n    /** Dismisses the snack bar. */\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismiss = /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    function () {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    };\n    /** Marks the snackbar action clicked. */\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismissWithAction = /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    function () {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.closeWithAction = /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    function () {\n        this.dismissWithAction();\n    };\n    /** Dismisses the snack bar after some duration */\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._dismissAfter = /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    function (duration) {\n        var _this = this;\n        this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, duration);\n    };\n    /** Marks the snackbar as opened */\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._open = /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._finishDismiss = /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    function () {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    };\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterDismissed = /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    function () {\n        return this._afterDismissed.asObservable();\n    };\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterOpened = /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    function () {\n        return this.containerInstance._onEnter;\n    };\n    /** Gets an observable that is notified when the snack bar action is called. */\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.onAction = /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    function () {\n        return this._onAction.asObservable();\n    };\n    return MatSnackBarRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nvar  /**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nMatSnackBarConfig = /** @class */ (function () {\n    function MatSnackBarConfig() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n    return MatSnackBarConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /** @class */ (function () {\n    function SimpleSnackBar(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.action = /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    function () {\n        this.snackBarRef.dismissWithAction();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /** If the action button should be shown. */\n        get: /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        function () {\n            return !!this.data.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */\n    SimpleSnackBar.ctorParameters = function () { return [\n        { type: MatSnackBarRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n    ]; };\nSimpleSnackBar.ngComponentDef = ɵngcc0.ɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], factory: function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵdirectiveInject(MAT_SNACK_BAR_DATA)); }, hostBindings: function SimpleSnackBar_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵelementHostAttrs(_c0);\r\n    } }, consts: 3, vars: 2, template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵelementStart(0, \"span\");\r\n        ɵngcc0.ɵtext(1);\r\n        ɵngcc0.ɵelementEnd();\r\n        ɵngcc0.ɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", _c1);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵselect(1);\r\n        ɵngcc0.ɵtextBinding(1, ɵngcc0.ɵinterpolation1(\"\", ctx.data.message, \"\"));\r\n        ɵngcc0.ɵselect(2);\r\n        ɵngcc0.ɵelementProperty(2, \"ngIf\", ɵngcc0.ɵbind(ctx.hasAction));\r\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\r\n        type: Component,\r\n        args: [{ selector: 'simple-snack-bar',\r\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\r\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'class': 'mat-simple-snackbar'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SNACK_BAR_DATA]\r\n            }] }]; }, { snackBarRef: [], data: [], action: [], hasAction: [] });\n    return SimpleSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nvar matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MatSnackBarContainer = /** @class */ (function (_super) {\n    __extends(MatSnackBarContainer, _super);\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        _this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        _this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        _this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        _this._animationState = 'void';\n        return _this;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    };\n    /** Attach a template portal as content to this snack bar container. */\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachTemplatePortal = /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.onAnimationEnd = /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var fromState = event.fromState, toState = event.toState;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            /** @type {?} */\n            var onEnter_1 = this._onEnter;\n            this._ngZone.run(function () {\n                onEnter_1.next();\n                onEnter_1.complete();\n            });\n        }\n    };\n    /** Begin animation of snack bar entrance into view. */\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.enter = /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    function () {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    };\n    /** Begin animation of the snack bar exiting from view. */\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.exit = /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    function () {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    };\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.ngOnDestroy = /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    function () {\n        this._destroyed = true;\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._completeExit = /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        });\n    };\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._applySnackBarClasses = /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n        var panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    };\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._assertNotAttached = /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    function () {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    };\n    /** @nocollapse */\n    MatSnackBarContainer.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatSnackBarConfig }\n    ]; };\n    MatSnackBarContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n    };\nMatSnackBarContainer.ngComponentDef = ɵngcc0.ɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], factory: function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵdirectiveInject(NgZone), ɵngcc0.ɵdirectiveInject(ElementRef), ɵngcc0.ɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵdirectiveInject(MatSnackBarConfig)); }, viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵviewQuery(CdkPortalOutlet, true, null);\r\n    } if (rf & 2) {\r\n        var _t;\r\n        (ɵngcc0.ɵqueryRefresh(_t = ɵngcc0.ɵloadViewQuery()) && (ctx._portalOutlet = _t.first));\r\n    } }, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵallocHostVars(1);\r\n        ɵngcc0.ɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\r\n        ɵngcc0.ɵelementHostAttrs(_c4);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵcomponentHostSyntheticProperty(elIndex, \"@state\", ɵngcc0.ɵbind(ctx._animationState), null, true);\r\n    } }, features: [ɵngcc0.ɵInheritDefinitionFeature], consts: 1, vars: 0, template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", _c5);\r\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] }, changeDetection: 0 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\r\n        type: Component,\r\n        args: [{ selector: 'snack-bar-container',\r\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\r\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"],\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                animations: [matSnackBarAnimations.snackBarState],\r\n                host: {\r\n                    'role': 'alert',\r\n                    'class': 'mat-snack-bar-container',\r\n                    '[@state]': '_animationState',\r\n                    '(@state.done)': 'onAnimationEnd($event)'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: NgZone }, { type: ElementRef }, { type: ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { attachComponentPortal: [], attachTemplatePortal: [], onAnimationEnd: [], enter: [], _animationState: [], exit: [], ngOnDestroy: [], _destroyed: [], _completeExit: [], _applySnackBarClasses: [], _assertNotAttached: [], _portalOutlet: [{\r\n            type: ViewChild,\r\n            args: [CdkPortalOutlet]\r\n        }] });\n    return MatSnackBarContainer;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatSnackBarModule = /** @class */ (function () {\n    function MatSnackBarModule() {\n    }\nMatSnackBarModule.ngModuleDef = ɵngcc0.ɵdefineNgModule({ type: MatSnackBarModule });\n/*@__PURE__*/ ɵngcc0.ɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\r\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\r\n        PortalModule,\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\r\n        MatCommonModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    OverlayModule,\r\n                    PortalModule,\r\n                    CommonModule,\r\n                    MatButtonModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [MatSnackBarContainer, MatCommonModule],\r\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\r\n            }]\r\n    }], function () { return []; }, null);\nMatSnackBarModule.ngInjectorDef = ɵngcc0.defineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\r\n            OverlayModule,\r\n            PortalModule,\r\n            CommonModule,\r\n            MatButtonModule,\r\n            MatCommonModule,\r\n        ],\r\n        MatCommonModule] });\n    return MatSnackBarModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MatSnackBar = /** @class */ (function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n        /** Reference to the currently opened snackbar at *any* level. */\n        get: /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromComponent = /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    };\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromTemplate = /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (template, config) {\n        return this._attach(template, config);\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.open = /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        /** @type {?} */\n        var _config = __assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message: message, action: action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.dismiss = /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSnackBar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._attachSnackBarContainer = /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (overlayRef, config) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        var containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        var containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    MatSnackBar.prototype._attach = /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    function (content, userConfig) {\n        /** @type {?} */\n        var config = __assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        var overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        var container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        var snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            var portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef: snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            var injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            var portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            var contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(function (state$$1) {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._animateSnackBar = /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (snackBarRef, config) {\n        var _this = this;\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))); });\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createOverlay = /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        var positionStrategy = this._overlay.position().global();\n        /** @type {?} */\n        var isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        var isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        var isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createInjector = /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    function (config, snackBarRef) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    };\n    /** @nocollapse */\n    MatSnackBar.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: LiveAnnouncer },\n        { type: Injector },\n        { type: BreakpointObserver },\n        { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n    ]; };\n    /** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ngInjectableDef = ɵngcc0.defineInjectable({ token: MatSnackBar, factory: function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.inject(Overlay), ɵngcc0.inject(LiveAnnouncer), ɵngcc0.inject(Injector), ɵngcc0.inject(BreakpointObserver), ɵngcc0.inject(MatSnackBar, 12), ɵngcc0.inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, providedIn: MatSnackBarModule });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: MatSnackBarModule }]\r\n    }], function () { return [{ type: Overlay }, { type: LiveAnnouncer }, { type: Injector }, { type: BreakpointObserver }, { type: MatSnackBar, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: MatSnackBarConfig, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\r\n            }] }]; }, { _overlay: [], _live: [], _injector: [], _breakpointObserver: [], _parentSnackBar: [], _defaultConfig: [], _snackBarRefAtThisLevel: [], _openedSnackBarRef: [], _openedSnackBarRef: [], openFromComponent: [], openFromTemplate: [], open: [], dismiss: [], ngOnDestroy: [], _attachSnackBarContainer: [], _attach: [], _animateSnackBar: [], _createOverlay: [], _createInjector: [] });\n    return MatSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.es5.js.map","import { Injectable } from '@angular/core';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { from } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\nimport { Logger } from 'app/shared/logger.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/shared/logger.service\";\n/**\n * Wrapper around the prettify.js library\n */\nvar PrettyPrinter = /** @class */ (function () {\n    function PrettyPrinter(logger) {\n        this.logger = logger;\n        this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n    }\n    PrettyPrinter.prototype.getPrettyPrintOne = function () {\n        var _this = this;\n        var ppo = window['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n            // prettify.js is not in window global; load it with webpack loader\n            System.import('assets/js/prettify.js')\n                .then(function () { return window['prettyPrintOne']; }, function (err) {\n                var msg = \"Cannot get prettify.js from server: \" + err.message;\n                _this.logger.error(new Error(msg));\n                // return a pretty print fn that always fails.\n                return function () { throw new Error(msg); };\n            });\n    };\n    /**\n     * Format code snippet as HTML\n     * @param {string} code - the code snippet to format; should already be HTML encoded\n     * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n     * @param {string|number} [linenums] - Whether to display line numbers:\n     *  - false: don't display\n     *  - true: do display\n     *  - number: do display but start at the given number\n     * @returns Observable<string> - Observable of formatted code\n     */\n    PrettyPrinter.prototype.formatCode = function (code, language, linenums) {\n        return this.prettyPrintOne.pipe(map(function (ppo) {\n            try {\n                return ppo(code, language, linenums);\n            }\n            catch (err) {\n                var msg = \"Could not format code that begins '\" + code.substr(0, 50) + \"...'.\";\n                console.error(msg, err);\n                throw new Error(msg);\n            }\n        }), first());\n    };\n    PrettyPrinter.ngInjectableDef = i0.defineInjectable({ token: PrettyPrinter, factory: function PrettyPrinter_Factory(t) { return new (t || PrettyPrinter)(i0.inject(i1.Logger)); }, providedIn: null });\n    return PrettyPrinter;\n}());\nexport { PrettyPrinter };\n/*@__PURE__*/ i0.ɵsetClassMetadata(PrettyPrinter, [{\n        type: Injectable\n    }], function () { return [{ type: i1.Logger }]; }, null);\n"],"sourceRoot":""}